{
  "hash": "52d12aa3082d807b6923934e2b1ef307",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: json-ld\nsubtitle: metadata format for linked data\ncategories: [information science]\n---\n\nI've been excited about JSON-LD, when it came out as it offered a much cleaner way to do SEO. However It dawned on me later that it is also a geat format to worked with linked data.\n\n1. it uses a special `@id` property to assign a unique URL to each resource in a JSON-LD document, giving every data item its own URL.\n1. it links data items together through the values of properties. For example, if you're describing a person, their \"colleague\" property can have another person's URL as its value, creating a web of interconnected data items.\n1. JSON-LD uses the `@context` property to map the terms used in the document to URLs, conforming data items to common global, organisational and departmental schemas.\n\nOne of the best things about JSON-LD is how easy it is to work with. Developers already familiar with JSON syntax will love using it. And get this: JSON-LD is so popular that it's now embedded in almost half of all web pages. It's baffling why all organisations aren't using JSON-LD more widely to share data between their applications!\n\nSo, whether you're publishing Data Products, creating RESTful applications or improving your website's SEO, JSON-LD is the way to go! Give it a try and let me know your thoughts in the comments below.\n\n::: {#761ebad0 .cell execution_count=1}\n``` {.python .cell-code}\nperson = {\n  \"@context\": \"https://json-ld.org/contexts/person.jsonld\", # <1>\n  \"@type\": \"https://schema.org/Person\",                     # <2>\n  \"@id\": \"http://dbpedia.org/resource/John_Lennon\",         # <3>\n  \"https://schema.org/name\": \"John Lennon\",\n  \"born\": \"1940-10-09\",\n  \"spouse\": \"http://dbpedia.org/resource/Cynthia_Lennon\"    # <4>\n}\n```\n:::\n\n\n1. the `@context` refrences your model\n2. the `@type` is the type in your model\n3. the `@id` is the yrl for this item\n4. the url is how to reference external data say dbpedia.\n\n# python\n\n## Compacting \n\n::: {#bfc7fc3c .cell execution_count=2}\n``` {.python .cell-code}\nfrom pyld import jsonld\nimport json\ndoc = {\n    \"http://schema.org/name\": \"Manu Sporny\",\n    \"http://schema.org/url\": {\"@id\": \"http://manu.sporny.org/\"},\n    \"http://schema.org/image\": {\"@id\": \"http://manu.sporny.org/images/manu.png\"},\n    \"@type\": \"https://schema.org/Person\",\n}\ncontext = {\n    \"name\": \"http://schema.org/name\",\n    \"homepage\": {\"@id\": \"http://schema.org/url\", \"@type\": \"@id\"},\n    \"image\": {\"@id\": \"http://schema.org/image\", \"@type\": \"@id\"}\n}\n\n# compact a document according to a particular context\n\n# see: https://json-ld.org/spec/latest/json-ld/#compacted-document-form\ncompacted = jsonld.compact(doc, context)\nprint(json.dumps(compacted, indent=2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"@context\": {\n    \"name\": \"http://schema.org/name\",\n    \"homepage\": {\n      \"@id\": \"http://schema.org/url\",\n      \"@type\": \"@id\"\n    },\n    \"image\": {\n      \"@id\": \"http://schema.org/image\",\n      \"@type\": \"@id\"\n    }\n  },\n  \"@type\": \"https://schema.org/Person\",\n  \"image\": \"http://manu.sporny.org/images/manu.png\",\n  \"name\": \"Manu Sporny\",\n  \"homepage\": \"http://manu.sporny.org/\"\n}\n```\n:::\n:::\n\n\n::: {#f5cde8ca .cell execution_count=3}\n``` {.python .cell-code}\n# compact using URLs\n#jsonld.compact('http://example.org/doc', 'http://example.org/context')\n```\n:::\n\n\n## Expanding\n\n::: {#d796f2db .cell execution_count=4}\n``` {.python .cell-code}\n# expand a document, removing its context\n\n# see: https://json-ld.org/spec/latest/json-ld/#expanded-document-form\nexpanded = jsonld.expand(compacted)\nprint(json.dumps(expanded, indent=2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"@type\": [\n      \"https://schema.org/Person\"\n    ],\n    \"http://schema.org/url\": [\n      {\n        \"@id\": \"http://manu.sporny.org/\"\n      }\n    ],\n    \"http://schema.org/image\": [\n      {\n        \"@id\": \"http://manu.sporny.org/images/manu.png\"\n      }\n    ],\n    \"http://schema.org/name\": [\n      {\n        \"@value\": \"Manu Sporny\"\n      }\n    ]\n  }\n]\n```\n:::\n:::\n\n\n::: {#717c3dc8 .cell execution_count=5}\n``` {.python .cell-code}\n# expand using URLs\n\n# jsonld.expand('http://example.org/doc')\n```\n:::\n\n\n## Flattening\n\n::: {#3603d1a0 .cell execution_count=6}\n``` {.python .cell-code}\n# flatten a document\n\n# see: https://json-ld.org/spec/latest/json-ld/#flattened-document-form\nflattened = jsonld.flatten(doc)\n\n# all deep-level trees flattened to the top-level\nprint(json.dumps(flattened, indent=2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"@id\": \"_:b0\",\n    \"@type\": [\n      \"https://schema.org/Person\"\n    ],\n    \"http://schema.org/image\": [\n      {\n        \"@id\": \"http://manu.sporny.org/images/manu.png\"\n      }\n    ],\n    \"http://schema.org/name\": [\n      {\n        \"@value\": \"Manu Sporny\"\n      }\n    ],\n    \"http://schema.org/url\": [\n      {\n        \"@id\": \"http://manu.sporny.org/\"\n      }\n    ]\n  }\n]\n```\n:::\n:::\n\n\n## Framing\n\n::: {#a12025f1 .cell execution_count=7}\n``` {.python .cell-code}\ndocf = {\n  \"@context\": {\n    \"@vocab\": \"http://example.org/\",\n    \"contains\": {\n      \"@type\": \"@id\"\n    }\n  },\n  \"@graph\": [\n    {\n      \"@id\": \"http://example.org/library\",\n      \"@type\": \"Library\",\n      \"location\": \"Athens\",\n      \"contains\": \"http://example.org/library/the-republic\"\n    },\n    {\n      \"@id\": \"http://example.org/library/the-republic\",\n      \"@type\": \"Book\",\n      \"creator\": \"Plato\",\n      \"title\": \"The Republic\",\n      \"contains\": \"http://example.org/library/the-republic#introduction\"\n    },\n    {\n      \"@id\": \"http://example.org/library/the-republic#introduction\",\n      \"@type\": \"Chapter\",\n      \"description\": \"An introductory chapter on The Republic.\",\n      \"title\": \"The Introduction\"\n    }\n  ]\n}\n\nframe = {\n  \"@context\": {\n    \"@vocab\": \"http://example.org/\"\n  },\n  \"location\": \"Athens\",\n  \"contains\": {\n    \"title\": \"The Republic\",\n    \"contains\": {\n      \"title\": \"The Introduction\"\n    }\n  }\n}\n\n# frame a document\n\n# see: https://json-ld.org/spec/latest/json-ld-framing/#introduction\nframed = jsonld.frame(docf, frame)\nprint(json.dumps(framed, indent=2))\n\n# document transformed into a particular tree structure per the given frame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"@context\": {\n    \"@vocab\": \"http://example.org/\"\n  },\n  \"@graph\": [\n    {\n      \"@id\": \"http://example.org/library\",\n      \"@type\": \"Library\",\n      \"contains\": {\n        \"@id\": \"http://example.org/library/the-republic\",\n        \"@type\": \"Book\",\n        \"contains\": {\n          \"@id\": \"http://example.org/library/the-republic#introduction\",\n          \"@type\": \"Chapter\",\n          \"description\": \"An introductory chapter on The Republic.\",\n          \"title\": \"The Introduction\"\n        },\n        \"creator\": \"Plato\",\n        \"title\": \"The Republic\"\n      },\n      \"location\": \"Athens\"\n    },\n    {\n      \"@id\": \"http://example.org/library/the-republic\",\n      \"@type\": \"Book\",\n      \"contains\": null,\n      \"creator\": \"Plato\",\n      \"location\": null,\n      \"title\": \"The Republic\"\n    }\n  ]\n}\n```\n:::\n:::\n\n\n## Normalization\n\n::: {#152255cc .cell execution_count=8}\n``` {.python .cell-code}\n# normalize a document using the RDF Dataset Normalization Algorithm\n\n# (URDNA2015), see: https://json-ld.github.io/normalization/spec/\nnormalized = jsonld.normalize(\n    doc, {'algorithm': 'URDNA2015', 'format': 'application/n-quads'})\n\n# normalized is a string that is a canonical representation of the document\n\n# that can be used for hashing, comparison, etc.\nprint(json.dumps(normalized, indent=2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"_:c14n0 <http://schema.org/image> <http://manu.sporny.org/images/manu.png> .\\n_:c14n0 <http://schema.org/name> \\\"Manu Sporny\\\" .\\n_:c14n0 <http://schema.org/url> <http://manu.sporny.org/> .\\n_:c14n0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <https://schema.org/Person> .\\n\"\n```\n:::\n:::\n\n\n# Resources \n\n1. [json-ld](https://json-ld.org/)\n1. [schema.org](https://schema.org/)\n1. [ProductOntology](http://www.productontology.org/) \n2. [GoodRelations](http://www.heppnetz.de/projects/goodrelations/)\n3. [Wikidata](https://www.wikidata.org/wiki/Wikidata:Main_Page)\n1. https://schemantra.com/\n1. https://github.com/science-periodicals/jsonld-vis\n1. https://github.com/shamilnabiyev/schema-visualizer\n1. https://cloud.google.com/natural-language/\n\n",
    "supporting": [
      "json-ld_files"
    ],
    "filters": [],
    "includes": {}
  }
}