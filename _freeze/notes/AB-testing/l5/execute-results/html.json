{
  "hash": "c3ad4c720c22110a2761c57ac1524c79",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Lesson 5 - Analyzing Results\ndescription: Notes from Udacity A/B Testing course\ndate: '2023-01-01'\nimage: AB-Test-Sparrows.jpg\ncategories:\n  - a/b-testing\n  - notes\ntitle-block-banner: banner_blue_1.jpg\neditor:\n  markdown:\n    wrap: sentence\ntbl-cap-location: bottom\n---\n\n![udacity](/images/logos/udacity.png){.column-margin}\n\nNotes from Udacity A/B Testing course.\n\n# Lesson 5 - Analyzing Results\n\n## Intro\n\n::: {#fig-intro .column-margin}\n\n{{< video https://youtu.be/AyeKXinJ3W8 class=\"column-margin\" >}}\n\n\n\nIntroduction\n:::\n\nIn @fig-intro Caroline assumes you've already chosen metrics, designed, and sized your experiment.\nWe now focus on *analyzing the results and drawing conclusions*.\n\n-   The process involves:\n    -   **Sanity checks**: Verifying data integrity.\n    -   **Evaluation**: Handling single or multiple metrics to assess the change's impact.\n    -   **Analysis gotchas**: Avoiding common pitfalls in interpreting results.\n\nRemember A/B testing is *iterative*, meaning insights from analysis may influence future steps in designing your test.\n\n## Sanity Check\n\n::: {#fig-sanity-checks .column-margin}\n\n{{< video https://youtu.be/OVnlC_T3EpI class=\"column-margin\" >}}\n\n\n\nSanity Check\n:::\n\nIn @fig-sanity-checks Diane warns Caroline against jumping straight into analyzing click-through rates from her experiment.\nDiane quickly enumerates many ways experiments may go awary.\nConducting **sanity checks** is crucial prior to analysis.\nThese checks ensure the experiment has ran correctly and the data is reliable.\n\nTwo main types of sanity checks are defined as:\n\nPopulation sizing metrics\n\n:   Verify that the experiment and control groups are comparable in size based on the diversion unit.\n\nInvariant metrics\n\n:   Metrics should not change due to the experiment itself.\n    Analyzing their change helps identify potential issues.\n\nOnly after passing these checks should you dive deeper into more complex analysis to interpret the experiment's success or failure and make recommendations.\n\n## Choosing Invariants\n\n::: {#fig-choosing-invariants .column-margin}\n\n{{< video https://youtu.be/qCnbDgy2yHk class=\"column-margin\" >}}\n\n\n\nChoosing Invariants\n:::\n\nIn @fig-choosing-invariants we get started with sanity checking our experiment results by picking the right invariant metrics.\nAs Diane said, there are two types:\n\n1.  Population sizing metrics: These make sure the experiment and control groups are comparable in size, based on the diversion unit.\n2.  Other invariant metrics: Any metrics that shouldn't change due to the experiment itself.\n\nNow, I'll describe two experiments.\nFor each one, think about what metrics would stay the same, meaning they wouldn't differ between the control and experiment groups.\n\n::: {#exm-changing-course-order}\nExperiment 1: Changing course order\n\nUdacity is testing a new way of ordering courses in the course list to see if it affects enrollment.\nEach user ID is considered a single *unit of diversion*, since users might browse before enrolling.\n:::\n\n::: {#exm-changing-video-infrastructure}\nExperiment 2: Changing video infrastructure\n\nUdacity is implementing a new system to deliver videos faster.\nThis time, each event (like a video play) is considered a unit of diversion.\n:::\n\nNow, we should decide which of these metrics would be good invariant for each experiment:\n\n-   Number of signed-in users\n-   Number of cookies\n-   Number of events\n-   Click-through rate (CTR) on the \"Start Now\" button (This button takes users from the homepage to the course list.)\n-   Average time to complete a course\n\nRemember, an invariant metric should not change because of the experiment itself.\nChoose the ones that fit that criteria for each experiment\n\n| Invariant Metric           | course order | video infrastructure |\n|----------------------------|--------------|----------------------|\n| unit of diversion          | UID          | event                |\n| \\# signed-in users         | :x:          | :x:                  |\n| \\# cookies                 | :x:          | :x:                  |\n| \\# events                  | :x:          | :x:                  |\n| CTR for \"Start Now\" button | :x:          | :x:                  |\n| Avg. time to complete      | :o:          | :x:                  |\n\n: Invariant Metrics for experiment 1 & 2 {#tbl-ex1 .striped }\n\nThese are questions used the instructor to test the invariance for each metric.\n\n|     | Question                                                          |            | Decision         |\n|-------------|---------------------------------|-------------|-------------|\n| 1\\. | is the metric directly randomized?                                | $\\implies$ | invariant        |\n| 2\\. | is the metric expected to be evenly split between the two groups? | $\\implies$ | invariant        |\n| 3\\. | is the metric measured before the test begins ?                   | $\\implies$ | invariant        |\n| 4\\. | is the metric altered by the experiment ?                         | $\\implies$ | not an invariant |\n| 5\\. | is the metric impossible to tracked?                              | $\\implies$ | not an invariant |\n| 6\\. | can the metric be assigned to different groups multiple times ?   | $\\implies$ | not an invariant |\n\n: Invariance diagnostics {#tbl-metric-diag .striped }\n\n::: {#exm-changing-sign-in-location}\nExperiment 3: Change Sign in to be on all pages\n\nUdacity changes the \"sign in\" button to be on all pages.\n\nThe unit diversion is a cookie\n:::\n\n| Invariant Metric           | course order | note                                   |\n|----------------------|------------------|--------------------------------|\n| unit of diversion          | cookie       |                                        |\n| \\# events                  | :x:          | this, \\# cookeis \\# users are all good |\n| CTR for \"Start Now\" button | :o:          | this will change                       |\n| Probability of enrolling   | :o:          | should also change                     |\n| Sign-in rate               | :o:          | this is the metric we are testing      |\n| Video load time            | :x:          | should not change                      |\n\n: Invariant Metrics for experiment 3 {#tbl-ex3 .striped}\n\n## Checking Invariants\n\n::: {#fig-checking-invariants .column-margin}\n\n{{< video https://youtu.be/7CVlKQ3UjUI class=\"column-margin\" >}}\n\n\n\nChecking Invariants\n:::\n\nIn @fig-checking-invariants we get down to business and see how to check an invariant metric and ensure it's similar between the control and experiment groups.\n\nSay you ran a two-week experiment with cookies as your diversion unit.\nThe first sanity check: comparing the number of cookies in each group.\n\nHere's the data:\n\n::: {#tbl-results layout-ncol=\"2\"}\n| Day | control | experiment |\n|-----|---------|------------|\n| Mon | 5077    | 4877       |\n| Tue | 5495    | 4729       |\n| Wed | 5294    | 5063       |\n| Thu | 5446    | 5035       |\n| Fri | 5126    | 5010       |\n| Sat | 3382    | 3193       |\n| Sun | 2891    | 3226       |\n\n: Week 1 cookies for control & experiment {#tbl-week1 .striped tbl-cap-location=\"bottom\"}\n\n| Day | control | experiment |\n|-----|---------|------------|\n| Mon | 5029    | 5092       |\n| Tue | 5166    | 5048       |\n| Wed | 4902    | 4985       |\n| Thu | 4923    | 4805       |\n| Fri | 4816    | 4741       |\n| Sat | 3411    | 2939       |\n| Sun | 3496    | 3075       |\n\n: Week 2 cookies for control & experiment {#tbl-week2 .striped tbl-cap-location=\"bottom\"}\n\nExperiment 3 results\n:::\n\nNow, let's look at the total number of cookies in each group.\nIf that overall split seems balanced, that's great.\nOtherwise, we'll need to dig deeper into the day-by-day breakdown.\n\nThe totals show:\n\n-   Control group: 64,454 cookies\n-   Experiment group: 61,818 cookies\n\nWhile the control group has more cookies, the question is: is this difference unexpected?\n\nThink about it this way: each cookie was randomly assigned to either group with a 50% chance.\nSo, the real question is: is it surprising that out of the total cookies, 64,454 ended up in the control group?\n\nLet's say that our $H_0$ null-hypothesis is that there is no difference between the groups.\nOr that the the probability for the data generating process is 0.5\n\n::: column-margin\n\n{{< video https://youtu.be/05jVh4kUbHU class=\"column-margin\" >}}\n\n\n\nChecking Invariants II\n:::\n\n1.  We can think about this IID draws from a Bernoulli distribution which we assume that p=0.5\n2.  Sums of Bernoulli trials follow the Binomial distribution\n3.  Since N = 126272 \\>\\> 20 We can approximated the Binomial with a Gaussian distribution.\n4.  We can therefore test if the sd of the control and experiment are within CI for 95%\n5.  To do so we should first apply a Z transform and check against the standard normal.\n\nfor CI of .95 Z = 1.96 $$\nCI = p \\pm z \\times SE = p \\pm z \\times \\sqrt{\\frac{p(1-p)}{N}} = 0.5 \\pm 1.96 \\times p \\times 126272 ^{-2} \\qquad \n$$ {#eq-binomial-ci}\n\n::: {#cell-CI-for-Binomial .cell execution_count=1}\n``` {#CI-for-Binomial .python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define parameters\np = 0.5\nN = 126272\nz = 1.96  # 95% confidence level\n\n# Calculate confidence interval bounds\nlower_bound = p - z * (p * (1 - p) / N)**0.5\nupper_bound = p + z * (p * (1 - p) / N)**0.5\n\n# lets create a df\n\nalpha = 0.05\nmethod = 'normal'\n\n# for experiment\nname='experiment'\ncount = 61818\nproportion = count/N\nexeriment = {'name':name, 'count':count, 'lb':lower_bound,'ub':upper_bound,\"proportion\":proportion}\n\n# for control\nname='control'\ncount = 64454\nproportion = count/N\ncontrol= {'name':name, 'count':count, 'lb':lower_bound,'ub':upper_bound,\"proportion\":proportion}\n\n\ndf = pd.DataFrame.from_records(data=(exeriment,control),index=['1', '2'])\ndf\n```\n\n::: {#ci-for-binomial .cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>count</th>\n      <th>lb</th>\n      <th>ub</th>\n      <th>proportion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>experiment</td>\n      <td>61818</td>\n      <td>0.497242</td>\n      <td>0.502758</td>\n      <td>0.489562</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>control</td>\n      <td>64454</td>\n      <td>0.497242</td>\n      <td>0.502758</td>\n      <td>0.510438</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-fig-ci .cell execution_count=2}\n``` {.python .cell-code}\nimport altair as alt\nimport matplotlib.pyplot as plt\n\npoints = alt.Chart(df).mark_point(filled=True, color='black').encode(\n  x=alt.X('name:N'),\n  y=alt.Y('proportion:Q'),\n)\n\nerror_bars = alt.Chart(df).mark_errorbar().encode(\n  x = alt.X('name:N'),\n  y = alt.Y('lb:Q').scale(zero=False).title(\"lb\"),\n  y2= alt.Y2('ub:Q').title(\"ub\"),\n)\n\npoints + error_bars\n```\n\n::: {#fig-ci .cell-output .cell-output-display execution_count=2}\n```{=html}\n\n<style>\n  #altair-viz-7d49e261afdf49ec9ecbc0b426888c16.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-7d49e261afdf49ec9ecbc0b426888c16.vega-embed details,\n  #altair-viz-7d49e261afdf49ec9ecbc0b426888c16.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-7d49e261afdf49ec9ecbc0b426888c16\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7d49e261afdf49ec9ecbc0b426888c16\") {\n      outputDiv = document.getElementById(\"altair-viz-7d49e261afdf49ec9ecbc0b426888c16\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.16.3?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.16.3\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"point\", \"color\": \"black\", \"filled\": true}, \"encoding\": {\"x\": {\"field\": \"name\", \"type\": \"nominal\"}, \"y\": {\"field\": \"proportion\", \"type\": \"quantitative\"}}}, {\"mark\": {\"type\": \"errorbar\"}, \"encoding\": {\"x\": {\"field\": \"name\", \"type\": \"nominal\"}, \"y\": {\"field\": \"lb\", \"scale\": {\"zero\": false}, \"title\": \"lb\", \"type\": \"quantitative\"}, \"y2\": {\"field\": \"ub\", \"title\": \"ub\"}}}], \"data\": {\"name\": \"data-2439f3b621d0ce92b3dce3019393daac\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.16.3.json\", \"datasets\": {\"data-2439f3b621d0ce92b3dce3019393daac\": [{\"name\": \"experiment\", \"count\": 61818, \"lb\": 0.4972421379031649, \"ub\": 0.502757862096835, \"proportion\": 0.48956221490116575}, {\"name\": \"control\", \"count\": 64454, \"lb\": 0.4972421379031649, \"ub\": 0.502757862096835, \"proportion\": 0.5104377850988343}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n\nBinomial Confidence Intervals\n:::\n:::\n\n\nso this is not an error in the calculation - we can plainly see that the two groups are significantly outside the CI.\nThis means that we are not getting the same behavior for each group.\nSanity test fails 🤡\n\nFurther analysis shows that the control is getting more cookies daily.\n\nNote we can perform this analysis more directly under the Bayesian paradigm using a Beta prior and a Binomial Likelihood.\n\nHere is the instructors analysis:\n\n-   Given: Each cookie is randomly assigned to the control or experiment group with probability $p = 0.5$. Use this to compute SD of binomial with probability 0.5 of success. Calculate the confidence interval. The observed fraction of control group is greater than the upper bound of CI =\\> there is something wrong with the setup.\n-   Do day-by-day analysis. If control group samples are more on a lot of dates, not just a specific day, we can\n    1.  Talk to the engineers about experiment infrastructure, unit of diversion, etc.\n    2.  Try slicing to see if one particular slice is weird, e.g. country, language, platform.\n    3.  Check the age of cookies — does one group have more new cookies\n    4.  Retrospective analysis: recreate the experiment diversion from the data capture to understand the problem.\n    5.  Pre- and post-period: check invariant. If similar changes exist on the pre-period, it could be problems with the experiment infrastructure (e.g. cookie reset), setup (e.g. not filter correctly between groups), etc. If the changes are only observed in the post-period, the issue may be associated with the experiment itself such as data capture (e.g. capture correctly in trt but not in control). Learning effect may take time. If the issues are observed at the beginning of the experiment, might not be learning effect.\n\n| Day | control | experiment |\n|-----|---------|------------|\n| Mon | 2451    | 2404       |\n| Tue | 2475    | 2507       |\n| Wed | 2394    | 2376       |\n| Thu | 2482    | 2444       |\n| Fri | 2374    | 2504       |\n| Sat | 1704    | 1612       |\n| Sun | 1468    | 1465       |\n\n: Another experiment {#tbl-week2 .striped tbl-cap-location=\"bottom\"}\n\n::: column-margin\n\n{{< video https://youtu.be/Mftti4FSjn4 class=\"column-margin\" >}}\n\n\n\nChecking Invariants II Solved\n:::\n\n## Sanity Checking: Wrap-up\n\n::: {#fig-sanity-checking-wrapup .column-margin}\n\n{{< video https://youtu.be/rCAYdZk5O2E class=\"column-margin\" >}}\n\n\n\nSanity Checking: Wrapup\n:::\n\nIn @fig-sanity-checking-wrapup Diane point out that failing a sanity check in your experiment is like landing on \"do not pass GO\" in Monopoly.\nIt means you shouldn't proceed with analyzing the results until you understand why the check failed.\n\nHere's what to do if your sanity check fails:\n\n1.  Debug the experiment setup:\n    -   Collaborate with engineers to check:\n        -   Technical issues: Is there something wrong with the experiment infrastructure or the way it's set up?\n        -   Diversion issues: Did the experiment assign users to groups correctly?\n2.  Retrospective analysis:\n    -   Try recreating experiment diversion from the data to understand if the issue is inherent to the experiment itself.\n3.  Utilize pre and post periods:\n    -   Compare the invariant metrics in the pre-period (before the experiment) to those in the experiment and post-period (after the experiment).\n        -   If the change only occurs in the experiment period, it points to an issue with the experiment itself (data capture, etc.).\n4.  If the change occurs in both the pre-period and experiment, it suggests an infrastructure issue.\n\nRemember:\n\n-   Failing a sanity check doesn't necessarily mean there's a major problem, but it does require investigation before drawing conclusions.\n\n-   Even with passing checks, slight differences in metrics are expected due to random chance.\n\n-   Learning effects (users adapting over time) can also impact results.\n    Look for a gradual increase in change over time, not an immediate significant change.\n\nIf all checks pass, then you can move on to analyzing the experiment results.\n\nNote: when I run A/B test for clients at an advertising agency.\nI used tested framework like Google Analytics, VWO, Crazy Egg, and Firebase to run them and none of this was a major issue.\nHowever, many people have had test that run awry, so sanity tests are not such a bad idea.\n\n## A Single Metric\n\n::: {#fig-single-metric-intro .column-margin}\n\n{{< video https://youtu.be/StP9L9f70EU class=\"column-margin\" >}}\n\n\n\nSingle Metric: Introduction\n:::\n\nIn @fig-single-metric-intro Carey, explained how to analyze the results of an A/B experiment with a single evaluation metric.\n\n**The goal:** Decide if the experiment had a statistically significant, positive impact on the metric, and estimate the size and direction of the change.\nThis information helps you decide whether to recommend launching the experiment broadly.\n\n**Steps involved:**\n\n1.  **Characterize the metric:** Understand its variability (covered in Lesson 3).\n\n2.  **Estimate experiment parameters:** Use the variability to determine how long to run the experiment and how many users to include (covered in Lesson 4).\n\n3.  **Analyze for statistical significance:**\n\n    -   Combine the information from steps 1 and 2 to estimate the variability for analyzing the experiment.\n\n    -   Use statistical tests (like hypothesis tests) to assess if the observed change is statistically significant, meaning it's unlikely due to random chance.\n\n**What to do if the results are not statistically significant:**\n\n-   **Further analysis:**\n\n    -   Look for patterns by segmenting the data (e.g., by platform, day of the week).\n        This might reveal bugs or suggest new hypotheses.\n\n    -   Compare your results with other methods (e.g., non-parametric tests) to confirm or explore inconsistencies.\n\n-   Consider the possibility that the observed change, although not statistically significant, might still be valuable for the business.\n\n### What *not* to do if your results aren't significant\n\nCarrie gave some ideas of what you can do if your results aren't significant, but you were expecting they would be.\nOne tempting idea is to run the experiment for a few more days and see if the extra data helps get you a significant result.\nHowever, this can lead to a much higher false positive rate than you expecting!\nSee [How Not To Run an A/B Test by Evan Miller](http://www.evanmiller.org/how-not-to-run-an-ab-test.html) for more details.\nInstead of running for longer when you don't like the results, you should be sizing your experiment in advance to ensure that you will have enough power the first time you look at your results.\n\n## Overview of **How Not To Run an A/B Test: Avoiding Repeated Significance Testing Errors by Evan Miller** \n\n![no peeking](ab_testing_meme_no_peeking.jpg){.column-margin}\n\nThe blog post recommended in this lesson explains how \"peeking\" at A/B test results and stopping the experiment based on interim significance can lead to misleading conclusions.\n\nHere's the key takeaway:\n\n**Problem:**\n\n-   A/B testing software will often displays \"chance of beating original\" or \"statistical significance\" during the experiment.\n\n-   These are estimates with a strong assumption of a fixed sample size set before starting the experiment.\n\n-   Experiment will switch between favouring A and B many times and as this happens it will loose and then regain statistical significance.\n\n-   If you **Peek** at the data and stopp the experiment early this not only violates the assumption of a fixed sample size it also inflates the reported significance level.\n\n-   Actually it is much worse is you stop early (e.g., when it first shows significance) you have **cherry picked** the result.\n    The statistical significance isn't just inflated it is meaningless.\n\n**Consequences:**\n\n-   You might wrongly conclude that an insignificant difference is actually significant (**false positive**).\n\n-   Think about it - it is like stopping the election when less than 10% of the votes are counted - there is little reason to think you really seen the big picture.\n\n-   The more you peek, the worse the problem gets.\n\n**Solutions:**\n\n- For experimenters:\n    -   **Fix the sample size in advance** and stick to it, regardless of interim results.\n    -   **Avoid peeking** at the data or stopping early.\n    -   Use the formula `n=16σ²/δ²` as a rule of thumb to estimate the required sample size, considering the desired effect size (`δ`) and expected variance (`σ²`).\n-For A/B testing software developers:\n    -   Don't show significance levels until the experiment ends.\n    -   Instead, report the **detectable effect size** based on current data.\n    -   Consider removing \"current estimate\" of the treatment effect.\n- Advanced options:\n    -   **Sequential experiment design:** Predefined checkpoints to decide on continuing the experiment while maintaining valid significance levels.\n    -   **Bayesian experiment design:** Allows stopping the experiment and making valid inferences at any time, potentially better suited for real-time web experiments.\n\n**Conclusion:**\n\n-   Don't rely on preliminary significance indicators in A/B testing dashboards.\n-   Fix the sample size upfront and avoid peeking at data to ensure reliable results.\n-   Consider advanced techniques like [sequential](https://www.evanmiller.org/sequential-ab-testing.html) or [Bayesian designs](https://www.evanmiller.org/bayesian-ab-testing.html) for greater flexibility.\n\nA couple of comments:\n\n1.  Most people, data scientists, included don't have a clue estimating statistical power, effect sizes the sample size required to reach significance for an a/b test. Given all that they have even less of a clue on the Practical significance of the test which is what matters in the business setting and what creates the costs for the loosing\n2.  A Bayesian design is definitely better than the frequentist approach - particularly if it figures in the cost of testing each arm.\n3.  The only thing in your favour is that you can get an easy win or two if you have not done any a/b testing. Afterwards it gets harder and harder to get a large effect size.\n\n\n::: {#fig-single-metric-example .column-margin}\n\n{{< video https://youtu.be/LCZG4wlEFXE class=\"column-margin\" >}}\n\n\n\nSingle Metric: Example\n:::\n\n::: {#exm-changing-start-now}\nchange color and placement of Start Now button\n\n- metric: CTR\n- Unit of diversion: cookie\n$$d_{min}=0.01,\\quad  \\alpha=0.05,\\quad \\beta=0.2$$\n:::\n\n::: {#1d38d25a .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nXs_cont = np.asarray([196, 200, 200, 216, 212, 185, 225, 187, 205, 211, 192, 196, 223, 192])\nNs_cont = np.asarray([2029, 1991, 1951, 1985, 1973, 2021, 2041, 1980, 1951, 1988, 1977, 2019, 2035, 2007])\nXs_exp = np.asarray([179, 208, 205, 175, 191, 291, 278, 216, 225, 207, 205, 200, 297, 299])\nNs_exp = np.asarray([1971, 2009, 2049, 2015, 2027, 1979, 1959, 2020, 2049, 2012, 2023, 1981, 1965, 1993])\n\ndata = {\n  \"clicks_cont\": Xs_cont,\n  \"views_cont\":  Ns_cont,\n  \"ctr_cont\":    Xs_cont/Ns_cont,\n  \"clicks_exp\":  Xs_exp,\n  \"views_exp\":   Ns_exp,\n  \"ctr_exp\":    Xs_exp/Ns_exp,\n}\n\ndf = pd.DataFrame.from_dict(data)\ndf\n\nd_min = 0.01\nalpha = 0.05\nempirical_se   = 0.062\nepirical_views = 5000 # per group\n\neffect_size=0\n#sign_test= statsmodels.stats.descriptivestats.sign_test(df[], mu0=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>clicks_cont</th>\n      <th>views_cont</th>\n      <th>ctr_cont</th>\n      <th>clicks_exp</th>\n      <th>views_exp</th>\n      <th>ctr_exp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>196</td>\n      <td>2029</td>\n      <td>0.096599</td>\n      <td>179</td>\n      <td>1971</td>\n      <td>0.090817</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>200</td>\n      <td>1991</td>\n      <td>0.100452</td>\n      <td>208</td>\n      <td>2009</td>\n      <td>0.103534</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>200</td>\n      <td>1951</td>\n      <td>0.102512</td>\n      <td>205</td>\n      <td>2049</td>\n      <td>0.100049</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>216</td>\n      <td>1985</td>\n      <td>0.108816</td>\n      <td>175</td>\n      <td>2015</td>\n      <td>0.086849</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>212</td>\n      <td>1973</td>\n      <td>0.107451</td>\n      <td>191</td>\n      <td>2027</td>\n      <td>0.094228</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>185</td>\n      <td>2021</td>\n      <td>0.091539</td>\n      <td>291</td>\n      <td>1979</td>\n      <td>0.147044</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>225</td>\n      <td>2041</td>\n      <td>0.110240</td>\n      <td>278</td>\n      <td>1959</td>\n      <td>0.141909</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>187</td>\n      <td>1980</td>\n      <td>0.094444</td>\n      <td>216</td>\n      <td>2020</td>\n      <td>0.106931</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>205</td>\n      <td>1951</td>\n      <td>0.105074</td>\n      <td>225</td>\n      <td>2049</td>\n      <td>0.109810</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>211</td>\n      <td>1988</td>\n      <td>0.106137</td>\n      <td>207</td>\n      <td>2012</td>\n      <td>0.102883</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>192</td>\n      <td>1977</td>\n      <td>0.097117</td>\n      <td>205</td>\n      <td>2023</td>\n      <td>0.101335</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>196</td>\n      <td>2019</td>\n      <td>0.097078</td>\n      <td>200</td>\n      <td>1981</td>\n      <td>0.100959</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>223</td>\n      <td>2035</td>\n      <td>0.109582</td>\n      <td>297</td>\n      <td>1965</td>\n      <td>0.151145</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>192</td>\n      <td>2007</td>\n      <td>0.095665</td>\n      <td>299</td>\n      <td>1993</td>\n      <td>0.150025</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Single Metric: Gotchas\n::: {#fig-single-metric-gotchas .column-margin}\n\n{{< video https://youtu.be/WrfWFLiFeMU class=\"column-margin\" >}}\n\n\n\nSingle Metric: Gotchas\n:::\n\nIn @fig-single-metric-gotchas the instructor discusses Simpson's Paradox\n\nWe start with sime definitions\n\nConflicting results\n: When statistical tests disagree, like sign test and hypothesis test, or results differ across subgroups, a closer look at the data is necessary.\n\nSimpson's paradox\n: This phenomenon occurs when a trend appears in the overall data but reverses direction when analyzed within subgroups.\n\nSubgroup analysis\n: Examining data within relevant subgroups like departments, platforms, or user types can reveal hidden patterns.\n\nConfounding variables\n: Variables not directly measured but influencing the observed relationship can lead to misleading interpretations.\n\nThe example is a well known result regarding admissions to Berkley University  \n\nExample:\n\nBerkeley admissions: In aggregate, women had a lower acceptance rate than men. However, analyzing by department showed women had higher acceptance rates in some departments but applied more to lower acceptance departments, leading to the overall trend.\n\nApplication:\n\nExperiment analysis: Similar to the Berkeley admissions example, experiment results can be misleading if analyzed without considering subgroup behavior.\n\nFurther Learning:\n\nThe speaker mentions an upcoming example of how Simpson's paradox affects experiment analysis.\n\n\n**Remember:**\n\n-   Non-significant results don't necessarily mean there's no effect, but they require further investigation before drawing conclusions.\n\n-   See if there’s a significant difference.\n    If not as expected, break/slice and check the results.\n    It helps with debugging the experiment setup, and get new hypotheses.\n\n-   **Simpson Paradox**.\n    Although for each subgroup it seems that CTR has improved, the overall CTR was not improved.\n    We cannot say the experiment is successful.\n    Need to dig deeper to understand what caused the difference between new users and experienced users.\n\n## Multiple Metrics\n\n- Challenge: When evaluating multiple metrics simultaneously, random chance increases the likelihood of seeing seemingly significant differences that aren't truly meaningful. (Lines 3-7)\n\n- Mitigating factors:\n  - Repeatability: If the \"significant\" difference doesn't occur again in repeated experiments (e.g., different days, data slices, or bootstrap analysis), it's likely a chance finding. (Lines 8-11)\n  - Multiple Comparisons: This technique adjusts the significance level to account for the number of metrics tested, reducing the probability of false positives. (Lines 13-15)\n- Applications:\n  - Exploratory Data Analysis (EDA): Multiple comparisons help identify consistently significant metrics and avoid overfitting to random noise. (Lines 19-21)\n  - Automatic Alerting: When setting up alerts based on significant changes in metrics, using multiple comparisons helps prevent false positives triggering alerts. (Lines 22-24)\n\n\n\n\n### Multiple comparison problem\n\nAs you test more metrics, it becomes more likely that one of them will show a statistically significant result by chance.\n- In other words, the probability of any false positive increases as you increase the number of metrics.\n- For example, when we measure 3 independent metrics at the same time, alpha = 0.05, the probability that at least one metric by chance is significant (False Positive) is\n\n```         \n- $P(FP=0) = 0.95*0.95*0.95 = 0.857$ \n- so $P(FP≥1) = 1-P(FP=0) = 1–0.857 = 0.143$\n- Solution: Use a higher confidence level for each metric\n```\n\n-   **Method 1**: Set up an overall alpha and use it to calculate each individual alpha. Assume independence.\n\n$$\\alpha_{overall} = 1 - ( 1 - \\alpha_{individual})^n$$\n\n-   **Method 2**: **Bonferroni correction**.\n\n$\\alpha_{individual} = \\alpha_{overall}/n$\n\nA problem with **Bonferroni correction** is, if our metrics are correlated, they tend to move at the same time.\nIn this way, the method is too conservative -- it results in less significant difference.\n\n**Solution: 1** Use *false discovery rate* \\$ FDR = E( \\frac{\\text{false positives}}{\\text{ rejections}}) \\$ instead of family-wise error rate (FWER, control probability that any metric shows a false positive)\n\n**Solution: 2️** Use less conservative multiple comparison methods, e.g. closed testing procedure, Boole-Bonferroni bound, and Holm-Bonferroni method.\n\n### Focus on Business Goals\n\nOverall evaluation criteria (OEC) should be established based on an understanding of what your company is doing and what the problems are.\nIt should balance long-term and short-term benefits.\nBusiness analysis is needed to make the decision.\nOnce you have some candidates of OEC, you can run a few experiments to see how they steer you (whether in the right direction).\n\n### Whether to launch an experiment or not??\n\n-   Statistically and practically significant to justify the change?\n-   Do you understand what the change can do to the user experience?\n-   Is it worth the investment?\n\n### Ramp up A/B test\n\n-   Start with 1% of the traffic and divert to experiment and increase that until the feature is fully launched.\n-   During the ramp-up process, effects may not be statistically significant even if they are significant before. Reason:\n    -   Seasonality such as school season, holiday, etc. 🌟\n        -   Solution: have a holdback group (launch the experiment to everyone except for a small holdback who doesn’t get the change, and you continue to compare them to the control)\n    -   Novelty effect or change aversion: as users discover or change their adoption of your change, their behavior can change and measured effect can change — can do cohort analysis. 🌟\n        -   Solution: Pre- and post-period analysis with cohort analysis to understand the learning effect — i.e. how users adapt to the changes over time.\n-   Business-wise, need to consider the engineering cost of maintaining the change, if there are customer support or sales issue, opportunity cost, etc.\n\n",
    "supporting": [
      "l5_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}