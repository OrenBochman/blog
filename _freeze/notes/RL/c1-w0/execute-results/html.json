{
  "hash": "088c12a022ea9a2594e1b248dc5577ff",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2022-05-01\nlastmod: 2024-05-06\ntitle: Course Into \nsubtitle: RL Fundamentals\ndescription: In week 1 we define some key concepts like rewards, states, action, value functions, action values functions. We consider the the multi-armed bandit problem, leading to exploration explotation dillema, and the epsilon greedy algorithm.\nauthor: Oren Bochman\ncategories:\n  - Coursera\n  - notes\n  - rl\n  - reinforcement learning\n  - the k-armed bandit problem\n  - bandit algorithms\n  - exploration \n  - explotation\n  - epsilon greedy algorithm\n  - sample avarage method\njupyter: python3\nimage: /images/nlp-brain-wordcloud.jpg\n---\n\n\n\n\n\n![RL logo](img/logo.png){.column-margin} ![RL algorithms](img/alg_selector.jpeg){.column-margin}\n\n# Intro\n\nThe teachers are world class, researches from the best university for this subject. However, this high level comes with the following caveat: their delivery is always terse and precise. They frequently reference old material which you may not have *fully digested* yet. In fact I discovered to my üò± horror how easy it is go through the material, quizzes and programming assignments scoring 100% but not connect the dots.\n\n::: callout-caution\n## Deceptively simple :bulb:\n\n[This course is **deceptively simple**]{.mark} - the chart in the margin provides a great summary of the material for the whole specialization. Only a handful of concepts are needed to master RL.\n\n-   This specialization is all about connecting the dots.\n-   We revisit the same ideas over and over improving them in small but significant ways by relaxing the assumptions. e.g. from bandits with one state we move to MDP with many states and get the ability to formulate plans. From Dynamic programming with a fully specified model we move to model free settings where we might not be able to efficiently learn a model. From tabular methods where we treat each state as a separate entity we we move to function approximation and deep learning where we can generalize from one state to many others.\n-   In this course and the more connections you make the better you will understand and remember material.\n-   And the greater you facility to apply RL to new problems.\n:::\n\nThe following are my tips for getting the most from this specialization\n\n::: callout-tip\n## Connecting The Dot to see the Forest For the Trees üéÑ\n\nTo connect the dots I :heart: recommend:\n\n1.  **Annotate** üñäÔ∏è you e-copy of the book üìñ\n2.  **Flash cards** üóÇÔ∏è are your üßë‚Äçü§ù‚Äçüßë friends. We don't need too many but they can help you keep the essentials (algorithms, definitions, some formulas, a few diagrams) fresh in your mind.\n3.  **Review** üëÅÔ∏è the videos/quizzes until nothing seems surprising/confusing [^1].\n4.  **Review** üëÅÔ∏è your notes every time you complete a part of the specialization. Also a great idea if have an RL interview üíº\n5.  **Coding**: If you have time do extra RL coding\n    1.  Start with developing more environments, simple and complex ‚õ©Ô∏è\n    2.  Implement more algorithms - from the course, the books, papers.‚õ©Ô∏è\n    3.  The notebooks also try to teach you experiments and analysis comparing algorithms performance. If you assimilate this part you are really going to shine. ‚õ©Ô∏è\n:::\n\n[^1]: The annotated book and flashcards will help here. This material is really logical - if you are surprised/confused you never assimilated some part of the material. Once you do it should become almost intuitive to reason about from scratch.\n\n::: callout-tip\n## Mathematical Mnemonics üòç\n\nAs a Mathematics major I can attest that Mathematics becomes 10x easier so long as you can recall üß† the basic definitions and their notation.\n\nI have extracted the essentials from the text book below. Best to memorize these or at least keep a copy handy and you are well on your way to grokking this course\n\n-   $G_t$ **return** at time t, for a $(s_t,a_t,r_t...)$ sequence discounted by $\\gamma\\in(0,1)$.\n-   $r(s,a)$ - **expected immediate rewards** for action $a$ in state $s$\n-   $\\pi$ **policy** - a decision making rule for every state.\n-   $\\pi_*$ **optimal policy** - which returns the maximum rewards.\n-   $p(s',r \\vert s,a)$ - **transition probability** to state $s'$ with reward $r$ from state $s$ via action $a$ AKA **four valued dynamics** function.\n-   $p(s' \\vert s,a)$ - **transition probability** to state $s'$ from state $s$ via action $a$ AKA **Markov process transition matrix**\n-   $v_\\pi(s)$ - state's **value** under policy $\\pi$ which is its expected return.\n-   $q_\\pi(s,a)$ - the **action value** in state $s$ under policy $\\pi$.\n:::\n\n",
    "supporting": [
      "c1-w0_files"
    ],
    "filters": [],
    "includes": {}
  }
}