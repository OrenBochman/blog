{
  "hash": "170ba88729c2355f6dca51f49dcbe609",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Quiz App with ShinyLive\"\nformat: html\nfilters:\n  - shinylive\n\n---\n\n::: {#094bd2eb .cell execution_count=2}\n``` {.python .cell-code}\nquestions = [\n    {\n        \"question\": \"What is the capital of France?\",\n        \"choices\": [\"Paris\", \"Rome\", \"Berlin\", \"Madrid\"],\n        \"answer\": \"Paris\"\n    },\n    {\n        \"question\": \"Which planet is closest to the sun?\",\n        \"choices\": [\"Venus\", \"Earth\", \"Mercury\", \"Mars\"],\n        \"answer\": \"Mercury\"\n    },\n    {\n        \"question\": \"What is the largest mammal?\",\n        \"choices\": [\"Elephant\", \"Blue Whale\", \"Giraffe\", \"Tiger\"],\n        \"answer\": \"Blue Whale\"\n    }\n]\n```\n:::\n\n\n```{shinylive-python}\n#| standalone: true\nimport shiny\nfrom shiny import *\n\napp = shiny.App()\n\n@app.ui\ndef ui():\n    return shiny.page_fluid(\n        shiny.h2(\"Quiz App\"),\n        shiny.ui_select_input(\"question\", \"Select a question:\", \n                              choices=[q['question'] for q in questions]),\n        shiny.ui_radio_buttons(\"answer\", \"Choose an answer:\", choices=[]),\n        shiny.ui_button(\"submit\", \"Submit Answer\"),\n        shiny.ui_output_text_verbatim(\"feedback\")\n    )\n\n@app.server\ndef server(input: Inputs, output: Outputs, session: Session):\n    \n    @shiny.reactive.Effect\n    def update_choices():\n        selected_question = input.question()\n        if selected_question:\n            for q in questions:\n                if q[\"question\"] == selected_question:\n                    session.update_radio_buttons(\"answer\", choices=q[\"choices\"])\n                    break\n    \n    @output\n    @shiny.render.text\n    def feedback():\n        if input.answer() and input.submit():\n            selected_question = input.question()\n            selected_answer = input.answer()\n            correct_answer = next(q[\"answer\"] for q in questions if q[\"question\"] == selected_question)\n            if selected_answer == correct_answer:\n                return \"Correct!\"\n            else:\n                return f\"Incorrect! The correct answer was: {correct_answer}\"\n\nif __name__ == \"__main__\":\n    app.run()\n\n```\n\n",
    "supporting": [
      "quizz_files"
    ],
    "filters": [],
    "includes": {}
  }
}