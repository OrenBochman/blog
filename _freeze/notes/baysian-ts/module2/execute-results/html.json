{
  "hash": "2efbfbfcc94cfebc3ff11151e8976e0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 2: The AR(p) process\"\nsubtitle: Time Series Analysis\ndescription: \"The AR(1) process, Stationarity, ACF, PACF, Differencing, and Smoothing\"\ndate: 2024-10-23\ncategories: \n  - Coursera \n  - notes\n  - Bayesian Statistics\n  - Autoregressive Models\n  - Time Series\nkeywords: \n  - time series\n  - strong stationarity\n  - weak stationarity\n  - autocorrelation function\n  - ACF\n  - partial autocorrelation function\n  - PACF\n  - smoothing\n  - trend\n  - seasonality\n  - Durbin-Levinson recursion\n  - Yule-Walker equations\n  - differencing operator\n  - back shift operator\n  - moving average\n  - AR(p) process\n  - R code\nauthor: Oren Bochman\nimage: course-banner.png\nfig-caption: Notes about ... Bayesian Statistics\ntitle-block-banner: banner_deep.jpg\nbibliography: bibliography.bib\nformat: \n    html: \n        code-fold: true\n---\n\n\n\n\n## Learning Objectives\n\n-   Define the autoregressive process of order p or AR(p) and use R to obtain samples from such process\n-   Define ARIMA (autoregressive moving average) models (honors)\n-   Perform posterior inference for the AR(p) under the conditional likelihood and the reference prior\n-   Perform a full data analysis in R using an AR(p) including likelihood estimation and Bayesian inference, model order selection, and forecasting\n-   Explain the relationship between the AR characteristic polynomial, the ACF, the forecast function and the spectral density in the case of an AR(p)\n\n## The general AR(p) process (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Definition and state-space representation (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Examples (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### ACF of the AR(p) (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Simulating data from an AR(p) (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Computing the roots of the AR polynomial (reading)\n\nCompute AR reciprocal roots given the AR coefficients\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assume the folloing AR coefficients for an AR(8)\nphi=c(0.27, 0.07, -0.13, -0.15, -0.11, -0.15, -0.23, -0.14)\nroots=1/polyroot(c(1, -phi)) # compute reciprocal characteristic roots\nr=Mod(roots) # compute moduli of reciprocal roots\nlambda=2*pi/Arg(roots) # compute periods of reciprocal roots\n\n# print results modulus and frequency by decreasing order\nprint(cbind(r, abs(lambda))[order(r, decreasing=TRUE), ][c(2,4,6,8),]) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             r          \n[1,] 0.9722428 12.731401\n[2,] 0.8094950  5.103178\n[3,] 0.7196221  2.987712\n[4,] 0.6606487  2.232193\n```\n\n\n:::\n:::\n\n\n\n\n### Simulating data from an AR(p) (reading)\n\n1.  Rcode to simulate data from an AR(2) with one pair of complex-valued reciprocal roots and plot the corresponding sample ACF and sample PACF\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## simulate data from an AR(2)\nset.seed(2021)\n## AR(2) with a pair of complex-valued roots with modulus 0.95 and period 12 \nr=0.95\nlambda=12 \nphi=numeric(2) \nphi[1]<- 2*r*cos(2*pi/lambda) \nphi[2] <- -r^2\nphi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1.645448 -0.902500\n```\n\n\n:::\n\n```{.r .cell-code}\nT=300 # number of time points\nsd=1 # innovation standard deviation\nyt=arima.sim(n=T, model = list(ar = phi), sd=sd)\n\npar(mfrow = c(3, 1), cex.lab = 1.5)\n## plot simulated data \nts.plot(yt)\n## draw sample autocorrelation function\nacf(yt, lag.max = 50,\n    type = \"correlation\", ylab = \"sample ACF\", \n    lty = 1, ylim = c(-1, 1), main = \" \")\n\n## draw sample partial autocorrelation function\npacf(yt, lag.ma = 50, main = \"sample PACF\")\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/ar-sim-complex-valued-roots-1.png){width=672}\n:::\n:::\n\n\n\n\n2.  Rcode to simulate data from an AR(2) with two different real-valued reciprocal roots and plot the corresponding sample ACF and sample PACF\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Simulate from AR(2) with two real reciprocal roots (e.g., 0.95 and 0.5)\nset.seed(2021)\nrecip_roots=c(0.95, 0.5) ## two different real reciprocal roots\nphi=c(sum(recip_roots), -prod(recip_roots)) ## compute ar coefficients\nphi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1.450 -0.475\n```\n\n\n:::\n\n```{.r .cell-code}\nT=300 ## set up number of time points\nsd=1 ## set up standard deviation\nyt=arima.sim(n=T,model = list(ar=phi),sd=sd) # generate ar(2)\n\npar(mfrow = c(3, 1), cex.lab = 1.5, cex.main = 1.5)\n### plot simulated data \nts.plot(yt)\n### plot sample ACF\nacf(yt, lag.max = 50, type = \"correlation\",  main = \"sample ACF\")\n### plot sample PACF\npacf(yt, lag.max = 50, main = \"sample PACF\")\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/ar-sim-real-valued-roots-1.png){width=672}\n:::\n:::\n\n\n\n\n3.  Rcode to simulate data from an AR(3) with one real reciprocal root and a pair of complex-valued reciprocal roots and plot the corresponding sample ACF and sample PACF\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Simulate from AR(3) with one real root \n### and a pair of complex roots (e.g., r=0.95 and lambda = 12 and real root with\n### 0.8 modulus)\nset.seed(2021)\nr= c(0.95, 0.95, 0.8) ## modulus\nlambda=c(-12, 12) ## lambda\nrecip_roots=c(r[1:2]*exp(2*pi/lambda*1i), r[3]) ## reciprocal roots\nphi <- numeric(3) # placeholder for phi\nphi[1]=Re(sum(recip_roots)) # ar coefficients at lag 1\nphi[2]=-Re(recip_roots[1]*recip_roots[2] + recip_roots[1]*recip_roots[3] + recip_roots[2]*recip_roots[3]) # ar coefficients at lag 2\nphi[3]=Re(prod(recip_roots))\nphi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2.445448 -2.218859  0.722000\n```\n\n\n:::\n\n```{.r .cell-code}\nT=300 # number of time points\nsd=1 # standard deviation\nyt=arima.sim(n=T,model = list(ar=phi), sd = sd) # generate ar(3)\n\npar(mfrow = c(3,1), cex.lab = 1.5, cex.main = 1.5)\n### plot simulated data \nts.plot(yt)\n### plot sample ACF\nacf(yt, lag.max = 50, type = \"correlation\",  main = \"sample ACF\")\n### plot sample PACF\npacf(yt, lag.max = 50, main = \"sample PACF\")\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/ar-sim-ar3-1.png){width=672}\n:::\n:::\n\n\n\n\n### The AR(p): Review (Reading)\n\n#### AR(p): Definition, stability, and stationarity\n\nA time series follows a zero-mean autoregressive process of order $p$, of AR(p), if\n\n$$\ny_t = \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\varepsilon_t,\n$$\n\nwith $\\varepsilon_t \\sim \\text{i.i.d. } N(0, v)$, for all $t$.\n\nThe AR characteristic polynomial is given by\n\n$$\n\\Phi(u) = 1 - \\phi_1 u - \\phi_2 u^2 - \\ldots - \\phi_p u^p,\n$$\n\nwith $u$ complex-valued.\n\nThe AR(p) process is stable if $\\Phi(u) = 0$ only when $|u| > 1$. In this case, the process is also stationary and can be written as\n\n$$\ny_t = \\psi(B) \\varepsilon_t = \\sum_{j=0}^{\\infty} \\psi_j \\varepsilon_{t-j},\n$$\n\nwith $\\psi_0 = 1$ and $\\sum_{j=0}^{\\infty} |\\psi_j| < \\infty$. Here $B$ denotes the backshift operator, so $B^j \\varepsilon_t = \\varepsilon_{t-j}$ and\n\n$$\n\\psi(B) = 1 + \\psi_1 B + \\psi_2 B^2 + \\ldots + \\psi_j B^j + \\ldots\n$$\n\nThe AR polynomial can also be written as\n\n$$\n\\Phi(u) = \\prod_{j=1}^{p} (1 - \\alpha_j u),\n$$\n\nwith $\\alpha_j$ being the reciprocal roots of the characteristic polynomial. For the process to be stable (and consequently stationary), $|\\alpha_j| < 1$ for all $j = 1, \\ldots, p$.\n\n#### AR(p): State-space representation\n\nAn AR(p) can also be represented using the following state-space or dynamic linear (DLM) model representation:\n\n$$\ny_t = F' x_t,\n$$\n\n$$\nx_t = G x_{t-1} + \\omega_t,\n$$\n\nwith $x_t = (y_t, y_{t-1}, \\dots, y_{t-p+1})'$, $F = (1, 0, \\dots, 0)'$, $\\omega_t = (\\varepsilon_t, 0, \\dots, 0)'$, and\n\n$$\nG = \\begin{pmatrix}\n\\phi_1 & \\phi_2 & \\phi_3 & \\dots & \\phi_{p-1} & \\phi_p \\\\\n1 & 0 & 0 & \\dots & 0 & 0 \\\\\n0 & 1 & 0 & \\dots & 0 & 0 \\\\\n\\vdots & \\ddots & \\ddots & \\ddots & & \\vdots \\\\\n0 & 0 & 0 & \\dots & 1 & 0\n\\end{pmatrix}.\n$$\n\nUsing this representation, the expected behavior of the process in the future can be exhibited via the forecast function:\n\n$$\nf_t(h) = E(y_{t+h} | y_{1:t}) = F' G^h x_t, \\quad h > 0,\n$$\n\nfor any $t \\ge p$. The eigenvalues of the matrix $G$ are the reciprocal roots of the characteristic polynomial.\n\n::: callout-note\n##### Eigenvalues\n\n-   The eigenvalues can be real-valued or complex-valued.\n-   If they are Complex-valued the eigenvalues/reciprocal roots appear in conjugate pairs.\n:::\n\nAssuming the matrix $G$ has $p$ distinct eigenvalues, we can decompose $G$ into $G = E \\Lambda E^{-1}$, with\n\n$$\n\\Lambda = \\text{diag}(\\alpha_1, \\dots, \\alpha_p),\n$$\n\nfor a matrix of corresponding eigenvectors $E$. Then, $G^h = E \\Lambda^h E^{-1}$ and we have:\n\n$$\nf_t(h) = \\sum_{j=1}^{p} c_{tj} \\alpha_j^h.\n$$\n\n#### ACF of AR(p)\n\nFor a general AR(p), the ACF is given in terms of the homogeneous difference equation:\n\n$$\n\\rho(h) - \\phi_1 \\rho(h-1) - \\ldots - \\phi_p \\rho(h-p) = 0, \\quad h > 0.\n$$\n\nAssuming that $\\alpha_1, \\dots, \\alpha_r$ denotes the characteristic reciprocal roots each with multiplicity $m_1, \\ldots, m_r$, respectively, with $\\sum_{i=1}^{r} m_i = p$. Then, the general solution is\n\n$$\n\\rho(h) = \\alpha_1^h p_1(h) + \\ldots + \\alpha_r^h p_r(h),\n$$\n\nwith $p_j(h)$ being a polynomial of degree $m_j - 1$.\n\n## Example: AR(1)\n\nWe already know that for $h \\ge 0$, $\\rho(h) = \\phi^h$. Using the result above, we have\n\n$$\n\\rho(h) = a \\phi^h,\n$$\n\nand so to find $a$, we take $\\rho(0) = 1 = a \\phi^0$, hence $a = 1$.\n\n## Example: AR(2)\n\nSimilarly, using the result above in the case of two complex-valued reciprocal roots, we have\n\n$$\n\\rho(h) = a \\alpha_1^h + b \\alpha_2^h = c r^h \\cos(\\omega h + d).\n$$\n\n#### PACF of AR(p)\n\nWe can use the Durbin-Levinson recursion to obtain the PACF of an AR(p). Using the same representation but substituting the true autocovariances and autocorrelations with their sampled versions, we can also obtain the sample PACF.\n\nIt is possible to show that the PACF of an AR(p) is equal to zero for $h > p$.\n\n### Quiz: The AR(p) process (Quiz)\n\nOmitted due to Coursera's Honor Code\n\n## Bayesian Inference in the AR(p)\n\n### Bayesian inference in the AR(p): Reference prior, conditional likelihood (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Rcode: Maximum likelihood estimation, AR(p), conditional likelihood (Reading)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  set.seed(2021)\n# Simulate 300 observations from an AR(2) with one pair of complex-valued reciprocal roots \nr=0.95\nlambda=12 \nphi=numeric(2) \nphi[1]=2*r*cos(2*pi/lambda) \nphi[2]=-r^2\nsd=1 # innovation standard deviation\nT=300 # number of time points\n# generate stationary AR(2) process\nyt=arima.sim(n = T, model = list(ar = phi), sd = sd) \n\n## Compute the MLE for phi and the unbiased estimator for v using the conditional likelihood\np=2\ny=rev(yt[(p+1):T]) # response\nX=t(matrix(yt[rev(rep((1:p),T-p)+rep((0:(T-p-1)),rep(p,T-p)))],p,T-p));\nXtX=t(X)%*%X\nXtX_inv=solve(XtX)\nphi_MLE=XtX_inv%*%t(X)%*%y # MLE for phi\ns2=sum((y - X%*%phi_MLE)^2)/(length(y) - p) #unbiased estimate for v\n\ncat(\"\\n MLE of conditional likelihood for phi: \", phi_MLE, \"\\n\",\n    \"Estimate for v: \", s2, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n MLE of conditional likelihood for phi:  1.65272 -0.9189823 \n Estimate for v:  0.9901292 \n```\n\n\n:::\n:::\n\n\n\n\n### Model order selection (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n## Example: Bayesian inference in the AR(p), conditional likelihood (Video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\nRcode: Bayesian inference, AR(p), conditional likelihood (Reading)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate 300 observations from an AR(2) with one pair of complex-valued roots \nset.seed(2021)\nr=0.95\nlambda=12 \nphi=numeric(2) \nphi[1]=2*r*cos(2*pi/lambda) \nphi[2]=-r^2\nsd=1 # innovation standard deviation\nT=300 # number of time points\n# generate stationary AR(2) process\nyt=arima.sim(n = T, model = list(ar = phi), sd = sd) \npar(mfrow=c(1,1))\nplot(yt)\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/ar-bayesian-inference-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## Compute the MLE of phi and the unbiased estimator of v using the conditional likelihood\np=2\ny=rev(yt[(p+1):T]) # response\nX=t(matrix(yt[rev(rep((1:p),T-p)+rep((0:(T-p-1)),rep(p,T-p)))],p,T-p));\nXtX=t(X)%*%X\nXtX_inv=solve(XtX)\nphi_MLE=XtX_inv%*%t(X)%*%y # MLE for phi\ns2=sum((y - X%*%phi_MLE)^2)/(length(y) - p) #unbiased estimate for v\n\n#####################################################################################\n### Posterior inference, conditional likelihood + reference prior via \n### direct sampling                 \n#####################################################################################\n\nn_sample=1000 # posterior sample size\nlibrary(MASS)\n\n## step 1: sample v from inverse gamma distribution\nv_sample=1/rgamma(n_sample, (T-2*p)/2, sum((y-X%*%phi_MLE)^2)/2)\n\n## step 2: sample phi conditional on v from normal distribution\nphi_sample=matrix(0, nrow = n_sample, ncol = p)\nfor(i in 1:n_sample){\n  phi_sample[i, ]=mvrnorm(1,phi_MLE,Sigma=v_sample[i]*XtX_inv)\n}\n\npar(mfrow = c(2, 3), cex.lab = 1.3)\n## plot histogram of posterior samples of phi and v\n\nfor(i in 1:2){\n  hist(phi_sample[, i], xlab = bquote(phi), \n       main = bquote(\"Histogram of \"~phi[.(i)]),col='lightblue')\n  abline(v = phi[i], col = 'red')\n}\n\nhist(v_sample, xlab = bquote(nu), main = bquote(\"Histogram of \"~v),col='lightblue')\nabline(v = sd, col = 'red')\n\n#####################################################\n# Graph posterior for modulus and period \n#####################################################\nr_sample=sqrt(-phi_sample[,2])\nlambda_sample=2*pi/acos(phi_sample[,1]/(2*r_sample))\nhist(r_sample,xlab=\"modulus\",main=\"\",col='lightblue')\nabline(v=0.95,col='red')\nhist(lambda_sample,xlab=\"period\",main=\"\",col='lightblue')\nabline(v=12,col='red')\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/ar-bayesian-inference-2.png){width=672}\n:::\n:::\n\n\n\n\n### Rcode: Model order selection (Reading)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###################################################\n# Simulate data from an AR(2)\n###################################################\nset.seed(2021)\nr=0.95\nlambda=12 \nphi=numeric(2) \nphi[1]=2*r*cos(2*pi/lambda) \nphi[2]=-r^2\nsd=1 # innovation standard deviation\nT=300 # number of time points\n# generate stationary AR(2) process\nyt=arima.sim(n = T, model = list(ar = phi), sd = sd) \n\n#############################################################################\n######   compute AIC and BIC for different AR(p)s based on simulated data ###\n#############################################################################\npmax=10 # the maximum of model order\nXall=t(matrix(yt[rev(rep((1:pmax),T-pmax)+rep((0:(T-pmax-1)),\n              rep(pmax,T-pmax)))], pmax, T-pmax));\ny=rev(yt[(pmax+1):T])\nn_cond=length(y) # (number of total time points - the maximum of model order)\n\n## compute MLE\nmy_MLE <- function(y, Xall, p){\n  n=length(y)\n  x=Xall[,1:p]\n  a=solve(t(x) %*%x)\n  a=(a + t(a))/2 # for numerical stability \n  b=a%*%t(x)%*%y # mle for ar coefficients\n  r=y - x%*%b # residuals \n  nu=n - p # degrees freedom\n  R=sum(r*r) # SSE\n  s=R/nu #MSE\n  return(list(b = b, s = s, R = R, nu = nu))\n}\n\n\n## function for AIC and BIC computation \nAIC_BIC <- function(y, Xall, p){\n  ## number of time points\n  n <- length(y)\n  \n  ## compute MLE\n  tmp=my_MLE(y, Xall, p)\n  \n  ## retrieve results\n  R=tmp$R\n  \n  ## compute likelihood\n  likl= n*log(R)\n  \n  ## compute AIC and BIC\n  aic =likl + 2*(p)\n  bic =likl + log(n)*(p)\n  return(list(aic = aic, bic = bic))\n}\n# Compute AIC, BIC \naic =numeric(pmax)\nbic =numeric(pmax)\n\nfor(p in 1:pmax){\n  tmp =AIC_BIC(y,Xall, p)\n  aic[p] =tmp$aic\n  bic[p] =tmp$bic\n  print(c(p, aic[p], bic[p])) # print AIC and BIC by model order\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    1.000 2166.793 2170.463\n[1]    2.000 1635.816 1643.156\n[1]    3.000 1637.527 1648.536\n[1]    4.000 1639.059 1653.738\n[1]    5.000 1640.743 1659.093\n[1]    6.000 1641.472 1663.491\n[1]    7.000 1643.457 1669.147\n[1]    8.000 1645.370 1674.729\n[1]    9.000 1646.261 1679.290\n[1]   10.000 1647.915 1684.614\n```\n\n\n:::\n\n```{.r .cell-code}\n## compute difference between the value and its minimum\naic =aic-min(aic) \nbic =bic-min(bic) \n\n## draw plot of AIC, BIC, and the marginal likelihood\npar(mfrow = c(1, 1))\nmatplot(1:pmax,matrix(c(aic,bic),pmax,2),ylab='value',\n        xlab='AR order p',pch=\"ab\", col = 'black', main = \"AIC and BIC\")\n# highlight the model order selected by AIC\ntext(which.min(aic), aic[which.min(aic)], \"a\", col = 'red') \n# highlight the model order selected by BIC\ntext(which.min(bic), bic[which.min(bic)], \"b\", col = 'red') \n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n########################################################\np <- which.min(bic) # We set up the moder order\nprint(paste0(\"The chosen model order by BIC: \", p))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The chosen model order by BIC: 2\"\n```\n\n\n:::\n:::\n\n\n\n\n### Spectral representation of the AR(p) (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Spectral representation of the AR(p): Example (video)\n\n\n\n\n{{< lipsum 2 >}}\n\n\n\n\n\n\n### Rcode: Spectral density of AR(p) (Reading)\n\n```r\n#| label: ar-spectral-density\n### Simulate 300 observations from an AR(2) prcess with a pair of complex-valued roots \nset.seed(2021)\nr=0.95\nlambda=12 \nphi=numeric(2) \nphi[1]<- 2*r*cos(2*pi/lambda) \nphi[2] <- -r^2\nsd=1 # innovation standard deviation\nT=300 # number of time points\n# sample from the AR(2) process\nyt=arima.sim(n = T, model = list(ar = phi), sd = sd) \n\n# Compute the MLE of phi and the unbiased estimator of v using the conditional likelihood \np=2\ny=rev(yt[(p+1):T])\nX=t(matrix(yt[rev(rep((1:p),T-p)+rep((0:(T-p-1)),rep(p,T-p)))],p,T-p));\nXtX=t(X)%*%X\nXtX_inv=solve(XtX)\nphi_MLE=XtX_inv%*%t(X)%*%y # MLE for phi\ns2=sum((y - X%*%phi_MLE)^2)/(length(y) - p) #unbiased estimate for v\n\n# Obtain 200 samples from the posterior distribution under the conditional likelihood and the reference prior \nn_sample=200 # posterior sample size\nlibrary(MASS)\n\n## step 1: sample v from inverse gamma distribution\nv_sample=1/rgamma(n_sample, (T-2*p)/2, sum((y-X%*%phi_MLE)^2)/2)\n\n## step 2: sample phi conditional on v from normal distribution\nphi_sample=matrix(0, nrow = n_sample, ncol = p)\nfor(i in 1:n_sample){\n  phi_sample[i,]=mvrnorm(1,phi_MLE,Sigma=v_sample[i]*XtX_inv)\n}\n\n\n### using spec.ar to draw spectral density based on the data assuming an AR(2)\nspec.ar(yt, order = 2, main = \"yt\")\n\n### using arma.spec from astsa package to draw spectral density\nlibrary(\"astsa\")\n\n## plot spectral density of simulated data with posterior sampled \n## ar coefficients and innvovation variance\npar(mfrow = c(1, 1))\nresult_MLE=arma.spec(ar=phi_MLE, var.noise = s2, log='yes',main = '')\nfreq=result_MLE$freq\n  \nspec=matrix(0,nrow=n_sample,ncol=length(freq))\nfor (i in 1:n_sample){\nresult=arma.spec(ar=phi_sample[i,], var.noise = v_sample[i], log='yes',\n                 main = '')\nspec[i,]=result$spec\n}\n\nplot(2*pi*freq,log(spec[1,]),type='l',ylim=c(-3,12),ylab=\"log spectra\",\n     xlab=\"frequency\",col=0)\nfor (i in 1:n_sample){\nlines(2*pi*freq,log(spec[i,]),col='darkgray')\n}\nlines(2*pi*freq,log(result_MLE$spec))\nabline(v=2*pi/12,lty=2,col='red')\n\n```\n\n### Quiz: Spectral representation of the AR(p)\n\nOmitted due to Coursera's Honor Code\n\n### Graded Assignment: Bayesian analysis of an EEG dataset using an AR(p)\n\nThe dataset below corresponds to a portion of an electroencephalogram (EEG) recorded in a particular location on the scalp of an individual. The original EEG dataset was originally recorded at 256Hz but was then subsampled every sixth observations, so the resulting sampling rate is about 42.7 observations per second. The dataset below has 400 observations corresponding approximately to 9.36 seconds.\n\nYou will use an AR(8) to model this dataset and obtain maximum likelihood estimation and Bayesian inference for the parameters of the model. For this you will need to do the following:\n\n1.  Download the dataset, and plot it in R. Upload a picture of your graph displaying the data and comment on the features of the data. Does it present any trends or quasi-periodic behavior?\n\n2.  Modify the code below to obtain the maximum likelihood estimators (MLEs) for the AR coefficients under the conditional likelihood. For this you will assume an autoregressive model of order p=8. The parameters of the model are $\\phi=(\\phi_1, \\ldots \\phi_8)'$ snf $v$. You will compute the MLE of $\\phi$ denoted as $\\hat\\phi$. ​\n\n3.  Obtain an unbiased estimator for the observational variance of the AR(8). You will compute the unbiased estimator for $v$ denoted as $s^2$.\n\n4.  Modify the code below to obtain 500 samples from the posterior distribution of the parameters $\\phi=(\\phi_1, \\ldots \\phi_8)'$ and $v$ under the conditional likelihood and the reference prior. You will assume an autoregressive model of order v. Once you obtain samples from the posterior distribution you will compute the posterior means of $\\phi$ and $v$, denoted as $\\hat\\phi$. and $\\hat v$, respectively.\n\nModify the code below to use the function polyroot and obtain the moduli and periods of the reciprocal roots of the AR polynomial evaluated at the posterior mean $\\hat\\phi$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2021)\nr=0.95\nlambda=12 \nphi=numeric(2) \nphi[1]=2*r*cos(2*pi/lambda) \nphi[2]=-r^2\nsd=1 # innovation standard deviation\nT=300 # number of time points\n# generate stationary AR(2) process\nyt=arima.sim(n = T, model = list(ar = phi), sd = sd) \npar(mfrow=c(1,1))\nplot(yt)\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## Case 1: Conditional likelihood\np=2\ny=rev(yt[(p+1):T]) # response\nX=t(matrix(yt[rev(rep((1:p),T-p)+rep((0:(T-p-1)),rep(p,T-p)))],p,T-p));\nXtX=t(X)%*%X\nXtX_inv=solve(XtX)\nphi_MLE=XtX_inv%*%t(X)%*%y # MLE for phi\ns2=sum((y - X%*%phi_MLE)^2)/(length(y) - p) #unbiased estimate for v\n\ncat(\"\\n MLE of conditional likelihood for phi: \", phi_MLE, \"\\n\",\n    \"Estimate for v: \", s2, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n MLE of conditional likelihood for phi:  1.65272 -0.9189823 \n Estimate for v:  0.9901292 \n```\n\n\n:::\n\n```{.r .cell-code}\n#####################################################################################\n##  AR(2) case \n### Posterior inference, conditional likelihood + reference prior via \n### direct sampling                 \n#####################################################################################\n\nn_sample=1000 # posterior sample size\nlibrary(MASS)\n\n## step 1: sample v from inverse gamma distribution\nv_sample=1/rgamma(n_sample, (T-2*p)/2, sum((y-X%*%phi_MLE)^2)/2)\n\n## step 2: sample phi conditional on v from normal distribution\nphi_sample=matrix(0, nrow = n_sample, ncol = p)\nfor(i in 1:n_sample){\n  phi_sample[i, ]=mvrnorm(1,phi_MLE,Sigma=v_sample[i]*XtX_inv)\n}\n\n## plot histogram of posterior samples of phi and nu\npar(mfrow = c(1, 3), cex.lab = 1.3)\nfor(i in 1:2){\n  hist(phi_sample[, i], xlab = bquote(phi), \n       main = bquote(\"Histogram of \"~phi[.(i)]))\n  abline(v = phi[i], col = 'red')\n}\n\nhist(v_sample, xlab = bquote(nu), main = bquote(\"Histogram of \"~v))\nabline(v = sd, col = 'red')\n```\n\n::: {.cell-output-display}\n![](module2_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\n\n\n## ARIMA processes (Reading)\n\n#### ARIMA Models\n\nA time series process is a zero-mean autoregressive moving average process if it is given by\n\n$$\ny_t = \\sum_{i=1}^{p} \\phi_i y_{t-i} + \\sum_{j=1}^{q} \\theta_j \\varepsilon_{t-j} + \\varepsilon_t,\n$$\n\nwith $\\varepsilon_t \\sim N(0, v)$.\n\nWhen $q = 0$, we have an AR(p) process.\n\nWhen $p = 0$, we have a moving average process of order $q$ or MA(q).\n\nAn ARMA process is **stable** if the roots of the AR characteristic polynomial [stable]{.column-margin}\n\n$$\n\\Phi(u) = 1 - \\phi_1 u - \\phi_2 u^2 - \\ldots - \\phi_p u^p\n$$\n\nlie outside the unit circle, i.e., for all $u$ such that $\\Phi(u) = 0$, $|u| > 1$.\n\nEquivalently, this happens when the reciprocal roots of the AR polynomial have moduli smaller than 1.\n\nThis condition implies stationarity.\n\nAn ARMA process is **invertible** if the roots of the MA **characteristic polynomial** given by [invertible]{.column-margin}\n\n$$\n\\Theta(u) = 1 + \\theta_1 u + \\dots + \\theta_q u^q,\n$$\n\nlie outside the unit circle.\n\nNote that $\\Phi(B) y_t = \\Theta(B) \\varepsilon_t$.\n\nWhen an ARMA process is **stable**, it can be written as an infinite order moving average process.\n\nWhen an ARMA process is **invertible**, it can be written as an infinite order autoregressive process.\n\nAn autoregressive integrated moving average process with orders $p$, $d$, and $q$ is a process that can be written as\n\n$$\n(1 - B)^d y_t = \\sum_{i=1}^{p} \\phi_i y_{t-i} + \\sum_{j=1}^{q} \\theta_j \\varepsilon_{t-j} + \\varepsilon_t,\n$$\n\nin other words, $y_t$ follows an ARIMA(p, d, q) if the $d$ difference of $y_t$ follows an ARMA(p, q).\n\nEstimation in ARIMA processes can be done via *least squares*, *maximum likelihood*, and also *in a Bayesian way*. We will not discuss Bayesian estimation of ARIMA processes in this course.\n\n#### Spectral Density of ARMA Processes\n\nFor a given AR(p) process with AR coefficients $\\phi_1, \\dots, \\phi_p$ and variance $v$, we can obtain its **spectral density** as\n\n$$\nf(\\omega) = \\frac{v}{2\\pi |\\Phi(e^{-i\\omega})|^2} = \\frac{v}{2\\pi |1 - \\phi_1 e^{-i\\omega} - \\dots - \\phi_p e^{-ip\\omega}|^2},\n$$\n\nwith $\\omega$ a frequency in $(0, \\pi)$.\n\nThe spectral density provides a frequency-domain representation of the process that is appealing because of its interpretability.\n\nFor instance, an AR(2) process that has one pair of complex-valued reciprocal roots with modulus 0.7 and a period of $\\lambda = 12$, will show a mode in the spectral density located at a frequency of $2\\pi/12$. If we keep the period of the process at the same value of 12 but increase its modulus to 0.95, the spectral density will continue to show a mode at $2\\pi/12$, but the value of $f(2\\pi/12)$ will be higher, indicating a more persistent *quasi-periodic* behavior.\n\nSimilarly, we can obtain the spectral density of an ARMA process with AR characteristic polynomial $\\Phi(u) = 1 - \\phi_1 u - \\ldots - \\phi_p u^p$ and MA characteristic polynomial $\\Theta(u) = 1 + \\theta_1 u + \\ldots + \\theta_q u^q$, and variance $v$ as\n\n$$\nf(\\omega) = \\frac{v}{2\\pi} \\frac{|\\Theta(e^{-i\\omega})|^2}{|\\Phi(e^{-i\\omega})|^2}.\n$$\n\nNote that if we have posterior estimates or posterior samples of the AR/ARMA coefficients and the variance $v$, we can obtain samples from the spectral density of AR/ARMA processes using the equations above.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}