{
  "hash": "cb2ac0e7aa6e1248d7d195a88fa6e6b7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Initial setup\njupyter: python3\n---\n\n::: {#26302b54 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=1}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom torch import tensor,nn\nimport torch.nn.functional as F\n```\n:::\n\n\n::: {#f07e4610 .cell execution_count=2}\n``` {.python .cell-code}\nfrom fastcore.test import test_close\n\ntorch.set_printoptions(precision=2, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray'\n\npath_data = Path('data')\npath_gz = path_data/'mnist.pkl.gz'\nwith gzip.open(path_gz, 'rb') as f: ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding='latin-1')\nx_train, y_train, x_valid, y_valid = map(tensor, [x_train, y_train, x_valid, y_valid])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">test</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> test_close\n<span class=\"ansi-green-fg ansi-bold\">      3</span> torch<span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n### Data\n\n::: {#55fdf750 .cell execution_count=3}\n``` {.python .cell-code}\nn,m = x_train.shape\nc = y_train.max()+1\nnh = 50\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> n,m <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_train</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n<span class=\"ansi-green-fg ansi-bold\">      2</span> c <span style=\"color:rgb(98,98,98)\">=</span> y_train<span style=\"color:rgb(98,98,98)\">.</span>max()<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> nh <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">50</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7a703e25 .cell execution_count=4}\n``` {.python .cell-code}\nclass Model(nn.Module):\n    def __init__(self, n_in, nh, n_out):\n        super().__init__()\n        self.layers = [nn.Linear(n_in,nh), nn.ReLU(), nn.Linear(nh,n_out)]\n        \n    def __call__(self, x):\n        for l in self.layers: x = l(x)\n        return x\n```\n:::\n\n\n::: {#6c5c06ed .cell execution_count=5}\n``` {.python .cell-code}\nmodel = Model(m, nh, 10)\npred = model(x_train)\npred.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> Model(<span class=\"ansi-yellow-bg\">m</span>, nh, <span style=\"color:rgb(98,98,98)\">10</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> pred <span style=\"color:rgb(98,98,98)\">=</span> model(x_train)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> pred<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Cross entropy loss\n\nFirst, we will need to compute the softmax of our activations. This is defined by:\n\n$$\\hbox{softmax(x)}_{i} = \\frac{e^{x_{i}}}{e^{x_{0}} + e^{x_{1}} + \\cdots + e^{x_{n-1}}}$$\n\nor more concisely:\n\n$$\\hbox{softmax(x)}_{i} = \\frac{e^{x_{i}}}{\\sum\\limits_{0 \\leq j \\lt n} e^{x_{j}}}$$ \n\nIn practice, we will need the log of the softmax when we calculate the loss.\n\n::: {#980d25cb .cell execution_count=6}\n``` {.python .cell-code}\ndef log_softmax(x): return (x.exp()/(x.exp().sum(-1,keepdim=True))).log()\n```\n:::\n\n\n::: {#43723f8d .cell execution_count=7}\n``` {.python .cell-code}\nlog_softmax(pred)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> log_softmax(<span class=\"ansi-yellow-bg\">pred</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pred' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNote that the formula \n\n$$\\log \\left ( \\frac{a}{b} \\right ) = \\log(a) - \\log(b)$$ \n\ngives a simplification when we compute the log softmax:\n\n::: {#d66e9d0a .cell execution_count=8}\n``` {.python .cell-code}\ndef log_softmax(x): return x - x.exp().sum(-1,keepdim=True).log()\n```\n:::\n\n\nThen, there is a way to compute the log of the sum of exponentials in a more stable way, called the [LogSumExp trick](https://en.wikipedia.org/wiki/LogSumExp). The idea is to use the following formula:\n\n$$\\log \\left ( \\sum_{j=1}^{n} e^{x_{j}} \\right ) = \\log \\left ( e^{a} \\sum_{j=1}^{n} e^{x_{j}-a} \\right ) = a + \\log \\left ( \\sum_{j=1}^{n} e^{x_{j}-a} \\right )$$\n\nwhere a is the maximum of the $x_{j}$.\n\n::: {#ab5d04ab .cell execution_count=9}\n``` {.python .cell-code}\ndef logsumexp(x):\n    m = x.max(-1)[0]\n    return m + (x-m[:,None]).exp().sum(-1).log()\n```\n:::\n\n\nThis way, we will avoid an overflow when taking the exponential of a big activation. In PyTorch, this is already implemented for us. \n\n::: {#dc57ba7b .cell execution_count=10}\n``` {.python .cell-code}\ndef log_softmax(x): return x - x.logsumexp(-1,keepdim=True)\n```\n:::\n\n\n::: {#3bbdc574 .cell execution_count=11}\n``` {.python .cell-code}\ntest_close(logsumexp(pred), pred.logsumexp(-1))\nsm_pred = log_softmax(pred)\nsm_pred\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">test_close</span>(logsumexp(pred), pred<span style=\"color:rgb(98,98,98)\">.</span>logsumexp(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> sm_pred <span style=\"color:rgb(98,98,98)\">=</span> log_softmax(pred)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sm_pred\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'test_close' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe cross entropy loss for some target $x$ and some prediction $p(x)$ is given by:\n\n$$ -\\sum x\\, \\log p(x) $$\n\nBut since our $x$s are 1-hot encoded (actually, they're just the integer indices), this can be rewritten as $-\\log(p_{i})$ where i is the index of the desired target.\n\nThis can be done using numpy-style [integer array indexing](https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.indexing.html#integer-array-indexing). Note that PyTorch supports all the tricks in the advanced indexing methods discussed in that link.\n\n::: {#4321f853 .cell execution_count=12}\n``` {.python .cell-code}\ny_train[:3]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">y_train</span>[:<span style=\"color:rgb(98,98,98)\">3</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'y_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6a86bfc9 .cell execution_count=13}\n``` {.python .cell-code}\nsm_pred[0,5],sm_pred[1,0],sm_pred[2,4]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sm_pred</span>[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">5</span>],sm_pred[<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">0</span>],sm_pred[<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">4</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sm_pred' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#345f82ef .cell execution_count=14}\n``` {.python .cell-code}\nsm_pred[[0,1,2], y_train[:3]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sm_pred</span>[[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>], y_train[:<span style=\"color:rgb(98,98,98)\">3</span>]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sm_pred' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a83eb1b0 .cell execution_count=15}\n``` {.python .cell-code}\ndef nll(input, target): return -input[range(target.shape[0]), target].mean()\n```\n:::\n\n\n::: {#8effd26a .cell execution_count=16}\n``` {.python .cell-code}\nloss = nll(sm_pred, y_train)\nloss\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> loss <span style=\"color:rgb(98,98,98)\">=</span> nll(<span class=\"ansi-yellow-bg\">sm_pred</span>, y_train)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> loss\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sm_pred' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThen use PyTorch's implementation.\n\n::: {#af250775 .cell execution_count=17}\n``` {.python .cell-code}\ntest_close(F.nll_loss(F.log_softmax(pred, -1), y_train), loss, 1e-3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">test_close</span>(F<span style=\"color:rgb(98,98,98)\">.</span>nll_loss(F<span style=\"color:rgb(98,98,98)\">.</span>log_softmax(pred, <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>), y_train), loss, <span style=\"color:rgb(98,98,98)\">1e-3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'test_close' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nIn PyTorch, `F.log_softmax` and `F.nll_loss` are combined in one optimized function, `F.cross_entropy`.\n\n::: {#7048073c .cell execution_count=18}\n``` {.python .cell-code}\ntest_close(F.cross_entropy(pred, y_train), loss, 1e-3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">test_close</span>(F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy(pred, y_train), loss, <span style=\"color:rgb(98,98,98)\">1e-3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'test_close' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Basic training loop\n\nBasically the training loop repeats over the following steps:\n- get the output of the model on a batch of inputs\n- compare the output to the labels we have and compute a loss\n- calculate the gradients of the loss with respect to every parameter of the model\n- update said parameters with those gradients to make them a little bit better\n\n::: {#91bfd096 .cell execution_count=19}\n``` {.python .cell-code}\nloss_func = F.cross_entropy\n```\n:::\n\n\n::: {#b73d6b2a .cell execution_count=20}\n``` {.python .cell-code}\nbs=50                  # batch size\n\nxb = x_train[0:bs]     # a mini-batch from x\npreds = model(xb)      # predictions\npreds[0], preds.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> bs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">50</span>                  <span style=\"font-style:italic;color:rgb(95,135,135)\"># batch size</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> xb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_train</span>[<span style=\"color:rgb(98,98,98)\">0</span>:bs]     <span style=\"font-style:italic;color:rgb(95,135,135)\"># a mini-batch from x</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> preds <span style=\"color:rgb(98,98,98)\">=</span> model(xb)      <span style=\"font-style:italic;color:rgb(95,135,135)\"># predictions</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> preds[<span style=\"color:rgb(98,98,98)\">0</span>], preds<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1ea34825 .cell execution_count=21}\n``` {.python .cell-code}\nyb = y_train[0:bs]\nyb\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> yb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">y_train</span>[<span style=\"color:rgb(98,98,98)\">0</span>:bs]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> yb\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'y_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8eded3a2 .cell execution_count=22}\n``` {.python .cell-code}\nloss_func(preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> loss_func(<span class=\"ansi-yellow-bg\">preds</span>, yb)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'preds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#57fe0aca .cell execution_count=23}\n``` {.python .cell-code}\npreds.argmax(dim=1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">preds</span><span style=\"color:rgb(98,98,98)\">.</span>argmax(dim<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'preds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c626b62b .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=24}\n``` {.python .cell-code}\ndef accuracy(out, yb): return (out.argmax(dim=1)==yb).float().mean()\n```\n:::\n\n\n::: {#e195dfea .cell execution_count=25}\n``` {.python .cell-code}\naccuracy(preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> accuracy(<span class=\"ansi-yellow-bg\">preds</span>, yb)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'preds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d63f1571 .cell execution_count=26}\n``` {.python .cell-code}\nlr = 0.5   # learning rate\nepochs = 3 # how many epochs to train for\n```\n:::\n\n\n::: {#5a14e0ac .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=27}\n``` {.python .cell-code}\ndef report(loss, preds, yb): print(f'{loss:.2f}, {accuracy(preds, yb):.2f}')\n```\n:::\n\n\n::: {#d4aca8a4 .cell execution_count=28}\n``` {.python .cell-code}\nxb,yb = x_train[:bs],y_train[:bs]\npreds = model(xb)\nreport(loss_func(preds, yb), preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_train</span>[:bs],y_train[:bs]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> preds <span style=\"color:rgb(98,98,98)\">=</span> model(xb)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> report(loss_func(preds, yb), preds, yb)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#240fcc4b .cell execution_count=29}\n``` {.python .cell-code}\nfor epoch in range(epochs):\n    for i in range(0, n, bs):\n        s = slice(i, min(n,i+bs))\n        xb,yb = x_train[s],y_train[s]\n        preds = model(xb)\n        loss = loss_func(preds, yb)\n        loss.backward()\n        with torch.no_grad():\n            for l in model.layers:\n                if hasattr(l, 'weight'):\n                    l.weight -= l.weight.grad * lr\n                    l.bias   -= l.bias.grad   * lr\n                    l.weight.grad.zero_()\n                    l.bias  .grad.zero_()\n    report(loss, preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         s <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">slice</span>(i, <span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs))\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         xb,yb <span style=\"color:rgb(98,98,98)\">=</span> x_train[s],y_train[s]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Using parameters and optim\n\n### Parameters\n\n::: {#8e56372a .cell execution_count=30}\n``` {.python .cell-code}\nm1 = nn.Module()\nm1.foo = nn.Linear(3,4)\nm1\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nModule(\n  (foo): Linear(in_features=3, out_features=4, bias=True)\n)\n```\n:::\n:::\n\n\n::: {#5696043d .cell execution_count=31}\n``` {.python .cell-code}\nlist(m1.named_children())\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n[('foo', Linear(in_features=3, out_features=4, bias=True))]\n```\n:::\n:::\n\n\n::: {#cbd97e3f .cell execution_count=32}\n``` {.python .cell-code}\nm1.named_children()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n<generator object Module.named_children at 0x7732c1d5f990>\n```\n:::\n:::\n\n\n::: {#2d93f069 .cell execution_count=33}\n``` {.python .cell-code}\nlist(m1.parameters())\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n[Parameter containing:\n tensor([[-0.2386,  0.0236,  0.4589],\n         [-0.0380,  0.1161,  0.2450],\n         [-0.5343, -0.2889, -0.1975],\n         [ 0.4975,  0.3389, -0.0459]], requires_grad=True),\n Parameter containing:\n tensor([-0.2770,  0.3195,  0.1690, -0.3518], requires_grad=True)]\n```\n:::\n:::\n\n\n::: {#58e25693 .cell execution_count=34}\n``` {.python .cell-code}\nclass MLP(nn.Module):\n    def __init__(self, n_in, nh, n_out):\n        super().__init__()\n        self.l1 = nn.Linear(n_in,nh)\n        self.l2 = nn.Linear(nh,n_out)\n        self.relu = nn.ReLU()\n        \n    def forward(self, x): return self.l2(self.relu(self.l1(x)))\n```\n:::\n\n\n::: {#80b56320 .cell execution_count=35}\n``` {.python .cell-code}\nmodel = MLP(m, nh, 10)\nmodel.l1\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> MLP(<span class=\"ansi-yellow-bg\">m</span>, nh, <span style=\"color:rgb(98,98,98)\">10</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model<span style=\"color:rgb(98,98,98)\">.</span>l1\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#408a4857 .cell execution_count=36}\n``` {.python .cell-code}\nmodel\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">model</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#59b9ed67 .cell execution_count=37}\n``` {.python .cell-code}\nfor name,l in model.named_children(): print(f\"{name}: {l}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> name,l <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>named_children(): <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>name<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>l<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d8848cb9 .cell execution_count=38}\n``` {.python .cell-code}\nfor p in model.parameters(): print(p.shape)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>parameters(): <span style=\"color:rgb(0,135,0)\">print</span>(p<span style=\"color:rgb(98,98,98)\">.</span>shape)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f8d72bcb .cell execution_count=39}\n``` {.python .cell-code}\ndef fit():\n    for epoch in range(epochs):\n        for i in range(0, n, bs):\n            s = slice(i, min(n,i+bs))\n            xb,yb = x_train[s],y_train[s]\n            preds = model(xb)\n            loss = loss_func(preds, yb)\n            loss.backward()\n            with torch.no_grad():\n                for p in model.parameters(): p -= p.grad * lr\n                model.zero_grad()\n        report(loss, preds, yb)\n```\n:::\n\n\n::: {#b5720433 .cell execution_count=40}\n``` {.python .cell-code}\nfit()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">fit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[39], line 3</span>, in <span class=\"ansi-cyan-fg\">fit</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">fit</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>             s <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">slice</span>(i, <span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>             xb,yb <span style=\"color:rgb(98,98,98)\">=</span> x_train[s],y_train[s]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nBehind the scenes, PyTorch overrides the `__setattr__` function in `nn.Module` so that the submodules you define are properly registered as parameters of the model.\n\n::: {#e0bcd3c9 .cell execution_count=41}\n``` {.python .cell-code}\nclass MyModule:\n    def __init__(self, n_in, nh, n_out):\n        self._modules = {}\n        self.l1 = nn.Linear(n_in,nh)\n        self.l2 = nn.Linear(nh,n_out)\n\n    def __setattr__(self,k,v):\n        if not k.startswith(\"_\"): self._modules[k] = v\n        super().__setattr__(k,v)\n\n    def __repr__(self): return f'{self._modules}'\n    \n    def parameters(self):\n        for l in self._modules.values(): yield from l.parameters()\n```\n:::\n\n\n::: {#264b4757 .cell execution_count=42}\n``` {.python .cell-code}\nmdl = MyModule(m,nh,10)\nmdl\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> mdl <span style=\"color:rgb(98,98,98)\">=</span> MyModule(<span class=\"ansi-yellow-bg\">m</span>,nh,<span style=\"color:rgb(98,98,98)\">10</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> mdl\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b8217b4e .cell execution_count=43}\n``` {.python .cell-code}\nfor p in mdl.parameters(): print(p.shape)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> mdl<span style=\"color:rgb(98,98,98)\">.</span>parameters(): <span style=\"color:rgb(0,135,0)\">print</span>(p<span style=\"color:rgb(98,98,98)\">.</span>shape)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'mdl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Registering modules\n\n::: {#2d69d754 .cell execution_count=44}\n``` {.python .cell-code}\nfrom functools import reduce\n```\n:::\n\n\nWe can use the original `layers` approach, but we have to register the modules.\n\n::: {#1e23e096 .cell execution_count=45}\n``` {.python .cell-code}\nlayers = [nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10)]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> layers <span style=\"color:rgb(98,98,98)\">=</span> [nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#60799100 .cell execution_count=46}\n``` {.python .cell-code}\nclass Model(nn.Module):\n    def __init__(self, layers):\n        super().__init__()\n        self.layers = layers\n        for i,l in enumerate(self.layers): self.add_module(f'layer_{i}', l)\n\n    def forward(self, x): return reduce(lambda val,layer: layer(val), self.layers, x)\n```\n:::\n\n\n::: {#3d5d1ed1 .cell execution_count=47}\n``` {.python .cell-code}\nmodel = Model(layers)\nmodel\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> Model(<span class=\"ansi-yellow-bg\">layers</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'layers' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#355a197e .cell execution_count=48}\n``` {.python .cell-code}\nmodel(xb).shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">model</span>(xb)<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### nn.ModuleList\n\n`nn.ModuleList` does this for us.\n\n::: {#876b0bf5 .cell execution_count=49}\n``` {.python .cell-code}\nclass SequentialModel(nn.Module):\n    def __init__(self, layers):\n        super().__init__()\n        self.layers = nn.ModuleList(layers)\n        \n    def forward(self, x):\n        for l in self.layers: x = l(x)\n        return x\n```\n:::\n\n\n::: {#ccdfe8ea .cell execution_count=50}\n``` {.python .cell-code}\nmodel = SequentialModel(layers)\nmodel\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> SequentialModel(<span class=\"ansi-yellow-bg\">layers</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'layers' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#41d16c82 .cell execution_count=51}\n``` {.python .cell-code}\nfit()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">fit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[39], line 3</span>, in <span class=\"ansi-cyan-fg\">fit</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">fit</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>             s <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">slice</span>(i, <span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>             xb,yb <span style=\"color:rgb(98,98,98)\">=</span> x_train[s],y_train[s]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### nn.Sequential\n\n`nn.Sequential` is a convenient class which does the same as the above:\n\n::: {#ff3a0758 .cell execution_count=52}\n``` {.python .cell-code}\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bb0389b7 .cell execution_count=53}\n``` {.python .cell-code}\nfit()\nloss_func(model(xb), yb), accuracy(model(xb), yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[53], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">fit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> loss_func(model(xb), yb), accuracy(model(xb), yb)\n\nCell <span class=\"ansi-green-fg\">In[39], line 3</span>, in <span class=\"ansi-cyan-fg\">fit</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">fit</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>             s <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">slice</span>(i, <span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>             xb,yb <span style=\"color:rgb(98,98,98)\">=</span> x_train[s],y_train[s]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ee7b05cf .cell execution_count=54}\n``` {.python .cell-code}\nmodel\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">model</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### optim\n\n::: {#25dbed95 .cell execution_count=55}\n``` {.python .cell-code}\nclass Optimizer():\n    def __init__(self, params, lr=0.5): self.params,self.lr=list(params),lr\n\n    def step(self):\n        with torch.no_grad():\n            for p in self.params: p -= p.grad * self.lr\n\n    def zero_grad(self):\n        for p in self.params: p.grad.data.zero_()\n```\n:::\n\n\n::: {#462be20a .cell execution_count=56}\n``` {.python .cell-code}\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e5982894 .cell execution_count=57}\n``` {.python .cell-code}\nopt = Optimizer(model.parameters())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> opt <span style=\"color:rgb(98,98,98)\">=</span> Optimizer(<span class=\"ansi-yellow-bg\">model</span><span style=\"color:rgb(98,98,98)\">.</span>parameters())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4942a171 .cell execution_count=58}\n``` {.python .cell-code}\nfor epoch in range(epochs):\n    for i in range(0, n, bs):\n        s = slice(i, min(n,i+bs))\n        xb,yb = x_train[s],y_train[s]\n        preds = model(xb)\n        loss = loss_func(preds, yb)\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n    report(loss, preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         s <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">slice</span>(i, <span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs))\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         xb,yb <span style=\"color:rgb(98,98,98)\">=</span> x_train[s],y_train[s]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nPyTorch already provides this exact functionality in `optim.SGD` (it also handles stuff like momentum, which we'll look at later)\n\n::: {#d861fe37 .cell execution_count=59}\n``` {.python .cell-code}\nfrom torch import optim\n```\n:::\n\n\n::: {#52d467d4 .cell execution_count=60}\n``` {.python .cell-code}\ndef get_model():\n    model = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n    return model, optim.SGD(model.parameters(), lr=lr)\n```\n:::\n\n\n::: {#e984186b .cell execution_count=61}\n``` {.python .cell-code}\nmodel,opt = get_model()\nloss_func(model(xb), yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[61], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> loss_func(model(xb), yb)\n\nCell <span class=\"ansi-green-fg\">In[60], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> model, optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(model<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c1123c65 .cell execution_count=62}\n``` {.python .cell-code}\nfor epoch in range(epochs):\n    for i in range(0, n, bs):\n        s = slice(i, min(n,i+bs))\n        xb,yb = x_train[s],y_train[s]\n        preds = model(xb)\n        loss = loss_func(preds, yb)\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n    report(loss, preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[62], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         s <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">slice</span>(i, <span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs))\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         xb,yb <span style=\"color:rgb(98,98,98)\">=</span> x_train[s],y_train[s]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Dataset and DataLoader\n\n### Dataset\n\nIt's clunky to iterate through minibatches of x and y values separately:\n\n```python\n    xb = x_train[s]\n    yb = y_train[s]\n```\n\nInstead, let's do these two steps together, by introducing a `Dataset` class:\n\n```python\n    xb,yb = train_ds[s]\n```\n\n::: {#01c4e6d3 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=63}\n``` {.python .cell-code}\nclass Dataset():\n    def __init__(self, x, y): self.x,self.y = x,y\n    def __len__(self): return len(self.x)\n    def __getitem__(self, i): return self.x[i],self.y[i]\n```\n:::\n\n\n::: {#c679c8f8 .cell execution_count=64}\n``` {.python .cell-code}\ntrain_ds,valid_ds = Dataset(x_train, y_train),Dataset(x_valid, y_valid)\nassert len(train_ds)==len(x_train)\nassert len(valid_ds)==len(x_valid)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[64], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_ds,valid_ds <span style=\"color:rgb(98,98,98)\">=</span> Dataset(<span class=\"ansi-yellow-bg\">x_train</span>, y_train),Dataset(x_valid, y_valid)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">len</span>(train_ds)<span style=\"color:rgb(98,98,98)\">==</span><span style=\"color:rgb(0,135,0)\">len</span>(x_train)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">len</span>(valid_ds)<span style=\"color:rgb(98,98,98)\">==</span><span style=\"color:rgb(0,135,0)\">len</span>(x_valid)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5b082119 .cell execution_count=65}\n``` {.python .cell-code}\nxb,yb = train_ds[0:5]\nassert xb.shape==(5,28*28)\nassert yb.shape==(5,)\nxb,yb\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[65], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">train_ds</span>[<span style=\"color:rgb(98,98,98)\">0</span>:<span style=\"color:rgb(98,98,98)\">5</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> xb<span style=\"color:rgb(98,98,98)\">.</span>shape<span style=\"color:rgb(98,98,98)\">==</span>(<span style=\"color:rgb(98,98,98)\">5</span>,<span style=\"color:rgb(98,98,98)\">28</span><span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">28</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> yb<span style=\"color:rgb(98,98,98)\">.</span>shape<span style=\"color:rgb(98,98,98)\">==</span>(<span style=\"color:rgb(98,98,98)\">5</span>,)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#21d429a5 .cell execution_count=66}\n``` {.python .cell-code}\nmodel,opt = get_model()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[66], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[60], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> model, optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(model<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d6505767 .cell execution_count=67}\n``` {.python .cell-code}\nfor epoch in range(epochs):\n    for i in range(0, n, bs):\n        xb,yb = train_ds[i:min(n,i+bs)]\n        preds = model(xb)\n        loss = loss_func(preds, yb)\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n    report(loss, preds, yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[67], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">0</span>, <span class=\"ansi-yellow-bg\">n</span>, bs):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         xb,yb <span style=\"color:rgb(98,98,98)\">=</span> train_ds[i:<span style=\"color:rgb(0,135,0)\">min</span>(n,i<span style=\"color:rgb(98,98,98)\">+</span>bs)]\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         preds <span style=\"color:rgb(98,98,98)\">=</span> model(xb)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'n' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### DataLoader\n\nPreviously, our loop iterated over batches (xb, yb) like this:\n\n```python\nfor i in range(0, n, bs):\n    xb,yb = train_ds[i:min(n,i+bs)]\n    ...\n```\n\nLet's make our loop much cleaner, using a data loader:\n\n```python\nfor xb,yb in train_dl:\n    ...\n```\n\n::: {#3bb3241c .cell execution_count=68}\n``` {.python .cell-code}\nclass DataLoader():\n    def __init__(self, ds, bs): self.ds,self.bs = ds,bs\n    def __iter__(self):\n        for i in range(0, len(self.ds), self.bs): yield self.ds[i:i+self.bs]\n```\n:::\n\n\n::: {#2bd1ca70 .cell execution_count=69}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, bs)\nvalid_dl = DataLoader(valid_ds, bs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[69], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, bs)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(valid_ds, bs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#20af5258 .cell execution_count=70}\n``` {.python .cell-code}\nxb,yb = next(iter(valid_dl))\nxb.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[70], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">valid_dl</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xb<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'valid_dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8eafdd16 .cell execution_count=71}\n``` {.python .cell-code}\nyb\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[71], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">yb</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'yb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#adfa798c .cell execution_count=72}\n``` {.python .cell-code}\nplt.imshow(xb[0].view(28,28))\nyb[0]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[72], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> plt<span style=\"color:rgb(98,98,98)\">.</span>imshow(<span class=\"ansi-yellow-bg\">xb</span>[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">28</span>,<span style=\"color:rgb(98,98,98)\">28</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> yb[<span style=\"color:rgb(98,98,98)\">0</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8f0c7910 .cell execution_count=73}\n``` {.python .cell-code}\nmodel,opt = get_model()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[73], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[60], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> model, optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(model<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6e2beb69 .cell execution_count=74}\n``` {.python .cell-code}\ndef fit():\n    for epoch in range(epochs):\n        for xb,yb in train_dl:\n            preds = model(xb)\n            loss = loss_func(preds, yb)\n            loss.backward()\n            opt.step()\n            opt.zero_grad()\n        report(loss, preds, yb)\n```\n:::\n\n\n::: {#2987a001 .cell execution_count=75}\n``` {.python .cell-code}\nfit()\nloss_func(model(xb), yb), accuracy(model(xb), yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[75], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">fit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> loss_func(model(xb), yb), accuracy(model(xb), yb)\n\nCell <span class=\"ansi-green-fg\">In[74], line 3</span>, in <span class=\"ansi-cyan-fg\">fit</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">fit</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> xb,yb <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">train_dl</span>:\n<span class=\"ansi-green-fg ansi-bold\">      4</span>             preds <span style=\"color:rgb(98,98,98)\">=</span> model(xb)\n<span class=\"ansi-green-fg ansi-bold\">      5</span>             loss <span style=\"color:rgb(98,98,98)\">=</span> loss_func(preds, yb)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Random sampling\n\nWe want our training set to be in a random order, and that order should differ each iteration. But the validation set shouldn't be randomized.\n\n::: {#061e11cd .cell execution_count=76}\n``` {.python .cell-code}\nimport random\n```\n:::\n\n\n::: {#3fbfe106 .cell execution_count=77}\n``` {.python .cell-code}\nclass Sampler():\n    def __init__(self, ds, shuffle=False): self.n,self.shuffle = len(ds),shuffle\n    def __iter__(self):\n        res = list(range(self.n))\n        if self.shuffle: random.shuffle(res)\n        return iter(res)\n```\n:::\n\n\n::: {#1245a530 .cell execution_count=78}\n``` {.python .cell-code}\nfrom itertools import islice\n```\n:::\n\n\n::: {#74469c51 .cell execution_count=79}\n``` {.python .cell-code}\nss = Sampler(train_ds)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[79], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ss <span style=\"color:rgb(98,98,98)\">=</span> Sampler(<span class=\"ansi-yellow-bg\">train_ds</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#318a7492 .cell execution_count=80}\n``` {.python .cell-code}\nit = iter(ss)\nfor o in range(5): print(next(it))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[80], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> it <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">ss</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">5</span>): <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(0,135,0)\">next</span>(it))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ss' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#459578c8 .cell execution_count=81}\n``` {.python .cell-code}\nlist(islice(ss, 5))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[81], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">list</span>(islice(<span class=\"ansi-yellow-bg\">ss</span>, <span style=\"color:rgb(98,98,98)\">5</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ss' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8f50f351 .cell execution_count=82}\n``` {.python .cell-code}\nss = Sampler(train_ds, shuffle=True)\nlist(islice(ss, 5))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[82], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ss <span style=\"color:rgb(98,98,98)\">=</span> Sampler(<span class=\"ansi-yellow-bg\">train_ds</span>, shuffle<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">list</span>(islice(ss, <span style=\"color:rgb(98,98,98)\">5</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#901cc52b .cell execution_count=83}\n``` {.python .cell-code}\nimport fastcore.all as fc\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[83], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1a7c9421 .cell execution_count=84}\n``` {.python .cell-code}\nclass BatchSampler():\n    def __init__(self, sampler, bs, drop_last=False): fc.store_attr()\n    def __iter__(self): yield from fc.chunked(iter(self.sampler), self.bs, drop_last=self.drop_last)\n```\n:::\n\n\n::: {#e081a604 .cell execution_count=85}\n``` {.python .cell-code}\nbatchs = BatchSampler(ss, 4)\nlist(islice(batchs, 5))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[85], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> batchs <span style=\"color:rgb(98,98,98)\">=</span> BatchSampler(<span class=\"ansi-yellow-bg\">ss</span>, <span style=\"color:rgb(98,98,98)\">4</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">list</span>(islice(batchs, <span style=\"color:rgb(98,98,98)\">5</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ss' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f6b8a136 .cell execution_count=86}\n``` {.python .cell-code}\ndef collate(b):\n    xs,ys = zip(*b)\n    return torch.stack(xs),torch.stack(ys)\n```\n:::\n\n\n::: {#221f5396 .cell execution_count=87}\n``` {.python .cell-code}\nclass DataLoader():\n    def __init__(self, ds, batchs, collate_fn=collate): fc.store_attr()\n    def __iter__(self): yield from (self.collate_fn(self.ds[i] for i in b) for b in self.batchs)\n```\n:::\n\n\n::: {#d6722ce4 .cell execution_count=88}\n``` {.python .cell-code}\ntrain_samp = BatchSampler(Sampler(train_ds, shuffle=True ), bs)\nvalid_samp = BatchSampler(Sampler(valid_ds, shuffle=False), bs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[88], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_samp <span style=\"color:rgb(98,98,98)\">=</span> BatchSampler(Sampler(<span class=\"ansi-yellow-bg\">train_ds</span>, shuffle<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span> ), bs)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_samp <span style=\"color:rgb(98,98,98)\">=</span> BatchSampler(Sampler(valid_ds, shuffle<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>), bs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0d2cf555 .cell execution_count=89}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, batchs=train_samp)\nvalid_dl = DataLoader(valid_ds, batchs=valid_samp)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[89], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, batchs<span style=\"color:rgb(98,98,98)\">=</span>train_samp)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(valid_ds, batchs<span style=\"color:rgb(98,98,98)\">=</span>valid_samp)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9d5c96da .cell execution_count=90}\n``` {.python .cell-code}\nxb,yb = next(iter(valid_dl))\nplt.imshow(xb[0].view(28,28))\nyb[0]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[90], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">valid_dl</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> plt<span style=\"color:rgb(98,98,98)\">.</span>imshow(xb[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">28</span>,<span style=\"color:rgb(98,98,98)\">28</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> yb[<span style=\"color:rgb(98,98,98)\">0</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'valid_dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#89d94696 .cell execution_count=91}\n``` {.python .cell-code}\nxb.shape,yb.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[91], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">xb</span><span style=\"color:rgb(98,98,98)\">.</span>shape,yb<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#76aa573b .cell execution_count=92}\n``` {.python .cell-code}\nmodel,opt = get_model()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[92], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[60], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> model, optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(model<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ac3a6ab3 .cell execution_count=93}\n``` {.python .cell-code}\nfit()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[93], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">fit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[74], line 3</span>, in <span class=\"ansi-cyan-fg\">fit</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">fit</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> epoch <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(epochs):\n<span class=\"ansi-green-fg\">----&gt; 3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> xb,yb <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">train_dl</span>:\n<span class=\"ansi-green-fg ansi-bold\">      4</span>             preds <span style=\"color:rgb(98,98,98)\">=</span> model(xb)\n<span class=\"ansi-green-fg ansi-bold\">      5</span>             loss <span style=\"color:rgb(98,98,98)\">=</span> loss_func(preds, yb)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Multiprocessing DataLoader\n\n::: {#02d6a960 .cell execution_count=94}\n``` {.python .cell-code}\nimport torch.multiprocessing as mp\nfrom fastcore.basics import store_attr\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[94], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">multiprocessing</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mp</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">basics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> store_attr\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5d1c31c7 .cell execution_count=95}\n``` {.python .cell-code}\ntrain_ds[[3,6,8,1]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[95], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">train_ds</span>[[<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">6</span>,<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">1</span>]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7d583355 .cell execution_count=96}\n``` {.python .cell-code}\ntrain_ds.__getitem__([3,6,8,1])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[96], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">train_ds</span><span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__getitem__</span>([<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">6</span>,<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">1</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f456614c .cell execution_count=97}\n``` {.python .cell-code}\nfor o in map(train_ds.__getitem__, ([3,6],[8,1])): print(o)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[97], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">map</span>(train_ds<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__getitem__</span>, ([<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">6</span>],[<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">1</span>])): <span style=\"color:rgb(0,135,0)\">print</span>(o)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7c21eb01 .cell execution_count=98}\n``` {.python .cell-code}\nclass DataLoader():\n    def __init__(self, ds, batchs, n_workers=1, collate_fn=collate): fc.store_attr()\n    def __iter__(self):\n        with mp.Pool(self.n_workers) as ex: yield from ex.map(self.ds.__getitem__, iter(self.batchs))\n```\n:::\n\n\n::: {#70c72e38 .cell execution_count=99}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, batchs=train_samp, n_workers=2)\nit = iter(train_dl)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[99], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, batchs<span style=\"color:rgb(98,98,98)\">=</span>train_samp, n_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> it <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">iter</span>(train_dl)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#61c6aba9 .cell execution_count=100}\n``` {.python .cell-code}\nxb,yb = next(it)\nxb.shape,yb.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[100], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span class=\"ansi-yellow-bg\">it</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xb<span style=\"color:rgb(98,98,98)\">.</span>shape,yb<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'it' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### PyTorch DataLoader\n\n::: {#4c220d65 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=101}\n``` {.python .cell-code}\nfrom torch.utils.data import DataLoader, SequentialSampler, RandomSampler, BatchSampler\n```\n:::\n\n\n::: {#e84adda1 .cell execution_count=102}\n``` {.python .cell-code}\ntrain_samp = BatchSampler(RandomSampler(train_ds),     bs, drop_last=False)\nvalid_samp = BatchSampler(SequentialSampler(valid_ds), bs, drop_last=False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[102], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_samp <span style=\"color:rgb(98,98,98)\">=</span> BatchSampler(RandomSampler(<span class=\"ansi-yellow-bg\">train_ds</span>),     bs, drop_last<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_samp <span style=\"color:rgb(98,98,98)\">=</span> BatchSampler(SequentialSampler(valid_ds), bs, drop_last<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#84ca210f .cell execution_count=103}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, batch_sampler=train_samp, collate_fn=collate)\nvalid_dl = DataLoader(valid_ds, batch_sampler=valid_samp, collate_fn=collate)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[103], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, batch_sampler<span style=\"color:rgb(98,98,98)\">=</span>train_samp, collate_fn<span style=\"color:rgb(98,98,98)\">=</span>collate)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(valid_ds, batch_sampler<span style=\"color:rgb(98,98,98)\">=</span>valid_samp, collate_fn<span style=\"color:rgb(98,98,98)\">=</span>collate)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#25a87fd7 .cell execution_count=104}\n``` {.python .cell-code}\nmodel,opt = get_model()\nfit()\nloss_func(model(xb), yb), accuracy(model(xb), yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[104], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> fit()\n<span class=\"ansi-green-fg ansi-bold\">      3</span> loss_func(model(xb), yb), accuracy(model(xb), yb)\n\nCell <span class=\"ansi-green-fg\">In[60], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> model, optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(model<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nPyTorch can auto-generate the BatchSampler for us:\n\n::: {#8146ccf4 .cell execution_count=105}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, bs, sampler=RandomSampler(train_ds), collate_fn=collate)\nvalid_dl = DataLoader(valid_ds, bs, sampler=SequentialSampler(valid_ds), collate_fn=collate)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[105], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, bs, sampler<span style=\"color:rgb(98,98,98)\">=</span>RandomSampler(train_ds), collate_fn<span style=\"color:rgb(98,98,98)\">=</span>collate)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(valid_ds, bs, sampler<span style=\"color:rgb(98,98,98)\">=</span>SequentialSampler(valid_ds), collate_fn<span style=\"color:rgb(98,98,98)\">=</span>collate)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nPyTorch can also generate the Sequential/RandomSamplers too:\n\n::: {#af887636 .cell execution_count=106}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, bs, shuffle=True, drop_last=True, num_workers=2)\nvalid_dl = DataLoader(valid_ds, bs, shuffle=False, num_workers=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[106], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, bs, shuffle<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, drop_last<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, num_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(valid_ds, bs, shuffle<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>, num_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cfda8726 .cell execution_count=107}\n``` {.python .cell-code}\nmodel,opt = get_model()\nfit()\n\nloss_func(model(xb), yb), accuracy(model(xb), yb)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[107], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> fit()\n<span class=\"ansi-green-fg ansi-bold\">      4</span> loss_func(model(xb), yb), accuracy(model(xb), yb)\n\nCell <span class=\"ansi-green-fg\">In[60], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> model, optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(model<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nOur dataset actually already knows how to sample a batch of indices all at once:\n\n::: {#e21de885 .cell execution_count=108}\n``` {.python .cell-code}\ntrain_ds[[4,6,7]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[108], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">train_ds</span>[[<span style=\"color:rgb(98,98,98)\">4</span>,<span style=\"color:rgb(98,98,98)\">6</span>,<span style=\"color:rgb(98,98,98)\">7</span>]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n...that means that we can actually skip the batch_sampler and collate_fn entirely:\n\n::: {#781376dd .cell execution_count=109}\n``` {.python .cell-code}\ntrain_dl = DataLoader(train_ds, sampler=train_samp)\nvalid_dl = DataLoader(valid_ds, sampler=valid_samp)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[109], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(<span class=\"ansi-yellow-bg\">train_ds</span>, sampler<span style=\"color:rgb(98,98,98)\">=</span>train_samp)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> valid_dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(valid_ds, sampler<span style=\"color:rgb(98,98,98)\">=</span>valid_samp)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6ef3afd5 .cell execution_count=110}\n``` {.python .cell-code}\nxb,yb = next(iter(train_dl))\nxb.shape,yb.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[110], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">train_dl</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xb<span style=\"color:rgb(98,98,98)\">.</span>shape,yb<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Validation\n\nYou **always** should also have a [validation set](http://www.fast.ai/2017/11/13/validation-sets/), in order to identify if you are overfitting.\n\nWe will calculate and print the validation loss at the end of each epoch.\n\n(Note that we always call `model.train()` before training, and `model.eval()` before inference, because these are used by layers such as `nn.BatchNorm2d` and `nn.Dropout` to ensure appropriate behaviour for these different phases.)\n\n::: {#6107f43f .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=111}\n``` {.python .cell-code}\ndef fit(epochs, model, loss_func, opt, train_dl, valid_dl):\n    for epoch in range(epochs):\n        model.train()\n        for xb,yb in train_dl:\n            loss = loss_func(model(xb), yb)\n            loss.backward()\n            opt.step()\n            opt.zero_grad()\n\n        model.eval()\n        with torch.no_grad():\n            tot_loss,tot_acc,count = 0.,0.,0\n            for xb,yb in valid_dl:\n                pred = model(xb)\n                n = len(xb)\n                count += n\n                tot_loss += loss_func(pred,yb).item()*n\n                tot_acc  += accuracy (pred,yb).item()*n\n        print(epoch, tot_loss/count, tot_acc/count)\n    return tot_loss/count, tot_acc/count\n```\n:::\n\n\n::: {#92d122d6 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=112}\n``` {.python .cell-code}\ndef get_dls(train_ds, valid_ds, bs, **kwargs):\n    return (DataLoader(train_ds, batch_size=bs, shuffle=True, **kwargs),\n            DataLoader(valid_ds, batch_size=bs*2, **kwargs))\n```\n:::\n\n\nNow, our whole process of obtaining the data loaders and fitting the model can be run in 3 lines of code:\n\n::: {#bcc37204 .cell execution_count=113}\n``` {.python .cell-code}\ntrain_dl,valid_dl = get_dls(train_ds, valid_ds, bs)\nmodel,opt = get_model()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[113], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> train_dl,valid_dl <span style=\"color:rgb(98,98,98)\">=</span> get_dls(<span class=\"ansi-yellow-bg\">train_ds</span>, valid_ds, bs)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model,opt <span style=\"color:rgb(98,98,98)\">=</span> get_model()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#58e564a6 .cell execution_count=114}\n``` {.python .cell-code}\n%time loss,acc = fit(5, model, loss_func, opt, train_dl, valid_dl)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nFile <span class=\"ansi-green-fg\">&lt;timed exec&gt;:1</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Export -\n\n::: {#c65bd82f .cell execution_count=115}\n``` {.python .cell-code}\nimport nbdev; nbdev.nbdev_export()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[115], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">nbdev</span>; nbdev<span style=\"color:rgb(98,98,98)\">.</span>nbdev_export()\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'nbdev'</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "04_minibatch_training_files"
    ],
    "filters": [],
    "includes": {}
  }
}