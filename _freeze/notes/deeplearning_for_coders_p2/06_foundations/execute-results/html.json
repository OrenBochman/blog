{
  "hash": "43b57bd2f3c9acd765dc3be687a08654",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Callbacks\njupyter: python3\n---\n\n::: {#a72c5ca4 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nimport matplotlib.pyplot as plt\nimport random\n```\n:::\n\n\n### Callbacks as GUI events\n\n::: {#d3ce5fbc .cell execution_count=2}\n``` {.python .cell-code}\nimport ipywidgets as widgets\n```\n:::\n\n\nFrom the [ipywidget docs](https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20Events.html):\n\n- *the button widget is used to handle mouse clicks. The on_click method of the Button can be used to register function to be called when the button is clicked*\n\n::: {#c6b7fa5a .cell execution_count=3}\n``` {.python .cell-code}\nw = widgets.Button(description='Click me')\n```\n:::\n\n\n::: {#f8e63471 .cell execution_count=4}\n``` {.python .cell-code}\nw\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"885fbe7311fc4cfb892429252f2ee831\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n:::\n\n\n::: {#98ddb8d7 .cell execution_count=5}\n``` {.python .cell-code}\ndef f(o): print('hi')\n```\n:::\n\n\n::: {#ed65649c .cell execution_count=6}\n``` {.python .cell-code}\nw.on_click(f)\n```\n:::\n\n\n*NB: When callbacks are used in this way they are often called \"events\".*\n\n### Creating your own callback\n\n::: {#b0df8bfb .cell execution_count=7}\n``` {.python .cell-code}\nfrom time import sleep\n```\n:::\n\n\n::: {#1dc21121 .cell execution_count=8}\n``` {.python .cell-code}\ndef slow_calculation():\n    res = 0\n    for i in range(5):\n        res += i*i\n        sleep(1)\n    return res\n```\n:::\n\n\n::: {#7ea11aa0 .cell execution_count=9}\n``` {.python .cell-code}\nslow_calculation()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n30\n```\n:::\n:::\n\n\n::: {#5e7cae0c .cell execution_count=10}\n``` {.python .cell-code}\ndef slow_calculation(cb=None):\n    res = 0\n    for i in range(5):\n        res += i*i\n        sleep(1)\n        if cb: cb(i)\n    return res\n```\n:::\n\n\n::: {#4cd38211 .cell execution_count=11}\n``` {.python .cell-code}\ndef show_progress(epoch): print(f\"Awesome! We've finished epoch {epoch}!\")\n```\n:::\n\n\n::: {#011f0488 .cell execution_count=12}\n``` {.python .cell-code}\nslow_calculation(show_progress)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAwesome! We've finished epoch 0!\nAwesome! We've finished epoch 1!\nAwesome! We've finished epoch 2!\nAwesome! We've finished epoch 3!\nAwesome! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n30\n```\n:::\n:::\n\n\n### Lambdas and partials\n\n::: {#c5b7aa24 .cell execution_count=13}\n``` {.python .cell-code}\nslow_calculation(lambda o: print(f\"Awesome! We've finished epoch {o}!\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAwesome! We've finished epoch 0!\nAwesome! We've finished epoch 1!\nAwesome! We've finished epoch 2!\nAwesome! We've finished epoch 3!\nAwesome! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n30\n```\n:::\n:::\n\n\n::: {#bf12bffa .cell execution_count=14}\n``` {.python .cell-code}\ndef show_progress(exclamation, epoch): print(f\"{exclamation}! We've finished epoch {epoch}!\")\n```\n:::\n\n\n::: {#34950ece .cell execution_count=15}\n``` {.python .cell-code}\nslow_calculation(lambda o: show_progress(\"OK I guess\", o))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOK I guess! We've finished epoch 0!\nOK I guess! We've finished epoch 1!\nOK I guess! We've finished epoch 2!\nOK I guess! We've finished epoch 3!\nOK I guess! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n30\n```\n:::\n:::\n\n\n::: {#8604e3d4 .cell execution_count=16}\n``` {.python .cell-code}\ndef make_show_progress(exclamation):\n    def _inner(epoch): print(f\"{exclamation}! We've finished epoch {epoch}!\")\n    return _inner\n```\n:::\n\n\n::: {#2c97bf22 .cell execution_count=17}\n``` {.python .cell-code}\nslow_calculation(make_show_progress(\"Nice!\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNice!! We've finished epoch 0!\nNice!! We've finished epoch 1!\nNice!! We've finished epoch 2!\nNice!! We've finished epoch 3!\nNice!! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n30\n```\n:::\n:::\n\n\n::: {#c7f26901 .cell execution_count=18}\n``` {.python .cell-code}\nfrom functools import partial\n```\n:::\n\n\n::: {#09148fcc .cell execution_count=19}\n``` {.python .cell-code}\nslow_calculation(partial(show_progress, \"OK I guess\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOK I guess! We've finished epoch 0!\nOK I guess! We've finished epoch 1!\nOK I guess! We've finished epoch 2!\nOK I guess! We've finished epoch 3!\nOK I guess! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n30\n```\n:::\n:::\n\n\n::: {#efe63b31 .cell execution_count=20}\n``` {.python .cell-code}\nf2 = partial(show_progress, \"OK I guess\")\n```\n:::\n\n\n### Callbacks as callable classes\n\n::: {#115d7ecb .cell execution_count=21}\n``` {.python .cell-code}\nclass ProgressShowingCallback():\n    def __init__(self, exclamation=\"Awesome\"): self.exclamation = exclamation\n    def __call__(self, epoch): print(f\"{self.exclamation}! We've finished epoch {epoch}!\")\n```\n:::\n\n\n::: {#72bb78e6 .cell execution_count=22}\n``` {.python .cell-code}\ncb = ProgressShowingCallback(\"Just super\")\n```\n:::\n\n\n::: {#5c166b5f .cell execution_count=23}\n``` {.python .cell-code}\nslow_calculation(cb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJust super! We've finished epoch 0!\nJust super! We've finished epoch 1!\nJust super! We've finished epoch 2!\nJust super! We've finished epoch 3!\nJust super! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n30\n```\n:::\n:::\n\n\n### Multiple callback funcs; `*args` and `**kwargs`\n\n::: {#a28f9be0 .cell execution_count=24}\n``` {.python .cell-code}\ndef f(*a, **b): print(f\"args: {a}; kwargs: {b}\")\n```\n:::\n\n\n::: {#82dc0f66 .cell execution_count=25}\n``` {.python .cell-code}\nf(3, 'a', thing1=\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nargs: (3, 'a'); kwargs: {'thing1': 'hello'}\n```\n:::\n:::\n\n\n::: {#e2d9ece9 .cell execution_count=26}\n``` {.python .cell-code}\ndef g(a,b,c=0): print(a,b,c)\n```\n:::\n\n\n::: {#126ac335 .cell execution_count=27}\n``` {.python .cell-code}\nargs = [1,2]\nkwargs = {'c':3}\ng(*args, **kwargs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3\n```\n:::\n:::\n\n\n::: {#884cc70f .cell execution_count=28}\n``` {.python .cell-code}\ndef slow_calculation(cb=None):\n    res = 0\n    for i in range(5):\n        if cb: cb.before_calc(i)\n        res += i*i\n        sleep(1)\n        if cb: cb.after_calc(i, val=res)\n    return res\n```\n:::\n\n\n::: {#eb170cf9 .cell execution_count=29}\n``` {.python .cell-code}\nclass PrintStepCallback():\n    def before_calc(self, *args, **kwargs): print(f\"About to start\")\n    def after_calc (self, *args, **kwargs): print(f\"Done step\")\n```\n:::\n\n\n::: {#3b9797c8 .cell execution_count=30}\n``` {.python .cell-code}\nslow_calculation(PrintStepCallback())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAbout to start\nDone step\nAbout to start\nDone step\nAbout to start\nDone step\nAbout to start\nDone step\nAbout to start\nDone step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n30\n```\n:::\n:::\n\n\n::: {#fbba2f37 .cell execution_count=31}\n``` {.python .cell-code}\nclass PrintStatusCallback():\n    def __init__(self): pass\n    def before_calc(self, epoch, **kwargs): print(f\"About to start: {epoch}\")\n    def after_calc (self, epoch, val, **kwargs): print(f\"After {epoch}: {val}\")\n```\n:::\n\n\n::: {#0e69a5c4 .cell execution_count=32}\n``` {.python .cell-code}\nslow_calculation(PrintStatusCallback())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAbout to start: 0\nAfter 0: 0\nAbout to start: 1\nAfter 1: 1\nAbout to start: 2\nAfter 2: 5\nAbout to start: 3\nAfter 3: 14\nAbout to start: 4\nAfter 4: 30\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n30\n```\n:::\n:::\n\n\n### Modifying behavior\n\n::: {#46faa311 .cell execution_count=33}\n``` {.python .cell-code}\ndef slow_calculation(cb=None):\n    res = 0\n    for i in range(5):\n        if cb and hasattr(cb,'before_calc'): cb.before_calc(i)\n        res += i*i\n        sleep(1)\n        if cb and hasattr(cb,'after_calc'):\n            if cb.after_calc(i, res):\n                print(\"stopping early\")\n                break\n    return res\n```\n:::\n\n\n::: {#06630a61 .cell execution_count=34}\n``` {.python .cell-code}\nclass PrintAfterCallback():\n    def after_calc (self, epoch, val):\n        print(f\"After {epoch}: {val}\")\n        if val>10: return True\n```\n:::\n\n\n::: {#8d0e3187 .cell execution_count=35}\n``` {.python .cell-code}\nslow_calculation(PrintAfterCallback())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAfter 0: 0\nAfter 1: 1\nAfter 2: 5\nAfter 3: 14\nstopping early\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n14\n```\n:::\n:::\n\n\n::: {#debd44a8 .cell execution_count=36}\n``` {.python .cell-code}\nclass SlowCalculator():\n    def __init__(self, cb=None): self.cb,self.res = cb,0\n    \n    def callback(self, cb_name, *args):\n        if not self.cb: return\n        cb = getattr(self.cb,cb_name, None)\n        if cb: return cb(self, *args)\n\n    def calc(self):\n        for i in range(5):\n            self.callback('before_calc', i)\n            self.res += i*i\n            sleep(1)\n            if self.callback('after_calc', i):\n                print(\"stopping early\")\n                break\n```\n:::\n\n\n::: {#ffa80b2c .cell execution_count=37}\n``` {.python .cell-code}\nclass ModifyingCallback():\n    def after_calc (self, calc, epoch):\n        print(f\"After {epoch}: {calc.res}\")\n        if calc.res>10: return True\n        if calc.res<3: calc.res = calc.res*2\n```\n:::\n\n\n::: {#83357487 .cell execution_count=38}\n``` {.python .cell-code}\ncalculator = SlowCalculator(ModifyingCallback())\n```\n:::\n\n\n::: {#0faac9f7 .cell execution_count=39}\n``` {.python .cell-code}\ncalculator.calc()\ncalculator.res\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAfter 0: 0\nAfter 1: 1\nAfter 2: 6\nAfter 3: 15\nstopping early\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n15\n```\n:::\n:::\n\n\n## `__dunder__` thingies\n\nAnything that looks like `__this__` is, in some way, *special*. Python, or some library, can define some functions that they will call at certain documented times. For instance, when your class is setting up a new object, python will call `__init__`. These are defined as part of the python [data model](https://docs.python.org/3/reference/datamodel.html#object.__init__).\n\nFor instance, if python sees `+`, then it will call the special method `__add__`. If you try to display an object in Jupyter (or lots of other places in Python) it will call `__repr__`.\n\n::: {#e4998886 .cell execution_count=40}\n``` {.python .cell-code}\nclass SloppyAdder():\n    def __init__(self,o): self.o=o\n    def __add__(self,b): return SloppyAdder(self.o + b.o + 0.01)\n    def __repr__(self): return str(self.o)\n```\n:::\n\n\n::: {#f7a7a482 .cell execution_count=41}\n``` {.python .cell-code}\na = SloppyAdder(1)\nb = SloppyAdder(2)\na+b\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n3.01\n```\n:::\n:::\n\n\nSpecial methods you should probably know about (see data model link above) are:\n\n- `__getitem__`\n- `__getattr__`\n- `__setattr__`\n- `__del__`\n- `__init__`\n- `__new__`\n- `__enter__`\n- `__exit__`\n- `__len__`\n- `__repr__`\n- `__str__`\n\n### `__getattr__` and `getattr`\n\n::: {#9fa4453a .cell execution_count=42}\n``` {.python .cell-code}\nclass A: a,b=1,2\n```\n:::\n\n\n::: {#cbc3f964 .cell execution_count=43}\n``` {.python .cell-code}\na = A()\n```\n:::\n\n\n::: {#df798d5e .cell execution_count=44}\n``` {.python .cell-code}\na.b\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n2\n```\n:::\n:::\n\n\n::: {#620ba8be .cell execution_count=45}\n``` {.python .cell-code}\ngetattr(a, 'b')\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n2\n```\n:::\n:::\n\n\n::: {#a11f163f .cell execution_count=46}\n``` {.python .cell-code}\ngetattr(a, 'b' if random.random()>0.5 else 'a')\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n1\n```\n:::\n:::\n\n\n::: {#a3bb9ded .cell execution_count=47}\n``` {.python .cell-code}\nclass B:\n    a,b=1,2\n    def __getattr__(self, k):\n        if k[0]=='_': raise AttributeError(k)\n        return f'Hello from {k}'\n```\n:::\n\n\n::: {#50381a7c .cell execution_count=48}\n``` {.python .cell-code}\nb = B()\n```\n:::\n\n\n::: {#be4818c1 .cell execution_count=49}\n``` {.python .cell-code}\nb.a\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n1\n```\n:::\n:::\n\n\n::: {#1ceb1354 .cell execution_count=50}\n``` {.python .cell-code}\nb.foo\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n'Hello from foo'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "06_foundations_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"1cf2d79775114d6bba4fcd2f152a68d6\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ButtonStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ButtonStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"button_color\":null,\"font_family\":null,\"font_size\":null,\"font_style\":null,\"font_variant\":null,\"font_weight\":null,\"text_color\":null,\"text_decoration\":null}},\"7f2cfd3d272c4c19ab189cbb91dea8cd\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"885fbe7311fc4cfb892429252f2ee831\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ButtonModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ButtonModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ButtonView\",\"button_style\":\"\",\"description\":\"Click me\",\"disabled\":false,\"icon\":\"\",\"layout\":\"IPY_MODEL_7f2cfd3d272c4c19ab189cbb91dea8cd\",\"style\":\"IPY_MODEL_1cf2d79775114d6bba4fcd2f152a68d6\",\"tabbable\":null,\"tooltip\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}