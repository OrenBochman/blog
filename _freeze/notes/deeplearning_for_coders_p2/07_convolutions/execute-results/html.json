{
  "hash": "dcdc0a71250398fd73c501fb695b3603",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Convolutions\njupyter:\n  jupytext:\n    split_at_heading: true\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n---\n\n::: {#257a449e .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=1}\n``` {.python .cell-code}\nimport torch\nfrom torch import nn\n\nfrom torch.utils.data import default_collate\nfrom typing import Mapping\n\nfrom miniai.training import *\nfrom miniai.datasets import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">typing</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">training</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg\">----&gt; 8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/notes/deeplearning_for_coders_p2/miniai/datasets.py:8</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">operator</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> itemgetter\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">itertools</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> zip_longest\n<span class=\"ansi-green-fg\">----&gt; 8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">utils</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> default_collate\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">training</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b8947389 .cell execution_count=2}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl, numpy as np\nimport pandas as pd,matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom torch import tensor\n\nfrom torch.utils.data import DataLoader\nfrom typing import Mapping\n```\n:::\n\n\n::: {#41c8408f .cell execution_count=3}\n``` {.python .cell-code}\nmpl.rcParams['image.cmap'] = 'gray'\n```\n:::\n\n\n::: {#ed819de4 .cell execution_count=4}\n``` {.python .cell-code}\npath_data = Path('data')\npath_gz = path_data/'mnist.pkl.gz'\nwith gzip.open(path_gz, 'rb') as f: ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding='latin-1')\nx_train, y_train, x_valid, y_valid = map(tensor, [x_train, y_train, x_valid, y_valid])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">FileNotFoundError</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> path_data <span style=\"color:rgb(98,98,98)\">=</span> Path(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> path_gz <span style=\"color:rgb(98,98,98)\">=</span> path_data<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">mnist.pkl.gz</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> gzip<span style=\"color:rgb(98,98,98)\">.</span>open(path_gz, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">rb</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> f: ((x_train, y_train), (x_valid, y_valid), _) <span style=\"color:rgb(98,98,98)\">=</span> pickle<span style=\"color:rgb(98,98,98)\">.</span>load(f, encoding<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">latin-1</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> x_train, y_train, x_valid, y_valid <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">map</span>(tensor, [x_train, y_train, x_valid, y_valid])\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/gzip.py:58</span>, in <span class=\"ansi-cyan-fg\">open</span><span class=\"ansi-blue-fg\">(filename, mode, compresslevel, encoding, errors, newline)</span>\n<span class=\"ansi-green-fg ansi-bold\">     56</span> gz_mode <span style=\"color:rgb(98,98,98)\">=</span> mode<span style=\"color:rgb(98,98,98)\">.</span>replace(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">t</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">     57</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(filename, (<span style=\"color:rgb(0,135,0)\">str</span>, <span style=\"color:rgb(0,135,0)\">bytes</span>, os<span style=\"color:rgb(98,98,98)\">.</span>PathLike)):\n<span class=\"ansi-green-fg\">---&gt; 58</span>     binary_file <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">GzipFile</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">gz_mode</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">compresslevel</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     59</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(filename, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">read</span><span style=\"color:rgb(175,0,0)\">\"</span>) <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(filename, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">write</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n<span class=\"ansi-green-fg ansi-bold\">     60</span>     binary_file <span style=\"color:rgb(98,98,98)\">=</span> GzipFile(<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, gz_mode, compresslevel, filename)\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/gzip.py:174</span>, in <span class=\"ansi-cyan-fg\">GzipFile.__init__</span><span class=\"ansi-blue-fg\">(self, filename, mode, compresslevel, fileobj, mtime)</span>\n<span class=\"ansi-green-fg ansi-bold\">    172</span>     mode <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">    173</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> fileobj <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>:\n<span class=\"ansi-green-fg\">--&gt; 174</span>     fileobj <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>myfileobj <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">builtins</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">open</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">mode</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(175,0,255)\" class=\"ansi-yellow-bg\">or</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">rb</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    175</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> filename <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>:\n<span class=\"ansi-green-fg ansi-bold\">    176</span>     filename <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fileobj, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">name</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">FileNotFoundError</span>: [Errno 2] No such file or directory: 'data/mnist.pkl.gz'</pre>\n```\n:::\n\n:::\n:::\n\n\nIn the context of an image, a feature is a visually distinctive attribute. For example, the number 7 is characterized by a horizontal edge near the top of the digit, and a top-right to bottom-left diagonal edge underneath that.\n\nIt turns out that finding the edges in an image is a very common task in computer vision, and is surprisingly straightforward. To do it, we use a *convolution*. A convolution requires nothing more than multiplication, and addition.\n\n### Understanding the Convolution Equations\n\nTo explain the math behind convolutions, fast.ai student Matt Kleinsmith came up with the very clever idea of showing [CNNs from different viewpoints](https://medium.com/impactai/cnns-from-different-viewpoints-fab7f52d159c).\n\nHere's the input:\n\n<img alt=\"The image\" width=\"75\" src=\"images/att_00032.png\">\n\nHere's our kernel:\n\n<img alt=\"The kernel\" width=\"55\" src=\"images/att_00033.png\">\n\nSince the filter fits in the image four times, we have four results:\n\n<img alt=\"The activations\" width=\"52\" src=\"images/att_00034.png\">\n\n<img alt=\"Applying the kernel\" width=\"366\" caption=\"Applying the kernel\" id=\"apply_kernel\" src=\"images/att_00035.png\">\n\n<img alt=\"The equation\" width=\"436\" caption=\"The equation\" id=\"eq_view\" src=\"images/att_00036.png\">\n\n::: {#bd407baf .cell execution_count=5}\n``` {.python .cell-code}\nx_imgs = x_train.view(-1,28,28)\nxv_imgs = x_valid.view(-1,28,28)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> x_imgs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_train</span><span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">28</span>,<span style=\"color:rgb(98,98,98)\">28</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xv_imgs <span style=\"color:rgb(98,98,98)\">=</span> x_valid<span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">28</span>,<span style=\"color:rgb(98,98,98)\">28</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ba7fb418 .cell execution_count=6}\n``` {.python .cell-code}\nmpl.rcParams['figure.dpi'] = 30\n```\n:::\n\n\n::: {#4dbcaa53 .cell execution_count=7}\n``` {.python .cell-code}\nim3 = x_imgs[7]\nshow_image(im3);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> im3 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_imgs</span>[<span style=\"color:rgb(98,98,98)\">7</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(im3);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_imgs' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#95a7fc76 .cell execution_count=8}\n``` {.python .cell-code}\ntop_edge = tensor([[-1,-1,-1],\n                   [ 0, 0, 0],\n                   [ 1, 1, 1]]).float()\n```\n:::\n\n\nWe're going to call this our kernel (because that's what fancy computer vision researchers call these).\n\n::: {#9db1bb97 .cell execution_count=9}\n``` {.python .cell-code}\nshow_image(top_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_image</span>(top_edge, noframe<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe filter will take any window of size 3×3 in our images, and if we name the pixel values like this:\n\n$$\\begin{matrix} a1 & a2 & a3 \\\\ a4 & a5 & a6 \\\\ a7 & a8 & a9 \\end{matrix}$$\n\nit will return $-a1-a2-a3+a7+a8+a9$.\n\n::: {#193e1bbf .cell execution_count=10}\n``` {.python .cell-code}\ndf = pd.DataFrame(im3[:13,:23])\ndf.style.format(precision=2).set_properties(**{'font-size':'7pt'}).background_gradient('Greys')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> pd<span style=\"color:rgb(98,98,98)\">.</span>DataFrame(<span class=\"ansi-yellow-bg\">im3</span>[:<span style=\"color:rgb(98,98,98)\">13</span>,:<span style=\"color:rgb(98,98,98)\">23</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> df<span style=\"color:rgb(98,98,98)\">.</span>style<span style=\"color:rgb(98,98,98)\">.</span>format(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)<span style=\"color:rgb(98,98,98)\">.</span>set_properties(<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>{<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">font-size</span><span style=\"color:rgb(175,0,0)\">'</span>:<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">7pt</span><span style=\"color:rgb(175,0,0)\">'</span>})<span style=\"color:rgb(98,98,98)\">.</span>background_gradient(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Greys</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9b858267 .cell execution_count=11}\n``` {.python .cell-code}\n(im3[3:6,14:17] * top_edge).sum()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (<span class=\"ansi-yellow-bg\">im3</span>[<span style=\"color:rgb(98,98,98)\">3</span>:<span style=\"color:rgb(98,98,98)\">6</span>,<span style=\"color:rgb(98,98,98)\">14</span>:<span style=\"color:rgb(98,98,98)\">17</span>] <span style=\"color:rgb(98,98,98)\">*</span> top_edge)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#51e6a84d .cell execution_count=12}\n``` {.python .cell-code}\n(im3[7:10,14:17] * top_edge).sum()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (<span class=\"ansi-yellow-bg\">im3</span>[<span style=\"color:rgb(98,98,98)\">7</span>:<span style=\"color:rgb(98,98,98)\">10</span>,<span style=\"color:rgb(98,98,98)\">14</span>:<span style=\"color:rgb(98,98,98)\">17</span>] <span style=\"color:rgb(98,98,98)\">*</span> top_edge)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f76bc766 .cell execution_count=13}\n``` {.python .cell-code}\ndef apply_kernel(row, col, kernel): return (im3[row-1:row+2,col-1:col+2] * kernel).sum()\n```\n:::\n\n\n::: {#01c7c369 .cell execution_count=14}\n``` {.python .cell-code}\napply_kernel(4,15,top_edge)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">apply_kernel</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">4</span><span class=\"ansi-yellow-bg\">,</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">15</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">top_edge</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>, in <span class=\"ansi-cyan-fg\">apply_kernel</span><span class=\"ansi-blue-fg\">(row, col, kernel)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">apply_kernel</span>(row, col, kernel): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (<span class=\"ansi-yellow-bg\">im3</span>[row<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:row<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>,col<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:col<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">*</span> kernel)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<img src=\"images/chapter9_nopadconv.svg\" id=\"nopad_conv\" caption=\"Applying a kernel across a grid\" alt=\"Applying a kernel across a grid\" width=\"400\">\n\n::: {#f7cf5b25 .cell execution_count=15}\n``` {.python .cell-code}\n[[(i,j) for j in range(5)] for i in range(5)]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n[[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)],\n [(1, 0), (1, 1), (1, 2), (1, 3), (1, 4)],\n [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4)],\n [(3, 0), (3, 1), (3, 2), (3, 3), (3, 4)],\n [(4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]]\n```\n:::\n:::\n\n\n::: {#e3e76494 .cell execution_count=16}\n``` {.python .cell-code}\nrng = range(1,27)\ntop_edge3 = tensor([[apply_kernel(i,j,top_edge) for j in rng] for i in rng])\nshow_image(top_edge3);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> rng <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">27</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> top_edge3 <span style=\"color:rgb(98,98,98)\">=</span> tensor([[apply_kernel(i,j,top_edge) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> j <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> show_image(top_edge3);\n\nCell <span class=\"ansi-green-fg\">In[16], line 2</span>, in <span class=\"ansi-cyan-fg\">&lt;listcomp&gt;</span><span class=\"ansi-blue-fg\">(.0)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> rng <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">27</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> top_edge3 <span style=\"color:rgb(98,98,98)\">=</span> tensor([[apply_kernel(i,j,top_edge) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> j <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> show_image(top_edge3);\n\nCell <span class=\"ansi-green-fg\">In[16], line 2</span>, in <span class=\"ansi-cyan-fg\">&lt;listcomp&gt;</span><span class=\"ansi-blue-fg\">(.0)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> rng <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">27</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> top_edge3 <span style=\"color:rgb(98,98,98)\">=</span> tensor([[<span class=\"ansi-yellow-bg\">apply_kernel</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">i</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">j</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">top_edge</span><span class=\"ansi-yellow-bg\">)</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> j <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> show_image(top_edge3);\n\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>, in <span class=\"ansi-cyan-fg\">apply_kernel</span><span class=\"ansi-blue-fg\">(row, col, kernel)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">apply_kernel</span>(row, col, kernel): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (<span class=\"ansi-yellow-bg\">im3</span>[row<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:row<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>,col<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:col<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">*</span> kernel)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4b05d09b .cell execution_count=17}\n``` {.python .cell-code}\nleft_edge = tensor([[-1,0,1],\n                    [-1,0,1],\n                    [-1,0,1]]).float()\n```\n:::\n\n\n::: {#0f1e985c .cell execution_count=18}\n``` {.python .cell-code}\nshow_image(left_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_image</span>(left_edge, noframe<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#aa348c2e .cell execution_count=19}\n``` {.python .cell-code}\nleft_edge3 = tensor([[apply_kernel(i,j,left_edge) for j in rng] for i in rng])\nshow_image(left_edge3);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> left_edge3 <span style=\"color:rgb(98,98,98)\">=</span> tensor([[apply_kernel(i,j,left_edge) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> j <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(left_edge3);\n\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>, in <span class=\"ansi-cyan-fg\">&lt;listcomp&gt;</span><span class=\"ansi-blue-fg\">(.0)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> left_edge3 <span style=\"color:rgb(98,98,98)\">=</span> tensor([[apply_kernel(i,j,left_edge) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> j <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(left_edge3);\n\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>, in <span class=\"ansi-cyan-fg\">&lt;listcomp&gt;</span><span class=\"ansi-blue-fg\">(.0)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> left_edge3 <span style=\"color:rgb(98,98,98)\">=</span> tensor([[<span class=\"ansi-yellow-bg\">apply_kernel</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">i</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">j</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">left_edge</span><span class=\"ansi-yellow-bg\">)</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> j <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> rng])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(left_edge3);\n\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>, in <span class=\"ansi-cyan-fg\">apply_kernel</span><span class=\"ansi-blue-fg\">(row, col, kernel)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">apply_kernel</span>(row, col, kernel): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (<span class=\"ansi-yellow-bg\">im3</span>[row<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:row<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>,col<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:col<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">*</span> kernel)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<img alt=\"Result of applying a 3×3 kernel to a 4×4 image\" width=\"782\" caption=\"Result of applying a 3×3 kernel to a 4×4 image (courtesy of Vincent Dumoulin and Francesco Visin)\" id=\"three_ex_four_conv\" src=\"images/att_00028.png\">\n\n### Convolutions in PyTorch\n\n::: {#ddd752d5 .cell execution_count=20}\n``` {.python .cell-code}\nimport torch.nn.functional as F\nimport torch\n```\n:::\n\n\nWhat to do if you have [2 months to complete your thesis](https://github.com/Yangqing/caffe/wiki/Convolution-in-Caffe:-a-memo)? Use [im2col](https://hal.inria.fr/inria-00112631/).\n\n![image.png](attachment:image.png)\n\nHere's a sample [numpy implementation](https://github.com/3outeille/CNNumpy/blob/5394f13e7ed67a808a3e39fd381f168825d65ff5/src/fast/utils.py#L360).\n\n::: {#abafa289 .cell execution_count=21}\n``` {.python .cell-code}\ninp = im3[None,None,:,:].float()\ninp_unf = F.unfold(inp, (3,3))[0]\ninp_unf.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> inp <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">im3</span>[<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,:,:]<span style=\"color:rgb(98,98,98)\">.</span>float()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> inp_unf <span style=\"color:rgb(98,98,98)\">=</span> F<span style=\"color:rgb(98,98,98)\">.</span>unfold(inp, (<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">3</span>))[<span style=\"color:rgb(98,98,98)\">0</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> inp_unf<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#903189bb .cell execution_count=22}\n``` {.python .cell-code}\nw = left_edge.view(-1)\nw.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\ntorch.Size([9])\n```\n:::\n:::\n\n\n::: {#3d5a2a25 .cell execution_count=23}\n``` {.python .cell-code}\nout_unf = w@inp_unf\nout_unf.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> out_unf <span style=\"color:rgb(98,98,98)\">=</span> w<span style=\"color:rgb(175,0,255)\">@inp_unf</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> out_unf<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inp_unf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#aa1f8511 .cell execution_count=24}\n``` {.python .cell-code}\nout = out_unf.view(26,26)\nshow_image(out);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> out <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">out_unf</span><span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">26</span>,<span style=\"color:rgb(98,98,98)\">26</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(out);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'out_unf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6763917e .cell execution_count=25}\n``` {.python .cell-code}\n%timeit -n 1 tensor([[apply_kernel(i,j,left_edge) for j in rng] for i in rng]);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_line_magic</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">timeit</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">-n 1 tensor([[apply_kernel(i,j,left_edge) for j in rng] for i in rng]);</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/interactiveshell.py:2456</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_line_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, _stack_depth)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2454</span>     kwargs[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">local_ns</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>get_local_scope(stack_depth)\n<span class=\"ansi-green-fg ansi-bold\">   2455</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>builtin_trap:\n<span class=\"ansi-green-fg\">-&gt; 2456</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2458</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg ansi-bold\">   2459</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg ansi-bold\">   2460</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg ansi-bold\">   2461</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic<span style=\"color:rgb(98,98,98)\">.</span>MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/magics/execution.py:1189</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.timeit</span><span class=\"ansi-blue-fg\">(self, line, cell, local_ns)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1186</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> time_number <span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.2</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1187</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">break</span>\n<span class=\"ansi-green-fg\">-&gt; 1189</span> all_runs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1190</span> best <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">min</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n<span class=\"ansi-green-fg ansi-bold\">   1191</span> worst <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">max</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/timeit.py:206</span>, in <span class=\"ansi-cyan-fg\">Timer.repeat</span><span class=\"ansi-blue-fg\">(self, repeat, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> r <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(repeat):\n<span class=\"ansi-green-fg\">--&gt; 206</span>     t <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timeit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span>     r<span style=\"color:rgb(98,98,98)\">.</span>append(t)\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> r\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/magics/execution.py:173</span>, in <span class=\"ansi-cyan-fg\">Timer.timeit</span><span class=\"ansi-blue-fg\">(self, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    171</span> gc<span style=\"color:rgb(98,98,98)\">.</span>disable()\n<span class=\"ansi-green-fg ansi-bold\">    172</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">--&gt; 173</span>     timing <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">inner</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">it</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timer</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    174</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">finally</span>:\n<span class=\"ansi-green-fg ansi-bold\">    175</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> gcold:\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">inner</span><span class=\"ansi-blue-fg\">(_it, _timer)</span>\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">&lt;listcomp&gt;</span><span class=\"ansi-blue-fg\">(.0)</span>\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">&lt;listcomp&gt;</span><span class=\"ansi-blue-fg\">(.0)</span>\n\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>, in <span class=\"ansi-cyan-fg\">apply_kernel</span><span class=\"ansi-blue-fg\">(row, col, kernel)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">apply_kernel</span>(row, col, kernel): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (<span class=\"ansi-yellow-bg\">im3</span>[row<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:row<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>,col<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:col<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">*</span> kernel)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'im3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0cd2d1d5 .cell execution_count=26}\n``` {.python .cell-code}\n%timeit -n 100 (w@F.unfold(inp, (3,3))[0]).view(26,26);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_line_magic</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">timeit</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">-n 100 (w@F.unfold(inp, (3,3))[0]).view(26,26);</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/interactiveshell.py:2456</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_line_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, _stack_depth)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2454</span>     kwargs[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">local_ns</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>get_local_scope(stack_depth)\n<span class=\"ansi-green-fg ansi-bold\">   2455</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>builtin_trap:\n<span class=\"ansi-green-fg\">-&gt; 2456</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2458</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg ansi-bold\">   2459</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg ansi-bold\">   2460</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg ansi-bold\">   2461</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic<span style=\"color:rgb(98,98,98)\">.</span>MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/magics/execution.py:1189</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.timeit</span><span class=\"ansi-blue-fg\">(self, line, cell, local_ns)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1186</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> time_number <span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.2</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1187</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">break</span>\n<span class=\"ansi-green-fg\">-&gt; 1189</span> all_runs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1190</span> best <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">min</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n<span class=\"ansi-green-fg ansi-bold\">   1191</span> worst <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">max</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/timeit.py:206</span>, in <span class=\"ansi-cyan-fg\">Timer.repeat</span><span class=\"ansi-blue-fg\">(self, repeat, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> r <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(repeat):\n<span class=\"ansi-green-fg\">--&gt; 206</span>     t <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timeit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span>     r<span style=\"color:rgb(98,98,98)\">.</span>append(t)\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> r\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/magics/execution.py:173</span>, in <span class=\"ansi-cyan-fg\">Timer.timeit</span><span class=\"ansi-blue-fg\">(self, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    171</span> gc<span style=\"color:rgb(98,98,98)\">.</span>disable()\n<span class=\"ansi-green-fg ansi-bold\">    172</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">--&gt; 173</span>     timing <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">inner</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">it</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timer</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    174</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">finally</span>:\n<span class=\"ansi-green-fg ansi-bold\">    175</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> gcold:\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">inner</span><span class=\"ansi-blue-fg\">(_it, _timer)</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inp' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0ddbc26a .cell execution_count=27}\n``` {.python .cell-code}\n%timeit -n 100 F.conv2d(inp, left_edge[None,None])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_line_magic</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">timeit</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">-n 100 F.conv2d(inp, left_edge[None,None])</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/interactiveshell.py:2456</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_line_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, _stack_depth)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2454</span>     kwargs[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">local_ns</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>get_local_scope(stack_depth)\n<span class=\"ansi-green-fg ansi-bold\">   2455</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>builtin_trap:\n<span class=\"ansi-green-fg\">-&gt; 2456</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2458</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg ansi-bold\">   2459</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg ansi-bold\">   2460</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg ansi-bold\">   2461</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic<span style=\"color:rgb(98,98,98)\">.</span>MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/magics/execution.py:1189</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.timeit</span><span class=\"ansi-blue-fg\">(self, line, cell, local_ns)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1186</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> time_number <span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.2</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1187</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">break</span>\n<span class=\"ansi-green-fg\">-&gt; 1189</span> all_runs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1190</span> best <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">min</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n<span class=\"ansi-green-fg ansi-bold\">   1191</span> worst <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">max</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/timeit.py:206</span>, in <span class=\"ansi-cyan-fg\">Timer.repeat</span><span class=\"ansi-blue-fg\">(self, repeat, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> r <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(repeat):\n<span class=\"ansi-green-fg\">--&gt; 206</span>     t <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timeit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span>     r<span style=\"color:rgb(98,98,98)\">.</span>append(t)\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> r\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/IPython/core/magics/execution.py:173</span>, in <span class=\"ansi-cyan-fg\">Timer.timeit</span><span class=\"ansi-blue-fg\">(self, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    171</span> gc<span style=\"color:rgb(98,98,98)\">.</span>disable()\n<span class=\"ansi-green-fg ansi-bold\">    172</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">--&gt; 173</span>     timing <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">inner</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">it</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timer</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    174</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">finally</span>:\n<span class=\"ansi-green-fg ansi-bold\">    175</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> gcold:\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">inner</span><span class=\"ansi-blue-fg\">(_it, _timer)</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inp' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ef17b6d5 .cell execution_count=28}\n``` {.python .cell-code}\ndiag1_edge = tensor([[ 0,-1, 1],\n                     [-1, 1, 0],\n                     [ 1, 0, 0]]).float()\n```\n:::\n\n\n::: {#86a05ab3 .cell execution_count=29}\n``` {.python .cell-code}\nshow_image(diag1_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_image</span>(diag1_edge, noframe<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fbc9b548 .cell execution_count=30}\n``` {.python .cell-code}\ndiag2_edge = tensor([[ 1,-1, 0],\n                     [ 0, 1,-1],\n                     [ 0, 0, 1]]).float()\n```\n:::\n\n\n::: {#a62043ba .cell execution_count=31}\n``` {.python .cell-code}\nshow_image(diag2_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_image</span>(diag2_edge, noframe<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cb96694a .cell execution_count=32}\n``` {.python .cell-code}\nxb = x_imgs[:16][:,None]\nxb.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_imgs</span>[:<span style=\"color:rgb(98,98,98)\">16</span>][:,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xb<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_imgs' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4dee08a3 .cell execution_count=33}\n``` {.python .cell-code}\nedge_kernels = torch.stack([left_edge, top_edge, diag1_edge, diag2_edge])[:,None]\nedge_kernels.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\ntorch.Size([4, 1, 3, 3])\n```\n:::\n:::\n\n\n::: {#a0352228 .cell execution_count=34}\n``` {.python .cell-code}\nbatch_features = F.conv2d(xb, edge_kernels)\nbatch_features.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> batch_features <span style=\"color:rgb(98,98,98)\">=</span> F<span style=\"color:rgb(98,98,98)\">.</span>conv2d(<span class=\"ansi-yellow-bg\">xb</span>, edge_kernels)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> batch_features<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe output shape shows we gave 64 images in the mini-batch, 4 kernels, and 26×26 edge maps (we started with 28×28 images, but lost one pixel from each side as discussed earlier). We can see we get the same results as when we did this manually:\n\n::: {#35ae111b .cell execution_count=35}\n``` {.python .cell-code}\nimg0 = xb[1,0]\nshow_image(img0);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> img0 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">xb</span>[<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">0</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(img0);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cbde318d .cell execution_count=36}\n``` {.python .cell-code}\nshow_images([batch_features[1,i] for i in range(4)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>([batch_features[<span style=\"color:rgb(98,98,98)\">1</span>,i] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">4</span>)])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Strides and Padding\n\nWith appropriate padding, we can ensure that the output activation map is the same size as the original image.\n\n<img src=\"images/chapter9_padconv.svg\" id=\"pad_conv\" caption=\"A convolution with padding\" alt=\"A convolution with padding\" width=\"600\">\n\nWith a 5×5 input, 4×4 kernel, and 2 pixels of padding, we end up with a 6×6 activation map.\n\n<img alt=\"A 4×4 kernel with 5×5 input and 2 pixels of padding\" width=\"783\" caption=\"A 4×4 kernel with 5×5 input and 2 pixels of padding (courtesy of Vincent Dumoulin and Francesco Visin)\" id=\"four_by_five_conv\" src=\"images/att_00029.png\">\n\nIf we add a kernel of size `ks` by `ks` (with `ks` an odd number), the necessary padding on each side to keep the same shape is `ks//2`.\n\nWe could move over two pixels after each kernel application. This is known as a *stride-2* convolution.\n\n<img alt=\"A 3×3 kernel with 5×5 input, stride-2 convolution, and 1 pixel of padding\" width=\"774\" caption=\"A 3×3 kernel with 5×5 input, stride-2 convolution, and 1 pixel of padding (courtesy of Vincent Dumoulin and Francesco Visin)\" id=\"three_by_five_conv\" src=\"images/att_00030.png\">\n\n## Creating the CNN\n\n::: {#d3b89268 .cell execution_count=37}\n``` {.python .cell-code}\nn,m = x_train.shape\nc = y_train.max()+1\nnh = 50\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> n,m <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_train</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n<span class=\"ansi-green-fg ansi-bold\">      2</span> c <span style=\"color:rgb(98,98,98)\">=</span> y_train<span style=\"color:rgb(98,98,98)\">.</span>max()<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> nh <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">50</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fdcf7b93 .cell execution_count=38}\n``` {.python .cell-code}\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(<span class=\"ansi-yellow-bg\">m</span>,nh), nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(), nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(nh,<span style=\"color:rgb(98,98,98)\">10</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3c7006e0 .cell execution_count=39}\n``` {.python .cell-code}\nbroken_cnn = nn.Sequential(\n    nn.Conv2d(1,30, kernel_size=3, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(30,10, kernel_size=3, padding=1)\n)\n```\n:::\n\n\n::: {#1c83fb4b .cell execution_count=40}\n``` {.python .cell-code}\nbroken_cnn(xb).shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> broken_cnn(<span class=\"ansi-yellow-bg\">xb</span>)<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3a79328b .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=41}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, stride=2, act=True):\n    res = nn.Conv2d(ni, nf, stride=stride, kernel_size=ks, padding=ks//2)\n    if act: res = nn.Sequential(res, nn.ReLU())\n    return res\n```\n:::\n\n\nRefactoring parts of your neural networks like this makes it much less likely you'll get errors due to inconsistencies in your architectures, and makes it more obvious to the reader which parts of your layers are actually changing.\n\n::: {#157de1bb .cell execution_count=42}\n``` {.python .cell-code}\nsimple_cnn = nn.Sequential(\n    conv(1 ,4),            #14x14\n    conv(4 ,8),            #7x7\n    conv(8 ,16),           #4x4\n    conv(16,16),           #2x2\n    conv(16,10, act=False), #1x1\n    nn.Flatten(),\n)\n```\n:::\n\n\n::: {#65ba0d2f .cell execution_count=43}\n``` {.python .cell-code}\nsimple_cnn(xb).shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> simple_cnn(<span class=\"ansi-yellow-bg\">xb</span>)<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#852e7f19 .cell execution_count=44}\n``` {.python .cell-code}\nx_imgs = x_train.view(-1,1,28,28)\nxv_imgs = x_valid.view(-1,1,28,28)\ntrain_ds,valid_ds = Dataset(x_imgs, y_train),Dataset(xv_imgs, y_valid)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> x_imgs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">x_train</span><span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">28</span>,<span style=\"color:rgb(98,98,98)\">28</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xv_imgs <span style=\"color:rgb(98,98,98)\">=</span> x_valid<span style=\"color:rgb(98,98,98)\">.</span>view(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">28</span>,<span style=\"color:rgb(98,98,98)\">28</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> train_ds,valid_ds <span style=\"color:rgb(98,98,98)\">=</span> Dataset(x_imgs, y_train),Dataset(xv_imgs, y_valid)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cc704be1 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=45}\n``` {.python .cell-code}\ndef_device = 'mps' if torch.backends.mps.is_available() else 'cuda' if torch.cuda.is_available() else 'cpu'\n\ndef to_device(x, device=def_device):\n    if isinstance(x, torch.Tensor): return x.to(device)\n    if isinstance(x, Mapping): return {k:v.to(device) for k,v in x.items()}\n    return type(x)(to_device(o, device) for o in x)\n\ndef collate_device(b): return to_device(default_collate(b))\n```\n:::\n\n\n::: {#bf420dc8 .cell execution_count=46}\n``` {.python .cell-code}\nfrom torch import optim\n\nbs = 256\nlr = 0.4\ntrain_dl,valid_dl = get_dls(train_ds, valid_ds, bs, collate_fn=collate_device)\nopt = optim.SGD(simple_cnn.parameters(), lr=lr)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">256</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.4</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> train_dl,valid_dl <span style=\"color:rgb(98,98,98)\">=</span> get_dls(<span class=\"ansi-yellow-bg\">train_ds</span>, valid_ds, bs, collate_fn<span style=\"color:rgb(98,98,98)\">=</span>collate_device)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> opt <span style=\"color:rgb(98,98,98)\">=</span> optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(simple_cnn<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_ds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fdbcd697 .cell execution_count=47}\n``` {.python .cell-code}\nloss,acc = fit(5, simple_cnn.to(def_device), F.cross_entropy, opt, train_dl, valid_dl)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> loss,acc <span style=\"color:rgb(98,98,98)\">=</span> fit(<span style=\"color:rgb(98,98,98)\">5</span>, simple_cnn<span style=\"color:rgb(98,98,98)\">.</span>to(def_device), F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, <span class=\"ansi-yellow-bg\">opt</span>, train_dl, valid_dl)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'opt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#82157a97 .cell execution_count=48}\n``` {.python .cell-code}\nopt = optim.SGD(simple_cnn.parameters(), lr=lr/4)\nloss,acc = fit(5, simple_cnn.to(def_device), F.cross_entropy, opt, train_dl, valid_dl)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> opt <span style=\"color:rgb(98,98,98)\">=</span> optim<span style=\"color:rgb(98,98,98)\">.</span>SGD(simple_cnn<span style=\"color:rgb(98,98,98)\">.</span>parameters(), lr<span style=\"color:rgb(98,98,98)\">=</span>lr<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">4</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> loss,acc <span style=\"color:rgb(98,98,98)\">=</span> fit(<span style=\"color:rgb(98,98,98)\">5</span>, simple_cnn<span style=\"color:rgb(98,98,98)\">.</span>to(def_device), F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, opt, <span class=\"ansi-yellow-bg\">train_dl</span>, valid_dl)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Understanding Convolution Arithmetic\n\nIn an input of size `64x1x28x28` the axes are `batch,channel,height,width`. This is often represented as `NCHW` (where `N` refers to batch size). Tensorflow, on the other hand, uses `NHWC` axis order (aka \"channels-last\"). Channels-last is faster for many models, so recently it's become more common to see this as an option in PyTorch too.\n\nWe have 1 input channel, 4 output channels, and a 3×3 kernel.\n\n::: {#cb36067b .cell execution_count=49}\n``` {.python .cell-code}\nsimple_cnn[0][0]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nConv2d(1, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n```\n:::\n:::\n\n\n::: {#6e82cf15 .cell execution_count=50}\n``` {.python .cell-code}\nconv1 = simple_cnn[0][0]\nconv1.weight.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\ntorch.Size([4, 1, 3, 3])\n```\n:::\n:::\n\n\n::: {#601f4427 .cell execution_count=51}\n``` {.python .cell-code}\nconv1.bias.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\ntorch.Size([4])\n```\n:::\n:::\n\n\nThe *receptive field* is the area of an image that is involved in the calculation of a layer. *conv-example.xlsx* shows the calculation of two stride-2 convolutional layers using an MNIST digit. Here's what we see if we click on one of the cells in the *conv2* section, which shows the output of the second convolutional layer, and click *trace precedents*.\n\n<img alt=\"Immediate precedents of conv2 layer\" width=\"308\" caption=\"Immediate precedents of Conv2 layer\" id=\"preced1\" src=\"images/att_00068.png\">\n\nThe blue highlighted cells are its *precedents*—that is, the cells used to calculate its value. These cells are the corresponding 3×3 area of cells from the input layer (on the left), and the cells from the filter (on the right). Click *trace precedents* again:\n\n<img alt=\"Secondary precedents of conv2 layer\" width=\"601\" caption=\"Secondary precedents of Conv2 layer\" id=\"preced2\" src=\"images/att_00069.png\">\n\nIn this example, we have just two convolutional layers. We can see that a 7×7 area of cells in the input layer is used to calculate the single green cell in the Conv2 layer. This is the *receptive field*\n\nThe deeper we are in the network (specifically, the more stride-2 convs we have before a layer), the larger the receptive field for an activation in that layer.\n\n## Color Images\n\nA colour picture is a rank-3 tensor:\n\n::: {#b7e0c442 .cell execution_count=52}\n``` {.python .cell-code}\nfrom torchvision.io import read_image\n```\n:::\n\n\n::: {#eaedca98 .cell execution_count=53}\n``` {.python .cell-code}\nim = read_image('images/grizzly.jpg')\nim.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\ntorch.Size([3, 1000, 846])\n```\n:::\n:::\n\n\n::: {#418ac100 .cell execution_count=54}\n``` {.python .cell-code}\nshow_image(im.permute(1,2,0));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_image</span>(im<span style=\"color:rgb(98,98,98)\">.</span>permute(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">0</span>));\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#edd6fd59 .cell execution_count=55}\n``` {.python .cell-code}\n_,axs = plt.subplots(1,3)\nfor bear,ax,color in zip(im,axs,('Reds','Greens','Blues')): show_image(255-bear, ax=ax, cmap=color)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> _,axs <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">3</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> bear,ax,color <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(im,axs,(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Reds</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Greens</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Blues</span><span style=\"color:rgb(175,0,0)\">'</span>)): show_image(<span style=\"color:rgb(98,98,98)\">255</span><span style=\"color:rgb(98,98,98)\">-</span>bear, ax<span style=\"color:rgb(98,98,98)\">=</span>ax, cmap<span style=\"color:rgb(98,98,98)\">=</span>color)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](07_convolutions_files/figure-html/cell-56-output-2.png){width=181 height=130}\n:::\n:::\n\n\n<img src=\"images/chapter9_rgbconv.svg\" id=\"rgbconv\" caption=\"Convolution over an RGB image\" alt=\"Convolution over an RGB image\" width=\"550\">\n\nThese are then all added together, to produce a single number, for each grid location, for each output feature.\n\n<img src=\"images/chapter9_rgb_conv_stack.svg\" id=\"rgbconv2\" caption=\"Adding the RGB filters\" alt=\"Adding the RGB filters\" width=\"500\">\n\nWe have `ch_out` filters like this, so in the end, the result of our convolutional layer will be a batch of images with `ch_out` channels.\n\n## Export -\n\n::: {#f64897cf .cell execution_count=56}\n``` {.python .cell-code}\nimport nbdev; nbdev.nbdev_export()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">nbdev</span>; nbdev<span style=\"color:rgb(98,98,98)\">.</span>nbdev_export()\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'nbdev'</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "07_convolutions_files"
    ],
    "filters": [],
    "includes": {}
  }
}