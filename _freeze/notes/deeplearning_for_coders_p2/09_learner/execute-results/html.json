{
  "hash": "da10a0747d6c3dd6e7ca0e226814c534",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Learner\njupyter: python3\n---\n\n::: {#692e0830 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=1}\n``` {.python .cell-code}\nimport math,torch,matplotlib.pyplot as plt\nimport fastcore.all as fc\nfrom collections.abc import Mapping\nfrom operator import attrgetter\nfrom functools import partial\nfrom copy import copy\n\nfrom torch import optim\nimport torch.nn.functional as F\n\nfrom miniai.conv import *\n\nfrom fastprogress import progress_bar,master_bar\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">operator</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> attrgetter\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7c36cbd9 .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib as mpl\nimport torchvision.transforms.functional as TF\nfrom contextlib import contextmanager\nfrom torch import nn,tensor\nfrom datasets import load_dataset,load_dataset_builder\nfrom miniai.datasets import *\nfrom miniai.conv import *\nimport logging\nfrom fastcore.test import test_close\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">contextlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> contextmanager\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nn,tensor\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> load_dataset,load_dataset_builder\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">conv</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'datasets'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#959588b0 .cell execution_count=3}\n``` {.python .cell-code}\ntorch.set_printoptions(precision=2, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray'\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<torch._C.Generator at 0x776e99fa3570>\n```\n:::\n:::\n\n\n::: {#8ef2e018 .cell execution_count=4}\n``` {.python .cell-code}\nlogging.disable(logging.WARNING)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">logging</span><span style=\"color:rgb(98,98,98)\">.</span>disable(logging<span style=\"color:rgb(98,98,98)\">.</span>WARNING)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'logging' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ac09dcfa .cell execution_count=5}\n``` {.python .cell-code}\nx,y = 'image','label'\nname = \"fashion_mnist\"\ndsd = load_dataset(name)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> x,y <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">label</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> name <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fashion_mnist</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#855e1211 .cell execution_count=6}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[x] = [torch.flatten(TF.to_tensor(o)) for o in b[x]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[x] <span style=\"color:rgb(98,98,98)\">=</span> [torch<span style=\"color:rgb(98,98,98)\">.</span>flatten(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o)) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[x]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d3e48ded .cell execution_count=7}\n``` {.python .cell-code}\nbs = 1024\ntds = dsd.with_transform(transformi)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1024</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">dsd</span><span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dsd' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#971f49f7 .cell execution_count=8}\n``` {.python .cell-code}\ndls = DataLoaders.from_dd(tds, bs, num_workers=4)\ndt = dls.train\nxb,yb = next(iter(dt))\nxb.shape,yb[:10]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> dls <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">DataLoaders</span><span style=\"color:rgb(98,98,98)\">.</span>from_dd(tds, bs, num_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> dt <span style=\"color:rgb(98,98,98)\">=</span> dls<span style=\"color:rgb(98,98,98)\">.</span>train\n<span class=\"ansi-green-fg ansi-bold\">      3</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(dt))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DataLoaders' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9625286d .cell execution_count=9}\n``` {.python .cell-code}\nclass Learner:\n    def __init__(self, model, dls, loss_func, lr, opt_func=optim.SGD): fc.store_attr()\n\n    def one_batch(self):\n        self.xb,self.yb = to_device(self.batch)\n        self.preds = self.model(self.xb)\n        self.loss = self.loss_func(self.preds, self.yb)\n        if self.model.training:\n            self.loss.backward()\n            self.opt.step()\n            self.opt.zero_grad()\n        with torch.no_grad(): self.calc_stats()\n\n    def calc_stats(self):\n        acc = (self.preds.argmax(dim=1)==self.yb).float().sum()\n        self.accs.append(acc)\n        n = len(self.xb)\n        self.losses.append(self.loss*n)\n        self.ns.append(n)\n\n    def one_epoch(self, train):\n        self.model.training = train\n        dl = self.dls.train if train else self.dls.valid\n        for self.num,self.batch in enumerate(dl): self.one_batch()\n        n = sum(self.ns)\n        print(self.epoch, self.model.training, sum(self.losses).item()/n, sum(self.accs).item()/n)\n    \n    def fit(self, n_epochs):\n        self.accs,self.losses,self.ns = [],[],[]\n        self.model.to(def_device)\n        self.opt = self.opt_func(self.model.parameters(), self.lr)\n        self.n_epochs = n_epochs\n        for self.epoch in range(n_epochs):\n            self.one_epoch(True)\n            with torch.no_grad(): self.one_epoch(False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls, loss_func, lr, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">one_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>):\n\nCell <span class=\"ansi-green-fg\">In[9], line 2</span>, in <span class=\"ansi-cyan-fg\">Learner</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>:\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls, loss_func, lr, opt_func<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">optim</span><span style=\"color:rgb(98,98,98)\">.</span>SGD): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">one_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>):\n<span class=\"ansi-green-fg ansi-bold\">      5</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>xb,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>yb <span style=\"color:rgb(98,98,98)\">=</span> to_device(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>batch)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'optim' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fb286970 .cell execution_count=10}\n``` {.python .cell-code}\nm,nh = 28*28,50\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n```\n:::\n\n\n::: {#56e13c0c .cell execution_count=11}\n``` {.python .cell-code}\nlearn = Learner(model, dls, F.cross_entropy, lr=0.2)\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> learn <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Learner</span>(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Learner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Basic Callbacks Learner\n\n::: {#401101b6 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=12}\n``` {.python .cell-code}\nclass CancelFitException(Exception): pass\nclass CancelBatchException(Exception): pass\nclass CancelEpochException(Exception): pass\n```\n:::\n\n\n::: {#b74153fc .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=13}\n``` {.python .cell-code}\nclass Callback(): order = 0\n```\n:::\n\n\n::: {#cc5b34c7 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=14}\n``` {.python .cell-code}\ndef run_cbs(cbs, method_nm, learn=None):\n    for cb in sorted(cbs, key=attrgetter('order')):\n        method = getattr(cb, method_nm, None)\n        if method is not None: method(learn)\n```\n:::\n\n\n::: {#9c9160d5 .cell execution_count=15}\n``` {.python .cell-code}\nclass CompletionCB(Callback):\n    def before_fit(self, learn): self.count = 0\n    def after_batch(self, learn): self.count += 1\n    def after_fit(self, learn): print(f'Completed {self.count} batches')\n```\n:::\n\n\n::: {#71539935 .cell execution_count=16}\n``` {.python .cell-code}\ncbs = [CompletionCB()]\nrun_cbs(cbs, 'before_fit')\nrun_cbs(cbs, 'after_batch')\nrun_cbs(cbs, 'after_fit')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [CompletionCB()]\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">run_cbs</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">cbs</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">before_fit</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> run_cbs(cbs, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">after_batch</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> run_cbs(cbs, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">after_fit</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\nCell <span class=\"ansi-green-fg\">In[14], line 2</span>, in <span class=\"ansi-cyan-fg\">run_cbs</span><span class=\"ansi-blue-fg\">(cbs, method_nm, learn)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">run_cbs</span>(cbs, method_nm, learn<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> cb <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">sorted</span>(cbs, key<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">attrgetter</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">order</span><span style=\"color:rgb(175,0,0)\">'</span>)):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         method <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(cb, method_nm, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> method <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>: method(learn)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'attrgetter' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#660f0baa .cell execution_count=17}\n``` {.python .cell-code}\nclass Learner():\n    def __init__(self, model, dls, loss_func, lr, cbs, opt_func=optim.SGD): fc.store_attr()\n\n    def one_batch(self):\n        self.preds = self.model(self.batch[0])\n        self.loss = self.loss_func(self.preds, self.batch[1])\n        if self.model.training:\n            self.loss.backward()\n            self.opt.step()\n            self.opt.zero_grad()\n\n    def one_epoch(self, train):\n        self.model.train(train)\n        self.dl = self.dls.train if train else self.dls.valid\n        try:\n            self.callback('before_epoch')\n            for self.iter,self.batch in enumerate(self.dl):\n                try:\n                    self.callback('before_batch')\n                    self.one_batch()\n                    self.callback('after_batch')\n                except CancelBatchException: pass\n            self.callback('after_epoch')\n        except CancelEpochException: pass\n    \n    def fit(self, n_epochs):\n        self.n_epochs = n_epochs\n        self.epochs = range(n_epochs)\n        self.opt = self.opt_func(self.model.parameters(), self.lr)\n        try:\n            self.callback('before_fit')\n            for self.epoch in self.epochs:\n                self.one_epoch(True)\n                self.one_epoch(False)\n            self.callback('after_fit')\n        except CancelFitException: pass\n\n    def callback(self, method_nm): run_cbs(self.cbs, method_nm, self)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls, loss_func, lr, cbs, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">one_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>):\n\nCell <span class=\"ansi-green-fg\">In[17], line 2</span>, in <span class=\"ansi-cyan-fg\">Learner</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls, loss_func, lr, cbs, opt_func<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">optim</span><span style=\"color:rgb(98,98,98)\">.</span>SGD): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">one_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>):\n<span class=\"ansi-green-fg ansi-bold\">      5</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>preds <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>model(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>batch[<span style=\"color:rgb(98,98,98)\">0</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'optim' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c529dda6 .cell execution_count=18}\n``` {.python .cell-code}\nm,nh = 28*28,50\ndef get_model(): return nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n```\n:::\n\n\n::: {#02b6c054 .cell execution_count=19}\n``` {.python .cell-code}\nmodel = get_model()\nlearn = Learner(model, dls, F.cross_entropy, lr=0.2, cbs=[CompletionCB()])\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model()\n<span class=\"ansi-green-fg\">----&gt; 2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Learner</span>(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>[CompletionCB()])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Learner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dfa44a22 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=20}\n``` {.python .cell-code}\nclass SingleBatchCB(Callback):\n    order = 1\n    def after_batch(self, learn): raise CancelFitException()\n```\n:::\n\n\n::: {#216fc362 .cell execution_count=21}\n``` {.python .cell-code}\nlearn = Learner(get_model(), dls, F.cross_entropy, lr=0.2, cbs=[SingleBatchCB(), CompletionCB()])\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> learn <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Learner</span>(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>[SingleBatchCB(), CompletionCB()])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Learner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Metrics\n\n::: {#82fa9117 .cell execution_count=22}\n``` {.python .cell-code}\nclass Metric:\n    def __init__(self): self.reset()\n    def reset(self): self.vals,self.ns = [],[]\n    def add(self, inp, targ=None, n=1):\n        self.last = self.calc(inp, targ)\n        self.vals.append(self.last)\n        self.ns.append(n)\n    @property\n    def value(self):\n        ns = tensor(self.ns)\n        return (tensor(self.vals)*ns).sum()/ns.sum()\n    def calc(self, inps, targs): return inps\n```\n:::\n\n\n::: {#53914e59 .cell execution_count=23}\n``` {.python .cell-code}\nclass Accuracy(Metric):\n    def calc(self, inps, targs): return (inps==targs).float().mean()\n```\n:::\n\n\n::: {#11e48807 .cell execution_count=24}\n``` {.python .cell-code}\nacc = Accuracy()\nacc.add(tensor([0, 1, 2, 0, 1, 2]), tensor([0, 1, 1, 2, 1, 0]))\nacc.add(tensor([1, 1, 2, 0, 1]), tensor([0, 1, 1, 2, 1]))\nacc.value\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ntensor(0.45)\n```\n:::\n:::\n\n\n::: {#d3e2cd01 .cell execution_count=25}\n``` {.python .cell-code}\nloss = Metric()\nloss.add(0.6, n=32)\nloss.add(0.9, n=2)\nloss.value, round((0.6*32+0.9*2)/(32+2), 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n(tensor(0.62), 0.62)\n```\n:::\n:::\n\n\n## Some callbacks\n\n```\npip install torcheval\n```\n\n::: {#12d08492 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=26}\n``` {.python .cell-code}\nfrom torcheval.metrics import MulticlassAccuracy,Mean\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MulticlassAccuracy,Mean\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'torcheval'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ac98a168 .cell execution_count=27}\n``` {.python .cell-code}\nmetric = MulticlassAccuracy()\nmetric.update(tensor([0, 2, 1, 3]), tensor([0, 1, 2, 3]))\nmetric.compute()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metric <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MulticlassAccuracy</span>()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> metric<span style=\"color:rgb(98,98,98)\">.</span>update(tensor([<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">2</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">3</span>]), tensor([<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">2</span>, <span style=\"color:rgb(98,98,98)\">3</span>]))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> metric<span style=\"color:rgb(98,98,98)\">.</span>compute()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MulticlassAccuracy' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#79d511d1 .cell execution_count=28}\n``` {.python .cell-code}\nmetric.reset()\nmetric.compute()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">metric</span><span style=\"color:rgb(98,98,98)\">.</span>reset()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> metric<span style=\"color:rgb(98,98,98)\">.</span>compute()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'metric' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cc23cdc6 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=29}\n``` {.python .cell-code}\ndef to_cpu(x):\n    if isinstance(x, Mapping): return {k:to_cpu(v) for k,v in x.items()}\n    if isinstance(x, list): return [to_cpu(o) for o in x]\n    if isinstance(x, tuple): return tuple(to_cpu(list(x)))\n    res = x.detach().cpu()\n    return res.float() if res.dtype==torch.float16 else res\n```\n:::\n\n\n::: {#691ebadf .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=30}\n``` {.python .cell-code}\nclass MetricsCB(Callback):\n    def __init__(self, *ms, **metrics):\n        for o in ms: metrics[type(o).__name__] = o\n        self.metrics = metrics\n        self.all_metrics = copy(metrics)\n        self.all_metrics['loss'] = self.loss = Mean()\n\n    def _log(self, d): print(d)\n    def before_fit(self, learn): learn.metrics = self\n    def before_epoch(self, learn): [o.reset() for o in self.all_metrics.values()]\n\n    def after_epoch(self, learn):\n        log = {k:f'{v.compute():.3f}' for k,v in self.all_metrics.items()}\n        log['epoch'] = learn.epoch\n        log['train'] = 'train' if learn.model.training else 'eval'\n        self._log(log)\n\n    def after_batch(self, learn):\n        x,y,*_ = to_cpu(learn.batch)\n        for m in self.metrics.values(): m.update(to_cpu(learn.preds), y)\n        self.loss.update(to_cpu(learn.loss), weight=len(x))\n```\n:::\n\n\n::: {#df3f621b .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=31}\n``` {.python .cell-code}\nclass DeviceCB(Callback):\n    def __init__(self, device=def_device): fc.store_attr()\n    def before_fit(self, learn):\n        if hasattr(learn.model, 'to'): learn.model.to(self.device)\n    def before_batch(self, learn): learn.batch = to_device(learn.batch, device=self.device)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">DeviceCB</span>(Callback):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, device<span style=\"color:rgb(98,98,98)\">=</span>def_device): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">before_fit</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn):\n\nCell <span class=\"ansi-green-fg\">In[31], line 2</span>, in <span class=\"ansi-cyan-fg\">DeviceCB</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">DeviceCB</span>(Callback):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, device<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">def_device</span>): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">before_fit</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(learn<span style=\"color:rgb(98,98,98)\">.</span>model, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">to</span><span style=\"color:rgb(175,0,0)\">'</span>): learn<span style=\"color:rgb(98,98,98)\">.</span>model<span style=\"color:rgb(98,98,98)\">.</span>to(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>device)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'def_device' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#757203ab .cell execution_count=32}\n``` {.python .cell-code}\nmodel = get_model()\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\nlearn = Learner(model, dls, F.cross_entropy, lr=0.2, cbs=[DeviceCB(), metrics])\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model()\n<span class=\"ansi-green-fg\">----&gt; 2</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> MetricsCB(accuracy<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">MulticlassAccuracy</span>())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB(), metrics])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MulticlassAccuracy' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Flexible learner\n\n::: {#9e2e1d1d .cell execution_count=33}\n``` {.python .cell-code}\nclass Learner():\n    def __init__(self, model, dls=(0,), loss_func=F.mse_loss, lr=0.1, cbs=None, opt_func=optim.SGD):\n        cbs = fc.L(cbs)\n        fc.store_attr()\n\n    @contextmanager\n    def cb_ctx(self, nm):\n        try:\n            self.callback(f'before_{nm}')\n            yield\n            self.callback(f'after_{nm}')\n        except globals()[f'Cancel{nm.title()}Exception']: pass\n        finally: self.callback(f'cleanup_{nm}')\n                \n    def one_epoch(self, train):\n        self.model.train(train)\n        self.dl = self.dls.train if train else self.dls.valid\n        with self.cb_ctx('epoch'):\n            for self.iter,self.batch in enumerate(self.dl):\n                with self.cb_ctx('batch'):\n                    self.predict()\n                    self.get_loss()\n                    if self.training:\n                        self.backward()\n                        self.step()\n                        self.zero_grad()\n    \n    def fit(self, n_epochs=1, train=True, valid=True, cbs=None, lr=None):\n        cbs = fc.L(cbs)\n        # `add_cb` and `rm_cb` were added in lesson 18\n        for cb in cbs: self.cbs.append(cb)\n        try:\n            self.n_epochs = n_epochs\n            self.epochs = range(n_epochs)\n            self.opt = self.opt_func(self.model.parameters(), self.lr if lr is None else lr)\n            with self.cb_ctx('fit'):\n                for self.epoch in self.epochs:\n                    if train: self.one_epoch(True)\n                    if valid: torch.no_grad()(self.one_epoch)(False)\n        finally:\n            for cb in cbs: self.cbs.remove(cb)\n\n    def __getattr__(self, name):\n        if name in ('predict','get_loss','backward','step','zero_grad'): return partial(self.callback, name)\n        raise AttributeError(name)\n\n    def callback(self, method_nm): run_cbs(self.cbs, method_nm, self)\n    \n    @property\n    def training(self): return self.model.training\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">0</span>,), loss_func<span style=\"color:rgb(98,98,98)\">=</span>F<span style=\"color:rgb(98,98,98)\">.</span>mse_loss, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         cbs <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>L(cbs)\n\nCell <span class=\"ansi-green-fg\">In[33], line 2</span>, in <span class=\"ansi-cyan-fg\">Learner</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">0</span>,), loss_func<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">F</span><span style=\"color:rgb(98,98,98)\">.</span>mse_loss, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         cbs <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>L(cbs)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'F' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6184bf4f .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=34}\n``` {.python .cell-code}\nclass TrainCB(Callback):\n    def __init__(self, n_inp=1): self.n_inp = n_inp\n    def predict(self, learn): learn.preds = learn.model(*learn.batch[:self.n_inp])\n    def get_loss(self, learn): learn.loss = learn.loss_func(learn.preds, *learn.batch[self.n_inp:])\n    def backward(self, learn): learn.loss.backward()\n    def step(self, learn): learn.opt.step()\n    def zero_grad(self, learn): learn.opt.zero_grad()\n```\n:::\n\n\nNB: I added `self.n_inp` after the lesson. This allows us to train models with more than one input or output.\n\n::: {#8bbcfd8d .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=35}\n``` {.python .cell-code}\nclass ProgressCB(Callback):\n    order = MetricsCB.order+1\n    def __init__(self, plot=False): self.plot = plot\n    def before_fit(self, learn):\n        learn.epochs = self.mbar = master_bar(learn.epochs)\n        self.first = True\n        if hasattr(learn, 'metrics'): learn.metrics._log = self._log\n        self.losses = []\n        self.val_losses = []\n\n    def _log(self, d):\n        if self.first:\n            self.mbar.write(list(d), table=True)\n            self.first = False\n        self.mbar.write(list(d.values()), table=True)\n\n    def before_epoch(self, learn): learn.dl = progress_bar(learn.dl, leave=False, parent=self.mbar)\n    def after_batch(self, learn):\n        learn.dl.comment = f'{learn.loss:.3f}'\n        if self.plot and hasattr(learn, 'metrics') and learn.training:\n            self.losses.append(learn.loss.item())\n            if self.val_losses: self.mbar.update_graph([[fc.L.range(self.losses), self.losses],[fc.L.range(learn.epoch).map(lambda x: (x+1)*len(learn.dls.train)), self.val_losses]])\n    \n    def after_epoch(self, learn): \n        if not learn.training:\n            if self.plot and hasattr(learn, 'metrics'): \n                self.val_losses.append(learn.metrics.all_metrics['loss'].compute())\n                self.mbar.update_graph([[fc.L.range(self.losses), self.losses],[fc.L.range(learn.epoch+1).map(lambda x: (x+1)*len(learn.dls.train)), self.val_losses]])\n```\n:::\n\n\nNB: Added validation loss plotting after the lesson.\n\n::: {#d18bb35c .cell execution_count=36}\n``` {.python .cell-code}\nmodel = get_model()\n```\n:::\n\n\n::: {#fbd1826b .cell execution_count=37}\n``` {.python .cell-code}\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ncbs = [TrainCB(), DeviceCB(), metrics, ProgressCB(plot=True)]\nlearn = Learner(model, dls, F.cross_entropy, lr=0.2, cbs=cbs)\nlearn.fit(2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> MetricsCB(accuracy<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">MulticlassAccuracy</span>())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [TrainCB(), DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MulticlassAccuracy' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Updated versions since the lesson\n\nAfter the lesson we noticed that `contextlib.context_manager` has a surprising \"feature\" which doesn't let us raise an exception before the `yield`. Therefore we've replaced the context manager with a decorator in this updated version of `Learner`. We have also added a few more callbacks in `one_epoch()`.\n\n::: {#e559fa6a .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=38}\n``` {.python .cell-code}\nclass with_cbs:\n    def __init__(self, nm): self.nm = nm\n    def __call__(self, f):\n        def _f(o, *args, **kwargs):\n            try:\n                o.callback(f'before_{self.nm}')\n                f(o, *args, **kwargs)\n                o.callback(f'after_{self.nm}')\n            except globals()[f'Cancel{self.nm.title()}Exception']: pass\n            finally: o.callback(f'cleanup_{self.nm}')\n        return _f\n```\n:::\n\n\n::: {#a27d4194 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=39}\n``` {.python .cell-code}\nclass Learner():\n    def __init__(self, model, dls=(0,), loss_func=F.mse_loss, lr=0.1, cbs=None, opt_func=optim.SGD):\n        cbs = fc.L(cbs)\n        fc.store_attr()\n\n    @with_cbs('batch')\n    def _one_batch(self):\n        self.predict()\n        self.callback('after_predict')\n        self.get_loss()\n        self.callback('after_loss')\n        if self.training:\n            self.backward()\n            self.callback('after_backward')\n            self.step()\n            self.callback('after_step')\n            self.zero_grad()\n\n    @with_cbs('epoch')\n    def _one_epoch(self):\n        for self.iter,self.batch in enumerate(self.dl): self._one_batch()\n\n    def one_epoch(self, training):\n        self.model.train(training)\n        self.dl = self.dls.train if training else self.dls.valid\n        self._one_epoch()\n\n    @with_cbs('fit')\n    def _fit(self, train, valid):\n        for self.epoch in self.epochs:\n            if train: self.one_epoch(True)\n            if valid: torch.no_grad()(self.one_epoch)(False)\n\n    def fit(self, n_epochs=1, train=True, valid=True, cbs=None, lr=None):\n        cbs = fc.L(cbs)\n        # `add_cb` and `rm_cb` were added in lesson 18\n        for cb in cbs: self.cbs.append(cb)\n        try:\n            self.n_epochs = n_epochs\n            self.epochs = range(n_epochs)\n            if lr is None: lr = self.lr\n            if self.opt_func: self.opt = self.opt_func(self.model.parameters(), lr)\n            self._fit(train, valid)\n        finally:\n            for cb in cbs: self.cbs.remove(cb)\n\n    def __getattr__(self, name):\n        if name in ('predict','get_loss','backward','step','zero_grad'): return partial(self.callback, name)\n        raise AttributeError(name)\n\n    def callback(self, method_nm): run_cbs(self.cbs, method_nm, self)\n    \n    @property\n    def training(self): return self.model.training\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">0</span>,), loss_func<span style=\"color:rgb(98,98,98)\">=</span>F<span style=\"color:rgb(98,98,98)\">.</span>mse_loss, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         cbs <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>L(cbs)\n\nCell <span class=\"ansi-green-fg\">In[39], line 2</span>, in <span class=\"ansi-cyan-fg\">Learner</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Learner</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">0</span>,), loss_func<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">F</span><span style=\"color:rgb(98,98,98)\">.</span>mse_loss, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         cbs <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>L(cbs)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'F' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6efb893c .cell execution_count=40}\n``` {.python .cell-code}\nmodel = get_model()\n\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ncbs = [TrainCB(), DeviceCB(), metrics, ProgressCB(plot=True)]\nlearn = Learner(model, dls, F.cross_entropy, lr=0.2, cbs=cbs)\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model()\n<span class=\"ansi-green-fg\">----&gt; 3</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> MetricsCB(accuracy<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">MulticlassAccuracy</span>())\n<span class=\"ansi-green-fg ansi-bold\">      4</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [TrainCB(), DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)]\n<span class=\"ansi-green-fg ansi-bold\">      5</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MulticlassAccuracy' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## TrainLearner and MomentumLearner\n\n::: {#54e49b48 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=41}\n``` {.python .cell-code}\nclass TrainLearner(Learner):\n    def predict(self): self.preds = self.model(self.batch[0])\n    def get_loss(self): self.loss = self.loss_func(self.preds, self.batch[1])\n    def backward(self): self.loss.backward()\n    def step(self): self.opt.step()\n    def zero_grad(self): self.opt.zero_grad()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TrainLearner</span>(<span class=\"ansi-yellow-bg\">Learner</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">predict</span>(<span style=\"color:rgb(0,135,0)\">self</span>): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>preds <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>model(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>batch[<span style=\"color:rgb(98,98,98)\">0</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_loss</span>(<span style=\"color:rgb(0,135,0)\">self</span>): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>loss <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>loss_func(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>preds, <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>batch[<span style=\"color:rgb(98,98,98)\">1</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Learner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d7698311 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=42}\n``` {.python .cell-code}\nclass MomentumLearner(TrainLearner):\n    def __init__(self, model, dls, loss_func, lr=None, cbs=None, opt_func=optim.SGD, mom=0.85):\n        self.mom = mom\n        super().__init__(model, dls, loss_func, lr, cbs, opt_func)\n\n    def zero_grad(self):\n        with torch.no_grad():\n            for p in self.model.parameters(): p.grad *= self.mom\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">MomentumLearner</span>(<span class=\"ansi-yellow-bg\">TrainLearner</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, model, dls, loss_func, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>SGD, mom<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.85</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>mom <span style=\"color:rgb(98,98,98)\">=</span> mom\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d19b951d .cell execution_count=43}\n``` {.python .cell-code}\n# NB: No TrainCB\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True)]\nlearn = MomentumLearner(get_model(), dls, F.cross_entropy, lr=0.1, cbs=cbs)\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># NB: No TrainCB</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> MetricsCB(accuracy<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">MulticlassAccuracy</span>())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MulticlassAccuracy' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## LRFinderCB\n\n::: {#06a0b6b2 .cell execution_count=44}\n``` {.python .cell-code}\nclass LRFinderCB(Callback):\n    def __init__(self, lr_mult=1.3): fc.store_attr()\n    \n    def before_fit(self, learn):\n        self.lrs,self.losses = [],[]\n        self.min = math.inf\n\n    def after_batch(self, learn):\n        if not learn.training: raise CancelEpochException()\n        self.lrs.append(learn.opt.param_groups[0]['lr'])\n        loss = to_cpu(learn.loss)\n        self.losses.append(loss)\n        if loss < self.min: self.min = loss\n        if loss > self.min*3: raise CancelFitException()\n        for g in learn.opt.param_groups: g['lr'] *= self.lr_mult\n```\n:::\n\n\n::: {#31b2e779 .cell execution_count=45}\n``` {.python .cell-code}\nlrfind = LRFinderCB()\ncbs = [DeviceCB(), lrfind]\nlearn = MomentumLearner(get_model(), dls, F.cross_entropy, lr=1e-4, cbs=cbs)\nlearn.fit(1)\nplt.plot(lrfind.lrs, lrfind.losses)\nplt.xscale('log')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> lrfind <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">LRFinderCB</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), lrfind]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-4</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\nCell <span class=\"ansi-green-fg\">In[44], line 2</span>, in <span class=\"ansi-cyan-fg\">LRFinderCB.__init__</span><span class=\"ansi-blue-fg\">(self, lr_mult)</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, lr_mult<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.3</span>): <span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cce56974 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=46}\n``` {.python .cell-code}\nfrom torch.optim.lr_scheduler import ExponentialLR\n```\n:::\n\n\n[ExponentialLR](https://pytorch.org/docs/stable/generated/torch.optim.lr_scheduler.ExponentialLR.html#torch.optim.lr_scheduler.ExponentialLR)\n\n::: {#2eb81a43 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=47}\n``` {.python .cell-code}\nclass LRFinderCB(Callback):\n    def __init__(self, gamma=1.3, max_mult=3): fc.store_attr()\n    \n    def before_fit(self, learn):\n        self.sched = ExponentialLR(learn.opt, self.gamma)\n        self.lrs,self.losses = [],[]\n        self.min = math.inf\n\n    def after_batch(self, learn):\n        if not learn.training: raise CancelEpochException()\n        self.lrs.append(learn.opt.param_groups[0]['lr'])\n        loss = to_cpu(learn.loss)\n        self.losses.append(loss)\n        if loss < self.min: self.min = loss\n        if math.isnan(loss) or (loss > self.min*self.max_mult):\n            raise CancelFitException()\n        self.sched.step()\n\n    def cleanup_fit(self, learn):\n        plt.plot(self.lrs, self.losses)\n        plt.xscale('log')\n```\n:::\n\n\n::: {#9f5555ea .cell execution_count=48}\n``` {.python .cell-code}\ncbs = [DeviceCB()]\nlearn = MomentumLearner(get_model(), dls, F.cross_entropy, lr=1e-5, cbs=cbs)\nlearn.fit(3, cbs=LRFinderCB())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [<span class=\"ansi-yellow-bg\">DeviceCB</span>()]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">3</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>LRFinderCB())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DeviceCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dbca9db6 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=49}\n``` {.python .cell-code}\n@fc.patch\ndef lr_find(self:Learner, gamma=1.3, max_mult=3, start_lr=1e-5, max_epochs=10):\n    self.fit(max_epochs, lr=start_lr, cbs=LRFinderCB(gamma=gamma, max_mult=max_mult))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@fc</span><span style=\"color:rgb(98,98,98)\">.</span>patch\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">lr_find</span>(<span style=\"color:rgb(0,135,0)\">self</span>:Learner, gamma<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.3</span>, max_mult<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, start_lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>, max_epochs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>fit(max_epochs, lr<span style=\"color:rgb(98,98,98)\">=</span>start_lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>LRFinderCB(gamma<span style=\"color:rgb(98,98,98)\">=</span>gamma, max_mult<span style=\"color:rgb(98,98,98)\">=</span>max_mult))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n`lr_find` was added in lesson 18. It's just a shorter way of using `LRFinderCB`.\n\n::: {#22dcf625 .cell execution_count=50}\n``` {.python .cell-code}\nMomentumLearner(get_model(), dls, F.cross_entropy, cbs=cbs).lr_find()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">MomentumLearner</span>(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)<span style=\"color:rgb(98,98,98)\">.</span>lr_find()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MomentumLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Export -\n\n::: {#c74c9d49 .cell execution_count=51}\n``` {.python .cell-code}\nimport nbdev; nbdev.nbdev_export()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">nbdev</span>; nbdev<span style=\"color:rgb(98,98,98)\">.</span>nbdev_export()\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'nbdev'</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "09_learner_files"
    ],
    "filters": [],
    "includes": {}
  }
}