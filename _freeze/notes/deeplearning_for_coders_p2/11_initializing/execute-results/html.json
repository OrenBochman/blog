{
  "hash": "ade65973b7a3a3512954dc1c2c874420",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Initialization\njupyter:\n  jupytext:\n    split_at_heading: true\n  kernelspec:\n    display_name: python3\n    language: python\n    name: python3\n---\n\n::: {#82578970 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=1}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nimport sys,gc,traceback\nimport fastcore.all as fc\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom functools import partial\nfrom copy import copy\nfrom contextlib import contextmanager\n\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torch import tensor,nn,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.nn import init\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sys</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gc</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">traceback</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pathlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Path\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9e3f2937 .cell execution_count=2}\n``` {.python .cell-code}\nfrom fastcore.test import test_close\n\ntorch.set_printoptions(precision=2, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\n\nimport logging\nlogging.disable(logging.WARNING)\n\nset_seed(42)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">test</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> test_close\n<span class=\"ansi-green-fg ansi-bold\">      3</span> torch<span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a2c0ce89 .cell execution_count=3}\n``` {.python .cell-code}\nxl,yl = 'image','label'\nname = \"fashion_mnist\"\ndsd = load_dataset(name)\n\n@inplace\ndef transformi(b): b[xl] = [TF.to_tensor(o) for o in b[xl]]\n\nbs = 1024\ntds = dsd.with_transform(transformi)\n\ndls = DataLoaders.from_dd(tds, bs, num_workers=4)\ndt = dls.train\nxb,yb = next(iter(dt))\nxb.shape,yb[:10]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> xl,yl <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">label</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> name <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fashion_mnist</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d46f93c6 .cell execution_count=4}\n``` {.python .cell-code}\ndef get_model():\n    return nn.Sequential(conv(1 ,8), conv(8 ,16), conv(16,32), conv(32,64),\n                         conv(64,10, act=False), nn.Flatten()).to(def_device)\n```\n:::\n\n\n::: {#709d9ca4 .cell execution_count=5}\n``` {.python .cell-code}\nMomentumLearner(get_model(), dls, F.cross_entropy, cbs=[DeviceCB()]).lr_find(gamma=1.1, start_lr=1e-2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">MomentumLearner</span>(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB()])<span style=\"color:rgb(98,98,98)\">.</span>lr_find(gamma<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.1</span>, start_lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MomentumLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9092c5ad .cell execution_count=6}\n``` {.python .cell-code}\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\nastats = ActivationStats(fc.risinstance(nn.ReLU))\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True), astats]\nlearn = MomentumLearner(get_model(), dls, F.cross_entropy, lr=0.2, cbs=cbs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MetricsCB</span>(accuracy<span style=\"color:rgb(98,98,98)\">=</span>MulticlassAccuracy())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> astats <span style=\"color:rgb(98,98,98)\">=</span> ActivationStats(fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), astats]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MetricsCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c46fca8d .cell execution_count=7}\n``` {.python .cell-code}\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3d06100a .cell execution_count=8}\n``` {.python .cell-code}\nastats.color_dim()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>color_dim()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#59d25b69 .cell execution_count=9}\n``` {.python .cell-code}\nastats.plot_stats()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>plot_stats()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#62fbdaa0 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=10}\n``` {.python .cell-code}\ndef clean_ipython_hist():\n    # Code in this function mainly copied from IPython source\n    if not 'get_ipython' in globals(): return\n    ip = get_ipython()\n    user_ns = ip.user_ns\n    ip.displayhook.flush()\n    pc = ip.displayhook.prompt_count + 1\n    for n in range(1, pc): user_ns.pop('_i'+repr(n),None)\n    user_ns.update(dict(_i='',_ii='',_iii=''))\n    hm = ip.history_manager\n    hm.input_hist_parsed[:] = [''] * pc\n    hm.input_hist_raw[:] = [''] * pc\n    hm._i = hm._ii = hm._iii = hm._i00 =  ''\n```\n:::\n\n\n::: {#c42e78f6 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=11}\n``` {.python .cell-code}\ndef clean_tb():\n    # h/t Piotr Czapla\n    if hasattr(sys, 'last_traceback'):\n        traceback.clear_frames(sys.last_traceback)\n        delattr(sys, 'last_traceback')\n    if hasattr(sys, 'last_type'): delattr(sys, 'last_type')\n    if hasattr(sys, 'last_value'): delattr(sys, 'last_value')\n```\n:::\n\n\n::: {#611bed16 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=12}\n``` {.python .cell-code}\ndef clean_mem():\n    clean_tb()\n    clean_ipython_hist()\n    gc.collect()\n    torch.cuda.empty_cache()\n```\n:::\n\n\n## Glorot/Xavier init\n\n::: {#b72b3e0d .cell execution_count=13}\n``` {.python .cell-code}\nx = torch.randn(200, 100)\nfor i in range(50): x = x @ torch.randn(100,100)\nx[0:5,0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntensor([[nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan]])\n```\n:::\n:::\n\n\nThe result is `nan`s everywhere. So maybe the scale of our matrix was too big, and we need to have smaller weights? But if we use too small weights, we will have the opposite problem—the scale of our activations will go from 1 to 0.1, and after 50 layers we'll be left with zeros everywhere:\n\n::: {#989b15e1 .cell execution_count=14}\n``` {.python .cell-code}\nx = torch.randn(200, 100)\nfor i in range(50): x = x @ (torch.randn(100,100) * 0.01)\nx[0:5,0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ntensor([[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]])\n```\n:::\n:::\n\n\nSo we have to scale our weight matrices exactly right so that the standard deviation of our activations stays at 1. We can compute the exact value to use mathematically, as illustrated by Xavier Glorot and Yoshua Bengio in [\"Understanding the Difficulty of Training Deep Feedforward Neural Networks\"](http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf). The right scale for a given layer is $1/\\sqrt{n_{in}}$, where $n_{in}$ represents the number of inputs.\n\n::: {#cc199f77 .cell execution_count=15}\n``` {.python .cell-code}\nx = torch.randn(200, 100)\nfor i in range(50): x = x @ (torch.randn(100,100) * 0.1)\nx[0:5,0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ntensor([[ 0.3533,  0.5832,  0.2161, -0.0379, -0.9669],\n        [-0.4808, -0.0477, -0.3299, -0.0413,  0.4711],\n        [ 0.1572, -0.2279,  0.4063, -0.1537,  0.0768],\n        [ 0.1177, -0.0286,  0.3358, -0.7119, -0.1657],\n        [-0.1562,  0.3421,  0.5529,  0.5820,  0.5855]])\n```\n:::\n:::\n\n\n### Background\n\n### Variance and standard deviation\n\nVariance is the average of how far away each data point is from the mean. E.g.:\n\n::: {#25f35681 .cell execution_count=16}\n``` {.python .cell-code}\nt = torch.tensor([1.,2.,4.,18])\n```\n:::\n\n\n::: {#1f8f1fea .cell execution_count=17}\n``` {.python .cell-code}\nm = t.mean(); m\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\ntensor(6.2500)\n```\n:::\n:::\n\n\n::: {#4de3308c .cell execution_count=18}\n``` {.python .cell-code}\n(t-m).mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ntensor(0.)\n```\n:::\n:::\n\n\nOops. We can't do that. Because by definition the positives and negatives cancel out. So we can fix that in one of (at least) two ways:\n\n::: {#2f77e334 .cell execution_count=19}\n``` {.python .cell-code}\n(t-m).pow(2).mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\ntensor(47.1875)\n```\n:::\n:::\n\n\n::: {#2c3040cb .cell execution_count=20}\n``` {.python .cell-code}\n(t-m).abs().mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\ntensor(5.8750)\n```\n:::\n:::\n\n\nBut the first of these is now a totally different scale, since we squared. So let's undo that at the end.\n\n::: {#e7980663 .cell execution_count=21}\n``` {.python .cell-code}\n(t-m).pow(2).mean().sqrt()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\ntensor(6.8693)\n```\n:::\n:::\n\n\nThey're still different. Why?\n\nNote that we have one outlier (`18`). In the version where we square everything, it makes that much bigger than everything else.\n\n`(t-m).pow(2).mean()` is refered to as **variance**. It's a measure of how spread out the data is, and is particularly sensitive to outliers.\n\nWhen we take the sqrt of the variance, we get the **standard deviation**. Since it's on the same kind of scale as the original data, it's generally more interpretable. However, since `sqrt(1)==1`, it doesn't much matter which we use when talking about *unit variance* for initializing neural nets.\n\nThe standard deviation represents if the data stays close to the mean or on the contrary gets values that are far away. It's computed by the following formula:\n\n$$\\sigma = \\sqrt{\\frac{1}{n}\\left[(x_{0}-m)^{2} + (x_{1}-m)^{2} + \\cdots + (x_{n-1}-m)^{2}\\right]}$$\n\nwhere m is the mean and $\\sigma$ (the greek letter sigma) is the standard deviation. Here we have a mean of 0, so it's just the square root of the mean of x squared.\n\n`(t-m).abs().mean()` is referred to as the **mean absolute deviation**. It isn't used nearly as much as it deserves to be, because mathematicians don't like how awkward it is to work with. But that shouldn't stop us, because we have computers and stuff.\n\nHere's a useful thing to note about variance:\n\n::: {#c312a485 .cell execution_count=22}\n``` {.python .cell-code}\n(t-m).pow(2).mean(), (t*t).mean() - (m*m)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n(tensor(47.1875), tensor(47.1875))\n```\n:::\n:::\n\n\nYou can see why these are equal if you want to work thru the algebra. Or not.\n\nBut, what's important here is that the latter is generally much easier to work with. In particular, you only have to track two things: the sum of the data, and the sum of squares of the data. Whereas in the first form you actually have to go thru all the data twice (once to calculate the mean, once to calculate the differences).\n\nLet's go steal the LaTeX from [Wikipedia](https://en.wikipedia.org/wiki/Variance):\n\n$$\\operatorname{E}\\left[X^2 \\right] - \\operatorname{E}[X]^2$$\n\n### Covariance\n\nHere's how Wikipedia defines covariance:\n\n$$\\operatorname{cov}(X,Y) = \\operatorname{E}{\\big[(X - \\operatorname{E}[X])(Y - \\operatorname{E}[Y])\\big]}$$\n\nLet's see that in code. So now we need two vectors.\n\n::: {#28a4e342 .cell execution_count=23}\n``` {.python .cell-code}\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\ntensor([ 1.,  2.,  4., 18.])\n```\n:::\n:::\n\n\n::: {#c5f8ea9a .cell execution_count=24}\n``` {.python .cell-code}\n# `u` is twice `t`, plus a bit of randomness\nu = t*2\nu *= torch.randn_like(t)/10+0.95\n\nplt.scatter(t, u);\n```\n\n::: {.cell-output .cell-output-display}\n![](11_initializing_files/figure-html/cell-25-output-1.png){width=566 height=413}\n:::\n:::\n\n\n::: {#c0059268 .cell execution_count=25}\n``` {.python .cell-code}\nprod = (t-t.mean())*(u-u.mean()); prod\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ntensor([ 59.1936,  36.2262,  12.3986, 297.3839])\n```\n:::\n:::\n\n\n::: {#5332d5e5 .cell execution_count=26}\n``` {.python .cell-code}\nprod.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\ntensor(101.3006)\n```\n:::\n:::\n\n\n::: {#8e5a8a14 .cell execution_count=27}\n``` {.python .cell-code}\nv = torch.randn_like(t)\nplt.scatter(t, v);\n```\n\n::: {.cell-output .cell-output-display}\n![](11_initializing_files/figure-html/cell-28-output-1.png){width=582 height=411}\n:::\n:::\n\n\n::: {#1925b4e7 .cell execution_count=28}\n``` {.python .cell-code}\n((t-t.mean())*(v-v.mean())).mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ntensor(3.2024)\n```\n:::\n:::\n\n\nIt's generally more conveniently defined like so:\n\n$$\\operatorname{E}\\left[X Y\\right] - \\operatorname{E}\\left[X\\right] \\operatorname{E}\\left[Y\\right]$$\n\n::: {#ac37a698 .cell execution_count=29}\n``` {.python .cell-code}\ncov = (t*v).mean() - t.mean()*v.mean(); cov\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\ntensor(3.2024)\n```\n:::\n:::\n\n\nFrom now on, you're not allowed to look at an equation (or especially type it in LaTeX) without also typing it in Python and actually calculating some values. Ideally, you should also plot some values.\n\nFinally, here is the Pearson correlation coefficient:\n\n$$\\rho_{X,Y}= \\frac{\\operatorname{cov}(X,Y)}{\\sigma_X \\sigma_Y}$$\n\n::: {#8c1d75b3 .cell execution_count=30}\n``` {.python .cell-code}\ncov / (t.std() * v.std())\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\ntensor(0.3201)\n```\n:::\n:::\n\n\nIt's just a scaled version of the same thing.\n\n::: {#53adfe99 .cell execution_count=31}\n``` {.python .cell-code}\nx.std()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\ntensor(1.4507)\n```\n:::\n:::\n\n\n### Xavier init derivation\n\nWhen we do `y = a @ x`, the coefficients of `y` are defined by\n\n$$y_{i} = a_{i,0} x_{0} + a_{i,1} x_{1} + \\cdots + a_{i,n-1} x_{n-1} = \\sum_{k=0}^{n-1} a_{i,k} x_{k}$$\n\nor in pure python code:\n```\ny[i] = sum([c*d for c,d in zip(a[i], x)])\n```\n\nor in numpy/pytorch code:\n```\ny[i] = (a[i]*x).sum()\n```\n\nAt the very beginning, our `x` vector has a mean of roughly 0. and a standard deviation of roughly 1. (since we picked it that way).\n\n::: {#054774ca .cell execution_count=32}\n``` {.python .cell-code}\nx = torch.randn(100)\nx.mean(), x.std()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n(tensor(0.0243), tensor(0.9048))\n```\n:::\n:::\n\n\nIf we go back to `y = a @ x` and assume that we chose weights for `a` that also have a mean of 0, we can compute the standard deviation of `y` quite easily. Since it's random, and we may fall on bad numbers, we repeat the operation 100 times.\n\n::: {#d71f8aa4 .cell execution_count=33}\n``` {.python .cell-code}\nmean,sqr = 0.,0.\nfor i in range(100):\n    x = torch.randn(100)\n    a = torch.randn(512, 100)\n    y = a @ x\n    mean += y.mean().item()\n    sqr  += y.pow(2).mean().item()\nmean/100,sqr/100\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n(0.043183653838932516, 100.01670539855957)\n```\n:::\n:::\n\n\nNow that looks very close to the dimension of our matrix 100. And that's no coincidence! When you compute y, you sum 100 product of one element of a by one element of x. So what's the mean and the standard deviation of such a product? We can show mathematically that as long as the elements in `a` and the elements in `x` are independent, the mean is 0 and the std is 1. This can also be seen experimentally:\n\n::: {#82994e51 .cell execution_count=34}\n``` {.python .cell-code}\nmean,sqr = 0.,0.\nfor i in range(10000):\n    x = torch.randn(1)\n    a = torch.randn(1)\n    y = a*x\n    mean += y.item()\n    sqr  += y.pow(2).item()\nmean/10000,sqr/10000\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n(0.0060464872766976445, 0.9986272795525738)\n```\n:::\n:::\n\n\nThen we sum 100 of those things that have a mean of zero, and a mean of squares of 1, so we get something that has a mean of 0, and mean of square of 100, hence `math.sqrt(100)` being our magic number. If we scale the weights of the matrix and divide them by this `math.sqrt(100)`, it will give us a `y` of scale 1, and repeating the product has many times as we want won't overflow or vanish.\n\n## Kaiming/He init\n\n(\"He\" is a Chinese surname and is pronouced like \"Her\", not like \"Hee\".)\n\n### Background\n\n::: {#8bbd6465 .cell execution_count=35}\n``` {.python .cell-code}\nx = torch.randn(200, 100)\ny = torch.randn(200)\n```\n:::\n\n\n::: {#89920a55 .cell execution_count=36}\n``` {.python .cell-code}\nfrom math import sqrt\n```\n:::\n\n\n::: {#4342ec92 .cell execution_count=37}\n``` {.python .cell-code}\nw1 = torch.randn(100,50) / sqrt(100)\nb1 = torch.zeros(50)\nw2 = torch.randn(50,1) / sqrt(50)\nb2 = torch.zeros(1)\n```\n:::\n\n\n::: {#84a34a2e .cell execution_count=38}\n``` {.python .cell-code}\ndef lin(x, w, b): return x @ w + b\n```\n:::\n\n\n::: {#9bb6e39d .cell execution_count=39}\n``` {.python .cell-code}\nl1 = lin(x, w1, b1)\nl1.mean(),l1.std()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n(tensor(-0.0078), tensor(1.0051))\n```\n:::\n:::\n\n\n::: {#63073f9d .cell execution_count=40}\n``` {.python .cell-code}\ndef relu(x): return x.clamp_min(0.)\n```\n:::\n\n\n::: {#41897c16 .cell execution_count=41}\n``` {.python .cell-code}\nl2 = relu(l1)\nl2.mean(),l2.std()\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n(tensor(0.3964), tensor(0.5887))\n```\n:::\n:::\n\n\n::: {#29553105 .cell execution_count=42}\n``` {.python .cell-code}\nx = torch.randn(200, 100)\nfor i in range(50): x = relu(x @ (torch.randn(100,100) * 0.1))\nx[0:5,0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ntensor([[7.3517e-09, 1.2719e-08, 0.0000e+00, 0.0000e+00, 1.4290e-08],\n        [3.9279e-09, 5.9958e-09, 0.0000e+00, 0.0000e+00, 2.4988e-09],\n        [3.6003e-09, 4.6428e-09, 0.0000e+00, 0.0000e+00, 7.1771e-09],\n        [7.6804e-09, 4.8170e-09, 0.0000e+00, 0.0000e+00, 6.7105e-09],\n        [6.9314e-09, 5.7170e-09, 0.0000e+00, 0.0000e+00, 7.4122e-09]])\n```\n:::\n:::\n\n\nIn [\"Delving Deep into Rectifiers: Surpassing Human-Level Performance\"](https://arxiv.org/abs/1502.01852) Kaiming He et al. show that we should use the following scale instead: $\\sqrt{2 / n_{in}}$, where $n_{in}$ is the number of inputs of our model.\n\n::: {#3872d0f0 .cell execution_count=43}\n``` {.python .cell-code}\nx = torch.randn(200, 100)\nfor i in range(50): x = relu(x @ (torch.randn(100,100) * sqrt(2/100)))\nx[0:5,0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\ntensor([[0.0000, 1.0782, 0.0000, 0.0000, 0.0000],\n        [0.0000, 0.4855, 0.0000, 0.0000, 0.0000],\n        [0.0000, 0.7138, 0.0000, 0.0000, 0.0000],\n        [0.0000, 0.5469, 0.0000, 0.0000, 0.0000],\n        [0.0000, 0.7685, 0.0000, 0.0000, 0.0000]])\n```\n:::\n:::\n\n\n### Applying an init function\n\n::: {#1bf4d891 .cell execution_count=44}\n``` {.python .cell-code}\nmodel = get_model()\nmodel.apply(lambda m: print(type(m).__name__));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model<span style=\"color:rgb(98,98,98)\">.</span>apply(<span style=\"font-weight:bold;color:rgb(0,135,0)\">lambda</span> m: <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(0,135,0)\">type</span>(m)<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,135)\">__name__</span>));\n\nCell <span class=\"ansi-green-fg\">In[4], line 2</span>, in <span class=\"ansi-cyan-fg\">get_model</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>():\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(conv(<span style=\"color:rgb(98,98,98)\">1</span> ,<span style=\"color:rgb(98,98,98)\">8</span>), conv(<span style=\"color:rgb(98,98,98)\">8</span> ,<span style=\"color:rgb(98,98,98)\">16</span>), conv(<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>), conv(<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>),\n<span class=\"ansi-green-fg ansi-bold\">      3</span>                          conv(<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">10</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>), nn<span style=\"color:rgb(98,98,98)\">.</span>Flatten())<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5b2ae1a0 .cell execution_count=45}\n``` {.python .cell-code}\ndef init_weights(m):\n    if isinstance(m, (nn.Conv1d,nn.Conv2d,nn.Conv3d)): init.kaiming_normal_(m.weight)\n```\n:::\n\n\n::: {#45ffe6b2 .cell execution_count=46}\n``` {.python .cell-code}\nmodel.apply(init_weights);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">model</span><span style=\"color:rgb(98,98,98)\">.</span>apply(init_weights);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c3cca2d8 .cell execution_count=47}\n``` {.python .cell-code}\nMomentumLearner(model, dls, F.cross_entropy, cbs=[DeviceCB()]).lr_find()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">MomentumLearner</span>(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB()])<span style=\"color:rgb(98,98,98)\">.</span>lr_find()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MomentumLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c3eec71c .cell execution_count=48}\n``` {.python .cell-code}\nset_seed(42)\nlearn = MomentumLearner(get_model().apply(init_weights), dls, F.cross_entropy, lr=0.2, cbs=cbs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(get_model()<span style=\"color:rgb(98,98,98)\">.</span>apply(init_weights), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#52bba391 .cell execution_count=49}\n``` {.python .cell-code}\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3250b711 .cell execution_count=50}\n``` {.python .cell-code}\nastats.color_dim()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>color_dim()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#da36cc2b .cell execution_count=51}\n``` {.python .cell-code}\nastats.plot_stats()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>plot_stats()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Input normalization\n\n::: {#1de53f28 .cell execution_count=52}\n``` {.python .cell-code}\nxmean,xstd = xb.mean(),xb.std()\nxmean,xstd\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xmean,xstd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">xb</span><span style=\"color:rgb(98,98,98)\">.</span>mean(),xb<span style=\"color:rgb(98,98,98)\">.</span>std()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xmean,xstd\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#acee6bb9 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=53}\n``` {.python .cell-code}\nclass BatchTransformCB(Callback):\n    def __init__(self, tfm, on_train=True, on_val=True): fc.store_attr()\n\n    def before_batch(self, learn):\n        if (self.on_train and learn.training) or (self.on_val and not learn.training):\n            learn.batch = self.tfm(learn.batch)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[53], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">BatchTransformCB</span>(<span class=\"ansi-yellow-bg\">Callback</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, tfm, on_train<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>): fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">before_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Callback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9ec96a29 .cell execution_count=54}\n``` {.python .cell-code}\ndef _norm(b): return (b[0]-xmean)/xstd,b[1]\nnorm = BatchTransformCB(_norm)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_norm</span>(b): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (b[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">-</span>xmean)<span style=\"color:rgb(98,98,98)\">/</span>xstd,b[<span style=\"color:rgb(98,98,98)\">1</span>]\n<span class=\"ansi-green-fg\">----&gt; 2</span> norm <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">BatchTransformCB</span>(_norm)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'BatchTransformCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#24c846bd .cell execution_count=55}\n``` {.python .cell-code}\nset_seed(42)\nlearn = MomentumLearner(get_model().apply(init_weights), dls, F.cross_entropy, lr=0.2, cbs=cbs+[norm])\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(get_model()<span style=\"color:rgb(98,98,98)\">.</span>apply(init_weights), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs<span style=\"color:rgb(98,98,98)\">+</span>[norm])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#db561c62 .cell execution_count=56}\n``` {.python .cell-code}\nastats.color_dim()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>color_dim()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0a1a2caf .cell execution_count=57}\n``` {.python .cell-code}\nastats.plot_stats()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>plot_stats()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f6528ad3 .cell execution_count=58}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[xl] = [(TF.to_tensor(o)-xmean)/xstd for o in b[xl]]\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=4)\nxb,yb = next(iter(dls.train))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o)<span style=\"color:rgb(98,98,98)\">-</span>xmean)<span style=\"color:rgb(98,98,98)\">/</span>xstd <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> tds <span style=\"color:rgb(98,98,98)\">=</span> dsd<span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d83ee773 .cell execution_count=59}\n``` {.python .cell-code}\nxb.mean(),xb.std()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[59], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">xb</span><span style=\"color:rgb(98,98,98)\">.</span>mean(),xb<span style=\"color:rgb(98,98,98)\">.</span>std()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## General ReLU\n\n::: {#17f229fd .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=60}\n``` {.python .cell-code}\nclass GeneralRelu(nn.Module):\n    def __init__(self, leak=None, sub=None, maxv=None):\n        super().__init__()\n        self.leak,self.sub,self.maxv = leak,sub,maxv\n\n    def forward(self, x): \n        x = F.leaky_relu(x,self.leak) if self.leak is not None else F.relu(x)\n        if self.sub is not None: x -= self.sub\n        if self.maxv is not None: x.clamp_max_(self.maxv)\n        return x\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[60], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">GeneralRelu</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, leak<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, sub<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, maxv<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e6f81af9 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=61}\n``` {.python .cell-code}\ndef plot_func(f, start=-5., end=5., steps=100):\n    x = torch.linspace(start, end, steps)\n    plt.plot(x, f(x))\n    plt.grid(True, which='both', ls='--')\n    plt.axhline(y=0, color='k', linewidth=0.7)\n    plt.axvline(x=0, color='k', linewidth=0.7)\n```\n:::\n\n\n::: {#3309874a .cell execution_count=62}\n``` {.python .cell-code}\nplot_func(GeneralRelu(leak=0.1, sub=0.4))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[62], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> plot_func(<span class=\"ansi-yellow-bg\">GeneralRelu</span>(leak<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, sub<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.4</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'GeneralRelu' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#346ca50c .cell execution_count=63}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, stride=2, act=nn.ReLU):\n    res = nn.Conv2d(ni, nf, stride=stride, kernel_size=ks, padding=ks//2)\n    if act: res = nn.Sequential(res, act())\n    return res\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[63], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">conv</span>(ni, nf, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     res <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d(ni, nf, stride<span style=\"color:rgb(98,98,98)\">=</span>stride, kernel_size<span style=\"color:rgb(98,98,98)\">=</span>ks, padding<span style=\"color:rgb(98,98,98)\">=</span>ks<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">2</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> act: res <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(res, act())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f4e941cc .cell execution_count=64}\n``` {.python .cell-code}\ndef get_model(act=nn.ReLU, nfs=None):\n    if nfs is None: nfs = [1,8,16,32,64]\n    layers = [conv(nfs[i], nfs[i+1], act=act) for i in range(len(nfs)-1)]\n    return nn.Sequential(*layers, conv(nfs[-1],10, act=None), nn.Flatten()).to(def_device)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[64], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> nfs <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>: nfs <span style=\"color:rgb(98,98,98)\">=</span> [<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [conv(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e6ba65dd .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=65}\n``` {.python .cell-code}\ndef init_weights(m, leaky=0.):\n    if isinstance(m, (nn.Conv1d,nn.Conv2d,nn.Conv3d)): init.kaiming_normal_(m.weight, a=leaky)\n```\n:::\n\n\n::: {#728e6a76 .cell execution_count=66}\n``` {.python .cell-code}\nact_gr = partial(GeneralRelu, leak=0.1, sub=0.4)\nastats = ActivationStats(fc.risinstance(GeneralRelu))\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True), astats]\niw = partial(init_weights, leaky=0.1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[66], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> act_gr <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(GeneralRelu, leak<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, sub<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.4</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> astats <span style=\"color:rgb(98,98,98)\">=</span> ActivationStats(fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(GeneralRelu))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), astats]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a19fae4b .cell execution_count=67}\n``` {.python .cell-code}\nmodel = get_model(act_gr).apply(iw)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[67], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model(<span class=\"ansi-yellow-bg\">act_gr</span>)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'act_gr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#386f9b9c .cell execution_count=68}\n``` {.python .cell-code}\nset_seed(42)\nlearn = MomentumLearner(model, dls, F.cross_entropy, lr=0.2, cbs=cbs)\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[68], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6a0bf60b .cell execution_count=69}\n``` {.python .cell-code}\nastats.color_dim()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[69], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>color_dim()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f41e011d .cell execution_count=70}\n``` {.python .cell-code}\nastats.plot_stats()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[70], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>plot_stats()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9b62edc7 .cell execution_count=71}\n``` {.python .cell-code}\nastats.dead_chart()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[71], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>dead_chart()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## LSUV\n\n[All You Need is a Good Init](https://arxiv.org/pdf/1511.06422.pdf) introduces *Layer-wise Sequential Unit-Variance* (*LSUV*).\n\n::: {#79d8595f .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=72}\n``` {.python .cell-code}\ndef _lsuv_stats(hook, mod, inp, outp):\n    acts = to_cpu(outp)\n    hook.mean = acts.mean()\n    hook.std = acts.std()\n\ndef lsuv_init(model, m, m_in, xb):\n    h = Hook(m, _lsuv_stats)\n    with torch.no_grad():\n        while model(xb) is not None and (abs(h.std-1)>1e-3 or abs(h.mean)>1e-3):\n            m_in.bias -= h.mean\n            m_in.weight.data /= h.std\n    h.remove()\n```\n:::\n\n\n::: {#b50ce19a .cell execution_count=73}\n``` {.python .cell-code}\nmodel = get_model(act_gr)\nrelus = [o for o in model.modules() if isinstance(o, GeneralRelu)]\nconvs = [o for o in model.modules() if isinstance(o, nn.Conv2d)]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[73], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model(<span class=\"ansi-yellow-bg\">act_gr</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> relus <span style=\"color:rgb(98,98,98)\">=</span> [o <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>modules() <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(o, GeneralRelu)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> convs <span style=\"color:rgb(98,98,98)\">=</span> [o <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>modules() <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(o, nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'act_gr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#06be5d7b .cell execution_count=74}\n``` {.python .cell-code}\nfor ms in zip(relus,convs): print(ms)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[74], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> ms <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(relus,convs): <span style=\"color:rgb(0,135,0)\">print</span>(ms)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'relus' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dd9f91da .cell execution_count=75}\n``` {.python .cell-code}\nfor ms in zip(relus,convs): lsuv_init(model, *ms, xb.to(def_device))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[75], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> ms <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(relus,convs): lsuv_init(model, <span style=\"color:rgb(98,98,98)\">*</span>ms, xb<span style=\"color:rgb(98,98,98)\">.</span>to(def_device))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'relus' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#810af8be .cell execution_count=76}\n``` {.python .cell-code}\nset_seed(42)\nlearn = MomentumLearner(model, dls, F.cross_entropy, lr=0.2, cbs=cbs)\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[76], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#401ad56a .cell execution_count=77}\n``` {.python .cell-code}\nastats.plot_stats()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[77], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>plot_stats()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Batch Normalization\n\nSergey Ioffe and Christian Szegedy released [\"Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift\"](https://arxiv.org/abs/1502.03167) in 2015, saying:\n\n> Training Deep Neural Networks is complicated by the fact that the distribution of each layer's inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization... We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs.\n\nTheir proposal is:\n\n> Making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization.\n\n### LayerNorm\n\nWe'll start with [layer normalization](https://arxiv.org/abs/1607.06450), a simpler technique.\n\n::: {#b3e68b13 .cell execution_count=78}\n``` {.python .cell-code}\nclass LayerNorm(nn.Module):\n    def __init__(self, dummy, eps=1e-5):\n        super().__init__()\n        self.eps = eps\n        self.mult = nn.Parameter(tensor(1.))\n        self.add  = nn.Parameter(tensor(0.))\n\n    def forward(self, x):\n        m = x.mean((1,2,3), keepdim=True)\n        v = x.var ((1,2,3), keepdim=True)\n        x = (x-m) / ((v+self.eps).sqrt())\n        return x*self.mult + self.add\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[78], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">LayerNorm</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, dummy, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6844f0bd .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=79}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, stride=2, act=nn.ReLU, norm=None, bias=None):\n    if bias is None: bias = not isinstance(norm, (nn.BatchNorm1d,nn.BatchNorm2d,nn.BatchNorm3d))\n    layers = [nn.Conv2d(ni, nf, stride=stride, kernel_size=ks, padding=ks//2, bias=bias)]\n    if norm: layers.append(norm(nf))\n    if act: layers.append(act())\n    return nn.Sequential(*layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[79], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">conv</span>(ni, nf, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> bias <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>: bias <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(norm, (nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm1d,nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d,nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm3d))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d(ni, nf, stride<span style=\"color:rgb(98,98,98)\">=</span>stride, kernel_size<span style=\"color:rgb(98,98,98)\">=</span>ks, padding<span style=\"color:rgb(98,98,98)\">=</span>ks<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">2</span>, bias<span style=\"color:rgb(98,98,98)\">=</span>bias)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5cedd098 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=80}\n``` {.python .cell-code}\ndef get_model(act=nn.ReLU, nfs=None, norm=None):\n    if nfs is None: nfs = [1,8,16,32,64]\n    layers = [conv(nfs[i], nfs[i+1], act=act, norm=norm) for i in range(len(nfs)-1)]\n    return nn.Sequential(*layers, conv(nfs[-1],10, act=None, norm=False, bias=True),\n                         nn.Flatten()).to(def_device)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[80], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> nfs <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>: nfs <span style=\"color:rgb(98,98,98)\">=</span> [<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [conv(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c676ea3b .cell execution_count=81}\n``` {.python .cell-code}\nset_seed(42)\nmodel = get_model(act_gr, norm=LayerNorm).apply(iw)\nlearn = MomentumLearner(model, dls, F.cross_entropy, lr=0.2, cbs=cbs)\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[81], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>LayerNorm)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### BatchNorm\n\n::: {#de14d562 .cell execution_count=82}\n``` {.python .cell-code}\nclass BatchNorm(nn.Module):\n    def __init__(self, nf, mom=0.1, eps=1e-5):\n        super().__init__()\n        # NB: pytorch bn mom is opposite of what you'd expect\n        self.mom,self.eps = mom,eps\n        self.mults = nn.Parameter(torch.ones (nf,1,1))\n        self.adds  = nn.Parameter(torch.zeros(nf,1,1))\n        self.register_buffer('vars',  torch.ones(1,nf,1,1))\n        self.register_buffer('means', torch.zeros(1,nf,1,1))\n\n    def update_stats(self, x):\n        m = x.mean((0,2,3), keepdim=True)\n        v = x.var ((0,2,3), keepdim=True)\n        self.means.lerp_(m, self.mom)\n        self.vars.lerp_ (v, self.mom)\n        return m,v\n        \n    def forward(self, x):\n        if self.training:\n            with torch.no_grad(): m,v = self.update_stats(x)\n        else: m,v = self.means,self.vars\n        x = (x-m) / (v+self.eps).sqrt()\n        return x*self.mults + self.adds\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[82], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">BatchNorm</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, nf, mom<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c3abad37 .cell execution_count=83}\n``` {.python .cell-code}\nmodel = get_model(act_gr, norm=BatchNorm).apply(iw)\nset_seed(42)\nlearn = MomentumLearner(model, dls, F.cross_entropy, lr=0.4, cbs=cbs)\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[83], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model(<span class=\"ansi-yellow-bg\">act_gr</span>, norm<span style=\"color:rgb(98,98,98)\">=</span>BatchNorm)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> set_seed(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.4</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'act_gr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n![Various norms](images/norms.png)\n\n## Towards 90%...\n\n::: {#b4a5193d .cell execution_count=84}\n``` {.python .cell-code}\ndls = DataLoaders.from_dd(tds, 256, num_workers=4)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[84], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> dls <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">DataLoaders</span><span style=\"color:rgb(98,98,98)\">.</span>from_dd(tds, <span style=\"color:rgb(98,98,98)\">256</span>, num_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DataLoaders' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4e2eb9e7 .cell execution_count=85}\n``` {.python .cell-code}\nset_seed(42)\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = MomentumLearner(model, dls, F.cross_entropy, lr=0.2, cbs=cbs)\nlearn.fit(3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[85], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> MomentumLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#da7a1b3c .cell execution_count=86}\n``` {.python .cell-code}\nlearn = MomentumLearner(model, dls, F.cross_entropy, lr=0.05, cbs=cbs)\nlearn.fit(2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[86], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> learn <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MomentumLearner</span>(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.05</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MomentumLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Export -\n\n::: {#9ad3cf2a .cell execution_count=87}\n``` {.python .cell-code}\nimport nbdev; nbdev.nbdev_export()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[87], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">nbdev</span>; nbdev<span style=\"color:rgb(98,98,98)\">.</span>nbdev_export()\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'nbdev'</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "11_initializing_files"
    ],
    "filters": [],
    "includes": {}
  }
}