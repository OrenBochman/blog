{
  "hash": "c9fd040772f4ab5c5bb391c8e89f5f0c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Denoising Diffusion Probabilistic Models with miniai\njupyter: python3\n---\n\n\n\n\n\n\nNow that we written our own barebones training library, let's make some progress towards exploring diffusion model and building Stable Diffusion from scratch.\n\nWe'll start with building and training the model described in the seminal 2020 paper [Denoising Diffusion Probabilistic Models](https://arxiv.org/abs/2006.11239) (DDPM). For more context, while diffusion models were technically invented [back in 2015](https://arxiv.org/abs/1503.03585), diffusion models flew under the radar until this 2020 paper since they were complicated and difficult to train. The 2020 paper introducing DDPMs made some crucial assumptions that significantly simplify the model training and generation processes, as we will see here. Later versions of diffusion models all build upon the same framework introduced in this paper.\n\nLet's get started and train our own DDPM!\n\n## Imports\n\nWe'll start with some imports.\n\n::: {#2ed5e46d .cell execution_count=1}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,random,logging\nimport fastcore.all as fc,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom functools import partial\nfrom copy import copy\nfrom contextlib import contextmanager\n\nfrom fastcore.foundation import L\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torch import tensor,nn,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.nn import init\nfrom torch.optim import lr_scheduler\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\nfrom miniai.resnet import *\nfrom miniai.augment import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">logging</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pathlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Path\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#411ec880 .cell execution_count=2}\n``` {.python .cell-code}\nmpl.rcParams['image.cmap'] = 'gray'\nlogging.disable(logging.WARNING)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">mpl</span><span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image.cmap</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">gray</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> logging<span style=\"color:rgb(98,98,98)\">.</span>disable(logging<span style=\"color:rgb(98,98,98)\">.</span>WARNING)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'mpl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Load the dataset\n\nWe will load the dataset from HuggingFace Hub:\n\n::: {#21ba3222 .cell execution_count=3}\n``` {.python .cell-code}\nx,y = 'image','label'\nname = \"fashion_mnist\"\ndsd = load_dataset(name)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> x,y <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">label</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> name <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fashion_mnist</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nTo make life simpler (mostly with the model architecture), we'll resize the 28x28 images to 32x32:\n\n::: {#784ed2b1 .cell execution_count=4}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[x] = [TF.resize(TF.to_tensor(o), (32,32)) for o in b[x]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[x] <span style=\"color:rgb(98,98,98)\">=</span> [TF<span style=\"color:rgb(98,98,98)\">.</span>resize(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o), (<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">32</span>)) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[x]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nLet's set our batch size and create our DataLoaders with this batch size. we can confirm the shapes are correct. Note that while we do get the labels for the dataset, we actuallydon't care about that for our task of **unconditional** image generation.\n\n::: {#030ae9f5 .cell execution_count=5}\n``` {.python .cell-code}\nset_seed(42)\nbs = 128\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=8)\ndt = dls.train\nxb,yb = next(iter(dt))\nxb.shape,yb[:10]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">128</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> tds <span style=\"color:rgb(98,98,98)\">=</span> dsd<span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Create model\n\nWe will create a U-net. A U-net looks something like this:\n\n<img src=\"https://huggingface.co/blog/assets/78_annotated-diffusion/unet_architecture.jpg\" width=\"700\">\n\nThe DDPM U-net is a modification of this with some modern tricks like using attention.\n\nWe will cover how U-nets are created and how modules like attention work in future lessons. For now, we'll import the U-net from the diffusers library:\n\n::: {#88685f93 .cell execution_count=6}\n``` {.python .cell-code}\nfrom diffusers import UNet2DModel\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">diffusers</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> UNet2DModel\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'diffusers'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c3cb93c2 .cell execution_count=7}\n``` {.python .cell-code}\nmodel = UNet2DModel(in_channels=1, out_channels=1, block_out_channels=(32, 64, 128, 128))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">UNet2DModel</span>(in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, block_out_channels<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">32</span>, <span style=\"color:rgb(98,98,98)\">64</span>, <span style=\"color:rgb(98,98,98)\">128</span>, <span style=\"color:rgb(98,98,98)\">128</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'UNet2DModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Training - easy with a callback!\n\nDDPM is trained quite simply in a few steps:\n1. randomly select some timesteps in an iterative noising process.\n2. Add noise corresponding to this timestep to the original image. For increasing timesteps, the variance of the noise increases.\n3. Pass in this noisy image and the timestep to our model\n4. Model is trained with an MSE loss between the model output and the amount of noise added to the image\n\n\nWe will implement this in a callback. The callback will randomly select the timestep and create the noisy image before setting up our input and ground truth tensors for the model forward pass and loss calculation.\n\nAfter training, we need to sample from this model. This is an iterative denoising process starting from pure noise. We simply keep removing noise predicted by the neural network, but we do it with an expected noise schedule that is reverse of what we saw during training. This is also done in our callback.\n\n::: {#d84a4dbd .cell execution_count=8}\n``` {.python .cell-code}\nclass DDPMCB(TrainCB):\n    order = DeviceCB.order+1\n    def __init__(self, n_steps, beta_min, beta_max):\n        super().__init__()\n        self.n_steps,self.βmin,self.βmax = n_steps,beta_min,beta_max\n        # variance schedule, linearly increased with timestep\n        self.β = torch.linspace(self.βmin, self.βmax, self.n_steps)\n        self.α = 1. - self.β \n        self.ᾱ = torch.cumprod(self.α, dim=0)\n        self.σ = self.β.sqrt()\n\n    def predict(self, learn): learn.preds = learn.model(*learn.batch[0]).sample\n    \n    def before_batch(self, learn):\n        device = learn.batch[0].device\n        ε = torch.randn(learn.batch[0].shape, device=device)  # noise, x_T\n        x0 = learn.batch[0] # original images, x_0\n        self.ᾱ = self.ᾱ.to(device)\n        n = x0.shape[0]\n        # select random timesteps\n        t = torch.randint(0, self.n_steps, (n,), device=device, dtype=torch.long)\n        ᾱ_t = self.ᾱ[t].reshape(-1, 1, 1, 1).to(device)\n        xt = ᾱ_t.sqrt()*x0 + (1-ᾱ_t).sqrt()*ε #noisify the image\n        # input to our model is noisy image and timestep, ground truth is the noise \n        learn.batch = ((xt, t), ε)\n    \n    @torch.no_grad()\n    def sample(self, model, sz):\n        device = next(model.parameters()).device\n        x_t = torch.randn(sz, device=device)\n        preds = []\n        for t in reversed(range(self.n_steps)):\n            t_batch = torch.full((x_t.shape[0],), t, device=device, dtype=torch.long)\n            z = (torch.randn(x_t.shape) if t > 0 else torch.zeros(x_t.shape)).to(device)\n            ᾱ_t1 = self.ᾱ[t-1]  if t > 0 else torch.tensor(1)\n            b̄_t = 1 - self.ᾱ[t]\n            b̄_t1 = 1 - ᾱ_t1\n            noise_pred = learn.model(x_t, t_batch).sample\n            x_0_hat = ((x_t - b̄_t.sqrt() * noise_pred)/self.ᾱ[t].sqrt()).clamp(-1,1)\n            x0_coeff = ᾱ_t1.sqrt()*(1-self.α[t])/b̄_t\n            xt_coeff = self.α[t].sqrt()*b̄_t1/b̄_t\n            x_t = x_0_hat*x0_coeff + x_t*xt_coeff + self.σ[t]*z\n            preds.append(x_t.cpu())\n        return preds\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">DDPMCB</span>(<span class=\"ansi-yellow-bg\">TrainCB</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     order <span style=\"color:rgb(98,98,98)\">=</span> DeviceCB<span style=\"color:rgb(98,98,98)\">.</span>order<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, n_steps, beta_min, beta_max):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nOkay now we're ready to train a model!\n\nLet's create our `Learner`. We'll add our callbacks and train with MSE loss.\n\nWe specify the number of timesteps and the minimum and maximum variance for the DDPM model.\n\n::: {#28784e83 .cell execution_count=9}\n``` {.python .cell-code}\nlr = 4e-3\nepochs = 5\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nddpm_cb = DDPMCB(n_steps=1000, beta_min=0.0001, beta_max=0.02)\ncbs = [ddpm_cb, DeviceCB(), ProgressCB(plot=True), MetricsCB(), BatchSchedCB(sched)]\nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=optim.Adam)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">4e-3</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">5</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> ddpm_cb <span style=\"color:rgb(98,98,98)\">=</span> DDPMCB(n_steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1000</span>, beta_min<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.0001</span>, beta_max<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.02</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNow let's run the fit function:\n\n::: {#d33d2046 .cell execution_count=10}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dcf0e32f .cell execution_count=11}\n``` {.python .cell-code}\nmdl_path = Path('models')\nmdl_path.mkdir(exist_ok=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> mdl_path <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Path</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> mdl_path<span style=\"color:rgb(98,98,98)\">.</span>mkdir(exist_ok<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#21849120 .cell execution_count=12}\n``` {.python .cell-code}\ntorch.save(learn.model, mdl_path/'fashion_ddpm.pkl')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> torch<span style=\"color:rgb(98,98,98)\">.</span>save(<span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>model, mdl_path<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">fashion_ddpm.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ee929fcd .cell execution_count=13}\n``` {.python .cell-code}\nlearn.model = torch.load(mdl_path/'fashion_ddpm.pkl')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> learn<span style=\"color:rgb(98,98,98)\">.</span>model <span style=\"color:rgb(98,98,98)\">=</span> torch<span style=\"color:rgb(98,98,98)\">.</span>load(<span class=\"ansi-yellow-bg\">mdl_path</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">fashion_ddpm.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'mdl_path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Inference\n\nNow that we've trained our model, let's generate some images with our model:\n\n::: {#6df03c88 .cell execution_count=14}\n``` {.python .cell-code}\nset_seed(42)\nsamples = ddpm_cb.sample(learn.model, (16, 1, 32, 32))\nlen(samples)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> samples <span style=\"color:rgb(98,98,98)\">=</span> ddpm_cb<span style=\"color:rgb(98,98,98)\">.</span>sample(learn<span style=\"color:rgb(98,98,98)\">.</span>model, (<span style=\"color:rgb(98,98,98)\">16</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">32</span>, <span style=\"color:rgb(98,98,98)\">32</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">len</span>(samples)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7de3e076 .cell execution_count=15}\n``` {.python .cell-code}\nshow_images(-samples[-1], figsize=(5,5))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(<span style=\"color:rgb(98,98,98)\">-</span>samples[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>], figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">5</span>,<span style=\"color:rgb(98,98,98)\">5</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nLet's visualize the sampling process:\n\n::: {#22f696f8 .cell execution_count=16}\n``` {.python .cell-code}\n%matplotlib auto\nimport matplotlib.animation as animation\nfrom IPython.display import display, HTML\n\nfig,ax = plt.subplots(figsize=(3,3))\ndef _show_i(i): return show_image(-samples[i][9], ax=ax, animated=True).get_images()\nr = L.range(800,990, 5)+L.range(990,1000)+[999]*10\nims = r.map(_show_i)\n\nanimate = animation.ArtistAnimation(fig, ims, interval=50, blit=True, repeat_delay=3000)\ndisplay(HTML(animate.to_html5_video()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing matplotlib backend: <object object at 0x7933c06daee0>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">animation</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">animation</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">IPython</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">display</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> display, HTML\n<span class=\"ansi-green-fg\">----&gt; 5</span> fig,ax <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>subplots(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">3</span>))\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_show_i</span>(i): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> show_image(<span style=\"color:rgb(98,98,98)\">-</span>samples[i][<span style=\"color:rgb(98,98,98)\">9</span>], ax<span style=\"color:rgb(98,98,98)\">=</span>ax, animated<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)<span style=\"color:rgb(98,98,98)\">.</span>get_images()\n<span class=\"ansi-green-fg ansi-bold\">      7</span> r <span style=\"color:rgb(98,98,98)\">=</span> L<span style=\"color:rgb(98,98,98)\">.</span>range(<span style=\"color:rgb(98,98,98)\">800</span>,<span style=\"color:rgb(98,98,98)\">990</span>, <span style=\"color:rgb(98,98,98)\">5</span>)<span style=\"color:rgb(98,98,98)\">+</span>L<span style=\"color:rgb(98,98,98)\">.</span>range(<span style=\"color:rgb(98,98,98)\">990</span>,<span style=\"color:rgb(98,98,98)\">1000</span>)<span style=\"color:rgb(98,98,98)\">+</span>[<span style=\"color:rgb(98,98,98)\">999</span>]<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">10</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNote that I only take the steps between 800 and 1000 since most of the previous steps are actually quite noisy. This is a limitation of the noise schedule used for small images, and papers like [Improved DDPM](https://arxiv.org/abs/2102.09672) suggest other noise schedules for this purpose! (Some potential homework: try out the noise schedule from Improved DDPM and see if it helps.)\n\n",
    "supporting": [
      "15_DDPM_files"
    ],
    "filters": [],
    "includes": {}
  }
}