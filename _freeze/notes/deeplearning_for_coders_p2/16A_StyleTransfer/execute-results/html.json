{
  "hash": "8a26e2f926db5aeace14b700c427d7b1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Setup\njupyter: python3\n---\n\n::: {#7b63265a .cell execution_count=1}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,random,timm,torchvision,io,PIL\nimport fastcore.all as fc,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom functools import partial\nfrom copy import copy\nfrom contextlib import contextmanager\n\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torchvision import transforms\nfrom torch import tensor,nn,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.nn import init\nfrom torch.optim import lr_scheduler\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\nfrom fastcore.foundation import L, store_attr\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\nfrom miniai.resnet import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">timm</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">io</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">PIL</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'timm'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cd44234d .cell execution_count=2}\n``` {.python .cell-code}\n# Image URLs for demos. Change as desired.\nface_url = \"https://images.pexels.com/photos/2690323/pexels-photo-2690323.jpeg?w=256\"\nspiderweb_url = \"https://images.pexels.com/photos/34225/spider-web-with-water-beads-network-dewdrop.jpg?w=256\"\n```\n:::\n\n\n# Loading Images\n\n::: {#3913b9eb .cell execution_count=3}\n``` {.python .cell-code}\ndef download_image(url):\n    imgb = fc.urlread(url, decode=False) \n    return torchvision.io.decode_image(tensor(list(imgb), dtype=torch.uint8)).float()/255.\n```\n:::\n\n\n::: {#d1b41856 .cell execution_count=4}\n``` {.python .cell-code}\ncontent_im = download_image(face_url).to(def_device)\nprint('content_im.shape:', content_im.shape)\nshow_image(content_im);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> content_im <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">download_image</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">face_url</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">content_im.shape:</span><span style=\"color:rgb(175,0,0)\">'</span>, content_im<span style=\"color:rgb(98,98,98)\">.</span>shape)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> show_image(content_im);\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">download_image</span><span class=\"ansi-blue-fg\">(url)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">download_image</span>(url):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     imgb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>urlread(url, decode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>) \n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> torchvision<span style=\"color:rgb(98,98,98)\">.</span>io<span style=\"color:rgb(98,98,98)\">.</span>decode_image(tensor(<span style=\"color:rgb(0,135,0)\">list</span>(imgb), dtype<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>uint8))<span style=\"color:rgb(98,98,98)\">.</span>float()<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">255.</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c4085cf9 .cell execution_count=5}\n``` {.python .cell-code}\ncontent_im.min(),content_im.max() # Check bounds\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">content_im</span><span style=\"color:rgb(98,98,98)\">.</span>min(),content_im<span style=\"color:rgb(98,98,98)\">.</span>max() <span style=\"font-style:italic;color:rgb(95,135,135)\"># Check bounds</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Optimizing Images\n\n::: {#c1839a3c .cell execution_count=6}\n``` {.python .cell-code}\nclass LengthDataset():\n    def __init__(self, length=1): self.length=length\n    def __len__(self): return self.length\n    def __getitem__(self, idx): return 0,0\n\ndef get_dummy_dls(length=100):\n    return DataLoaders(DataLoader(LengthDataset(length), batch_size=1), # Train\n                       DataLoader(LengthDataset(1), batch_size=1))      # Valid (length 1)\n```\n:::\n\n\n::: {#44e63125 .cell execution_count=7}\n``` {.python .cell-code}\nclass TensorModel(nn.Module):\n    def __init__(self, t):\n        super().__init__()\n        self.t = nn.Parameter(t.clone())\n    def forward(self, x=0): return self.t\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TensorModel</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, t):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6060eebf .cell execution_count=8}\n``` {.python .cell-code}\nmodel = TensorModel(torch.rand_like(content_im))\nshow_image(model());\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TensorModel</span>(torch<span style=\"color:rgb(98,98,98)\">.</span>rand_like(content_im))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(model());\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TensorModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#06479000 .cell execution_count=9}\n``` {.python .cell-code}\n[p.shape for p in model.parameters()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [p<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">model</span><span style=\"color:rgb(98,98,98)\">.</span>parameters()]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#371c2778 .cell execution_count=10}\n``` {.python .cell-code}\nclass ImageOptCB(TrainCB):\n    def predict(self, learn): learn.preds = learn.model()\n    def get_loss(self, learn): learn.loss = learn.loss_func(learn.preds)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ImageOptCB</span>(<span class=\"ansi-yellow-bg\">TrainCB</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">predict</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn): learn<span style=\"color:rgb(98,98,98)\">.</span>preds <span style=\"color:rgb(98,98,98)\">=</span> learn<span style=\"color:rgb(98,98,98)\">.</span>model()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_loss</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn): learn<span style=\"color:rgb(98,98,98)\">.</span>loss <span style=\"color:rgb(98,98,98)\">=</span> learn<span style=\"color:rgb(98,98,98)\">.</span>loss_func(learn<span style=\"color:rgb(98,98,98)\">.</span>preds)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#24729dca .cell execution_count=11}\n``` {.python .cell-code}\ndef loss_fn_mse(im):\n    return F.mse_loss(im, content_im)\n\nmodel = TensorModel(torch.rand_like(content_im))\ncbs = [ImageOptCB(), ProgressCB(), MetricsCB(), DeviceCB()]\nlearn = Learner(model, get_dummy_dls(100), loss_fn_mse, \n                lr=1e-2, cbs=cbs, opt_func=torch.optim.Adam)\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">loss_fn_mse</span>(im):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> F<span style=\"color:rgb(98,98,98)\">.</span>mse_loss(im, content_im)\n<span class=\"ansi-green-fg\">----&gt; 4</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TensorModel</span>(torch<span style=\"color:rgb(98,98,98)\">.</span>rand_like(content_im))\n<span class=\"ansi-green-fg ansi-bold\">      5</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [ImageOptCB(), ProgressCB(), MetricsCB(), DeviceCB()]\n<span class=\"ansi-green-fg ansi-bold\">      6</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, get_dummy_dls(<span style=\"color:rgb(98,98,98)\">100</span>), loss_fn_mse, \n<span class=\"ansi-green-fg ansi-bold\">      7</span>                 lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs, opt_func<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>optim<span style=\"color:rgb(98,98,98)\">.</span>Adam)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TensorModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#80c1dd59 .cell execution_count=12}\n``` {.python .cell-code}\n# Result (left) vs target image (right):\nshow_images([learn.model().clip(0, 1), content_im]);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Result (left) vs target image (right):</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">show_images</span>([learn<span style=\"color:rgb(98,98,98)\">.</span>model()<span style=\"color:rgb(98,98,98)\">.</span>clip(<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>), content_im]);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Viewing progress\n\nIt would be great if we could see what is happening over time. You could save individual images and turn them into a video, but for quick feedback we can also log images every few iterations and display them in a grid in `after_fit`:\n\n::: {#7bf89c60 .cell execution_count=13}\n``` {.python .cell-code}\nclass ImageLogCB(Callback):\n    order = ProgressCB.order + 1\n    def __init__(self, log_every=10): store_attr(); self.images=[]; self.i=0\n    def after_batch(self, learn): \n        if self.i%self.log_every == 0: self.images.append(to_cpu(learn.preds.clip(0, 1)))\n        self.i += 1\n    def after_fit(self, learn): show_images(self.images)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ImageLogCB</span>(<span class=\"ansi-yellow-bg\">Callback</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     order <span style=\"color:rgb(98,98,98)\">=</span> ProgressCB<span style=\"color:rgb(98,98,98)\">.</span>order <span style=\"color:rgb(98,98,98)\">+</span> <span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, log_every<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>): store_attr(); <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>images<span style=\"color:rgb(98,98,98)\">=</span>[]; <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>i<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Callback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3340198b .cell execution_count=14}\n``` {.python .cell-code}\nmodel = TensorModel(torch.rand_like(content_im))\nlearn = Learner(model, get_dummy_dls(150), loss_fn_mse, \n                lr=1e-2, cbs=cbs, opt_func=torch.optim.Adam)\nlearn.fit(1, cbs=[ImageLogCB(30)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TensorModel</span>(torch<span style=\"color:rgb(98,98,98)\">.</span>rand_like(content_im))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, get_dummy_dls(<span style=\"color:rgb(98,98,98)\">150</span>), loss_fn_mse, \n<span class=\"ansi-green-fg ansi-bold\">      3</span>                 lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs, opt_func<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>optim<span style=\"color:rgb(98,98,98)\">.</span>Adam)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>[ImageLogCB(<span style=\"color:rgb(98,98,98)\">30</span>)])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TensorModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Getting Features from VGG16\n\nWe're going to peek inside a small CNN and extract the outputs of different layers.\n\n### Load VGG network\n\n![vgg diag](https://neurohive.io/wp-content/uploads/2018/11/vgg16-1-e1542731207177.png)\n\n::: {#2b4a4cb4 .cell execution_count=15}\n``` {.python .cell-code}\nprint(timm.list_models('*vgg*'))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">timm</span><span style=\"color:rgb(98,98,98)\">.</span>list_models(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">*vgg*</span><span style=\"color:rgb(175,0,0)\">'</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'timm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ac02444f .cell execution_count=16}\n``` {.python .cell-code}\nvgg16 = timm.create_model('vgg16', pretrained=True).to(def_device).features\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> vgg16 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timm</span><span style=\"color:rgb(98,98,98)\">.</span>create_model(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">vgg16</span><span style=\"color:rgb(175,0,0)\">'</span>, pretrained<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)<span style=\"color:rgb(98,98,98)\">.</span>features\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'timm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5fe27a19 .cell execution_count=17}\n``` {.python .cell-code}\n# vgg16\n```\n:::\n\n\n### Normalize Images\n\nThis model expacts images normalized with the same stats as those used during training, which in this case requires the stats of the ImageNet dataset. Previously we were working with single-channel images, and so normalizing was pretty straightforward. With three channels, we need to think a bit more about shapes and boradcasting rules:\n\n::: {#a0ae3c38 .cell execution_count=18}\n``` {.python .cell-code}\nimagenet_mean = tensor([0.485, 0.456, 0.406])\nimagenet_std = tensor([0.229, 0.224, 0.225])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> imagenet_mean <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tensor</span>([<span style=\"color:rgb(98,98,98)\">0.485</span>, <span style=\"color:rgb(98,98,98)\">0.456</span>, <span style=\"color:rgb(98,98,98)\">0.406</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> imagenet_std <span style=\"color:rgb(98,98,98)\">=</span> tensor([<span style=\"color:rgb(98,98,98)\">0.229</span>, <span style=\"color:rgb(98,98,98)\">0.224</span>, <span style=\"color:rgb(98,98,98)\">0.225</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tensor' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#44d919aa .cell execution_count=19}\n``` {.python .cell-code}\n# Try 1 (won't work):\n# (content_im - imagenet_mean) / imagenet_std\n```\n:::\n\n\n::: {#f9498fc1 .cell execution_count=20}\n``` {.python .cell-code}\nimagenet_mean.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">imagenet_mean</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'imagenet_mean' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4219a6c1 .cell execution_count=21}\n``` {.python .cell-code}\ncontent_im.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">content_im</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d15d7dd2 .cell execution_count=22}\n``` {.python .cell-code}\nimagenet_mean[:,None,None].shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">imagenet_mean</span>[:,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>]<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'imagenet_mean' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9e6ec0cf .cell execution_count=23}\n``` {.python .cell-code}\n# Try 2:\ndef normalize(im):\n    imagenet_mean = tensor([0.485, 0.456, 0.406])[:,None,None].to(im.device)\n    imagenet_std = tensor([0.229, 0.224, 0.225])[:,None,None].to(im.device)\n    return (im - imagenet_mean) / imagenet_std\n```\n:::\n\n\n::: {#999b8809 .cell execution_count=24}\n``` {.python .cell-code}\nnormalize(content_im).min(), normalize(content_im).max()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> normalize(<span class=\"ansi-yellow-bg\">content_im</span>)<span style=\"color:rgb(98,98,98)\">.</span>min(), normalize(content_im)<span style=\"color:rgb(98,98,98)\">.</span>max()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4d1de614 .cell execution_count=25}\n``` {.python .cell-code}\nnormalize(content_im).mean(dim=(1, 2))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> normalize(<span class=\"ansi-yellow-bg\">content_im</span>)<span style=\"color:rgb(98,98,98)\">.</span>mean(dim<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">2</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#95b9a96b .cell execution_count=26}\n``` {.python .cell-code}\n# And with torchvision transforms:\nnormalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># And with torchvision transforms:</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> normalize <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">transforms</span><span style=\"color:rgb(98,98,98)\">.</span>Normalize(mean<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(98,98,98)\">0.485</span>, <span style=\"color:rgb(98,98,98)\">0.456</span>, <span style=\"color:rgb(98,98,98)\">0.406</span>], std<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(98,98,98)\">0.229</span>, <span style=\"color:rgb(98,98,98)\">0.224</span>, <span style=\"color:rgb(98,98,98)\">0.225</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'transforms' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#149a1f9a .cell execution_count=27}\n``` {.python .cell-code}\nnormalize(content_im).min(), normalize(content_im).max()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> normalize(<span class=\"ansi-yellow-bg\">content_im</span>)<span style=\"color:rgb(98,98,98)\">.</span>min(), normalize(content_im)<span style=\"color:rgb(98,98,98)\">.</span>max()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Get intermediate representations, take 1:\n\nWe want to feed some data through the network, storing thr outputs of different layers. Here's one way to do this:\n\n::: {#cf35ae08 .cell execution_count=28}\n``` {.python .cell-code}\ndef calc_features(imgs, target_layers=(18, 25)): \n    x = normalize(imgs)\n    feats = []\n    for i, layer in enumerate(vgg16[:max(target_layers)+1]):\n        x = layer(x)\n        if i in target_layers:\n            feats.append(x.clone())\n    return feats\n```\n:::\n\n\n::: {#1fc5c9d1 .cell execution_count=29}\n``` {.python .cell-code}\n# Testing it out to see the shapes of the resulting feature maps:\nfeats = calc_features(content_im)\n[f.shape for f in feats]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Testing it out to see the shapes of the resulting feature maps:</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> feats <span style=\"color:rgb(98,98,98)\">=</span> calc_features(<span class=\"ansi-yellow-bg\">content_im</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> [f<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> f <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> feats]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0bda5972 .cell execution_count=30}\n``` {.python .cell-code}\n# Homework: Can you do this using hooks?\n```\n:::\n\n\n### What's the point?\n\nYou may remember us looking at https://distill.pub/2017/feature-visualization/ and talking about how deep CNNs 'learn' to classify images. Early layers tend to capture gradients and textures, while later layers tend towards more complex types of feature. We're going to exploit this hierarchy for artistic purposes, but being able to choose what kind of feature you'd like to use when comparing images has a number of other useful applications. \n\n# Optimizing an Image with Content Loss\n\nTo start with, let's try optimizing an image by comparing it's features (from two later layers) with those from the target image. If our theory is right, we should see the structure of the target emerge from the noise without necessarily seeing a perfect re-production of the target like we did in the previous MSE loss example.\n\n::: {#4d921d09 .cell execution_count=31}\n``` {.python .cell-code}\nclass ContentLossToTarget():\n    def __init__(self, target_im, target_layers=(18, 25)):\n        fc.store_attr()\n        with torch.no_grad():\n            self.target_features = calc_features(target_im, target_layers)\n    def __call__(self, input_im): \n        return sum((f1-f2).pow(2).mean() for f1, f2 in \n               zip(calc_features(input_im, self.target_layers), self.target_features))\n```\n:::\n\n\n::: {#a7d1a14d .cell execution_count=32}\n``` {.python .cell-code}\nloss_function_perceptual = ContentLossToTarget(content_im)\nmodel = TensorModel(torch.rand_like(content_im))\nlearn = Learner(model, get_dummy_dls(150), loss_function_perceptual, \n                lr=1e-2, cbs=cbs, opt_func=torch.optim.Adam)\nlearn.fit(1, cbs=[ImageLogCB(log_every=30)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> loss_function_perceptual <span style=\"color:rgb(98,98,98)\">=</span> ContentLossToTarget(<span class=\"ansi-yellow-bg\">content_im</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> TensorModel(torch<span style=\"color:rgb(98,98,98)\">.</span>rand_like(content_im))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, get_dummy_dls(<span style=\"color:rgb(98,98,98)\">150</span>), loss_function_perceptual, \n<span class=\"ansi-green-fg ansi-bold\">      4</span>                 lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs, opt_func<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>optim<span style=\"color:rgb(98,98,98)\">.</span>Adam)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Choosing the layers determines the kind of features that are important:**\n\n::: {#fec71d72 .cell execution_count=33}\n``` {.python .cell-code}\nloss_function_perceptual = ContentLossToTarget(content_im, target_layers=(1, 6))\nmodel = TensorModel(torch.rand_like(content_im))\nlearn = Learner(model, get_dummy_dls(150), loss_function_perceptual, \n                lr=1e-2, cbs=cbs, opt_func=torch.optim.Adam)\nlearn.fit(1, cbs=[ImageLogCB(log_every=30)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> loss_function_perceptual <span style=\"color:rgb(98,98,98)\">=</span> ContentLossToTarget(<span class=\"ansi-yellow-bg\">content_im</span>, target_layers<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> TensorModel(torch<span style=\"color:rgb(98,98,98)\">.</span>rand_like(content_im))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> Learner(model, get_dummy_dls(<span style=\"color:rgb(98,98,98)\">150</span>), loss_function_perceptual, \n<span class=\"ansi-green-fg ansi-bold\">      4</span>                 lr<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-2</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs, opt_func<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>optim<span style=\"color:rgb(98,98,98)\">.</span>Adam)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'content_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Style Loss with Gram Matrix\n\nSo, we know how to extract feature maps. The next thing we'd like to do is find a way to capture the **style** of an input image, based on those early layers and the kinds of textural feature that they learn. Unfortunately, we can't just compare the feature maps from some early layers since these 'maps' encode information spatially - which we don't want!\n\n![feature_map_extraction.png](attachment:feature_map_extraction.png)\n\nSo, we need a way to measure what **kinds** of style features are present, and ideally which kinds occur together, without worrying about **where** these features occur in the image. \n\nEnter something called the Gram Matrix. The idea here is that we'll measure the **correlation** between features. Given a feature map with `f` features in an `h` x `w` grid, we'll flatten out the spatial component and then for every feature we'll take the dot product of that row with itself, giving an `f` x `f` matrix as the result. Each entry in this matrix quantifies how correlated the relevant pair of features are and how frequently they occur - exactly what we want. In this diagram each feature is represented as a colored dot.\n\n![gram_calculation.png](attachment:gram_calculation.png)\n\nRe-creating the diagram operations in code:\n\n::: {#ed04b837 .cell execution_count=34}\n``` {.python .cell-code}\nt = tensor([[0, 1, 0, 1, 1, 0, 0, 1, 1],\n            [0, 1, 0, 1, 0, 0, 0, 0, 1],\n            [1, 0, 1, 1, 1, 1, 1, 1, 0],\n            [1, 0, 1, 1, 0, 1, 1, 0, 0]])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> t <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tensor</span>([[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>],\n<span class=\"ansi-green-fg ansi-bold\">      2</span>             [<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>],\n<span class=\"ansi-green-fg ansi-bold\">      3</span>             [<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>],\n<span class=\"ansi-green-fg ansi-bold\">      4</span>             [<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">0</span>]])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tensor' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#113526ae .cell execution_count=35}\n``` {.python .cell-code}\ntorch.einsum('fs, gs -> fg', t, t)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> torch<span style=\"color:rgb(98,98,98)\">.</span>einsum(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">fs, gs -&gt; fg</span><span style=\"color:rgb(175,0,0)\">'</span>, <span class=\"ansi-yellow-bg\">t</span>, t)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 't' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2ad311e0 .cell execution_count=36}\n``` {.python .cell-code}\nt.matmul(t.T) # Alternate approach\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">t</span><span style=\"color:rgb(98,98,98)\">.</span>matmul(t<span style=\"color:rgb(98,98,98)\">.</span>T) <span style=\"font-style:italic;color:rgb(95,135,135)\"># Alternate approach</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 't' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Trying it out\n\n::: {#53aa2510 .cell execution_count=37}\n``` {.python .cell-code}\nstyle_im = download_image(spiderweb_url).to(def_device)\nshow_image(style_im);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> style_im <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">download_image</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">spiderweb_url</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_image(style_im);\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">download_image</span><span class=\"ansi-blue-fg\">(url)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">download_image</span>(url):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     imgb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>urlread(url, decode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>) \n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> torchvision<span style=\"color:rgb(98,98,98)\">.</span>io<span style=\"color:rgb(98,98,98)\">.</span>decode_image(tensor(<span style=\"color:rgb(0,135,0)\">list</span>(imgb), dtype<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>uint8))<span style=\"color:rgb(98,98,98)\">.</span>float()<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">255.</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4c5722fc .cell execution_count=38}\n``` {.python .cell-code}\ndef calc_grams(img, target_layers=(1, 6, 11, 18, 25)):\n    return L(torch.einsum('chw, dhw -> cd', x, x) / (x.shape[-2]*x.shape[-1]) # 'bchw, bdhw -> bcd' if batched\n            for x in calc_features(img, target_layers))\n```\n:::\n\n\n::: {#2a88c7fd .cell execution_count=39}\n``` {.python .cell-code}\nstyle_grams = calc_grams(style_im)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> style_grams <span style=\"color:rgb(98,98,98)\">=</span> calc_grams(<span class=\"ansi-yellow-bg\">style_im</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'style_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d9e9ff5b .cell execution_count=40}\n``` {.python .cell-code}\n[g.shape for g in style_grams] # The gram matrices for features from different layers\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [g<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> g <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">style_grams</span>] <span style=\"font-style:italic;color:rgb(95,135,135)\"># The gram matrices for features from different layers</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'style_grams' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#637f530a .cell execution_count=41}\n``` {.python .cell-code}\nstyle_grams.attrgot('shape') # The magic of fastcore's L\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">style_grams</span><span style=\"color:rgb(98,98,98)\">.</span>attrgot(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">shape</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># The magic of fastcore's L</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'style_grams' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4b4d45f6 .cell execution_count=42}\n``` {.python .cell-code}\nclass StyleLossToTarget():\n    def __init__(self, target_im, target_layers=(1, 6, 11, 18, 25)):\n        fc.store_attr()\n        with torch.no_grad(): self.target_grams = calc_grams(target_im, target_layers)\n    def __call__(self, input_im): \n        return sum((f1-f2).pow(2).mean() for f1, f2 in \n               zip(calc_grams(input_im, self.target_layers), self.target_grams))\n```\n:::\n\n\n::: {#b1613a63 .cell execution_count=43}\n``` {.python .cell-code}\nstyle_loss = StyleLossToTarget(style_im)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> style_loss <span style=\"color:rgb(98,98,98)\">=</span> StyleLossToTarget(<span class=\"ansi-yellow-bg\">style_im</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'style_im' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f947bc03 .cell execution_count=44}\n``` {.python .cell-code}\nstyle_loss(content_im)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">style_loss</span>(content_im)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'style_loss' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Style Transfer\n\n::: {#e1fcdc71 .cell execution_count=45}\n``` {.python .cell-code}\nmodel = TensorModel(content_im) # Start from content image\nstyle_loss = StyleLossToTarget(style_im)\ncontent_loss = ContentLossToTarget(content_im)\ndef combined_loss(x):\n    return style_loss(x) + content_loss(x)\nlearn = Learner(model, get_dummy_dls(150), combined_loss, lr=1e-2, cbs=cbs, opt_func=torch.optim.Adam)\nlearn.fit(1, cbs=[ImageLogCB(30)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TensorModel</span>(content_im) <span style=\"font-style:italic;color:rgb(95,135,135)\"># Start from content image</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> style_loss <span style=\"color:rgb(98,98,98)\">=</span> StyleLossToTarget(style_im)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> content_loss <span style=\"color:rgb(98,98,98)\">=</span> ContentLossToTarget(content_im)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TensorModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bc80bf26 .cell execution_count=46}\n``` {.python .cell-code}\nshow_image(learn.model().clip(0, 1)); # View the final result\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_image</span>(learn<span style=\"color:rgb(98,98,98)\">.</span>model()<span style=\"color:rgb(98,98,98)\">.</span>clip(<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>)); <span style=\"font-style:italic;color:rgb(95,135,135)\"># View the final result</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_image' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAnd trying with random starting image, weighting the style loss lower, using different layers:\n\n::: {#794c15d4 .cell execution_count=47}\n``` {.python .cell-code}\nmodel = TensorModel(torch.rand_like(content_im))\nstyle_loss = StyleLossToTarget(style_im)\ncontent_loss = ContentLossToTarget(content_im, target_layers=(6, 18, 25))\ndef combined_loss(x):\n    return style_loss(x) * 0.2 + content_loss(x)\nlearn = Learner(model, get_dummy_dls(300), combined_loss, lr=5e-2, cbs=cbs, opt_func=torch.optim.Adam)\nlearn.fit(1, cbs=[ImageLogCB(60)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TensorModel</span>(torch<span style=\"color:rgb(98,98,98)\">.</span>rand_like(content_im))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> style_loss <span style=\"color:rgb(98,98,98)\">=</span> StyleLossToTarget(style_im)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> content_loss <span style=\"color:rgb(98,98,98)\">=</span> ContentLossToTarget(content_im, target_layers<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">6</span>, <span style=\"color:rgb(98,98,98)\">18</span>, <span style=\"color:rgb(98,98,98)\">25</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TensorModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## For Comparison: non-miniai version\n\n::: {#c0a77718 .cell execution_count=48}\n``` {.python .cell-code}\n# The image to be optimized\nim = torch.rand(3, 256, 256).to(def_device)\nim.requires_grad = True\n\n# Set up the optimizer\nopt = torch.optim.Adam([im], lr=5e-2)\n\n# Define the loss function\nstyle_loss = StyleLossToTarget(style_im)\ncontent_loss = ContentLossToTarget(content_im, target_layers=[6, 18, 25])\ndef combined_loss(x):\n    return style_loss(x) * 0.2 + content_loss(x)\n\n# Optimization loop\nfor i in range(300):\n    loss = combined_loss(im)\n    loss.backward()\n    opt.step()\n    opt.zero_grad()\n    \n# Show the result\nshow_image(im.clip(0, 1));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The image to be optimized</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> im <span style=\"color:rgb(98,98,98)\">=</span> torch<span style=\"color:rgb(98,98,98)\">.</span>rand(<span style=\"color:rgb(98,98,98)\">3</span>, <span style=\"color:rgb(98,98,98)\">256</span>, <span style=\"color:rgb(98,98,98)\">256</span>)<span style=\"color:rgb(98,98,98)\">.</span>to(<span class=\"ansi-yellow-bg\">def_device</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> im<span style=\"color:rgb(98,98,98)\">.</span>requires_grad <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Set up the optimizer</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'def_device' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWhat do you think are some pros and cons? How would this look once we start displaying progress, testing different configurations and so on?\n\n",
    "supporting": [
      "16A_StyleTransfer_files"
    ],
    "filters": [],
    "includes": {}
  }
}