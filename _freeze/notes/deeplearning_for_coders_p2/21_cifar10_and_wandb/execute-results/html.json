{
  "hash": "e089ce08375aa40f4a65601aeeda6eb5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Training\njupyter: python3\n---\n\n::: {#c16babcd .cell execution_count=1}\n``` {.python .cell-code}\nfrom diffusers import UNet2DModel\n\nimport pickle,gzip,math,os,time,shutil,torch,random,logging\nimport fastcore.all as fc,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom functools import partial\n\nfrom fastcore.foundation import L\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torch import tensor,nn,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.nn import init\nfrom torch.optim import lr_scheduler\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\nfrom miniai.resnet import *\nfrom miniai.augment import *\nfrom miniai.accel import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">diffusers</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> UNet2DModel\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">logging</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'diffusers'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#addefd55 .cell execution_count=2}\n``` {.python .cell-code}\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\n\nmpl.rcParams['image.cmap'] = 'gray_r'\nlogging.disable(logging.WARNING)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MulticlassAccuracy\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> load_dataset,load_dataset_builder\n<span class=\"ansi-green-fg ansi-bold\">      4</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image.cmap</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">gray_r</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'torcheval'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#333bf255 .cell execution_count=3}\n``` {.python .cell-code}\nxl,yl = 'img','label'\nname = \"cifar10\"\ndsd = load_dataset(name)\n\n@inplace\ndef transformi(b): b[xl] = [TF.to_tensor(o)-0.5 for o in b[xl]]\n\nbs = 32\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=8)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> xl,yl <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">img</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">label</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> name <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">cifar10</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7d7d4272 .cell execution_count=4}\n``` {.python .cell-code}\ndt = dls.train\nxb,yb = next(iter(dt))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> dt <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(dt))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5865c1fb .cell execution_count=5}\n``` {.python .cell-code}\nxb[0].shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">xb</span>[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#70026a86 .cell execution_count=6}\n``` {.python .cell-code}\nshow_images(xb[:25]+0.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(xb[:<span style=\"color:rgb(98,98,98)\">25</span>]<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">0.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ea0e4d3a .cell execution_count=7}\n``` {.python .cell-code}\nfrom types import SimpleNamespace\ndef linear_sched(betamin=0.0001,betamax=0.02,n_steps=1000):\n    beta = torch.linspace(betamin, betamax, n_steps)\n    return SimpleNamespace(a=1.-beta, abar=(1.-beta).cumprod(dim=0), sig=beta.sqrt())\n```\n:::\n\n\n::: {#81c72c89 .cell execution_count=8}\n``` {.python .cell-code}\nn_steps = 1000\nlin_abar = linear_sched(betamax=0.01)\nalphabar = lin_abar.abar\nalpha = lin_abar.a\nsigma = lin_abar.sig\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> n_steps <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1000</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> lin_abar <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">linear_sched</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">betamax</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0.01</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> alphabar <span style=\"color:rgb(98,98,98)\">=</span> lin_abar<span style=\"color:rgb(98,98,98)\">.</span>abar\n<span class=\"ansi-green-fg ansi-bold\">      4</span> alpha <span style=\"color:rgb(98,98,98)\">=</span> lin_abar<span style=\"color:rgb(98,98,98)\">.</span>a\n\nCell <span class=\"ansi-green-fg\">In[7], line 3</span>, in <span class=\"ansi-cyan-fg\">linear_sched</span><span class=\"ansi-blue-fg\">(betamin, betamax, n_steps)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">linear_sched</span>(betamin<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.0001</span>,betamax<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.02</span>,n_steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1000</span>):\n<span class=\"ansi-green-fg\">----&gt; 3</span>     beta <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>linspace(betamin, betamax, n_steps)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> SimpleNamespace(a<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span><span style=\"color:rgb(98,98,98)\">-</span>beta, abar<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">1.</span><span style=\"color:rgb(98,98,98)\">-</span>beta)<span style=\"color:rgb(98,98,98)\">.</span>cumprod(dim<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>), sig<span style=\"color:rgb(98,98,98)\">=</span>beta<span style=\"color:rgb(98,98,98)\">.</span>sqrt())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bfdcd7cc .cell execution_count=9}\n``` {.python .cell-code}\ndef noisify(x0, ᾱ):\n    device = x0.device\n    n = len(x0)\n    t = torch.randint(0, n_steps, (n,), dtype=torch.long)\n    ε = torch.randn(x0.shape, device=device)\n    ᾱ_t = ᾱ[t].reshape(-1, 1, 1, 1).to(device)\n    xt = ᾱ_t.sqrt()*x0 + (1-ᾱ_t).sqrt()*ε\n    return (xt, t.to(device)), ε\n```\n:::\n\n\n::: {#113de9d1 .cell execution_count=10}\n``` {.python .cell-code}\n(xt,t),ε = noisify(xb[:25],alphabar)\nt\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (xt,t),ε <span style=\"color:rgb(98,98,98)\">=</span> noisify(<span class=\"ansi-yellow-bg\">xb</span>[:<span style=\"color:rgb(98,98,98)\">25</span>],alphabar)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> t\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xb' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2c33d98b .cell execution_count=11}\n``` {.python .cell-code}\ntitles = fc.map_ex(t[:25], '{}')\nshow_images(xt[:25].clip(-0.5, 0.5) + 0.5, imsize=1.5, titles=titles)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> titles <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>map_ex(t[:<span style=\"color:rgb(98,98,98)\">25</span>], <span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{}</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_images(xt[:<span style=\"color:rgb(98,98,98)\">25</span>]<span style=\"color:rgb(98,98,98)\">.</span>clip(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.5</span>, <span style=\"color:rgb(98,98,98)\">0.5</span>) <span style=\"color:rgb(98,98,98)\">+</span> <span style=\"color:rgb(98,98,98)\">0.5</span>, imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>, titles<span style=\"color:rgb(98,98,98)\">=</span>titles)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#43f6753e .cell execution_count=12}\n``` {.python .cell-code}\nclass UNet(UNet2DModel):\n    def forward(self, x): return super().forward(*x).sample\n    \ndef init_ddpm(model):\n    for o in model.down_blocks:\n        for p in o.resnets:\n            p.conv2.weight.data.zero_()\n            for p in fc.L(o.downsamplers): init.orthogonal_(p.conv.weight)\n\n    for o in model.up_blocks:\n        for p in o.resnets: p.conv2.weight.data.zero_()\n\n    model.conv_out.weight.data.zero_()\n    \ndef collate_ddpm(b): return noisify(default_collate(b)[xl], alphabar)\ndef dl_ddpm(ds, nw=4): return DataLoader(ds, batch_size=bs, collate_fn=collate_ddpm, num_workers=nw)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">UNet</span>(<span class=\"ansi-yellow-bg\">UNet2DModel</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">forward</span>(<span style=\"color:rgb(0,135,0)\">self</span>, x): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span>forward(<span style=\"color:rgb(98,98,98)\">*</span>x)<span style=\"color:rgb(98,98,98)\">.</span>sample\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">init_ddpm</span>(model):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'UNet2DModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dedff211 .cell execution_count=13}\n``` {.python .cell-code}\ndls = DataLoaders(dl_ddpm(tds['train']), dl_ddpm(tds['test']))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> dls <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">DataLoaders</span>(dl_ddpm(tds[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">train</span><span style=\"color:rgb(175,0,0)\">'</span>]), dl_ddpm(tds[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">test</span><span style=\"color:rgb(175,0,0)\">'</span>]))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DataLoaders' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#46c9497b .cell execution_count=14}\n``` {.python .cell-code}\n# The model we've been using for FashionMNIST\nmodel = UNet(in_channels=3, out_channels=3, block_out_channels=(32, 64, 128, 256), norm_num_groups=8)\nsum(p.numel() for p in model.parameters())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The model we've been using for FashionMNIST</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">UNet</span>(in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, block_out_channels<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">32</span>, <span style=\"color:rgb(98,98,98)\">64</span>, <span style=\"color:rgb(98,98,98)\">128</span>, <span style=\"color:rgb(98,98,98)\">256</span>), norm_num_groups<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">sum</span>(p<span style=\"color:rgb(98,98,98)\">.</span>numel() <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>parameters())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'UNet' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#98badeb7 .cell execution_count=15}\n``` {.python .cell-code}\n# The default is a much larger model:\nmodel = UNet(in_channels=3, out_channels=3)\nsum(p.numel() for p in model.parameters())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The default is a much larger model:</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">UNet</span>(in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">sum</span>(p<span style=\"color:rgb(98,98,98)\">.</span>numel() <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>parameters())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'UNet' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3c32b1b7 .cell execution_count=16}\n``` {.python .cell-code}\nclean_mem() # Free up some memory\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">clean_mem</span>() <span style=\"font-style:italic;color:rgb(95,135,135)\"># Free up some memory</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'clean_mem' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#655cfa25 .cell execution_count=17}\n``` {.python .cell-code}\nlr = 1e-3\nepochs = 1\nopt_func = partial(optim.AdamW, eps=1e-5)\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\ncbs = [DeviceCB(), MixedPrecision(), ProgressCB(plot=True), MetricsCB(), BatchSchedCB(sched)]\nmodel = UNet(in_channels=3, out_channels=3)\ninit_ddpm(model)\nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-3</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3d0741ce .cell execution_count=18}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a032001b .cell execution_count=19}\n``` {.python .cell-code}\n@torch.no_grad()\ndef sample(model, sz):\n    ps = next(model.parameters())\n    x_t = torch.randn(sz).to(ps)\n    preds = []\n    for t in reversed(range(n_steps)):\n        t_batch = torch.full((x_t.shape[0],), t, device=ps.device, dtype=torch.long)\n        z = (torch.randn(x_t.shape) if t > 0 else torch.zeros(x_t.shape)).to(ps)\n        ᾱ_t1 = alphabar[t-1]  if t > 0 else torch.tensor(1)\n        b̄_t = 1-alphabar[t]\n        b̄_t1 = 1-ᾱ_t1\n        noise = model((x_t, t_batch))\n        x_0_hat = ((x_t - b̄_t.sqrt() * noise)/alphabar[t].sqrt())\n        x_t = x_0_hat * ᾱ_t1.sqrt()*(1-alpha[t])/b̄_t + x_t * alpha[t].sqrt()*b̄_t1/b̄_t + sigma[t]*z\n        preds.append(x_t.float().cpu())\n    return preds\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@torch</span><span style=\"color:rgb(98,98,98)\">.</span>no_grad()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">sample</span>(model, sz):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     ps <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(model<span style=\"color:rgb(98,98,98)\">.</span>parameters())\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     x_t <span style=\"color:rgb(98,98,98)\">=</span> torch<span style=\"color:rgb(98,98,98)\">.</span>randn(sz)<span style=\"color:rgb(98,98,98)\">.</span>to(ps)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2dc2571f .cell execution_count=20}\n``` {.python .cell-code}\n%%time\nsamples = sample(model, (bs, 3, 32, 32))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nFile <span class=\"ansi-green-fg\">&lt;timed exec&gt;:1</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sample' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f7fa3c6a .cell execution_count=21}\n``` {.python .cell-code}\ns = (samples[-1] + 0.5).clamp(0,1)\nshow_images(s[:16], imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> s <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">samples</span>[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">+</span> <span style=\"color:rgb(98,98,98)\">0.5</span>)<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_images(s[:<span style=\"color:rgb(98,98,98)\">16</span>], imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'samples' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# W&B CB\n\n::: {#abe2d0c2 .cell execution_count=22}\n``` {.python .cell-code}\nimport wandb\n\nclass WandBCB(MetricsCB):\n    order=100\n    def __init__(self, config, *ms, project='ddpm_cifar10', **metrics):\n        fc.store_attr()\n        super().__init__(*ms, **metrics)\n        \n    def before_fit(self, learn): wandb.init(project=self.project, config=self.config)\n    def after_fit(self, learn): wandb.finish()\n\n    def _log(self, d): \n        if self.train: \n            wandb.log({'train_'+m:float(d[m]) for m in self.all_metrics})\n        else: \n            wandb.log({'val_'+m:float(d[m]) for m in self.all_metrics})\n            wandb.log({'samples':self.sample_figure(learn)})\n        print(d)\n\n        \n    def sample_figure(self, learn):\n        with torch.no_grad():\n            samples = sample(learn.model, (16, 3, 32, 32))\n        s = (samples[-1] + 0.5).clamp(0,1)\n        plt.clf()\n        fig, axs = get_grid(16)\n        for im,ax in zip(s[:16], axs.flat): show_image(im, ax=ax)\n        return fig\n\n    def after_batch(self, learn):\n        super().after_batch(learn) \n        wandb.log({'loss':learn.loss})\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">wandb</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">WandBCB</span>(<span class=\"ansi-yellow-bg\">MetricsCB</span>):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     order<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">100</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, config, <span style=\"color:rgb(98,98,98)\">*</span>ms, project<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ddpm_cifar10</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>metrics):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MetricsCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#32cf271e .cell execution_count=23}\n``` {.python .cell-code}\nlr = 1e-3\nepochs = 10\nopt_func = partial(optim.AdamW, eps=1e-5)\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nwandbcb =  WandBCB(config={'lr':lr, 'epochs':epochs, 'comments':'default unet logging test'})\ncbs = [DeviceCB(), MixedPrecision(), ProgressCB(plot=True), wandbcb, BatchSchedCB(sched)]\nmodel = model = UNet(in_channels=3, out_channels=3)\ninit_ddpm(model)\nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-3</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">10</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#44f790cf .cell execution_count=24}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "21_cifar10_and_wandb_files"
    ],
    "filters": [],
    "includes": {}
  }
}