{
  "hash": "ed4dcf87a7e5ba6249cbc593896e934d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Diffusion unet\njupyter: python3\n---\n\n::: {#ce8ce64f .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='1'\n```\n:::\n\n\n::: {#61e70b21 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=2}\n``` {.python .cell-code}\nfrom miniai.imports import *\n\nfrom einops import rearrange\nfrom fastprogress import progress_bar\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">imports</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">einops</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> rearrange\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastprogress</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> progress_bar\n\nFile <span class=\"ansi-green-fg\">~/work/blog/notes/deeplearning_for_coders_p2/miniai/imports.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">T</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TF</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">F</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'datasets'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4243fd49 .cell execution_count=3}\n``` {.python .cell-code}\ntorch.set_printoptions(precision=4, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray_r'\nmpl.rcParams['figure.dpi'] = 70\n\nimport logging\nlogging.disable(logging.WARNING)\n\nset_seed(42)\nif fc.defaults.cpus>8: fc.defaults.cpus=8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image.cmap</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">gray_r</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#302fc95d .cell execution_count=4}\n``` {.python .cell-code}\nxl,yl = 'image','label'\nname = \"fashion_mnist\"\nbs = 512\ndsd = load_dataset(name)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> name <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fashion_mnist</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">512</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a9dbb598 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=5}\n``` {.python .cell-code}\ndef abar(t): return (t*math.pi/2).cos()**2\ndef inv_abar(x): return x.sqrt().acos()*2/math.pi\n\ndef noisify(x0):\n    device = x0.device\n    n = len(x0)\n    t = torch.rand(n,).to(x0).clamp(0,0.999)\n    ε = torch.randn(x0.shape, device=device)\n    abar_t = abar(t).reshape(-1, 1, 1, 1).to(device)\n    xt = abar_t.sqrt()*x0 + (1-abar_t).sqrt()*ε\n    return (xt, t.to(device)), ε\n\ndef collate_ddpm(b): return noisify(default_collate(b)[xl])\ndef dl_ddpm(ds): return DataLoader(ds, batch_size=bs, collate_fn=collate_ddpm, num_workers=4)\n```\n:::\n\n\n::: {#e45222de .cell execution_count=6}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[xl] = [F.pad(TF.to_tensor(o), (2,2,2,2))-0.5 for o in b[xl]]\n\ntds = dsd.with_transform(transformi)\ndls = DataLoaders(dl_ddpm(tds['train']), dl_ddpm(tds['test']))\n\ndl = dls.train\n(xt,t),eps = b = next(iter(dl))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [F<span style=\"color:rgb(98,98,98)\">.</span>pad(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o), (<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>))<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tds <span style=\"color:rgb(98,98,98)\">=</span> dsd<span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Train\n\nBased on Diffusers\n\n::: {#be1a24ce .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=7}\n``` {.python .cell-code}\ndef timestep_embedding(tsteps, emb_dim, max_period= 10000):\n    exponent = -math.log(max_period) * torch.linspace(0, 1, emb_dim//2, device=tsteps.device)\n    emb = tsteps[:,None].float() * exponent.exp()[None,:]\n    emb = torch.cat([emb.sin(), emb.cos()], dim=-1)\n    return F.pad(emb, (0,1,0,0)) if emb_dim%2==1 else emb\n```\n:::\n\n\n::: {#41b390ef .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=8}\n``` {.python .cell-code}\ndef pre_conv(ni, nf, ks=3, stride=1, act=nn.SiLU, norm=None, bias=True):\n    layers = nn.Sequential()\n    if norm: layers.append(norm(ni))\n    if act : layers.append(act())\n    layers.append(nn.Conv2d(ni, nf, stride=stride, kernel_size=ks, padding=ks//2, bias=bias))\n    return layers\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">pre_conv</span>(ni, nf, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>SiLU, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> norm: layers<span style=\"color:rgb(98,98,98)\">.</span>append(norm(ni))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5853791d .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=9}\n``` {.python .cell-code}\ndef upsample(nf): return nn.Sequential(nn.Upsample(scale_factor=2.), nn.Conv2d(nf, nf, 3, padding=1))\n```\n:::\n\n\n::: {#fa38bf68 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=10}\n``` {.python .cell-code}\ndef lin(ni, nf, act=nn.SiLU, norm=None, bias=True):\n    layers = nn.Sequential()\n    if norm: layers.append(norm(ni))\n    if act : layers.append(act())\n    layers.append(nn.Linear(ni, nf, bias=bias))\n    return layers\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">lin</span>(ni, nf, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>SiLU, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> norm: layers<span style=\"color:rgb(98,98,98)\">.</span>append(norm(ni))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d7e9626a .cell execution_count=11}\n``` {.python .cell-code}\n# This version is giving poor results - use the cell below instead\nclass SelfAttention(nn.Module):\n    def __init__(self, ni, attn_chans):\n        super().__init__()\n        self.attn = nn.MultiheadAttention(ni, ni//attn_chans, batch_first=True)\n        self.norm = nn.BatchNorm2d(ni)\n\n    def forward(self, x):\n        n,c,h,w = x.shape\n        x = self.norm(x).view(n, c, -1).transpose(1, 2)\n        x = self.attn(x, x, x, need_weights=False)[0]\n        return x.transpose(1,2).reshape(n,c,h,w)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This version is giving poor results - use the cell below instead</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">SelfAttention</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ni, attn_chans):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5fbe5f27 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=12}\n``` {.python .cell-code}\nclass SelfAttention(nn.Module):\n    def __init__(self, ni, attn_chans, transpose=True):\n        super().__init__()\n        self.nheads = ni//attn_chans\n        self.scale = math.sqrt(ni/self.nheads)\n        self.norm = nn.LayerNorm(ni)\n        self.qkv = nn.Linear(ni, ni*3)\n        self.proj = nn.Linear(ni, ni)\n        self.t = transpose\n    \n    def forward(self, x):\n        n,c,s = x.shape\n        if self.t: x = x.transpose(1, 2)\n        x = self.norm(x)\n        x = self.qkv(x)\n        x = rearrange(x, 'n s (h d) -> (n h) s d', h=self.nheads)\n        q,k,v = torch.chunk(x, 3, dim=-1)\n        s = (q@k.transpose(1,2))/self.scale\n        x = s.softmax(dim=-1)@v\n        x = rearrange(x, '(n h) s d -> n s (h d)', h=self.nheads)\n        x = self.proj(x)\n        if self.t: x = x.transpose(1, 2)\n        return x\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">SelfAttention</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ni, attn_chans, transpose<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d0aafedd .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=13}\n``` {.python .cell-code}\nclass SelfAttention2D(SelfAttention):\n    def forward(self, x):\n        n,c,h,w = x.shape\n        return super().forward(x.view(n, c, -1)).reshape(n,c,h,w)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">SelfAttention2D</span>(<span class=\"ansi-yellow-bg\">SelfAttention</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">forward</span>(<span style=\"color:rgb(0,135,0)\">self</span>, x):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         n,c,h,w <span style=\"color:rgb(98,98,98)\">=</span> x<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'SelfAttention' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#12b32f16 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=14}\n``` {.python .cell-code}\nclass EmbResBlock(nn.Module):\n    def __init__(self, n_emb, ni, nf=None, ks=3, act=nn.SiLU, norm=nn.BatchNorm2d, attn_chans=0):\n        super().__init__()\n        if nf is None: nf = ni\n        self.emb_proj = nn.Linear(n_emb, nf*2)\n        self.conv1 = pre_conv(ni, nf, ks, act=act, norm=norm)\n        self.conv2 = pre_conv(nf, nf, ks, act=act, norm=norm)\n        self.idconv = fc.noop if ni==nf else nn.Conv2d(ni, nf, 1)\n        self.attn = False\n        if attn_chans: self.attn = SelfAttention2D(nf, attn_chans)\n\n    def forward(self, x, t):\n        inp = x\n        x = self.conv1(x)\n        emb = self.emb_proj(F.silu(t))[:, :, None, None]\n        scale,shift = torch.chunk(emb, 2, dim=1)\n        x = x*(1+scale) + shift\n        x = self.conv2(x)\n        x = x + self.idconv(inp)\n        if self.attn: x = x + self.attn(x)\n        return x\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">EmbResBlock</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, n_emb, ni, nf<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, act<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>SiLU, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d, attn_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f5ce9df9 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=15}\n``` {.python .cell-code}\ndef saved(m, blk):\n    m_ = m.forward\n\n    @wraps(m.forward)\n    def _f(*args, **kwargs):\n        res = m_(*args, **kwargs)\n        blk.saved.append(res)\n        return res\n\n    m.forward = _f\n    return m\n```\n:::\n\n\n::: {#6d10ffc8 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=16}\n``` {.python .cell-code}\nclass DownBlock(nn.Module):\n    def __init__(self, n_emb, ni, nf, add_down=True, num_layers=1, attn_chans=0):\n        super().__init__()\n        self.resnets = nn.ModuleList([saved(EmbResBlock(n_emb, ni if i==0 else nf, nf, attn_chans=attn_chans), self)\n                                      for i in range(num_layers)])\n        self.down = saved(nn.Conv2d(nf, nf, 3, stride=2, padding=1), self) if add_down else nn.Identity()\n\n    def forward(self, x, t):\n        self.saved = []\n        for resnet in self.resnets: x = resnet(x, t)\n        x = self.down(x)\n        return x\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">DownBlock</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, n_emb, ni, nf, add_down<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, num_layers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, attn_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7a7d30f2 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=17}\n``` {.python .cell-code}\nclass UpBlock(nn.Module):\n    def __init__(self, n_emb, ni, prev_nf, nf, add_up=True, num_layers=2, attn_chans=0):\n        super().__init__()\n        self.resnets = nn.ModuleList(\n            [EmbResBlock(n_emb, (prev_nf if i==0 else nf)+(ni if (i==num_layers-1) else nf), nf, attn_chans=attn_chans)\n            for i in range(num_layers)])\n        self.up = upsample(nf) if add_up else nn.Identity()\n\n    def forward(self, x, t, ups):\n        for resnet in self.resnets: x = resnet(torch.cat([x, ups.pop()], dim=1), t)\n        return self.up(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">UpBlock</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, n_emb, ni, prev_nf, nf, add_up<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, num_layers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, attn_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#583cab8d .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=18}\n``` {.python .cell-code}\nclass EmbUNetModel(nn.Module):\n    def __init__( self, in_channels=3, out_channels=3, nfs=(224,448,672,896), num_layers=1, attn_chans=8, attn_start=1):\n        super().__init__()\n        self.conv_in = nn.Conv2d(in_channels, nfs[0], kernel_size=3, padding=1)\n        self.n_temb = nf = nfs[0]\n        n_emb = nf*4\n        self.emb_mlp = nn.Sequential(lin(self.n_temb, n_emb, norm=nn.BatchNorm1d),\n                                     lin(n_emb, n_emb))\n        self.downs = nn.ModuleList()\n        n = len(nfs)\n        for i in range(n):\n            ni = nf\n            nf = nfs[i]\n            self.downs.append(DownBlock(n_emb, ni, nf, add_down=i!=n-1, num_layers=num_layers,\n                                        attn_chans=0 if i<attn_start else attn_chans))\n        self.mid_block = EmbResBlock(n_emb, nfs[-1])\n\n        rev_nfs = list(reversed(nfs))\n        nf = rev_nfs[0]\n        self.ups = nn.ModuleList()\n        for i in range(n):\n            prev_nf = nf\n            nf = rev_nfs[i]\n            ni = rev_nfs[min(i+1, len(nfs)-1)]\n            self.ups.append(UpBlock(n_emb, ni, prev_nf, nf, add_up=i!=n-1, num_layers=num_layers+1,\n                                    attn_chans=0 if i>=n-attn_start else attn_chans))\n        self.conv_out = pre_conv(nfs[0], out_channels, act=nn.SiLU, norm=nn.BatchNorm2d, bias=False)\n\n    def forward(self, inp):\n        x,t = inp\n        temb = timestep_embedding(t, self.n_temb)\n        emb = self.emb_mlp(temb)\n        x = self.conv_in(x)\n        saved = [x]\n        for block in self.downs: x = block(x, emb)\n        saved += [p for o in self.downs for p in o.saved]\n        x = self.mid_block(x, emb)\n        for block in self.ups: x = block(x, emb, saved)\n        return self.conv_out(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">EmbUNetModel</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>( <span style=\"color:rgb(0,135,0)\">self</span>, in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">224</span>,<span style=\"color:rgb(98,98,98)\">448</span>,<span style=\"color:rgb(98,98,98)\">672</span>,<span style=\"color:rgb(98,98,98)\">896</span>), num_layers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, attn_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>, attn_start<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#108e2ed6 .cell execution_count=19}\n``` {.python .cell-code}\nlr = 1e-2\nepochs = 25\nopt_func = partial(optim.Adam, eps=1e-5)\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\ncbs = [DeviceCB(), ProgressCB(plot=True), MetricsCB(), BatchSchedCB(sched), MixedPrecision()]\nmodel = EmbUNetModel(in_channels=1, out_channels=1, nfs=(32,64,128,256), num_layers=2)\nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">25</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(optim<span style=\"color:rgb(98,98,98)\">.</span>Adam, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#42d29ac5 .cell execution_count=20}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Sampling\n\n::: {#a950a57e .cell execution_count=21}\n``` {.python .cell-code}\nfrom miniai.fid import ImageEval\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fid</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> ImageEval\n\nFile <span class=\"ansi-green-fg\">~/work/blog/notes/deeplearning_for_coders_p2/miniai/fid.py:8</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># %% ../nbs/18_fid.ipynb 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span>\n<span class=\"ansi-green-fg\">----&gt; 8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pathlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Path\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'fastcore'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#07c4eb9b .cell execution_count=22}\n``` {.python .cell-code}\ncmodel = torch.load('models/data_aug2.pkl')\ndel(cmodel[8])\ndel(cmodel[7])\n\n@inplace\ndef transformi(b): b[xl] = [F.pad(TF.to_tensor(o), (2,2,2,2))*2-1 for o in b[xl]]\n\nbs = 2048\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=fc.defaults.cpus)\n\ndt = dls.train\nxb,yb = next(iter(dt))\n\nie = ImageEval(cmodel, dls, cbs=[DeviceCB()])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> cmodel <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>load(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models/data_aug2.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">del</span>(cmodel[<span style=\"color:rgb(98,98,98)\">8</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">del</span>(cmodel[<span style=\"color:rgb(98,98,98)\">7</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d2af925d .cell execution_count=23}\n``` {.python .cell-code}\nsz = (2048,1,32,32)\n```\n:::\n\n\n::: {#6841fd04 .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=24}\n``` {.python .cell-code}\ndef ddim_step(x_t, noise, abar_t, abar_t1, bbar_t, bbar_t1, eta, sig, clamp=True):\n    sig = ((bbar_t1/bbar_t).sqrt() * (1-abar_t/abar_t1).sqrt()) * eta\n    x_0_hat = ((x_t-(1-abar_t).sqrt()*noise) / abar_t.sqrt())\n    if clamp: x_0_hat = x_0_hat.clamp(-1,1)\n    if bbar_t1<=sig**2+0.01: sig=0.  # set to zero if very small or NaN\n    x_t = abar_t1.sqrt()*x_0_hat + (bbar_t1-sig**2).sqrt()*noise\n    x_t += sig * torch.randn(x_t.shape).to(x_t)\n    return x_0_hat,x_t\n```\n:::\n\n\n::: {#553fb14b .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=25}\n``` {.python .cell-code}\n@torch.no_grad()\ndef sample(f, model, sz, steps, eta=1., clamp=True):\n    model.eval()\n    ts = torch.linspace(1-1/steps,0,steps)\n    x_t = torch.randn(sz).cuda()\n    preds = []\n    for i,t in enumerate(progress_bar(ts)):\n        t = t[None].cuda()\n        abar_t = abar(t)\n        noise = model((x_t, t))\n        abar_t1 = abar(t-1/steps) if t>=1/steps else torch.tensor(1)\n        x_0_hat,x_t = f(x_t, noise, abar_t, abar_t1, 1-abar_t, 1-abar_t1, eta, 1-((i+1)/100), clamp=clamp)\n        preds.append(x_0_hat.float().cpu())\n    return preds\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@torch</span><span style=\"color:rgb(98,98,98)\">.</span>no_grad()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">sample</span>(f, model, sz, steps, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>, clamp<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     model<span style=\"color:rgb(98,98,98)\">.</span>eval()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     ts <span style=\"color:rgb(98,98,98)\">=</span> torch<span style=\"color:rgb(98,98,98)\">.</span>linspace(<span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">/</span>steps,<span style=\"color:rgb(98,98,98)\">0</span>,steps)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bdd0241d .cell execution_count=26}\n``` {.python .cell-code}\n# set_seed(42)\npreds = sample(ddim_step, model, sz, steps=100, eta=1.)\ns = (preds[-1]*2)\ns.min(),s.max(),s.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># set_seed(42)</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> preds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">sample</span>(ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">100</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> s <span style=\"color:rgb(98,98,98)\">=</span> (preds[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> s<span style=\"color:rgb(98,98,98)\">.</span>min(),s<span style=\"color:rgb(98,98,98)\">.</span>max(),s<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sample' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c398e30b .cell execution_count=27}\n``` {.python .cell-code}\nshow_images(s[:25].clamp(-1,1), imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(s[:<span style=\"color:rgb(98,98,98)\">25</span>]<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">1</span>), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3a8f9e36 .cell execution_count=28}\n``` {.python .cell-code}\nie.fid(s),ie.kid(s),s.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">ie</span><span style=\"color:rgb(98,98,98)\">.</span>fid(s),ie<span style=\"color:rgb(98,98,98)\">.</span>kid(s),s<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ie' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#73cbcbf1 .cell execution_count=29}\n``` {.python .cell-code}\npreds = sample(ddim_step, model, sz, steps=100, eta=1.)\nie.fid(preds[-1]*2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> preds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">sample</span>(ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">100</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> ie<span style=\"color:rgb(98,98,98)\">.</span>fid(preds[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sample' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4c196888 .cell execution_count=30}\n``` {.python .cell-code}\npreds = sample(ddim_step, model, sz, steps=50, eta=1.)\nie.fid(preds[-1]*2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> preds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">sample</span>(ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">50</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> ie<span style=\"color:rgb(98,98,98)\">.</span>fid(preds[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sample' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#28d2b891 .cell execution_count=31}\n``` {.python .cell-code}\npreds = sample(ddim_step, model, sz, steps=50, eta=1.)\nie.fid(preds[-1]*2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> preds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">sample</span>(ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">50</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> ie<span style=\"color:rgb(98,98,98)\">.</span>fid(preds[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sample' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Conditional model\n\n::: {#5d308ae2 .cell execution_count=32}\n``` {.python .cell-code}\ndef collate_ddpm(b):\n    b = default_collate(b)\n    (xt,t),eps = noisify(b[xl])\n    return (xt,t,b[yl]),eps\n```\n:::\n\n\n::: {#4d1a35e5 .cell execution_count=33}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[xl] = [F.pad(TF.to_tensor(o), (2,2,2,2))-0.5 for o in b[xl]]\n\ntds = dsd.with_transform(transformi)\ndls = DataLoaders(dl_ddpm(tds['train']), dl_ddpm(tds['test']))\n\ndl = dls.train\n(xt,t,c),eps = b = next(iter(dl))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [F<span style=\"color:rgb(98,98,98)\">.</span>pad(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o), (<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>))<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tds <span style=\"color:rgb(98,98,98)\">=</span> dsd<span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3a9dcad7 .cell execution_count=34}\n``` {.python .cell-code}\nclass CondUNetModel(nn.Module):\n    def __init__( self, n_classes, in_channels=3, out_channels=3, nfs=(224,448,672,896), num_layers=1):\n        super().__init__()\n        self.conv_in = nn.Conv2d(in_channels, nfs[0], kernel_size=3, padding=1)\n        self.n_temb = nf = nfs[0]\n        n_emb = nf*4\n        self.cond_emb = nn.Embedding(n_classes, n_emb)\n        self.emb_mlp = nn.Sequential(lin(self.n_temb, n_emb, norm=nn.BatchNorm1d),\n                                     lin(n_emb, n_emb))\n        self.downs = nn.ModuleList()\n        for i in range(len(nfs)):\n            ni = nf\n            nf = nfs[i]\n            self.downs.append(DownBlock(n_emb, ni, nf, add_down=i!=len(nfs)-1, num_layers=num_layers))\n        self.mid_block = EmbResBlock(n_emb, nfs[-1])\n\n        rev_nfs = list(reversed(nfs))\n        nf = rev_nfs[0]\n        self.ups = nn.ModuleList()\n        for i in range(len(nfs)):\n            prev_nf = nf\n            nf = rev_nfs[i]\n            ni = rev_nfs[min(i+1, len(nfs)-1)]\n            self.ups.append(UpBlock(n_emb, ni, prev_nf, nf, add_up=i!=len(nfs)-1, num_layers=num_layers+1))\n        self.conv_out = pre_conv(nfs[0], out_channels, act=nn.SiLU, norm=nn.BatchNorm2d, bias=False)\n\n    def forward(self, inp):\n        x,t,c = inp\n        temb = timestep_embedding(t, self.n_temb)\n        cemb = self.cond_emb(c)\n        emb = self.emb_mlp(temb) + cemb\n        x = self.conv_in(x)\n        saved = [x]\n        for block in self.downs: x = block(x, emb)\n        saved += [p for o in self.downs for p in o.saved]\n        x = self.mid_block(x, emb)\n        for block in self.ups: x = block(x, emb, saved)\n        return self.conv_out(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">CondUNetModel</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>( <span style=\"color:rgb(0,135,0)\">self</span>, n_classes, in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">224</span>,<span style=\"color:rgb(98,98,98)\">448</span>,<span style=\"color:rgb(98,98,98)\">672</span>,<span style=\"color:rgb(98,98,98)\">896</span>), num_layers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b63f7cb0 .cell execution_count=35}\n``` {.python .cell-code}\nlr = 1e-2\nepochs = 25\nopt_func = partial(optim.Adam, eps=1e-5)\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\ncbs = [DeviceCB(), ProgressCB(plot=True), MetricsCB(), BatchSchedCB(sched), MixedPrecision()]\nmodel = CondUNetModel(10, in_channels=1, out_channels=1, nfs=(32,64,128,256), num_layers=2)\nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">25</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(optim<span style=\"color:rgb(98,98,98)\">.</span>Adam, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b1bff047 .cell execution_count=36}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9c34b99c .cell execution_count=37}\n``` {.python .cell-code}\nsz = (256,1,32,32)\n```\n:::\n\n\n::: {#cb3d562c .cell 0='e' 1='x' 2='p' 3='o' 4='r' 5='t' execution_count=38}\n``` {.python .cell-code}\n@torch.no_grad()\ndef cond_sample(c, f, model, sz, steps, eta=1.):\n    ts = torch.linspace(1-1/steps,0,steps)\n    x_t = torch.randn(sz).cuda()\n    c = x_t.new_full((sz[0],), c, dtype=torch.int32)\n    preds = []\n    for i,t in enumerate(progress_bar(ts)):\n        t = t[None].cuda()\n        abar_t = abar(t)\n        noise = model((x_t, t, c))\n        abar_t1 = abar(t-1/steps) if t>=1/steps else torch.tensor(1)\n        x_0_hat,x_t = f(x_t, noise, abar_t, abar_t1, 1-abar_t, 1-abar_t1, eta, 1-((i+1)/100))\n        preds.append(x_0_hat.float().cpu())\n    return preds\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@torch</span><span style=\"color:rgb(98,98,98)\">.</span>no_grad()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">cond_sample</span>(c, f, model, sz, steps, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     ts <span style=\"color:rgb(98,98,98)\">=</span> torch<span style=\"color:rgb(98,98,98)\">.</span>linspace(<span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">/</span>steps,<span style=\"color:rgb(98,98,98)\">0</span>,steps)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     x_t <span style=\"color:rgb(98,98,98)\">=</span> torch<span style=\"color:rgb(98,98,98)\">.</span>randn(sz)<span style=\"color:rgb(98,98,98)\">.</span>cuda()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c4c67819 .cell execution_count=39}\n``` {.python .cell-code}\nlbls = dsd['train'].features[yl].names\nlbls\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> lbls <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">dsd</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">train</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>features[yl]<span style=\"color:rgb(98,98,98)\">.</span>names\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lbls\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dsd' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#48e112cd .cell execution_count=40}\n``` {.python .cell-code}\nset_seed(42)\ncid = 0\npreds = sample(cid, ddim_step, model, sz, steps=100, eta=1.)\ns = (preds[-1]*2)\nshow_images(s[:25].clamp(-1,1), imsize=1.5, suptitle=lbls[cid])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cid <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> preds <span style=\"color:rgb(98,98,98)\">=</span> sample(cid, ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">100</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#348ad9f1 .cell execution_count=41}\n``` {.python .cell-code}\nset_seed(42)\ncid = 0\npreds = sample(cid, ddim_step, model, sz, steps=100, eta=0.)\ns = (preds[-1]*2)\nshow_images(s[:25].clamp(-1,1), imsize=1.5, suptitle=lbls[cid])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cid <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> preds <span style=\"color:rgb(98,98,98)\">=</span> sample(cid, ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">100</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Export -\n\n::: {#51bcc387 .cell execution_count=42}\n``` {.python .cell-code}\nimport nbdev; nbdev.nbdev_export()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">nbdev</span>; nbdev<span style=\"color:rgb(98,98,98)\">.</span>nbdev_export()\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'nbdev'</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "28_diffusion-attn-cond_files"
    ],
    "filters": [],
    "includes": {}
  }
}