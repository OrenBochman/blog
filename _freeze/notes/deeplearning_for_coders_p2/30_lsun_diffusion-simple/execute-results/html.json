{
  "hash": "4f47a32537b58582f879970f1b0b8a29",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Tiny Imagenet\njupyter: python3\n---\n\n::: {#50ebd8f5 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='2'\n```\n:::\n\n\n::: {#d35bae77 .cell execution_count=2}\n``` {.python .cell-code}\nfrom miniai.imports import *\nfrom miniai.diffusion import *\n\nfrom glob import glob\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">imports</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">diffusion</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">glob</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> glob\n\nFile <span class=\"ansi-green-fg\">~/work/blog/notes/deeplearning_for_coders_p2/miniai/imports.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">T</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TF</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">F</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'datasets'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#37b1c7c8 .cell execution_count=3}\n``` {.python .cell-code}\ntorch.set_printoptions(precision=4, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray_r'\nmpl.rcParams['figure.dpi'] = 70\n\nset_seed(42)\nif fc.defaults.cpus>8: fc.defaults.cpus=8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image.cmap</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">gray_r</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Data processing\n\n::: {#8ca63b86 .cell execution_count=4}\n``` {.python .cell-code}\npath_data = Path('data')\npath_data.mkdir(exist_ok=True)\npath = path_data/'bedroom'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> path_data <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Path</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> path_data<span style=\"color:rgb(98,98,98)\">.</span>mkdir(exist_ok<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> path <span style=\"color:rgb(98,98,98)\">=</span> path_data<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">bedroom</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#af6c3bb6 .cell execution_count=5}\n``` {.python .cell-code}\nurl = 'https://s3.amazonaws.com/fast-ai-imageclas/bedroom.tgz'\nif not path.exists():\n    path_zip = fc.urlsave(url, path_data)\n    shutil.unpack_archive('data/bedroom.tgz', 'data')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> url <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">https://s3.amazonaws.com/fast-ai-imageclas/bedroom.tgz</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span class=\"ansi-yellow-bg\">path</span><span style=\"color:rgb(98,98,98)\">.</span>exists():\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     path_zip <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>urlsave(url, path_data)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     shutil<span style=\"color:rgb(98,98,98)\">.</span>unpack_archive(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data/bedroom.tgz</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7b89a760 .cell execution_count=6}\n``` {.python .cell-code}\nbs = 256\n```\n:::\n\n\n::: {#79dcbe10 .cell execution_count=7}\n``` {.python .cell-code}\ndef to_img(f): return (read_image(f, mode=ImageReadMode.RGB)/255-0.5)\n```\n:::\n\n\n::: {#b7660bc2 .cell execution_count=8}\n``` {.python .cell-code}\nclass ImagesDS:\n    def __init__(self, spec):\n        self.path = Path(path)\n        self.files = glob(str(spec), recursive=True)\n    def __len__(self): return len(self.files)\n    def __getitem__(self, i):\n        im = to_img(self.files[i])\n        im = im[:, :256,:256]\n        im = F.avg_pool2d(im, 4)\n        return (im,)\n```\n:::\n\n\n::: {#c531f014 .cell execution_count=9}\n``` {.python .cell-code}\ntds = ImagesDS(path/'[1-9]'/f'**/*.jpg')\nvds = ImagesDS(path/'0'/f'**/*.jpg')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tds <span style=\"color:rgb(98,98,98)\">=</span> ImagesDS(<span class=\"ansi-yellow-bg\">path</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">[1-9]</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">**/*.jpg</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> vds <span style=\"color:rgb(98,98,98)\">=</span> ImagesDS(path<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">0</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">**/*.jpg</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c520187c .cell execution_count=10}\n``` {.python .cell-code}\ndef collate_ddpm(b): return noisify(default_collate(b)[0])\n```\n:::\n\n\n::: {#34314817 .cell execution_count=11}\n``` {.python .cell-code}\ndls = DataLoaders(*get_dls(tds, vds, bs=bs, num_workers=fc.defaults.cpus, collate_fn=collate_ddpm))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> dls <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">DataLoaders</span>(<span style=\"color:rgb(98,98,98)\">*</span>get_dls(tds, vds, bs<span style=\"color:rgb(98,98,98)\">=</span>bs, num_workers<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>defaults<span style=\"color:rgb(98,98,98)\">.</span>cpus, collate_fn<span style=\"color:rgb(98,98,98)\">=</span>collate_ddpm))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DataLoaders' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#258fcd33 .cell execution_count=12}\n``` {.python .cell-code}\nclass LearnEmbSS(nn.Module):\n    def __init__(self, sz, ni):\n        super().__init__()\n        self.scale = nn.Parameter(torch.zeros(sz, ni))\n        self.shift = nn.Parameter(torch.zeros(sz, ni))\n\n    def forward(self, x): return x*self.scale + self.shift\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">LearnEmbSS</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, sz, ni):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5b156f4e .cell execution_count=13}\n``` {.python .cell-code}\ndef _mlp(ni, nh):\n    return nn.Sequential(nn.Linear(ni,nh), nn.GELU(), nn.LayerNorm(nh), nn.Linear(nh,ni))\n```\n:::\n\n\n::: {#24a35d03 .cell execution_count=14}\n``` {.python .cell-code}\nclass EmbTransformerBlk(nn.Module):\n    def __init__(self, n_emb, ni, attn_chans=8):\n        super().__init__()\n        self.attn = SelfAttention(ni, attn_chans=attn_chans, transpose=False)\n        self.mlp = _mlp(ni, ni*4)\n        self.nrm1 = nn.LayerNorm(ni)\n        self.nrm2 = nn.LayerNorm(ni)\n        self.emb_proj = nn.Linear(n_emb, ni*2)\n\n    def forward(self, x, t):\n        emb = self.emb_proj(F.silu(t))[:, None]\n        scale,shift = torch.chunk(emb, 2, dim=2)\n        x = x + self.attn(self.nrm1(x))\n        x = x*(1+scale) + shift\n        return x + self.mlp(self.nrm2(x))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">EmbTransformerBlk</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, n_emb, ni, attn_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1e481eb0 .cell execution_count=15}\n``` {.python .cell-code}\nclass SimpleDiffusion(nn.Module):\n    def __init__(self, in_channels=3, out_channels=3, nfs=(224,448,672,896), num_layers=1,\n                 attn_chans=8, attn_start=1, n_mids=8):\n        super().__init__()\n        self.conv_in = nn.Conv2d(in_channels, nfs[0], kernel_size=3, padding=1)\n        self.n_temb = nf = nfs[0]\n        n_emb = nf*4\n        self.emb_mlp = nn.Sequential(lin(self.n_temb, n_emb, norm=nn.BatchNorm1d),\n                                     lin(n_emb, n_emb))\n        self.downs = nn.ModuleList()\n        n = len(nfs)\n        for i in range(n):\n            ni = nf\n            nf = nfs[i]\n            self.downs.append(DownBlock(n_emb, ni, nf, add_down=i!=n-1, num_layers=num_layers,\n                                        attn_chans=0 if i<attn_start else attn_chans))\n\n        self.le = LearnEmbSS(64, nf)\n        self.mids = nn.ModuleList([EmbTransformerBlk(n_emb, nf) for _ in range(n_mids)])\n\n        rev_nfs = list(reversed(nfs))\n        nf = rev_nfs[0]\n        self.ups = nn.ModuleList()\n        for i in range(n):\n            prev_nf = nf\n            nf = rev_nfs[i]\n            ni = rev_nfs[min(i+1, len(nfs)-1)]\n            self.ups.append(UpBlock(n_emb, ni, prev_nf, nf, add_up=i!=n-1, num_layers=num_layers+1,\n                                    attn_chans=0 if i>=n-attn_start else attn_chans))\n        self.conv_out = pre_conv(nfs[0], out_channels, act=nn.SiLU, norm=nn.BatchNorm2d, bias=False)\n\n    def forward(self, inp):\n        x,t = inp\n        temb = timestep_embedding(t, self.n_temb)\n        emb = self.emb_mlp(temb)\n        x = self.conv_in(x)\n        saved = [x]\n        for block in self.downs: x = block(x, emb)\n        saved += [p for o in self.downs for p in o.saved]\n        n,c,h,w = x.shape\n        x = self.le(x.reshape(n,c,-1).transpose(1,2))\n        for block in self.mids: x = block(x, emb)\n        x = x.transpose(1,2).reshape(n,c,h,w)\n        for block in self.ups: x = block(x, emb, saved)\n        return self.conv_out(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">SimpleDiffusion</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">224</span>,<span style=\"color:rgb(98,98,98)\">448</span>,<span style=\"color:rgb(98,98,98)\">672</span>,<span style=\"color:rgb(98,98,98)\">896</span>), num_layers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>,\n<span class=\"ansi-green-fg ansi-bold\">      3</span>                  attn_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>, attn_start<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, n_mids<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3b87f6ac .cell execution_count=16}\n``` {.python .cell-code}\ndef init_ddpm(model):\n    for o in model.downs:\n        for p in o.resnets: p.conv2[-1].weight.data.zero_()\n\n    for o in model.ups:\n        for p in o.resnets: p.conv2[-1].weight.data.zero_()\n```\n:::\n\n\n::: {#0ba156cb .cell execution_count=17}\n``` {.python .cell-code}\nlr = 1e-3\nepochs = 15\nopt_func = partial(optim.AdamW, eps=1e-5)\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\ncbs = [DeviceCB(), ProgressCB(plot=True), MetricsCB(), BatchSchedCB(sched), MixedPrecision()]\nmodel = SimpleDiffusion(in_channels=3, out_channels=3, nfs=(32,256,384,512), num_layers=1, attn_chans=0, n_mids=8)\ninit_ddpm(model)\nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-3</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">15</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a203c200 .cell execution_count=18}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#910d57a4 .cell execution_count=19}\n``` {.python .cell-code}\ntorch.save(learn.model.state_dict(), 'models/lsun_diffusion-prog-64.pkl')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>save(learn<span style=\"color:rgb(98,98,98)\">.</span>model<span style=\"color:rgb(98,98,98)\">.</span>state_dict(), <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models/lsun_diffusion-prog-64.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Sampling\n\n::: {#93f29d9e .cell execution_count=20}\n``` {.python .cell-code}\nsz = (16,3,64,64)\n```\n:::\n\n\n::: {#e7e5c596 .cell execution_count=21}\n``` {.python .cell-code}\ndef ddim_step(x_t, noise, abar_t, abar_t1, bbar_t, bbar_t1, eta, sig, clamp=1.):\n    sig = ((bbar_t1/bbar_t).sqrt() * (1-abar_t/abar_t1).sqrt()) * eta\n    x_0_hat = (x_t-(1-abar_t).sqrt()*noise  )   / abar_t.sqrt()\n    if clamp: x_0_hat = x_0_hat.clamp(-clamp,clamp)\n    if bbar_t1<=sig**2+0.01: sig=0.  # set to zero if very small or NaN\n    x_t = abar_t1.sqrt()*x_0_hat + (bbar_t1-sig**2).sqrt()*noise\n    x_t += sig * torch.randn(x_t.shape).to(x_t)\n    return x_0_hat,x_t\n```\n:::\n\n\n::: {#3fff743a .cell execution_count=22}\n``` {.python .cell-code}\n# set_seed(42)\npreds = sample(ddim_step, model, sz, steps=100, eta=1., clamp=1.)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># set_seed(42)</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> preds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">sample</span>(ddim_step, model, sz, steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">100</span>, eta<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>, clamp<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sample' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c127d038 .cell execution_count=23}\n``` {.python .cell-code}\ns = (preds[-1]+0.5)\n# s = preds[-1]\ns.min(),s.max(),s.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> s <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">preds</span>[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">0.5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># s = preds[-1]</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> s<span style=\"color:rgb(98,98,98)\">.</span>min(),s<span style=\"color:rgb(98,98,98)\">.</span>max(),s<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'preds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d5b2c30b .cell execution_count=24}\n``` {.python .cell-code}\nshow_images(s[:9].clamp(0,1), imsize=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(s[:<span style=\"color:rgb(98,98,98)\">9</span>]<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "30_lsun_diffusion-simple_files"
    ],
    "filters": [],
    "includes": {}
  }
}