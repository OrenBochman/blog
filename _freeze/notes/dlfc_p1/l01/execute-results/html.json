{
  "hash": "41ff13120b678ad7ea307d37d3c03f6b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Getting started\nsubtitle: Deep Learning for Coders Part 1\njupyter: python3\nimage: cover.png\ncategories:  \n    - deep learning\nkeywords: \n    - fast.ai\n---\n\n\n[lesson](https://course.fast.ai/Lessons/lesson1.html)\n\n{{< video https://youtu.be/8SF_h3xF3cE>}}\n\n\nThe first lesson has long form notes neural networks bieing based on biological neurons. Then it looks at how to Use Jupyter notebooks. Next is a walkthough on coding a classiefier to tell birds from forests. This is done using the fastai library but the focus is on the idea that this is a hard problem to solve in the traditional way rather then the code itself.\n\nHowever, a major focus of Jeremy Howard's teaching you high level tasks and later doing a deep dive breaking things down into small code snippets. However your mileage may vary if you don't follow along with the code, to the level where you can code it yourself more or less from memory.\n\n## Q & A by *Daniel*\n\nAs my original notes are MIA I've restarted with the summaries from the courses website.\nI realy like Q&A sections to quiczz myself and gauage my knowledge. However I found some of the questions less informative than others, as I've taken some other courses on Deep Learning and my focus is on the coding.\n\n::: {#Q-01 .callout-tip collapse=\"true\"}\n## Were computers smart enough to determine photos of birds before 2015?{.unnumbered}\n\nClassifiers for birds and images in general were rather poor before CNN made thier apearence.\n\n C.f. this XKCD comic\n\n ![“Tasks”](https://imgs.xkcd.com/comics/tasks.png)\n\n Also the famous story about classifers of tanks etc making the descions based on the background rather than the object.\n:::\n\n\n\n::: {#Q-fownload-images .callout-tip collapse=\"true\"}\n## How to download and display a photo of a bird from DuckDuckGo using simple codes??{.unnumbered}\n\n::: {#d4cbb411 .cell execution_count=2}\n``` {.python .cell-code}\n#!pip install -Uqq fastai 'duckduckgo_search>=6.2'\nimport time, json\nfrom fastcore.all import *\nfrom duckduckgo_search import DDGS #DuckDuckGo has changed the api so we need to update \n```\n:::\n\n\nthis is how to show an image:\n\n::: {#a3253b3d .cell execution_count=3}\n``` {.python .cell-code}\n#DuckDuckGo has changed the api so we need to update \ndef search_images(keywords, max_images=200): \n    return L(DDGS().images(keywords, max_results=max_images)).itemgot('image')\n```\n:::\n\n\nand this is how to use it to get a url of a bird image:\n\n::: {#a6a9c8d8 .cell execution_count=4}\n``` {.python .cell-code}\nurls = search_images('bird photos', max_images=1)\nurls[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n'https://images.pexels.com/photos/326900/pexels-photo-326900.jpeg?cs=srgb&dl=wood-flight-bird-326900.jpg&fm=jpg'\n```\n:::\n:::\n\n\n::: {#6612200b .cell execution_count=5}\n``` {.python .cell-code}\nfrom fastdownload import download_url\ndest = 'bird.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\n#im = Image.open(dest)\n#im.to_thumb(256,256)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nPath('bird.jpg')\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> dest <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">bird.jpg</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> download_url(urls[<span style=\"color:rgb(98,98,98)\">0</span>], dest, show_progress<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">vision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#im = Image.open(dest)</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#im.to_thumb(256,256)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/fastai/vision/all.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> models\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">basics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">callback</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/fastai/vision/models/__init__.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> xresnet\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> unet\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tvm</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/fastai/vision/models/xresnet.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/11_vision.models.xresnet.ipynb.</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> \n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># %% ../../../nbs/11_vision.models.xresnet.ipynb 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">__future__</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> annotations\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch_basics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>: <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">models</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> load_state_dict_from_url\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ModuleNotFoundError</span>: <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">hub</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> load_state_dict_from_url\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/fastai/torch_basics.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> multiprocessing\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">platform</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> platform<span style=\"color:rgb(98,98,98)\">.</span>system()<span style=\"color:rgb(98,98,98)\">==</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Darwin</span><span style=\"color:rgb(175,0,0)\">'</span>:\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Python 3.8 changed to 'spawn' but that doesn't work with PyTorch DataLoader w n_workers&gt;0</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:229</span>\n<span class=\"ansi-green-fg ansi-bold\">    227</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    228</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 229</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    231</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    232</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    233</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n:::\n\n::: {#Q-pixels .callout-tip collapse=\"true\"}\n## What are bitmaps formed of? {.unnumbered}\n\nPixels. Each with an RGB value and X and Y coordinates. IF the image is gray scale then it will only have one value per pixel.\n\n:::\n\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n## How can we create a dataset of images? {.unnumbered}\n\n::: {#8713975b .cell execution_count=6}\n``` {.python .cell-code}\nsearches = 'forest','bird'\npath = Path('bird_or_not')\n\n\nfor o in searches:\n    dest = (path/o)  # <1>\n    dest.mkdir(exist_ok=True, parents=True) # <2>\n    download_images(dest, urls=search_images(f'{o} photo'))  # <3>\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)  # <4>\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> dest <span style=\"color:rgb(98,98,98)\">=</span> (path<span style=\"color:rgb(98,98,98)\">/</span>o)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># &lt;1&gt;</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> dest<span style=\"color:rgb(98,98,98)\">.</span>mkdir(exist_ok<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, parents<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># &lt;2&gt;</span>\n<span class=\"ansi-green-fg\">----&gt; 8</span> <span class=\"ansi-yellow-bg\">download_images</span>(dest, urls<span style=\"color:rgb(98,98,98)\">=</span>search_images(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>o<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\"> photo</span><span style=\"color:rgb(175,0,0)\">'</span>))  <span style=\"font-style:italic;color:rgb(95,135,135)\"># &lt;3&gt;</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> time<span style=\"color:rgb(98,98,98)\">.</span>sleep(<span style=\"color:rgb(98,98,98)\">5</span>)\n<span class=\"ansi-green-fg ansi-bold\">     10</span> resize_images(path<span style=\"color:rgb(98,98,98)\">/</span>o, max_size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">400</span>, dest<span style=\"color:rgb(98,98,98)\">=</span>path<span style=\"color:rgb(98,98,98)\">/</span>o)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># &lt;4&gt;</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'download_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n1. create two folders named 'bird' and 'forest' \n2. create two folders named 'dest'\n3. download 200 images for each category? \n4. resize and save those images in respective folders?\n:::\n\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to find broken images and then remove or unlink them from their folders?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to create a DataBlock which prepares all the data for building models? How to display the images in a batch?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to build a model and train/finetune it on your local computer?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to predict or classify a photo of bird with a model?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to get started running and playing around the codes and models immediately and effortlessly?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why should you read lecture questionnaires before studying the lecture?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How do you search and locate a particular moment inside a lecture video?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Can you create an original masterpiece painting by simply utterring some artistic words?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Can you believe that models today can explain your math problems not just give you a correct answer? Can you believe that models today can help you get a joke?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Jeremy and fastai community make serious effort in help beginners continuously.\n\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n-   Do you want to know how to make the most out of fastai?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Do you know people learn naturally (better) with context rather than by theoretical curriculum? Do you want this course to make you a competent deep learning practitioner by context and practical knowledge? If you want theory from ground up, go to part 2 fastai 2019\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Do you know that learning the same thing in different ways betters understanding?\n\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n-   Why you must take this course very seriously? (Personally, I think it’s truly a privilege to be taught by Jeremy and to be part of the fastai family. I didn’t appreciate it enough as I should 4 years ago.)\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why did we need so many scientists from different disciplines to collaborate for many years in order to design a successful model before deep learning?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why can deep learning create a model to tell bird from forest photos in 2 minute which was the impossible before 2015? Would you like to see how much better/advanced/complex are the features discovered by deep learning than groups of interdisciplinary scientists?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Are all things are data, sound, time (series), movement? Are images are just one way of expressing data? Why not store or express data (of sound, time, movement) in the form of images? Can imaged based algos learn on those images no matter how weird they appear to humans?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Can I do DL with no math (I mean with high school math)? Can I train DL models with hand-made data (\\<50 samples)? Can I train state of art models for free (literally)?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Which should I invest my life in DL software field, Pytorch or Tensorflow?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why should you use fastai over pure pytorch? Don’t you want to write less code, make less error, achieve better result? Don’t you want a robust and simple tool used by your future colleagues and bosses?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why is jupyter notebook the most loved and tested coding tool for DL? Do you want Jeremy to show you how to use Jupyter notebook hand by hand?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to make sure your notebook is connected in the cloud? How to make sure you are using the latest updated fastai? #best-practice\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Doesn’t fastai feel like python with best practices too? How to import libraries to download images? How to create and display a thumbnail image? Always view your data at every step of building a model #best-practice How to download and resize images? Why do we resize images? #best-practice\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why a real world DL practitioner spend most of the valuable/productive time preparing data rather than tweaking models? Can super tiny amount of models solve super majority of practical problems in the world? Have fastai selected and prepared the best models for us already?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Does Jeremy add best practices of other programming languages into fastai? Jeremy loves functional programming\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How fastai design team decide what tasks should DataBlock do? \n    - task 1: Which blocks of data do DataBlock need to prepare for training? \n    - task 2: How should DataBlock get those data, or by what function/tool? \n    - task 3: Should we always ask DataBlock to keep a section of data for validation?\n    -  task 4: Which function or method should DataBlock use to get label for y? \n    - task 5: Which transformation should DataBlock apply to each data sample? \n    - task 6: Does dataloader do the above tasks efficiently by doing them in thousands of batches at the same time with the help of GPUs?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   What is the most efficient way of finding out how to use e.g., DataBlock properly? How to learn DataBlock thoroughly?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   What do you give to a learner, e.g., vision_learner?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Is fastai the first and only framework implement TIMM? Can you use any model from TIMM in your project? Where can you learn more of TIMM?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   What is a pretrained model, Resnet18? What did this model learn from? What come out of this model’s learning? or what is Kaggle downloading exactly?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   What exactly does fine tuning do to the pretrained model? What does fine-tuning want the model learn from your dataset compared with the pretrained dataset?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   How to use the fine tuned model to make predictions?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Can we fine tune pretrained CV models to tell us the object each and every pixel on a photo belong to?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Why do we need specialized DataLoaders like SegmentationDataLoaders given DataBlock?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   What can tabular analysis do? Can we use a bunch of columns to predict another column of a table? How do you download all kinds of dataset for training easily with fastai? untar_data What are the parameters for TabularDataLoaders? What is the best practice show_batch of fastai learned from Julia (another popular language)? Why to use fit_one_cycle instead of fine_tune for tabular dataset?\n:::\n::: {#Q-Creating-DS .callout-tip collapse=\"true\"}\n\n-   Can we use collaborative filtering to make movie recommendations for users? How does recommendation system work? Can collaborative filtering models learn from data of similar music users and recommend/predict music for new users based on how similar they are to existing users?\n:::\n::: {#Q-Colab-Filtering-DS .callout-tip collapse=\"true\"}\n\n# How to download dataset for collaborative filtering models? \n\n- How to use CollabDataLoaders? \n- How to build a collaborative filtering model with collab_learner? \n- What is the best practice for setting y_range for collab_learner? \n  #best-practice If in theory no reason to use pretrained collab models, and fine_tune works as good as fit or fit_one_cycle, any good explanations for it? \n  #question How to show results of this recommendation model using show_results?\n:::\n\n::: {#Q-Limtis-of-DL .callout-tip collapse=\"true\"}\n\n# What can Deep Learning do at the present? \n\n- What are the tasks that deep learning may not be good at?\n:::\n\n::: {#Q-Changes-somce-1959 .callout-tip collapse=\"true\"}\n#   Has the basic idea of deep learning changed much since 1959?\n\n:::\n\n::: {#Q-Before-DL .callout-tip collapse=\"true\"}\n\n# What did we write into programs/models before deep learning? \n\n- How to draw chart in jupyter notebook?\n:::\n\n::: {#Q-What-is-a-Model .callout-tip collapse=\"true\"}\n\n## What is a model {.unnumbered}\n\n- What is a model? \n- What are weights? \n- How do data, weights and model work together to produce result? \n- Why are the initial results are no good at all? \n- Can we design a function to tell the model how good it is doing? \n- loss function \n- Then can we find a way to update/improve weights by knowing how bad/good the model is learning each time from the data? If we can iterate the cycle multiple times, can we build a powerful model?\n\n:::\n\n\n::: {#Q-Homework .callout-tip collapse=\"true\"}\n\n# Homework: \n\n- Run notebooks, especially the bird notebook.\n-  Create something interesting to you based on the bird notebook. \n- Read the first chapter of the book. \n- Be inspired by all the amazing student projects.\n:::\n\n",
    "supporting": [
      "l01_files"
    ],
    "filters": [],
    "includes": {}
  }
}