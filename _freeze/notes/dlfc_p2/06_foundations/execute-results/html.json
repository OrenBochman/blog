{
  "hash": "ce8076b0fab6d0c6c754d9e697f79275",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Callbacks\njupyter: python3\nimage: cover.png\n---\n\n::: {#b3c2d949 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nimport matplotlib.pyplot as plt\nimport random\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n### Callbacks as GUI events\n\n::: {#ffd3caca .cell execution_count=2}\n``` {.python .cell-code}\nimport ipywidgets as widgets\n```\n:::\n\n\nFrom the [ipywidget docs](https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20Events.html):\n\n- *the button widget is used to handle mouse clicks. The on_click method of the Button can be used to register function to be called when the button is clicked*\n\n::: {#3604d9a5 .cell execution_count=3}\n``` {.python .cell-code}\nw = widgets.Button(description='Click me')\n```\n:::\n\n\n::: {#0da9076f .cell execution_count=4}\n``` {.python .cell-code}\nw\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"19e25a311dcb443ab52697eb5bb8b554\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n:::\n\n\n::: {#be28f621 .cell execution_count=5}\n``` {.python .cell-code}\ndef f(o): print('hi')\n```\n:::\n\n\n::: {#c8a37173 .cell execution_count=6}\n``` {.python .cell-code}\nw.on_click(f)\n```\n:::\n\n\n*NB: When callbacks are used in this way they are often called \"events\".*\n\n### Creating your own callback\n\n::: {#e5dbb64a .cell execution_count=7}\n``` {.python .cell-code}\nfrom time import sleep\n```\n:::\n\n\n::: {#9ef211e4 .cell execution_count=8}\n``` {.python .cell-code}\ndef slow_calculation():\n    res = 0\n    for i in range(5):\n        res += i*i\n        sleep(1)\n    return res\n```\n:::\n\n\n::: {#9258be86 .cell execution_count=9}\n``` {.python .cell-code}\nslow_calculation()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n30\n```\n:::\n:::\n\n\n::: {#bde118d9 .cell execution_count=10}\n``` {.python .cell-code}\ndef slow_calculation(cb=None):\n    res = 0\n    for i in range(5):\n        res += i*i\n        sleep(1)\n        if cb: cb(i)\n    return res\n```\n:::\n\n\n::: {#7ec034b7 .cell execution_count=11}\n``` {.python .cell-code}\ndef show_progress(epoch): print(f\"Awesome! We've finished epoch {epoch}!\")\n```\n:::\n\n\n::: {#6e6470e7 .cell execution_count=12}\n``` {.python .cell-code}\nslow_calculation(show_progress)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAwesome! We've finished epoch 0!\nAwesome! We've finished epoch 1!\nAwesome! We've finished epoch 2!\nAwesome! We've finished epoch 3!\nAwesome! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n30\n```\n:::\n:::\n\n\n### Lambdas and partials\n\n::: {#3c9bbb9b .cell execution_count=13}\n``` {.python .cell-code}\nslow_calculation(lambda o: print(f\"Awesome! We've finished epoch {o}!\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAwesome! We've finished epoch 0!\nAwesome! We've finished epoch 1!\nAwesome! We've finished epoch 2!\nAwesome! We've finished epoch 3!\nAwesome! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n30\n```\n:::\n:::\n\n\n::: {#0a73e821 .cell execution_count=14}\n``` {.python .cell-code}\ndef show_progress(exclamation, epoch): print(f\"{exclamation}! We've finished epoch {epoch}!\")\n```\n:::\n\n\n::: {#90a5918c .cell execution_count=15}\n``` {.python .cell-code}\nslow_calculation(lambda o: show_progress(\"OK I guess\", o))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOK I guess! We've finished epoch 0!\nOK I guess! We've finished epoch 1!\nOK I guess! We've finished epoch 2!\nOK I guess! We've finished epoch 3!\nOK I guess! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n30\n```\n:::\n:::\n\n\n::: {#27236a2b .cell execution_count=16}\n``` {.python .cell-code}\ndef make_show_progress(exclamation):\n    def _inner(epoch): print(f\"{exclamation}! We've finished epoch {epoch}!\")\n    return _inner\n```\n:::\n\n\n::: {#7d72816c .cell execution_count=17}\n``` {.python .cell-code}\nslow_calculation(make_show_progress(\"Nice!\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNice!! We've finished epoch 0!\nNice!! We've finished epoch 1!\nNice!! We've finished epoch 2!\nNice!! We've finished epoch 3!\nNice!! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n30\n```\n:::\n:::\n\n\n::: {#162698cb .cell execution_count=18}\n``` {.python .cell-code}\nfrom functools import partial\n```\n:::\n\n\n::: {#f3bf9a25 .cell execution_count=19}\n``` {.python .cell-code}\nslow_calculation(partial(show_progress, \"OK I guess\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOK I guess! We've finished epoch 0!\nOK I guess! We've finished epoch 1!\nOK I guess! We've finished epoch 2!\nOK I guess! We've finished epoch 3!\nOK I guess! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n30\n```\n:::\n:::\n\n\n::: {#f8f6a355 .cell execution_count=20}\n``` {.python .cell-code}\nf2 = partial(show_progress, \"OK I guess\")\n```\n:::\n\n\n### Callbacks as callable classes\n\n::: {#5cea9bb2 .cell execution_count=21}\n``` {.python .cell-code}\nclass ProgressShowingCallback():\n    def __init__(self, exclamation=\"Awesome\"): self.exclamation = exclamation\n    def __call__(self, epoch): print(f\"{self.exclamation}! We've finished epoch {epoch}!\")\n```\n:::\n\n\n::: {#fa7077c1 .cell execution_count=22}\n``` {.python .cell-code}\ncb = ProgressShowingCallback(\"Just super\")\n```\n:::\n\n\n::: {#a5249ca3 .cell execution_count=23}\n``` {.python .cell-code}\nslow_calculation(cb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJust super! We've finished epoch 0!\nJust super! We've finished epoch 1!\nJust super! We've finished epoch 2!\nJust super! We've finished epoch 3!\nJust super! We've finished epoch 4!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n30\n```\n:::\n:::\n\n\n### Multiple callback funcs; `*args` and `**kwargs`\n\n::: {#8d38ee84 .cell execution_count=24}\n``` {.python .cell-code}\ndef f(*a, **b): print(f\"args: {a}; kwargs: {b}\")\n```\n:::\n\n\n::: {#3163d5c2 .cell execution_count=25}\n``` {.python .cell-code}\nf(3, 'a', thing1=\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nargs: (3, 'a'); kwargs: {'thing1': 'hello'}\n```\n:::\n:::\n\n\n::: {#e18c6dba .cell execution_count=26}\n``` {.python .cell-code}\ndef g(a,b,c=0): print(a,b,c)\n```\n:::\n\n\n::: {#5857f1c2 .cell execution_count=27}\n``` {.python .cell-code}\nargs = [1,2]\nkwargs = {'c':3}\ng(*args, **kwargs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3\n```\n:::\n:::\n\n\n::: {#dffaa50e .cell execution_count=28}\n``` {.python .cell-code}\ndef slow_calculation(cb=None):\n    res = 0\n    for i in range(5):\n        if cb: cb.before_calc(i)\n        res += i*i\n        sleep(1)\n        if cb: cb.after_calc(i, val=res)\n    return res\n```\n:::\n\n\n::: {#1ebf40f9 .cell execution_count=29}\n``` {.python .cell-code}\nclass PrintStepCallback():\n    def before_calc(self, *args, **kwargs): print(f\"About to start\")\n    def after_calc (self, *args, **kwargs): print(f\"Done step\")\n```\n:::\n\n\n::: {#fb459697 .cell execution_count=30}\n``` {.python .cell-code}\nslow_calculation(PrintStepCallback())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAbout to start\nDone step\nAbout to start\nDone step\nAbout to start\nDone step\nAbout to start\nDone step\nAbout to start\nDone step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n30\n```\n:::\n:::\n\n\n::: {#e56d0f73 .cell execution_count=31}\n``` {.python .cell-code}\nclass PrintStatusCallback():\n    def __init__(self): pass\n    def before_calc(self, epoch, **kwargs): print(f\"About to start: {epoch}\")\n    def after_calc (self, epoch, val, **kwargs): print(f\"After {epoch}: {val}\")\n```\n:::\n\n\n::: {#8f9619cb .cell execution_count=32}\n``` {.python .cell-code}\nslow_calculation(PrintStatusCallback())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAbout to start: 0\nAfter 0: 0\nAbout to start: 1\nAfter 1: 1\nAbout to start: 2\nAfter 2: 5\nAbout to start: 3\nAfter 3: 14\nAbout to start: 4\nAfter 4: 30\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n30\n```\n:::\n:::\n\n\n### Modifying behavior\n\n::: {#a3389bde .cell execution_count=33}\n``` {.python .cell-code}\ndef slow_calculation(cb=None):\n    res = 0\n    for i in range(5):\n        if cb and hasattr(cb,'before_calc'): cb.before_calc(i)\n        res += i*i\n        sleep(1)\n        if cb and hasattr(cb,'after_calc'):\n            if cb.after_calc(i, res):\n                print(\"stopping early\")\n                break\n    return res\n```\n:::\n\n\n::: {#30027a75 .cell execution_count=34}\n``` {.python .cell-code}\nclass PrintAfterCallback():\n    def after_calc (self, epoch, val):\n        print(f\"After {epoch}: {val}\")\n        if val>10: return True\n```\n:::\n\n\n::: {#ac4fc169 .cell execution_count=35}\n``` {.python .cell-code}\nslow_calculation(PrintAfterCallback())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAfter 0: 0\nAfter 1: 1\nAfter 2: 5\nAfter 3: 14\nstopping early\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n14\n```\n:::\n:::\n\n\n::: {#c27c61ee .cell execution_count=36}\n``` {.python .cell-code}\nclass SlowCalculator():\n    def __init__(self, cb=None): self.cb,self.res = cb,0\n    \n    def callback(self, cb_name, *args):\n        if not self.cb: return\n        cb = getattr(self.cb,cb_name, None)\n        if cb: return cb(self, *args)\n\n    def calc(self):\n        for i in range(5):\n            self.callback('before_calc', i)\n            self.res += i*i\n            sleep(1)\n            if self.callback('after_calc', i):\n                print(\"stopping early\")\n                break\n```\n:::\n\n\n::: {#5e9ba8be .cell execution_count=37}\n``` {.python .cell-code}\nclass ModifyingCallback():\n    def after_calc (self, calc, epoch):\n        print(f\"After {epoch}: {calc.res}\")\n        if calc.res>10: return True\n        if calc.res<3: calc.res = calc.res*2\n```\n:::\n\n\n::: {#f06f2c21 .cell execution_count=38}\n``` {.python .cell-code}\ncalculator = SlowCalculator(ModifyingCallback())\n```\n:::\n\n\n::: {#0d856fbb .cell execution_count=39}\n``` {.python .cell-code}\ncalculator.calc()\ncalculator.res\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAfter 0: 0\nAfter 1: 1\nAfter 2: 6\nAfter 3: 15\nstopping early\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n15\n```\n:::\n:::\n\n\n## `__dunder__` thingies\n\nAnything that looks like `__this__` is, in some way, *special*. Python, or some library, can define some functions that they will call at certain documented times. For instance, when your class is setting up a new object, python will call `__init__`. These are defined as part of the python [data model](https://docs.python.org/3/reference/datamodel.html#object.__init__).\n\nFor instance, if python sees `+`, then it will call the special method `__add__`. If you try to display an object in Jupyter (or lots of other places in Python) it will call `__repr__`.\n\n::: {#97a4e753 .cell execution_count=40}\n``` {.python .cell-code}\nclass SloppyAdder():\n    def __init__(self,o): self.o=o\n    def __add__(self,b): return SloppyAdder(self.o + b.o + 0.01)\n    def __repr__(self): return str(self.o)\n```\n:::\n\n\n::: {#687bbb63 .cell execution_count=41}\n``` {.python .cell-code}\na = SloppyAdder(1)\nb = SloppyAdder(2)\na+b\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n3.01\n```\n:::\n:::\n\n\nSpecial methods you should probably know about (see data model link above) are:\n\n- `__getitem__`\n- `__getattr__`\n- `__setattr__`\n- `__del__`\n- `__init__`\n- `__new__`\n- `__enter__`\n- `__exit__`\n- `__len__`\n- `__repr__`\n- `__str__`\n\n### `__getattr__` and `getattr`\n\n::: {#e3003305 .cell execution_count=42}\n``` {.python .cell-code}\nclass A: a,b=1,2\n```\n:::\n\n\n::: {#3e36c207 .cell execution_count=43}\n``` {.python .cell-code}\na = A()\n```\n:::\n\n\n::: {#7f2f7f6e .cell execution_count=44}\n``` {.python .cell-code}\na.b\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n2\n```\n:::\n:::\n\n\n::: {#a564fac0 .cell execution_count=45}\n``` {.python .cell-code}\ngetattr(a, 'b')\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n2\n```\n:::\n:::\n\n\n::: {#919f4598 .cell execution_count=46}\n``` {.python .cell-code}\ngetattr(a, 'b' if random.random()>0.5 else 'a')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(a, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">'</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\">.</span>random()<span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">0.5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">a</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'random' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c24fc7fd .cell execution_count=47}\n``` {.python .cell-code}\nclass B:\n    a,b=1,2\n    def __getattr__(self, k):\n        if k[0]=='_': raise AttributeError(k)\n        return f'Hello from {k}'\n```\n:::\n\n\n::: {#7f73bea3 .cell execution_count=48}\n``` {.python .cell-code}\nb = B()\n```\n:::\n\n\n::: {#0f0e3552 .cell execution_count=49}\n``` {.python .cell-code}\nb.a\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n1\n```\n:::\n:::\n\n\n::: {#a638fc22 .cell execution_count=50}\n``` {.python .cell-code}\nb.foo\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n'Hello from foo'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "06_foundations_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"19e25a311dcb443ab52697eb5bb8b554\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"1.5.0\",\"model_name\":\"ButtonModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"1.5.0\",\"_model_name\":\"ButtonModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"1.5.0\",\"_view_name\":\"ButtonView\",\"button_style\":\"\",\"description\":\"Click me\",\"disabled\":false,\"icon\":\"\",\"layout\":\"IPY_MODEL_e95f1f4447dc4bd9ba46bdd5d19d8ead\",\"style\":\"IPY_MODEL_f616689e5f984239ad884fee1ac12ed5\",\"tooltip\":\"\"}},\"e95f1f4447dc4bd9ba46bdd5d19d8ead\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"1.2.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"1.2.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"1.2.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"overflow_x\":null,\"overflow_y\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"f616689e5f984239ad884fee1ac12ed5\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"1.5.0\",\"model_name\":\"ButtonStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"1.5.0\",\"_model_name\":\"ButtonStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"1.2.0\",\"_view_name\":\"StyleView\",\"button_color\":null,\"font_weight\":\"\"}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}