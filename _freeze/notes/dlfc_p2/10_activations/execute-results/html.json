{
  "hash": "47f986db0b4feb228de7ed366045c0e5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Activation stats\njupyter:\n  jupytext:\n    split_at_heading: true\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\nimage: cover.png\n---\n\n::: {#6c855543 .cell execution_count=1}\n``` {.python .cell-code}\nfrom __future__ import annotations\nimport random,math,torch,numpy as np,matplotlib.pyplot as plt\nimport fastcore.all as fc\nfrom functools import partial\n\nfrom miniai.datasets import *\nfrom miniai.learner import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">__future__</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> annotations\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">functools</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> partial\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#95ecf5df .cell execution_count=2}\n``` {.python .cell-code}\nimport torch.nn.functional as F,matplotlib as mpl\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom contextlib import contextmanager\n\nfrom torch import tensor,nn,optim\nimport torchvision.transforms.functional as TF\nfrom datasets import load_dataset\n\nfrom fastcore.test import test_close\n\ntorch.set_printoptions(precision=2, linewidth=140, sci_mode=False)\nmpl.rcParams['figure.constrained_layout.use'] = True\n\nimport logging\nlogging.disable(logging.WARNING)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">F</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pathlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Path\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">operator</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> attrgetter,itemgetter\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2572f25d .cell execution_count=3}\n``` {.python .cell-code}\ndef set_seed(seed, deterministic=False):\n    torch.use_deterministic_algorithms(deterministic)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n```\n:::\n\n\n::: {#5121e08f .cell execution_count=4}\n``` {.python .cell-code}\nx,y = 'image','label'\nname = \"fashion_mnist\"\ndsd = load_dataset(name)\nbs = 1024\n\n@inplace\ndef transformi(b): b[x] = [TF.to_tensor(o) for o in b[x]]\n\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=4)\ndt = dls.train\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> x,y <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">label</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> name <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fashion_mnist</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1024</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Baseline\n\n::: {#6e76a319 .cell execution_count=5}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, act=True):\n    res = nn.Conv2d(ni, nf, stride=2, kernel_size=ks, padding=ks//2)\n    if act: res = nn.Sequential(res, nn.ReLU())\n    return res\n\ndef cnn_layers():\n    return [\n        conv(1 ,8, ks=5),        #14x14\n        conv(8 ,16),             #7x7\n        conv(16,32),             #4x4\n        conv(32,64),             #2x2\n        conv(64,10, act=False),  #1x1\n        nn.Flatten()]\n```\n:::\n\n\nWe want to train quickly, so that means training at a high learning rate.\n\n::: {#152cd8a9 .cell execution_count=6}\n``` {.python .cell-code}\nfrom torcheval.metrics import MulticlassAccuracy\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MulticlassAccuracy\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/__init__.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> functional\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> AUC, Cat, Max, Mean, Min, Sum, Throughput\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">audio</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> FrechetAudioDistance\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/functional/__init__.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> auc, mean, <span style=\"color:rgb(0,135,0)\">sum</span>, throughput\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">classification</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     binary_accuracy,\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     binary_auprc,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     39</span>     topk_multilabel_accuracy,\n<span class=\"ansi-green-fg ansi-bold\">     40</span> )\n<span class=\"ansi-green-fg ansi-bold\">     41</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">image</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> peak_signal_noise_ratio\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/functional/aggregation/__init__.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">auc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> auc\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">mean</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> mean\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">sum</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(0,135,0)\">sum</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/functional/aggregation/auc.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_auc_compute</span>(\n<span class=\"ansi-green-fg ansi-bold\">     11</span>     x: torch<span style=\"color:rgb(98,98,98)\">.</span>Tensor, y: torch<span style=\"color:rgb(98,98,98)\">.</span>Tensor, reorder: <span style=\"color:rgb(0,135,0)\">bool</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> ) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> torch<span style=\"color:rgb(98,98,98)\">.</span>Tensor:\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Computes area under the curve using the trapezoidal rule.</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    Args:</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        x: x-coordinates,</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        Tensor containing AUC score (float)</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    \"\"\"</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#690c5e97 .cell execution_count=7}\n``` {.python .cell-code}\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ncbs = [TrainCB(), DeviceCB(), metrics, ProgressCB(plot=True)]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MetricsCB</span>(accuracy<span style=\"color:rgb(98,98,98)\">=</span>MulticlassAccuracy())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [TrainCB(), DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MetricsCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#15dd092a .cell execution_count=8}\n``` {.python .cell-code}\ndef fit(model, epochs=1, xtra_cbs=None):\n    learn = Learner(model, dls, loss_func=F.cross_entropy, lr=0.6, cbs=cbs+fc.L(xtra_cbs))\n    learn.fit(epochs)\n    return learn\n```\n:::\n\n\n::: {#274b6590 .cell execution_count=9}\n``` {.python .cell-code}\nset_seed(1)\nlearn = fit(nn.Sequential(*cnn_layers()))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> fit(nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers()))\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Hooks\n\n### Manual insertion\n\n::: {#0d355629 .cell execution_count=10}\n``` {.python .cell-code}\nclass SequentialModel(nn.Module):\n    def __init__(self, *layers):\n        super().__init__()\n        self.layers = nn.ModuleList(layers)\n        self.act_means = [[] for _ in layers]\n        self.act_stds  = [[] for _ in layers]\n        \n    def __call__(self, x):\n        for i,l in enumerate(self.layers):\n            x = l(x)\n            self.act_means[i].append(to_cpu(x).mean())\n            self.act_stds [i].append(to_cpu(x).std ())\n        return x\n    \n    def __iter__(self): return iter(self.layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">SequentialModel</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, <span style=\"color:rgb(98,98,98)\">*</span>layers):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fe80c28b .cell execution_count=11}\n``` {.python .cell-code}\nset_seed(1)\nmodel = SequentialModel(*cnn_layers())\nlearn = fit(model)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> SequentialModel(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> fit(model)\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3cc179fe .cell execution_count=12}\n``` {.python .cell-code}\nfor l in model.act_means: plt.plot(l)\nplt.legend(range(5));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> l <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>act_means: plt<span style=\"color:rgb(98,98,98)\">.</span>plot(l)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> plt<span style=\"color:rgb(98,98,98)\">.</span>legend(<span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">5</span>));\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#00ea859e .cell execution_count=13}\n``` {.python .cell-code}\nfor l in model.act_stds: plt.plot(l)\nplt.legend(range(5));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> l <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model<span style=\"color:rgb(98,98,98)\">.</span>act_stds: plt<span style=\"color:rgb(98,98,98)\">.</span>plot(l)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> plt<span style=\"color:rgb(98,98,98)\">.</span>legend(<span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">5</span>));\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Pytorch hooks\n\nHooks are PyTorch object you can add to any nn.Module. A hook will be called when a layer, it is registered to, is executed during the forward pass (forward hook) or the backward pass (backward hook). Hooks don't require us to rewrite the model.\n\n::: {#3fc6bbc0 .cell execution_count=14}\n``` {.python .cell-code}\nset_seed(1)\nmodel = nn.Sequential(*cnn_layers())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nA hook is attached to a layer, and needs to have a function that takes three arguments: module, input, output. Here we store the mean and std of the output in the correct position of our list.\n\n::: {#e8426e56 .cell execution_count=15}\n``` {.python .cell-code}\nact_means = [[] for _ in model]\nact_stds  = [[] for _ in model]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> act_means <span style=\"color:rgb(98,98,98)\">=</span> [[] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> _ <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">model</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> act_stds  <span style=\"color:rgb(98,98,98)\">=</span> [[] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> _ <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> model]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b1505a7d .cell execution_count=16}\n``` {.python .cell-code}\ndef append_stats(i, mod, inp, outp):\n    act_means[i].append(to_cpu(outp).mean())\n    act_stds [i].append(to_cpu(outp).std())\n```\n:::\n\n\n::: {#9ead34b2 .cell execution_count=17}\n``` {.python .cell-code}\nfor i,m in enumerate(model): m.register_forward_hook(partial(append_stats, i))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i,m <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">enumerate</span>(model): m<span style=\"color:rgb(98,98,98)\">.</span>register_forward_hook(partial(append_stats, i))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b50917d2 .cell execution_count=18}\n``` {.python .cell-code}\nfit(model)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> fit(<span class=\"ansi-yellow-bg\">model</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2cce3fd8 .cell execution_count=19}\n``` {.python .cell-code}\nfor o in act_means: plt.plot(o)\nplt.legend(range(5));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> act_means: plt<span style=\"color:rgb(98,98,98)\">.</span>plot(o)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> plt<span style=\"color:rgb(98,98,98)\">.</span>legend(<span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">5</span>));\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'act_means' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Hook class\n\nWe can refactor this in a Hook class. It's very important to remove the hooks when they are deleted, otherwise there will be references kept and the memory won't be properly released when your model is deleted.\n\n::: {#567dbe6a .cell execution_count=20}\n``` {.python .cell-code}\nclass Hook():\n    def __init__(self, m, f): self.hook = m.register_forward_hook(partial(f, self))\n    def remove(self): self.hook.remove()\n    def __del__(self): self.remove()\n```\n:::\n\n\n::: {#b35a271b .cell execution_count=21}\n``` {.python .cell-code}\ndef append_stats(hook, mod, inp, outp):\n    if not hasattr(hook,'stats'): hook.stats = ([],[])\n    acts = to_cpu(outp)\n    hook.stats[0].append(acts.mean())\n    hook.stats[1].append(acts.std())\n```\n:::\n\n\n::: {#e7c41281 .cell execution_count=22}\n``` {.python .cell-code}\nset_seed(1)\nmodel = nn.Sequential(*cnn_layers())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#99292c06 .cell execution_count=23}\n``` {.python .cell-code}\nhooks = [Hook(l, append_stats) for l in model[:5].children()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> hooks <span style=\"color:rgb(98,98,98)\">=</span> [Hook(l, append_stats) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> l <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">model</span>[:<span style=\"color:rgb(98,98,98)\">5</span>]<span style=\"color:rgb(98,98,98)\">.</span>children()]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8d91944f .cell execution_count=24}\n``` {.python .cell-code}\nlearn = fit(model)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> learn <span style=\"color:rgb(98,98,98)\">=</span> fit(<span class=\"ansi-yellow-bg\">model</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f84b78ac .cell execution_count=25}\n``` {.python .cell-code}\nfor h in hooks:\n    plt.plot(h.stats[0])\n    h.remove()\nplt.legend(range(5));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> h <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">hooks</span>:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     plt<span style=\"color:rgb(98,98,98)\">.</span>plot(h<span style=\"color:rgb(98,98,98)\">.</span>stats[<span style=\"color:rgb(98,98,98)\">0</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     h<span style=\"color:rgb(98,98,98)\">.</span>remove()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'hooks' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### A Hooks class\n\n::: {#03e2958e .cell execution_count=26}\n``` {.python .cell-code}\nclass DummyCtxMgr:\n    def __enter__(self, *args):\n        print(\"let's go!\")\n        return self\n    def __exit__ (self, *args): print(\"all done!\")\n    def hello(self): print(\"hello.\")\n```\n:::\n\n\n::: {#5565f168 .cell execution_count=27}\n``` {.python .cell-code}\nwith DummyCtxMgr() as dcm: dcm.hello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlet's go!\nhello.\nall done!\n```\n:::\n:::\n\n\n::: {#d964fc8b .cell execution_count=28}\n``` {.python .cell-code}\nclass DummyList(list):\n    def __delitem__(self, i):\n        print(f\"Say bye to item {i}\")\n        super().__delitem__(i)\n```\n:::\n\n\n::: {#6c0d4f3e .cell execution_count=29}\n``` {.python .cell-code}\ndml = DummyList([1,3,2])\ndml\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n[1, 3, 2]\n```\n:::\n:::\n\n\n::: {#2e12f520 .cell execution_count=30}\n``` {.python .cell-code}\ndel(dml[2])\ndml\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSay bye to item 2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n[1, 3]\n```\n:::\n:::\n\n\n::: {#a1454c93 .cell execution_count=31}\n``` {.python .cell-code}\nclass Hooks(list):\n    def __init__(self, ms, f): super().__init__([Hook(m, f) for m in ms])\n    def __enter__(self, *args): return self\n    def __exit__ (self, *args): self.remove()\n    def __del__(self): self.remove()\n    def __delitem__(self, i):\n        self[i].remove()\n        super().__delitem__(i)\n    def remove(self):\n        for h in self: h.remove()\n```\n:::\n\n\n::: {#d4648495 .cell execution_count=32}\n``` {.python .cell-code}\nset_seed(1)\nmodel = nn.Sequential(*cnn_layers())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b6f82e91 .cell execution_count=33}\n``` {.python .cell-code}\nwith Hooks(model, append_stats) as hooks:\n    fit(model)\n    fig,axs = plt.subplots(1,2, figsize=(10,4))\n    for h in hooks:\n        for i in 0,1: axs[i].plot(h.stats[i])\n    plt.legend(range(6));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> Hooks(<span class=\"ansi-yellow-bg\">model</span>, append_stats) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> hooks:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     fit(model)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     fig,axs <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">10</span>,<span style=\"color:rgb(98,98,98)\">4</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### HooksCallback\n\n::: {#21126bb7 .cell execution_count=34}\n``` {.python .cell-code}\nclass HooksCallback(Callback):\n    def __init__(self, hookfunc, mod_filter=fc.noop, on_train=True, on_valid=False, mods=None):\n        fc.store_attr()\n        super().__init__()\n    \n    def before_fit(self, learn):\n        if self.mods: mods=self.mods\n        else: mods = fc.filter_ex(learn.model.modules(), self.mod_filter)\n        self.hooks = Hooks(mods, partial(self._hookfunc, learn))\n\n    def _hookfunc(self, learn, *args, **kwargs):\n        if (self.on_train and learn.training) or (self.on_valid and not learn.training): self.hookfunc(*args, **kwargs)\n\n    def after_fit(self, learn): self.hooks.remove()\n    def __iter__(self): return iter(self.hooks)\n    def __len__(self): return len(self.hooks)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">HooksCallback</span>(<span class=\"ansi-yellow-bg\">Callback</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, hookfunc, mod_filter<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop, on_train<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, on_valid<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>, mods<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         fc<span style=\"color:rgb(98,98,98)\">.</span>store_attr()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Callback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5da0ea6b .cell execution_count=35}\n``` {.python .cell-code}\nhc = HooksCallback(append_stats, mod_filter=fc.risinstance(nn.Conv2d))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> hc <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">HooksCallback</span>(append_stats, mod_filter<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'HooksCallback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#25a68dd2 .cell execution_count=36}\n``` {.python .cell-code}\nset_seed(1)\nmodel = nn.Sequential(*cnn_layers())\nfit(model, xtra_cbs=[hc]);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> fit(model, xtra_cbs<span style=\"color:rgb(98,98,98)\">=</span>[hc]);\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#59386fa7 .cell execution_count=37}\n``` {.python .cell-code}\nfig,axs = plt.subplots(1,2, figsize=(10,4))\nfor h in hc:\n    for i in 0,1: axs[i].plot(h.stats[i])\nplt.legend(range(6));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> fig,axs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">10</span>,<span style=\"color:rgb(98,98,98)\">4</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> h <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> hc:\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>: axs[i]<span style=\"color:rgb(98,98,98)\">.</span>plot(h<span style=\"color:rgb(98,98,98)\">.</span>stats[i])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Histograms\n\n::: {#616ad5f7 .cell execution_count=38}\n``` {.python .cell-code}\ndef append_stats(hook, mod, inp, outp):\n    if not hasattr(hook,'stats'): hook.stats = ([],[],[])\n    acts = to_cpu(outp)\n    hook.stats[0].append(acts.mean())\n    hook.stats[1].append(acts.std())\n    hook.stats[2].append(acts.abs().histc(40,0,10))\n```\n:::\n\n\n::: {#d280319d .cell execution_count=39}\n``` {.python .cell-code}\nset_seed(1)\nmodel = nn.Sequential(*cnn_layers())\nhc = HooksCallback(append_stats, mod_filter=fc.risinstance(nn.Conv2d))\nfit(model, xtra_cbs=[hc]);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> hc <span style=\"color:rgb(98,98,98)\">=</span> HooksCallback(append_stats, mod_filter<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d))\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9a03926b .cell execution_count=40}\n``` {.python .cell-code}\n# Thanks to @ste for initial version of histgram plotting code\ndef get_hist(h): return torch.stack(h.stats[2]).t().float().log1p()\n```\n:::\n\n\n::: {#7bf6747d .cell execution_count=41}\n``` {.python .cell-code}\nfig,axes = get_grid(len(hc), figsize=(11,5))\nfor ax,h in zip(axes.flat, hc):\n    show_image(get_hist(h), ax, origin='lower')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> fig,axes <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_grid</span>(<span style=\"color:rgb(0,135,0)\">len</span>(hc), figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">11</span>,<span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> ax,h <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(axes<span style=\"color:rgb(98,98,98)\">.</span>flat, hc):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     show_image(get_hist(h), ax, origin<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">lower</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_grid' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d882aac7 .cell execution_count=42}\n``` {.python .cell-code}\ndef get_min(h):\n    h1 = torch.stack(h.stats[2]).t().float()\n    return h1[0]/h1.sum(0)\n```\n:::\n\n\n::: {#0d0ec6b9 .cell execution_count=43}\n``` {.python .cell-code}\nfig,axes = get_grid(len(hc), figsize=(11,5))\nfor ax,h in zip(axes.flatten(), hc):\n    ax.plot(get_min(h))\n    ax.set_ylim(0,1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> fig,axes <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_grid</span>(<span style=\"color:rgb(0,135,0)\">len</span>(hc), figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">11</span>,<span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> ax,h <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(axes<span style=\"color:rgb(98,98,98)\">.</span>flatten(), hc):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     ax<span style=\"color:rgb(98,98,98)\">.</span>plot(get_min(h))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_grid' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## ActivationStats\n\n::: {#958412b1 .cell execution_count=44}\n``` {.python .cell-code}\nclass ActivationStats(HooksCallback):\n    def __init__(self, mod_filter=fc.noop): super().__init__(append_stats, mod_filter)\n\n    def color_dim(self, figsize=(11,5)):\n        fig,axes = get_grid(len(self), figsize=figsize)\n        for ax,h in zip(axes.flat, self):\n            show_image(get_hist(h), ax, origin='lower')\n\n    def dead_chart(self, figsize=(11,5)):\n        fig,axes = get_grid(len(self), figsize=figsize)\n        for ax,h in zip(axes.flatten(), self):\n            ax.plot(get_min(h))\n            ax.set_ylim(0,1)\n\n    def plot_stats(self, figsize=(10,4)):\n        fig,axs = plt.subplots(1,2, figsize=figsize)\n        for h in self:\n            for i in 0,1: axs[i].plot(h.stats[i])\n        axs[0].set_title('Means')\n        axs[1].set_title('Stdevs')\n        plt.legend(fc.L.range(self))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ActivationStats</span>(<span class=\"ansi-yellow-bg\">HooksCallback</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, mod_filter<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>(append_stats, mod_filter)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">color_dim</span>(<span style=\"color:rgb(0,135,0)\">self</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">11</span>,<span style=\"color:rgb(98,98,98)\">5</span>)):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'HooksCallback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#74c0843e .cell execution_count=45}\n``` {.python .cell-code}\nastats = ActivationStats(fc.risinstance(nn.Conv2d))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> astats <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">ActivationStats</span>(fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ActivationStats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6aed5406 .cell execution_count=46}\n``` {.python .cell-code}\nset_seed(1)\nmodel = nn.Sequential(*cnn_layers())\nfit(model, xtra_cbs=[astats]);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>cnn_layers())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> fit(model, xtra_cbs<span style=\"color:rgb(98,98,98)\">=</span>[astats]);\n\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>, in <span class=\"ansi-cyan-fg\">set_seed</span><span class=\"ansi-blue-fg\">(seed, deterministic)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">set_seed</span>(seed, deterministic<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>use_deterministic_algorithms(deterministic)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(seed)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     random<span style=\"color:rgb(98,98,98)\">.</span>seed(seed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8c611158 .cell execution_count=47}\n``` {.python .cell-code}\nastats.color_dim()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>color_dim()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b6e220f9 .cell execution_count=48}\n``` {.python .cell-code}\nastats.dead_chart()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>dead_chart()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#190efd1b .cell execution_count=49}\n``` {.python .cell-code}\nastats.plot_stats()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">astats</span><span style=\"color:rgb(98,98,98)\">.</span>plot_stats()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'astats' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "10_activations_files"
    ],
    "filters": [],
    "includes": {}
  }
}