{
  "hash": "56dfc537c73f7234f99f524abeec8fe8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: ResNets\njupyter:\n  jupytext:\n    split_at_heading: true\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\nimage: cover.png\n---\n\n::: {#70e642c2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nimport fastcore.all as fc\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom functools import partial\nfrom copy import copy\nfrom contextlib import contextmanager\n\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torch import tensor,nn,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.nn import init\nfrom torch.optim import lr_scheduler\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f68f1dc3 .cell execution_count=2}\n``` {.python .cell-code}\nfrom fastcore.test import test_close\n\ntorch.set_printoptions(precision=2, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray'\n\nimport logging\nlogging.disable(logging.WARNING)\n\nset_seed(42)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">test</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> test_close\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image.cmap</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">gray</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4ad9d287 .cell execution_count=3}\n``` {.python .cell-code}\nxl,yl = 'image','label'\nname = \"fashion_mnist\"\nbs = 1024\nxmean,xstd = 0.28, 0.35\n\n@inplace\ndef transformi(b): b[xl] = [(TF.to_tensor(o)-xmean)/xstd for o in b[xl]]\n\ndsd = load_dataset(name)\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=4)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1024</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> xmean,xstd <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.28</span>, <span style=\"color:rgb(98,98,98)\">0.35</span>\n<span class=\"ansi-green-fg\">----&gt; 6</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o)<span style=\"color:rgb(98,98,98)\">-</span>xmean)<span style=\"color:rgb(98,98,98)\">/</span>xstd <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      9</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> load_dataset(name)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b6b67628 .cell execution_count=4}\n``` {.python .cell-code}\nact_gr = partial(GeneralRelu, leak=0.1, sub=0.4)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> act_gr <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(GeneralRelu, leak<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, sub<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.4</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e0669dae .cell execution_count=5}\n``` {.python .cell-code}\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\nastats = ActivationStats(fc.risinstance(GeneralRelu))\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True), astats]\niw = partial(init_weights, leaky=0.1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MetricsCB</span>(accuracy<span style=\"color:rgb(98,98,98)\">=</span>MulticlassAccuracy())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> astats <span style=\"color:rgb(98,98,98)\">=</span> ActivationStats(fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(GeneralRelu))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), astats]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MetricsCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Going deeper\n\n::: {#f9f6b96f .cell execution_count=6}\n``` {.python .cell-code}\ndef get_model(act=nn.ReLU, nfs=(8,16,32,64,128), norm=nn.BatchNorm2d):\n    layers = [conv(1, 8, stride=1, act=act, norm=norm)]\n    layers += [conv(nfs[i], nfs[i+1], act=act, norm=norm) for i in range(len(nfs)-1)]\n    return nn.Sequential(*layers, conv(nfs[-1], 10, act=None, norm=norm, bias=True), nn.Flatten()).to(def_device)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [conv(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">8</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [conv(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#95dedefc .cell execution_count=7}\n``` {.python .cell-code}\nset_seed(42)\nlr,epochs = 6e-2,5\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lr,epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">6e-2</span>,<span style=\"color:rgb(98,98,98)\">5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6c2615bb .cell execution_count=8}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Skip Connections\n\nThe ResNet (*residual network*) was introduced in 2015 by Kaiming He et al in the article [\"Deep Residual Learning for Image Recognition\"](https://arxiv.org/abs/1512.03385). The key idea is using a *skip connection* to allow deeper networks to train successfully.\n\n<img width=\"700\" src=\"images/att_00042.png\">\n\n::: {#8285879b .cell execution_count=9}\n``` {.python .cell-code}\ndef _conv_block(ni, nf, stride, act=act_gr, norm=None, ks=3):\n    return nn.Sequential(conv(ni, nf, stride=1, act=act, norm=norm, ks=ks),\n                         conv(nf, nf, stride=stride, act=None, norm=norm, ks=ks))\n\nclass ResBlock(nn.Module):\n    def __init__(self, ni, nf, stride=1, ks=3, act=act_gr, norm=None):\n        super().__init__()\n        self.convs = _conv_block(ni, nf, stride, act=act, ks=ks, norm=norm)\n        self.idconv = fc.noop if ni==nf else conv(ni, nf, ks=1, stride=1, act=None)\n        self.pool = fc.noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)\n        self.act = act()\n\n    def forward(self, x): return self.act(self.convs(x) + self.idconv(self.pool(x)))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_conv_block</span>(ni, nf, stride, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">act_gr</span>, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(conv(ni, nf, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, ks<span style=\"color:rgb(98,98,98)\">=</span>ks),\n<span class=\"ansi-green-fg ansi-bold\">      3</span>                          conv(nf, nf, stride<span style=\"color:rgb(98,98,98)\">=</span>stride, act<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, ks<span style=\"color:rgb(98,98,98)\">=</span>ks))\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ResBlock</span>(nn<span style=\"color:rgb(98,98,98)\">.</span>Module):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'act_gr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Post-lesson update**: Piotr Czapla noticed that we forgot to include `norm=norm` in the call to `_conv_block` above, so the resnets in the lesson didn't have batchnorm in the resblocks! After fixing this, we discovered that initializing the `conv2` batchnorm weights to zero makes things worse in every model we tried, so we removed that. That init method was originally introduced to handle training extremely deep models (much deeper than we use here) -- it appears from this little test that it might be worse for less deep models.\n\n::: {#16ddb942 .cell execution_count=10}\n``` {.python .cell-code}\ndef get_model(act=nn.ReLU, nfs=(8,16,32,64,128,256), norm=nn.BatchNorm2d):\n    layers = [ResBlock(1, 8, stride=1, act=act, norm=norm)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2) for i in range(len(nfs)-1)]\n    layers += [nn.Flatten(), nn.Linear(nfs[-1], 10, bias=False), nn.BatchNorm1d(10)]\n    return nn.Sequential(*layers).to(def_device)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">8</span>,<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>,<span style=\"color:rgb(98,98,98)\">256</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">8</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dcadd1c7 .cell execution_count=11}\n``` {.python .cell-code}\ndef _print_shape(hook, mod, inp, outp): print(type(mod).__name__, inp[0].shape, outp.shape)\nmodel = get_model()\nlearn = TrainLearner(model, dls, F.cross_entropy, cbs=[DeviceCB(), SingleBatchCB()])\nwith Hooks(model, _print_shape) as hooks: learn.fit(1, train=False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_print_shape</span>(hook, mod, inp, outp): <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(0,135,0)\">type</span>(mod)<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,135)\">__name__</span>, inp[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">.</span>shape, outp<span style=\"color:rgb(98,98,98)\">.</span>shape)\n<span class=\"ansi-green-fg\">----&gt; 2</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span>()\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB(), SingleBatchCB()])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> Hooks(model, _print_shape) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> hooks: learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>, train<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#acbc5247 .cell execution_count=12}\n``` {.python .cell-code}\n@fc.patch\ndef summary(self:Learner):\n    res = '|Module|Input|Output|Num params|\\n|--|--|--|--|\\n'\n    tot = 0\n    def _f(hook, mod, inp, outp):\n        nonlocal res,tot\n        nparms = sum(o.numel() for o in mod.parameters())\n        tot += nparms\n        res += f'|{type(mod).__name__}|{tuple(inp[0].shape)}|{tuple(outp.shape)}|{nparms}|\\n'\n    with Hooks(self.model, _f) as hooks: self.fit(1, lr=1, train=False, cbs=SingleBatchCB())\n    print(\"Tot params: \", tot)\n    if fc.IN_NOTEBOOK:\n        from IPython.display import Markdown\n        return Markdown(res)\n    else: print(res)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@fc</span><span style=\"color:rgb(98,98,98)\">.</span>patch\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">summary</span>(<span style=\"color:rgb(0,135,0)\">self</span>:Learner):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     res <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">|Module|Input|Output|Num params|</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">|--|--|--|--|</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     tot <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c2273c69 .cell execution_count=13}\n``` {.python .cell-code}\nTrainLearner(get_model(), dls, F.cross_entropy, cbs=DeviceCB()).summary()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">TrainLearner</span>(get_model(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, cbs<span style=\"color:rgb(98,98,98)\">=</span>DeviceCB())<span style=\"color:rgb(98,98,98)\">.</span>summary()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#517cb6c7 .cell execution_count=14}\n``` {.python .cell-code}\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nMomentumLearner(model, dls, F.cross_entropy, cbs=DeviceCB()).lr_find()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span>(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> MomentumLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, cbs<span style=\"color:rgb(98,98,98)\">=</span>DeviceCB())<span style=\"color:rgb(98,98,98)\">.</span>lr_find()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#134c40bc .cell execution_count=15}\n``` {.python .cell-code}\nlr = 2e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2e-2</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">epochs</span> <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> xtra <span style=\"color:rgb(98,98,98)\">=</span> [BatchSchedCB(sched)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'epochs' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1d9543b7 .cell execution_count=16}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f7566cb5 .cell execution_count=17}\n``` {.python .cell-code}\nimport timm\nfrom timm.models.resnet import BasicBlock, ResNet, Bottleneck\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">timm</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">timm</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">models</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">resnet</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> BasicBlock, ResNet, Bottleneck\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/timm/__init__.py:2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">version</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> __version__\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">layers</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> is_scriptable, is_exportable, set_scriptable, set_exportable\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">models</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> create_model, list_models, list_pretrained, is_model, list_modules, model_entrypoint, \\\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     is_model_pretrained, get_pretrained_cfg, get_pretrained_cfg_value\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/timm/layers/__init__.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">activations</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">adaptive_avgmax_pool</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> \\\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     adaptive_avgmax_pool2d, select_adaptive_pool2d, AdaptiveAvgMaxPool2d, SelectAdaptivePool2d\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">attention2d</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MultiQueryAttention2d, Attention2d, MultiQueryAttentionV2\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/timm/layers/activations.py:9</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\" Activations</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">A collection of activations fn and modules with a common interface so that they can</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">Hacked together by / Copyright 2020 Ross Wightman</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg\">----&gt; 9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nn <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> nn\n<span class=\"ansi-green-fg ansi-bold\">     11</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> functional <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> F\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2ec51cd7 .cell execution_count=18}\n``` {.python .cell-code}\n' '.join(timm.list_models('*resnet*'))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(98,98,98)\">.</span>join(<span class=\"ansi-yellow-bg\">timm</span><span style=\"color:rgb(98,98,98)\">.</span>list_models(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">*resnet*</span><span style=\"color:rgb(175,0,0)\">'</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'timm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n```\nresnet18:  block=BasicBlock, layers=[2, 2, 2, 2]\nresnet18d: block=BasicBlock, layers=[2, 2, 2, 2], stem_width=32, stem_type='deep', avg_down=True\nresnet10t: block=BasicBlock, layers=[1, 1, 1, 1], stem_width=32, stem_type='deep_tiered', avg_down=True\n```\n\n::: {#bc72ff2f .cell execution_count=19}\n``` {.python .cell-code}\nmodel = timm.create_model('resnet18d', in_chans=1, num_classes=10)\n# model = ResNet(in_chans=1, block=BasicBlock, layers=[2,2,2,2], stem_width=32, avg_down=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timm</span><span style=\"color:rgb(98,98,98)\">.</span>create_model(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">resnet18d</span><span style=\"color:rgb(175,0,0)\">'</span>, in_chans<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, num_classes<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># model = ResNet(in_chans=1, block=BasicBlock, layers=[2,2,2,2], stem_width=32, avg_down=True)</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'timm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2c22aa9b .cell execution_count=20}\n``` {.python .cell-code}\nlr = 2e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2e-2</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">epochs</span> <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> xtra <span style=\"color:rgb(98,98,98)\">=</span> [BatchSchedCB(sched)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'epochs' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#621b5ef9 .cell execution_count=21}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Export -\n\n::: {#021caff4 .cell execution_count=22}\n``` {.python .cell-code}\nimport nbdev; nbdev.nbdev_export()\n```\n:::\n\n\n",
    "supporting": [
      "13_resnet_files"
    ],
    "filters": [],
    "includes": {}
  }
}