{
  "hash": "220e3f90bcffd9cffa8a2b5a2cdd05dc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Augmentation\njupyter:\n  jupytext:\n    split_at_heading: true\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\nimage: cover.png\n---\n\n::: {#d842a437 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch,random\nimport fastcore.all as fc\n\nfrom torch import nn\nfrom torch.nn import init\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\nfrom miniai.resnet import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nn\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a8685b40 .cell execution_count=2}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil\nimport matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom functools import partial\nfrom copy import copy\nfrom contextlib import contextmanager\n\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torch import tensor,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.optim import lr_scheduler\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\n\nfrom fastcore.test import test_close\nfrom torch import distributions\n\ntorch.set_printoptions(precision=2, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray_r'\n\nimport logging\nlogging.disable(logging.WARNING)\n\nset_seed(42)\n\nif fc.defaults.cpus>8: fc.defaults.cpus=8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 10</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">copy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> copy\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">contextlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> contextmanager\n<span class=\"ansi-green-fg\">---&gt; 10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TF</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">F</span>\n<span class=\"ansi-green-fg ansi-bold\">     11</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> tensor,optim\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">utils</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> DataLoader,default_collate\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torchvision/__init__.py:5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">warnings</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">modulefinder</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Module\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> _meta_registrations, datasets, io, models, ops, transforms, utils\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extension</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> _HAS_OPS\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d0e33aea .cell execution_count=3}\n``` {.python .cell-code}\nxl,yl = 'image','label'\nname = \"fashion_mnist\"\nbs = 1024\nxmean,xstd = 0.28, 0.35\n\n@inplace\ndef transformi(b): b[xl] = [(TF.to_tensor(o)-xmean)/xstd for o in b[xl]]\n\ndsd = load_dataset(name)\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=fc.defaults.cpus)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1024</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> xmean,xstd <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.28</span>, <span style=\"color:rgb(98,98,98)\">0.35</span>\n<span class=\"ansi-green-fg\">----&gt; 6</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o)<span style=\"color:rgb(98,98,98)\">-</span>xmean)<span style=\"color:rgb(98,98,98)\">/</span>xstd <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      9</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> load_dataset(name)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a4a58814 .cell execution_count=4}\n``` {.python .cell-code}\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\nastats = ActivationStats(fc.risinstance(GeneralRelu))\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True), astats]\nact_gr = partial(GeneralRelu, leak=0.1, sub=0.4)\niw = partial(init_weights, leaky=0.1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MetricsCB</span>(accuracy<span style=\"color:rgb(98,98,98)\">=</span>MulticlassAccuracy())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> astats <span style=\"color:rgb(98,98,98)\">=</span> ActivationStats(fc<span style=\"color:rgb(98,98,98)\">.</span>risinstance(GeneralRelu))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), astats]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MetricsCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d48e5554 .cell execution_count=5}\n``` {.python .cell-code}\nset_seed(42)\nlr,epochs = 6e-2,5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lr,epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">6e-2</span>,<span style=\"color:rgb(98,98,98)\">5</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Going wider\n\n::: {#36899c9b .cell execution_count=6}\n``` {.python .cell-code}\ndef get_model(act=nn.ReLU, nfs=(16,32,64,128,256,512), norm=nn.BatchNorm2d):\n    layers = [ResBlock(1, 16, ks=5, stride=1, act=act, norm=norm)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2) for i in range(len(nfs)-1)]\n    layers += [nn.Flatten(), nn.Linear(nfs[-1], 10, bias=False), nn.BatchNorm1d(10)]\n    return nn.Sequential(*layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>,<span style=\"color:rgb(98,98,98)\">256</span>,<span style=\"color:rgb(98,98,98)\">512</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">16</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f3164b60 .cell execution_count=7}\n``` {.python .cell-code}\nlr = 1e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">epochs</span> <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(dls<span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> xtra <span style=\"color:rgb(98,98,98)\">=</span> [BatchSchedCB(sched)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'epochs' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2e6ad910 .cell execution_count=8}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Pooling\n\n::: {#7e5928bc .cell execution_count=9}\n``` {.python .cell-code}\nclass GlobalAvgPool(nn.Module):\n    def forward(self, x): return x.mean((-2,-1))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">GlobalAvgPool</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">forward</span>(<span style=\"color:rgb(0,135,0)\">self</span>, x): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x<span style=\"color:rgb(98,98,98)\">.</span>mean((<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#59767bc0 .cell execution_count=10}\n``` {.python .cell-code}\ndef get_model2(act=nn.ReLU, nfs=(16,32,64,128,256), norm=nn.BatchNorm2d):\n    layers = [ResBlock(1, 16, ks=5, stride=1, act=act, norm=norm)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2) for i in range(len(nfs)-1)]\n    layers += [ResBlock(256, 512, act=act, norm=norm), GlobalAvgPool()]\n    layers += [nn.Linear(512, 10, bias=False), nn.BatchNorm1d(10)]\n    return nn.Sequential(*layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model2</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>,<span style=\"color:rgb(98,98,98)\">256</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">16</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e7bee240 .cell execution_count=11}\n``` {.python .cell-code}\ndef _flops(x, h, w):\n    if x.dim()<3: return x.numel()\n    if x.dim()==4: return x.numel()*h*w\n\n@fc.patch\ndef summary(self:Learner):\n    res = '|Module|Input|Output|Num params|MFLOPS|\\n|--|--|--|--|--|\\n'\n    totp,totf = 0,0\n    def _f(hook, mod, inp, outp):\n        nonlocal res,totp,totf\n        nparms = sum(o.numel() for o in mod.parameters())\n        totp += nparms\n        *_,h,w = outp.shape\n        flops = sum(_flops(o, h, w) for o in mod.parameters())/1e6\n        totf += flops\n        res += f'|{type(mod).__name__}|{tuple(inp[0].shape)}|{tuple(outp.shape)}|{nparms}|{flops:.1f}|\\n'\n    with Hooks(self.model, _f) as hooks: self.fit(1, lr=1, cbs=SingleBatchCB())\n    print(f\"Tot params: {totp}; MFLOPS: {totf:.1f}\")\n    if fc.IN_NOTEBOOK:\n        from IPython.display import Markdown\n        return Markdown(res)\n    else: print(res)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x<span style=\"color:rgb(98,98,98)\">.</span>dim()<span style=\"color:rgb(98,98,98)\">&lt;</span><span style=\"color:rgb(98,98,98)\">3</span>: <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x<span style=\"color:rgb(98,98,98)\">.</span>numel()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x<span style=\"color:rgb(98,98,98)\">.</span>dim()<span style=\"color:rgb(98,98,98)\">==</span><span style=\"color:rgb(98,98,98)\">4</span>: <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x<span style=\"color:rgb(98,98,98)\">.</span>numel()<span style=\"color:rgb(98,98,98)\">*</span>h<span style=\"color:rgb(98,98,98)\">*</span>w\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"color:rgb(175,0,255)\">@fc</span><span style=\"color:rgb(98,98,98)\">.</span>patch\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">summary</span>(<span style=\"color:rgb(0,135,0)\">self</span>:Learner):\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     res <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">|Module|Input|Output|Num params|MFLOPS|</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">|--|--|--|--|--|</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     totp,totf <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">0</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#37f76f65 .cell execution_count=12}\n``` {.python .cell-code}\nTrainLearner(get_model2(), dls, F.cross_entropy, lr=lr, cbs=[DeviceCB()]).summary()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">TrainLearner</span>(get_model2(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB()])<span style=\"color:rgb(98,98,98)\">.</span>summary()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c7993d35 .cell execution_count=13}\n``` {.python .cell-code}\nset_seed(42)\nmodel = get_model2(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model2(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs<span style=\"color:rgb(98,98,98)\">+</span>xtra, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b2474bd6 .cell execution_count=14}\n``` {.python .cell-code}\ndef get_model3(act=nn.ReLU, nfs=(16,32,64,128,256), norm=nn.BatchNorm2d):\n    layers = [ResBlock(1, 16, ks=5, stride=1, act=act, norm=norm)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2) for i in range(len(nfs)-1)]\n    layers += [GlobalAvgPool(), nn.Linear(256, 10, bias=False), nn.BatchNorm1d(10)]\n    return nn.Sequential(*layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model3</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>,<span style=\"color:rgb(98,98,98)\">256</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">16</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a64068d8 .cell execution_count=15}\n``` {.python .cell-code}\nTrainLearner(get_model3(), dls, F.cross_entropy, lr=lr, cbs=[DeviceCB()]).summary()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">TrainLearner</span>(get_model3(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB()])<span style=\"color:rgb(98,98,98)\">.</span>summary()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6609352f .cell execution_count=16}\n``` {.python .cell-code}\n[o.shape for o in get_model3()[0].parameters()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [o<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">get_model3</span>()[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">.</span>parameters()]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model3' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bb8ab471 .cell execution_count=17}\n``` {.python .cell-code}\nset_seed(42)\nmodel = get_model3(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model3(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs<span style=\"color:rgb(98,98,98)\">+</span>xtra, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6d75b142 .cell execution_count=18}\n``` {.python .cell-code}\ndef get_model4(act=nn.ReLU, nfs=(16,32,64,128,256), norm=nn.BatchNorm2d):\n    layers = [conv(1, 16, ks=5, stride=1, act=act, norm=norm)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2) for i in range(len(nfs)-1)]\n    layers += [GlobalAvgPool(), nn.Linear(256, 10, bias=False), nn.BatchNorm1d(10)]\n    return nn.Sequential(*layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_model4</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>,<span style=\"color:rgb(98,98,98)\">256</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [conv(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">16</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6f23c910 .cell execution_count=19}\n``` {.python .cell-code}\n[o.shape for o in get_model4()[0].parameters()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [o<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">get_model4</span>()[<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"color:rgb(98,98,98)\">.</span>parameters()]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model4' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7c56d379 .cell execution_count=20}\n``` {.python .cell-code}\nTrainLearner(get_model4(), dls, F.cross_entropy, lr=lr, cbs=[DeviceCB()]).summary()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">TrainLearner</span>(get_model4(), dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB()])<span style=\"color:rgb(98,98,98)\">.</span>summary()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainLearner' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#198ceda6 .cell execution_count=21}\n``` {.python .cell-code}\nset_seed(42)\nmodel = get_model4(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model <span style=\"color:rgb(98,98,98)\">=</span> get_model4(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs<span style=\"color:rgb(98,98,98)\">+</span>xtra, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Data augmentation\n\nAfter 20 epochs without augmentation:\n\n```\n{'accuracy': '0.999', 'loss': '0.012', 'epoch': 19, 'train': True}\n{'accuracy': '0.924', 'loss': '0.284', 'epoch': 19, 'train': False}\n```\n\nWith batchnorm, weight decay doesn't really regularize.\n\n::: {#86157168 .cell execution_count=22}\n``` {.python .cell-code}\nfrom torchvision import transforms\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> transforms\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torchvision/__init__.py:5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">warnings</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">modulefinder</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Module\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> _meta_registrations, datasets, io, models, ops, transforms, utils\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extension</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> _HAS_OPS\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0b2fa132 .cell execution_count=23}\n``` {.python .cell-code}\ndef tfm_batch(b, tfm_x=fc.noop, tfm_y = fc.noop): return tfm_x(b[0]),tfm_y(b[1])\n\ntfms = nn.Sequential(transforms.RandomCrop(28, padding=4),\n                     transforms.RandomHorizontalFlip())\n\naugcb = BatchTransformCB(partial(tfm_batch, tfm_x=tfms), on_val=False)\nmodel = get_model()\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=[SingleBatchCB(), augcb])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">tfm_batch</span>(b, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop, tfm_y <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> tfm_x(b[<span style=\"color:rgb(98,98,98)\">0</span>]),tfm_y(b[<span style=\"color:rgb(98,98,98)\">1</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> tfms <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">28</span>, padding<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>),\n<span class=\"ansi-green-fg ansi-bold\">      4</span>                      transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomHorizontalFlip())\n<span class=\"ansi-green-fg ansi-bold\">      6</span> augcb <span style=\"color:rgb(98,98,98)\">=</span> BatchTransformCB(partial(tfm_batch, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>tfms), on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ae63f4fb .cell execution_count=24}\n``` {.python .cell-code}\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ba98ddfd .cell execution_count=25}\n``` {.python .cell-code}\nxb,yb = learn.batch\nshow_images(xb[:16], imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>batch\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_images(xb[:<span style=\"color:rgb(98,98,98)\">16</span>], imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#78c0bae3 .cell execution_count=26}\n``` {.python .cell-code}\n@fc.patch\n@fc.delegates(show_images)\ndef show_image_batch(self:Learner, max_n=9, cbs=None, **kwargs):\n    self.fit(1, cbs=[SingleBatchCB()]+fc.L(cbs))\n    show_images(self.batch[0][:max_n], **kwargs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@fc</span><span style=\"color:rgb(98,98,98)\">.</span>patch\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(175,0,255)\">@fc</span><span style=\"color:rgb(98,98,98)\">.</span>delegates(show_images)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">show_image_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>:Learner, max_n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">9</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>kwargs):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>[SingleBatchCB()]<span style=\"color:rgb(98,98,98)\">+</span>fc<span style=\"color:rgb(98,98,98)\">.</span>L(cbs))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     show_images(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>batch[<span style=\"color:rgb(98,98,98)\">0</span>][:max_n], <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>kwargs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d588e884 .cell execution_count=27}\n``` {.python .cell-code}\nlearn.show_image_batch(max_n=16, imsize=(1.5))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>show_image_batch(max_n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">16</span>, imsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">1.5</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#374df44d .cell execution_count=28}\n``` {.python .cell-code}\ntfms = nn.Sequential(transforms.RandomCrop(28, padding=1),\n                     transforms.RandomHorizontalFlip())\naugcb = BatchTransformCB(partial(tfm_batch, tfm_x=tfms), on_val=False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tfms <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">28</span>, padding<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>),\n<span class=\"ansi-green-fg ansi-bold\">      2</span>                      transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomHorizontalFlip())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> augcb <span style=\"color:rgb(98,98,98)\">=</span> BatchTransformCB(partial(tfm_batch, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>tfms), on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#46dfe58f .cell execution_count=29}\n``` {.python .cell-code}\nset_seed(42)\nepochs = 20\nlr = 1e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched), augcb]\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">20</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nA custom collation function could let you do per-item transformations.\n\n::: {#70a67286 .cell execution_count=30}\n``` {.python .cell-code}\nmdl_path = Path('models')\nmdl_path.mkdir(exist_ok=True)\ntorch.save(learn.model, mdl_path/'data_aug.pkl')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> mdl_path <span style=\"color:rgb(98,98,98)\">=</span> Path(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> mdl_path<span style=\"color:rgb(98,98,98)\">.</span>mkdir(exist_ok<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>save(learn<span style=\"color:rgb(98,98,98)\">.</span>model, mdl_path<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data_aug.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Test time augmentation (TTA)\n\n::: {#fbf4ceb0 .cell execution_count=31}\n``` {.python .cell-code}\nclass CapturePreds(Callback):\n    def before_fit(self, learn): self.all_inps,self.all_preds,self.all_targs = [],[],[]\n    def after_batch(self, learn):\n        self.all_inps. append(to_cpu(learn.batch[0]))\n        self.all_preds.append(to_cpu(learn.preds))\n        self.all_targs.append(to_cpu(learn.batch[1]))\n    def after_fit(self, learn):\n        self.all_preds,self.all_targs,self.all_inps = map(torch.cat, [self.all_preds,self.all_targs,self.all_inps])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">CapturePreds</span>(<span class=\"ansi-yellow-bg\">Callback</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">before_fit</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>all_inps,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>all_preds,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>all_targs <span style=\"color:rgb(98,98,98)\">=</span> [],[],[]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">after_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Callback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#982d4270 .cell execution_count=32}\n``` {.python .cell-code}\n@fc.patch\ndef capture_preds(self: Learner, cbs=None, inps=False):\n    cp = CapturePreds()\n    self.fit(1, train=False, cbs=[cp]+fc.L(cbs))\n    res = cp.all_preds,cp.all_targs\n    if inps: res = res+(cp.all_inps,)\n    return res\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@fc</span><span style=\"color:rgb(98,98,98)\">.</span>patch\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">capture_preds</span>(<span style=\"color:rgb(0,135,0)\">self</span>: Learner, cbs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, inps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     cp <span style=\"color:rgb(98,98,98)\">=</span> CapturePreds()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>, train<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>[cp]<span style=\"color:rgb(98,98,98)\">+</span>fc<span style=\"color:rgb(98,98,98)\">.</span>L(cbs))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0a294546 .cell execution_count=33}\n``` {.python .cell-code}\nap1, at = learn.capture_preds()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ap1, at <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>capture_preds()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c43f5027 .cell execution_count=34}\n``` {.python .cell-code}\nttacb = BatchTransformCB(partial(tfm_batch, tfm_x=TF.hflip), on_val=True)\nap2, at = learn.capture_preds(cbs=[ttacb])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ttacb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">BatchTransformCB</span>(partial(tfm_batch, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>TF<span style=\"color:rgb(98,98,98)\">.</span>hflip), on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> ap2, at <span style=\"color:rgb(98,98,98)\">=</span> learn<span style=\"color:rgb(98,98,98)\">.</span>capture_preds(cbs<span style=\"color:rgb(98,98,98)\">=</span>[ttacb])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'BatchTransformCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3a2bc59e .cell execution_count=35}\n``` {.python .cell-code}\nap1.shape,ap2.shape,at.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">ap1</span><span style=\"color:rgb(98,98,98)\">.</span>shape,ap2<span style=\"color:rgb(98,98,98)\">.</span>shape,at<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ap1' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c053ed0f .cell execution_count=36}\n``` {.python .cell-code}\nap = torch.stack([ap1,ap2]).mean(0).argmax(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ap <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>stack([ap1,ap2])<span style=\"color:rgb(98,98,98)\">.</span>mean(<span style=\"color:rgb(98,98,98)\">0</span>)<span style=\"color:rgb(98,98,98)\">.</span>argmax(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#526ac331 .cell execution_count=37}\n``` {.python .cell-code}\nround((ap==at).float().mean().item(), 3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">round</span>((<span class=\"ansi-yellow-bg\">ap</span><span style=\"color:rgb(98,98,98)\">==</span>at)<span style=\"color:rgb(98,98,98)\">.</span>float()<span style=\"color:rgb(98,98,98)\">.</span>mean()<span style=\"color:rgb(98,98,98)\">.</span>item(), <span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ap' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Random erase\n\n::: {#a0ccec2f .cell execution_count=38}\n``` {.python .cell-code}\nxb,_ = next(iter(dls.train))\nxbt = xb[:16]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,_ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xbt <span style=\"color:rgb(98,98,98)\">=</span> xb[:<span style=\"color:rgb(98,98,98)\">16</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#568cb3ac .cell execution_count=39}\n``` {.python .cell-code}\nxm,xs = xbt.mean(),xbt.std()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xm,xs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">xbt</span><span style=\"color:rgb(98,98,98)\">.</span>mean(),xbt<span style=\"color:rgb(98,98,98)\">.</span>std()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#94ace604 .cell execution_count=40}\n``` {.python .cell-code}\nxbt.min(), xbt.max()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">xbt</span><span style=\"color:rgb(98,98,98)\">.</span>min(), xbt<span style=\"color:rgb(98,98,98)\">.</span>max()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#094ea3da .cell execution_count=41}\n``` {.python .cell-code}\npct = 0.2\n```\n:::\n\n\n::: {#084eebf2 .cell execution_count=42}\n``` {.python .cell-code}\nszx = int(pct*xbt.shape[-2])\nszy = int(pct*xbt.shape[-1])\nstx = int(random.random()*(1-pct)*xbt.shape[-2])\nsty = int(random.random()*(1-pct)*xbt.shape[-1])\nstx,sty,szx,szy\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> szx <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(pct<span style=\"color:rgb(98,98,98)\">*</span><span class=\"ansi-yellow-bg\">xbt</span><span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> szy <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(pct<span style=\"color:rgb(98,98,98)\">*</span>xbt<span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> stx <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(random<span style=\"color:rgb(98,98,98)\">.</span>random()<span style=\"color:rgb(98,98,98)\">*</span>(<span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">-</span>pct)<span style=\"color:rgb(98,98,98)\">*</span>xbt<span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bb64f31f .cell execution_count=43}\n``` {.python .cell-code}\ninit.normal_(xbt[:,:,stx:stx+szx,sty:sty+szy], mean=xm, std=xs);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">init</span><span style=\"color:rgb(98,98,98)\">.</span>normal_(xbt[:,:,stx:stx<span style=\"color:rgb(98,98,98)\">+</span>szx,sty:sty<span style=\"color:rgb(98,98,98)\">+</span>szy], mean<span style=\"color:rgb(98,98,98)\">=</span>xm, std<span style=\"color:rgb(98,98,98)\">=</span>xs);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'init' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6fddb564 .cell execution_count=44}\n``` {.python .cell-code}\nshow_images(xbt, imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(xbt, imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a881ed5d .cell execution_count=45}\n``` {.python .cell-code}\nxbt.min(), xbt.max()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">xbt</span><span style=\"color:rgb(98,98,98)\">.</span>min(), xbt<span style=\"color:rgb(98,98,98)\">.</span>max()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b9551ac1 .cell execution_count=46}\n``` {.python .cell-code}\ndef _rand_erase1(x, pct, xm, xs, mn, mx):\n    szx = int(pct*x.shape[-2])\n    szy = int(pct*x.shape[-1])\n    stx = int(random.random()*(1-pct)*x.shape[-2])\n    sty = int(random.random()*(1-pct)*x.shape[-1])\n    init.normal_(x[:,:,stx:stx+szx,sty:sty+szy], mean=xm, std=xs)\n    x.clamp_(mn, mx)\n```\n:::\n\n\n::: {#858b162c .cell execution_count=47}\n``` {.python .cell-code}\nxb,_ = next(iter(dls.train))\nxbt = xb[:16]\n_rand_erase1(xbt, 0.2, xbt.mean(), xbt.std(), xbt.min(), xbt.max())\nshow_images(xbt, imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,_ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xbt <span style=\"color:rgb(98,98,98)\">=</span> xb[:<span style=\"color:rgb(98,98,98)\">16</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> _rand_erase1(xbt, <span style=\"color:rgb(98,98,98)\">0.2</span>, xbt<span style=\"color:rgb(98,98,98)\">.</span>mean(), xbt<span style=\"color:rgb(98,98,98)\">.</span>std(), xbt<span style=\"color:rgb(98,98,98)\">.</span>min(), xbt<span style=\"color:rgb(98,98,98)\">.</span>max())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f879ee63 .cell execution_count=48}\n``` {.python .cell-code}\nxbt.mean(),xbt.std(),xbt.min(), xbt.max()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">xbt</span><span style=\"color:rgb(98,98,98)\">.</span>mean(),xbt<span style=\"color:rgb(98,98,98)\">.</span>std(),xbt<span style=\"color:rgb(98,98,98)\">.</span>min(), xbt<span style=\"color:rgb(98,98,98)\">.</span>max()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dd1548dc .cell execution_count=49}\n``` {.python .cell-code}\ndef rand_erase(x, pct=0.2, max_num = 4):\n    xm,xs,mn,mx = x.mean(),x.std(),x.min(),x.max()\n    num = random.randint(0, max_num)\n    for i in range(num): _rand_erase1(x, pct, xm, xs, mn, mx)\n#     print(num)\n    return x\n```\n:::\n\n\n::: {#50e4f029 .cell execution_count=50}\n``` {.python .cell-code}\nxb,_ = next(iter(dls.train))\nxbt = xb[:16]\nrand_erase(xbt, 0.2, 4)\nshow_images(xbt, imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,_ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xbt <span style=\"color:rgb(98,98,98)\">=</span> xb[:<span style=\"color:rgb(98,98,98)\">16</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> rand_erase(xbt, <span style=\"color:rgb(98,98,98)\">0.2</span>, <span style=\"color:rgb(98,98,98)\">4</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5b22a861 .cell execution_count=51}\n``` {.python .cell-code}\nclass RandErase(nn.Module):\n    def __init__(self, pct=0.2, max_num=4):\n        super().__init__()\n        self.pct,self.max_num = pct,max_num\n    def forward(self, x): return rand_erase(x, self.pct, self.max_num)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">RandErase</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, pct<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, max_num<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#57b64927 .cell execution_count=52}\n``` {.python .cell-code}\ntfms = nn.Sequential(transforms.RandomCrop(28, padding=1),\n                     transforms.RandomHorizontalFlip(),\n                     RandErase())\naugcb = BatchTransformCB(partial(tfm_batch, tfm_x=tfms), on_val=False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tfms <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">28</span>, padding<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>),\n<span class=\"ansi-green-fg ansi-bold\">      2</span>                      transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomHorizontalFlip(),\n<span class=\"ansi-green-fg ansi-bold\">      3</span>                      RandErase())\n<span class=\"ansi-green-fg ansi-bold\">      4</span> augcb <span style=\"color:rgb(98,98,98)\">=</span> BatchTransformCB(partial(tfm_batch, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>tfms), on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#77cdb552 .cell execution_count=53}\n``` {.python .cell-code}\nmodel = get_model()\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=[DeviceCB(), SingleBatchCB(), augcb])\nlearn.fit(1)\nxb,yb = learn.batch\nshow_images(xb[:16], imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[53], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span>()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB(), SingleBatchCB(), augcb])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3ba7cae1 .cell execution_count=54}\n``` {.python .cell-code}\nepochs = 50\nlr = 2e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched), augcb]\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">50</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2e-2</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> xtra <span style=\"color:rgb(98,98,98)\">=</span> [BatchSchedCB(sched), augcb]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Random copy\n\n::: {#0fe22c23 .cell execution_count=55}\n``` {.python .cell-code}\nxb,_ = next(iter(dls.train))\nxbt = xb[:16]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,_ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xbt <span style=\"color:rgb(98,98,98)\">=</span> xb[:<span style=\"color:rgb(98,98,98)\">16</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f8ef7cc3 .cell execution_count=56}\n``` {.python .cell-code}\nszx = int(pct*xbt.shape[-2])\nszy = int(pct*xbt.shape[-1])\nstx1 = int(random.random()*(1-pct)*xbt.shape[-2])\nsty1 = int(random.random()*(1-pct)*xbt.shape[-1])\nstx2 = int(random.random()*(1-pct)*xbt.shape[-2])\nsty2 = int(random.random()*(1-pct)*xbt.shape[-1])\nstx1,sty1,stx2,sty2,szx,szy\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> szx <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(pct<span style=\"color:rgb(98,98,98)\">*</span><span class=\"ansi-yellow-bg\">xbt</span><span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> szy <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(pct<span style=\"color:rgb(98,98,98)\">*</span>xbt<span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> stx1 <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(random<span style=\"color:rgb(98,98,98)\">.</span>random()<span style=\"color:rgb(98,98,98)\">*</span>(<span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">-</span>pct)<span style=\"color:rgb(98,98,98)\">*</span>xbt<span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b5826591 .cell execution_count=57}\n``` {.python .cell-code}\nxbt[:,:,stx1:stx1+szx,sty1:sty1+szy] = xbt[:,:,stx2:stx2+szx,sty2:sty2+szy]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xbt[:,:,stx1:stx1<span style=\"color:rgb(98,98,98)\">+</span>szx,sty1:sty1<span style=\"color:rgb(98,98,98)\">+</span>szy] <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">xbt</span>[:,:,stx2:stx2<span style=\"color:rgb(98,98,98)\">+</span>szx,sty2:sty2<span style=\"color:rgb(98,98,98)\">+</span>szy]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'xbt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e217a1b2 .cell execution_count=58}\n``` {.python .cell-code}\nshow_images(xbt, imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(xbt, imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ff1a93ab .cell execution_count=59}\n``` {.python .cell-code}\ndef _rand_copy1(x, pct):\n    szx = int(pct*x.shape[-2])\n    szy = int(pct*x.shape[-1])\n    stx1 = int(random.random()*(1-pct)*x.shape[-2])\n    sty1 = int(random.random()*(1-pct)*x.shape[-1])\n    stx2 = int(random.random()*(1-pct)*x.shape[-2])\n    sty2 = int(random.random()*(1-pct)*x.shape[-1])\n    x[:,:,stx1:stx1+szx,sty1:sty1+szy] = x[:,:,stx2:stx2+szx,sty2:sty2+szy]\n```\n:::\n\n\n::: {#d9e5cb50 .cell execution_count=60}\n``` {.python .cell-code}\nxb,_ = next(iter(dls.train))\nxbt = xb[:16]\n_rand_copy1(xbt, 0.2)\nshow_images(xbt, imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[60], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,_ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xbt <span style=\"color:rgb(98,98,98)\">=</span> xb[:<span style=\"color:rgb(98,98,98)\">16</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> _rand_copy1(xbt, <span style=\"color:rgb(98,98,98)\">0.2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e20d7fda .cell execution_count=61}\n``` {.python .cell-code}\ndef rand_copy(x, pct=0.2, max_num = 4):\n    num = random.randint(0, max_num)\n    for i in range(num): _rand_copy1(x, pct)\n#     print(num)\n    return x\n```\n:::\n\n\n::: {#7f2785b7 .cell execution_count=62}\n``` {.python .cell-code}\nxb,_ = next(iter(dls.train))\nxbt = xb[:16]\nrand_copy(xbt, 0.2, 4)\nshow_images(xbt, imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[62], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,_ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xbt <span style=\"color:rgb(98,98,98)\">=</span> xb[:<span style=\"color:rgb(98,98,98)\">16</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> rand_copy(xbt, <span style=\"color:rgb(98,98,98)\">0.2</span>, <span style=\"color:rgb(98,98,98)\">4</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cb2f9114 .cell execution_count=63}\n``` {.python .cell-code}\nclass RandCopy(nn.Module):\n    def __init__(self, pct=0.2, max_num=4):\n        super().__init__()\n        self.pct,self.max_num = pct,max_num\n    def forward(self, x): return rand_copy(x, self.pct, self.max_num)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[63], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">RandCopy</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, pct<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.2</span>, max_num<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9666c705 .cell execution_count=64}\n``` {.python .cell-code}\ntfms = nn.Sequential(transforms.RandomCrop(28, padding=1),\n                     transforms.RandomHorizontalFlip(),\n                     RandCopy())\naugcb = BatchTransformCB(partial(tfm_batch, tfm_x=tfms), on_val=False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[64], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tfms <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">28</span>, padding<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>),\n<span class=\"ansi-green-fg ansi-bold\">      2</span>                      transforms<span style=\"color:rgb(98,98,98)\">.</span>RandomHorizontalFlip(),\n<span class=\"ansi-green-fg ansi-bold\">      3</span>                      RandCopy())\n<span class=\"ansi-green-fg ansi-bold\">      4</span> augcb <span style=\"color:rgb(98,98,98)\">=</span> BatchTransformCB(partial(tfm_batch, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>tfms), on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3fd9cd02 .cell execution_count=65}\n``` {.python .cell-code}\nmodel = get_model()\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=[DeviceCB(), SingleBatchCB(), augcb])\nlearn.fit(1)\nxb,yb = learn.batch\nshow_images(xb[:16], imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[65], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span>()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>[DeviceCB(), SingleBatchCB(), augcb])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#35964b82 .cell execution_count=66}\n``` {.python .cell-code}\nset_seed(1)\nepochs = 25\nlr = 1e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched), augcb]\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[66], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">25</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d1f54422 .cell execution_count=67}\n``` {.python .cell-code}\nmodel2 = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn2 = TrainLearner(model2, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn2.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[67], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model2 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_model</span>(act_gr, norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d)<span style=\"color:rgb(98,98,98)\">.</span>apply(iw)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn2 <span style=\"color:rgb(98,98,98)\">=</span> TrainLearner(model2, dls, F<span style=\"color:rgb(98,98,98)\">.</span>cross_entropy, lr<span style=\"color:rgb(98,98,98)\">=</span>lr, cbs<span style=\"color:rgb(98,98,98)\">=</span>cbs<span style=\"color:rgb(98,98,98)\">+</span>xtra, opt_func<span style=\"color:rgb(98,98,98)\">=</span>optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> learn2<span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a6a17be3 .cell execution_count=68}\n``` {.python .cell-code}\nmdl_path = Path('models')\ntorch.save(learn.model,  mdl_path/'randcopy1.pkl')\ntorch.save(learn2.model, mdl_path/'randcopy2.pkl')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[68], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> mdl_path <span style=\"color:rgb(98,98,98)\">=</span> Path(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>save(learn<span style=\"color:rgb(98,98,98)\">.</span>model,  mdl_path<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">randcopy1.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> torch<span style=\"color:rgb(98,98,98)\">.</span>save(learn2<span style=\"color:rgb(98,98,98)\">.</span>model, mdl_path<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">randcopy2.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ee7544e8 .cell execution_count=69}\n``` {.python .cell-code}\ncp1 = CapturePreds()\nlearn.fit(1, train=False, cbs=cp1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[69], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> cp1 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">CapturePreds</span>()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>, train<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cp1)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'CapturePreds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cc75c56d .cell execution_count=70}\n``` {.python .cell-code}\ncp2 = CapturePreds()\nlearn2.fit(1, train=False, cbs=cp2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[70], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> cp2 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">CapturePreds</span>()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> learn2<span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>, train<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>, cbs<span style=\"color:rgb(98,98,98)\">=</span>cp2)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'CapturePreds' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a3de1c6c .cell execution_count=71}\n``` {.python .cell-code}\nap = torch.stack([cp1.all_preds,cp2.all_preds]).mean(0).argmax(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[71], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ap <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>stack([cp1<span style=\"color:rgb(98,98,98)\">.</span>all_preds,cp2<span style=\"color:rgb(98,98,98)\">.</span>all_preds])<span style=\"color:rgb(98,98,98)\">.</span>mean(<span style=\"color:rgb(98,98,98)\">0</span>)<span style=\"color:rgb(98,98,98)\">.</span>argmax(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4f80b4a5 .cell execution_count=72}\n``` {.python .cell-code}\nround((ap==cp1.all_targs).float().mean().item(), 3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[72], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">round</span>((<span class=\"ansi-yellow-bg\">ap</span><span style=\"color:rgb(98,98,98)\">==</span>cp1<span style=\"color:rgb(98,98,98)\">.</span>all_targs)<span style=\"color:rgb(98,98,98)\">.</span>float()<span style=\"color:rgb(98,98,98)\">.</span>mean()<span style=\"color:rgb(98,98,98)\">.</span>item(), <span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ap' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Dropout\n\n::: {#603cf779 .cell execution_count=73}\n``` {.python .cell-code}\np = 0.1\ndist = distributions.binomial.Binomial(probs=1-p)\ndist.sample((10,))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[73], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> p <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.1</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> dist <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">distributions</span><span style=\"color:rgb(98,98,98)\">.</span>binomial<span style=\"color:rgb(98,98,98)\">.</span>Binomial(probs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span><span style=\"color:rgb(98,98,98)\">-</span>p)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> dist<span style=\"color:rgb(98,98,98)\">.</span>sample((<span style=\"color:rgb(98,98,98)\">10</span>,))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'distributions' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a26bac7b .cell execution_count=74}\n``` {.python .cell-code}\nclass Dropout(nn.Module):\n    def __init__(self, p=0.1):\n        super().__init__()\n        self.p = p\n\n    def forward(self, x):\n        if not self.training: return x\n        dist = distributions.binomial.Binomial(tensor(1.0).to(x.device), probs=1-self.p)\n        return x * dist.sample(x.size()) * 1/(1-self.p)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[74], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">Dropout</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, p<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cd66aebd .cell execution_count=75}\n``` {.python .cell-code}\ndef get_dropmodel(act=nn.ReLU, nfs=(16,32,64,128,256,512), norm=nn.BatchNorm2d, drop=0.0):\n    layers = [ResBlock(1, 16, ks=5, stride=1, act=act, norm=norm), nn.Dropout2d(drop)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2) for i in range(len(nfs)-1)]\n    layers += [nn.Flatten(), Dropout(drop), nn.Linear(nfs[-1], 10, bias=False), nn.BatchNorm1d(10)]\n    return nn.Sequential(*layers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[75], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">get_dropmodel</span>(act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, nfs<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>,<span style=\"color:rgb(98,98,98)\">32</span>,<span style=\"color:rgb(98,98,98)\">64</span>,<span style=\"color:rgb(98,98,98)\">128</span>,<span style=\"color:rgb(98,98,98)\">256</span>,<span style=\"color:rgb(98,98,98)\">512</span>), norm<span style=\"color:rgb(98,98,98)\">=</span>nn<span style=\"color:rgb(98,98,98)\">.</span>BatchNorm2d, drop<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.0</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">16</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm), nn<span style=\"color:rgb(98,98,98)\">.</span>Dropout2d(drop)]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     layers <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> [ResBlock(nfs[i], nfs[i<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>], act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(nfs)<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1c9c7a48 .cell execution_count=76}\n``` {.python .cell-code}\nset_seed(42)\nepochs=5\nlr = 1e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nmodel = get_dropmodel(act_gr, norm=nn.BatchNorm2d, drop=0.1).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[76], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4d389c0c .cell execution_count=77}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[77], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4566997d .cell execution_count=78}\n``` {.python .cell-code}\nclass TTD_CB(Callback):\n    def before_epoch(self, learn):\n        learn.model.apply(lambda m: m.train() if isinstance(m, (nn.Dropout,nn.Dropout2d)) else None)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[78], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TTD_CB</span>(<span class=\"ansi-yellow-bg\">Callback</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">before_epoch</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         learn<span style=\"color:rgb(98,98,98)\">.</span>model<span style=\"color:rgb(98,98,98)\">.</span>apply(<span style=\"font-weight:bold;color:rgb(0,135,0)\">lambda</span> m: m<span style=\"color:rgb(98,98,98)\">.</span>train() <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(m, (nn<span style=\"color:rgb(98,98,98)\">.</span>Dropout,nn<span style=\"color:rgb(98,98,98)\">.</span>Dropout2d)) <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Callback' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Augment 2\n\n::: {#7e959d75 .cell execution_count=79}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[xl] = [(TF.to_tensor(o)*2-1) for o in b[xl]]\n\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=fc.defaults.cpus)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[79], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o)<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tds <span style=\"color:rgb(98,98,98)\">=</span> dsd<span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#df567bf7 .cell execution_count=80}\n``` {.python .cell-code}\nset_seed(42)\nepochs = 20\nlr = 1e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched), augcb]\nmodel = get_model(act_gr, norm=nn.BatchNorm2d).apply(iw)\nlearn = TrainLearner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=optim.AdamW)\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[80], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">set_seed</span>(<span style=\"color:rgb(98,98,98)\">42</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">20</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'set_seed' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c0300537 .cell execution_count=81}\n``` {.python .cell-code}\ntorch.save(learn.model, 'models/data_aug2.pkl')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[81], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>save(learn<span style=\"color:rgb(98,98,98)\">.</span>model, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models/data_aug2.pkl</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "14_augment_files"
    ],
    "filters": [],
    "includes": {}
  }
}