{
  "hash": "2613ac51e67ca8e8b06a76502e1de0cf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Setup\njupyter: python3\nimage: cover.png\n---\n\n::: {#70c4139a .cell execution_count=1}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,random,timm,torchvision,io,PIL, einops\nimport fastcore.all as fc,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt\nfrom collections.abc import Mapping\nfrom pathlib import Path\nfrom operator import attrgetter,itemgetter\nfrom functools import partial\nfrom copy import copy\nfrom contextlib import contextmanager\n\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\nfrom torchvision import transforms\nfrom torch import tensor,nn,optim\nfrom torch.utils.data import DataLoader,default_collate\nfrom torch.nn import init\nfrom torch.optim import lr_scheduler\nfrom torcheval.metrics import MulticlassAccuracy\nfrom datasets import load_dataset,load_dataset_builder\nfrom fastcore.foundation import L, store_attr\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\nfrom miniai.resnet import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">timm</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">io</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">PIL</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">einops</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n## Background: Neural Cellular Automata\n\nA cellular automaton is a discrete model that consists of a grid of cells, each of which can be in one of a finite number of states. The cells are updated simultaneously based on a set of rules that determine the state of a cell based on the states of its neighbors.\n\nCellular automata are often used to model complex systems and can exhibit emergent behavior, meaning that patterns and behaviors emerge from the interactions of the individual cells even though the rules governing their behavior are simple.\n\nClassic examples such as the famous 'Game of Life' have very simple rules and limit states to 'alive' or 'dead'. However, the ideas can be extended to continuous outputs for each cell, and the update 'rule' can be a small neural network rather than a hard-coded decision tree - giving us 'Neural Cellular Automata'.\n\nHere's what our NCA will look like:\n\n![image.png](attachment:image.png)\n\nKey references: \n- [Growing Neural Cellular Automata](https://distill.pub/2020/growing-ca/) - A delightful paper that was my intro to the topic\n- [Texture Generation with NCA](https://arxiv.org/abs/2105.07299) - tiny models making amazing textures, the paper we're replicating today.\n- ['The Future of Artificial Intelligence is Self-Organizing and Self-Assembling'](https://sebastianrisi.com/self_assembling_ai/) - More general discussion of this space\n- [Fixing Neural CA Colors with Sliced Optimal Transport](https://www.youtube.com/watch?v=ZFYZFlY7lgI) -  A follow-on video from Alexander Mordvintsev (include code for a different style loss)\n- [Fun with Neural Cellular Automata](https://wandb.ai/johnowhitaker/nca/reports/Fun-with-Neural-Cellular-Automata--VmlldzoyMDQ5Mjg0) - My W&B report with lots of examples\n\n## Goal: Match This Style with an NCA\n\n::: {#186aa7aa .cell execution_count=2}\n``` {.python .cell-code}\ndef download_image(url):\n    imgb = fc.urlread(url, decode=False) \n    return torchvision.io.decode_image(tensor(list(imgb), dtype=torch.uint8)).float()/255.\nurl = \"https://images.pexels.com/photos/34225/spider-web-with-water-beads-network-dewdrop.jpg?w=256\"\nstyle_im = download_image(url).to(def_device)\nshow_image(style_im);\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> torchvision<span style=\"color:rgb(98,98,98)\">.</span>io<span style=\"color:rgb(98,98,98)\">.</span>decode_image(tensor(<span style=\"color:rgb(0,135,0)\">list</span>(imgb), dtype<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>uint8))<span style=\"color:rgb(98,98,98)\">.</span>float()<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">255.</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> url <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">https://images.pexels.com/photos/34225/spider-web-with-water-beads-network-dewdrop.jpg?w=256</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> style_im <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">download_image</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">url</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> show_image(style_im);\n\nCell <span class=\"ansi-green-fg\">In[2], line 2</span>, in <span class=\"ansi-cyan-fg\">download_image</span><span class=\"ansi-blue-fg\">(url)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">download_image</span>(url):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     imgb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>urlread(url, decode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>) \n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> torchvision<span style=\"color:rgb(98,98,98)\">.</span>io<span style=\"color:rgb(98,98,98)\">.</span>decode_image(tensor(<span style=\"color:rgb(0,135,0)\">list</span>(imgb), dtype<span style=\"color:rgb(98,98,98)\">=</span>torch<span style=\"color:rgb(98,98,98)\">.</span>uint8))<span style=\"color:rgb(98,98,98)\">.</span>float()<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">255.</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Style Loss (see 17A):\n\n::: {#957e19d6 .cell execution_count=3}\n``` {.python .cell-code}\nvgg16 = timm.create_model('vgg16', pretrained=True).to(def_device).features\nnormalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n\ndef calc_features(imgs, target_layers=[18, 25]): \n    x = normalize(imgs)\n    feats = []\n    for i, layer in enumerate(vgg16[:max(target_layers)+1]):\n        x = layer(x)\n        if i in target_layers:\n            feats.append(x.clone())\n    return feats\n\n# Batched version of the previous notebook's gram matrix function\ndef calc_grams(img, target_layers=[1, 6, 11, 18, 25]):\n    return L(torch.einsum('bchw, bdhw -> cd', x, x) / (x.shape[-2]*x.shape[-1])\n            for x in calc_features(img, target_layers))\n\nclass StyleLossToTarget():\n    def __init__(self, target_im, target_layers=[1, 6, 11, 18, 25]):\n        fc.store_attr()\n        with torch.no_grad(): self.target_grams = calc_grams(target_im[None], target_layers)\n    def __call__(self, input_im): \n        return sum((f1-f2).pow(2).mean() for f1, f2 in \n               zip(calc_grams(input_im, self.target_layers), self.target_grams))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> vgg16 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timm</span><span style=\"color:rgb(98,98,98)\">.</span>create_model(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">vgg16</span><span style=\"color:rgb(175,0,0)\">'</span>, pretrained<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)<span style=\"color:rgb(98,98,98)\">.</span>features\n<span class=\"ansi-green-fg ansi-bold\">      2</span> normalize <span style=\"color:rgb(98,98,98)\">=</span> transforms<span style=\"color:rgb(98,98,98)\">.</span>Normalize(mean<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(98,98,98)\">0.485</span>, <span style=\"color:rgb(98,98,98)\">0.456</span>, <span style=\"color:rgb(98,98,98)\">0.406</span>], std<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(98,98,98)\">0.229</span>, <span style=\"color:rgb(98,98,98)\">0.224</span>, <span style=\"color:rgb(98,98,98)\">0.225</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">calc_features</span>(imgs, target_layers<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(98,98,98)\">18</span>, <span style=\"color:rgb(98,98,98)\">25</span>]): \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'timm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#15369e3e .cell execution_count=4}\n``` {.python .cell-code}\nstyle_loss = StyleLossToTarget(style_im)\nstyle_loss(torch.rand(1, 3, 256, 256).to(def_device))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> style_loss <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">StyleLossToTarget</span>(style_im)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> style_loss(torch<span style=\"color:rgb(98,98,98)\">.</span>rand(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">3</span>, <span style=\"color:rgb(98,98,98)\">256</span>, <span style=\"color:rgb(98,98,98)\">256</span>)<span style=\"color:rgb(98,98,98)\">.</span>to(def_device))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'StyleLossToTarget' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Defining the NCA model\n\n::: {#dc786438 .cell execution_count=5}\n``` {.python .cell-code}\nnum_channels = 4\nhidden_n = 8\n```\n:::\n\n\n::: {#63f982a9 .cell execution_count=6}\n``` {.python .cell-code}\ndef make_grids(n, sz=128): return torch.zeros(n, num_channels, sz, sz).to(def_device)\n```\n:::\n\n\n::: {#c1fe2d1a .cell execution_count=7}\n``` {.python .cell-code}\n# Hard-coded filters\nfilters = torch.stack([\n    tensor([[0.0,0.0,0.0],[0.0,1.0,0.0],[0.0,0.0,0.0]]),\n    tensor([[-1.0,0.0,1.0],[-2.0,0.0,2.0],[-1.0,0.0,1.0]]),\n    tensor([[-1.0,0.0,1.0],[-2.0,0.0,2.0],[-1.0,0.0,1.0]]).T,\n    tensor([[1.0,2.0,1.0],[2.0,-12,2.0],[1.0,2.0,1.0]])\n]).to(def_device)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hard-coded filters</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> filters <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>stack([\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     tensor([[<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>],[<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>],[<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>]]),\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     tensor([[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>],[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">2.0</span>],[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>]]),\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     tensor([[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>],[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">2.0</span>],[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">0.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>]])<span style=\"color:rgb(98,98,98)\">.</span>T,\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     tensor([[<span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">2.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>],[<span style=\"color:rgb(98,98,98)\">2.0</span>,<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">12</span>,<span style=\"color:rgb(98,98,98)\">2.0</span>],[<span style=\"color:rgb(98,98,98)\">1.0</span>,<span style=\"color:rgb(98,98,98)\">2.0</span>,<span style=\"color:rgb(98,98,98)\">1.0</span>]])\n<span class=\"ansi-green-fg ansi-bold\">      7</span> ])<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9e94b06e .cell execution_count=8}\n``` {.python .cell-code}\ndef perchannel_conv(x, filters):\n    '''filters: [filter_n, h, w]'''\n    b, ch, h, w = x.shape\n    y = x.reshape(b*ch, 1, h, w)\n    y = F.pad(y, [1, 1, 1, 1], 'circular') # << Note pad mode\n    y = F.conv2d(y, filters[:,None])\n    return y.reshape(b, -1, h, w)\n```\n:::\n\n\n::: {#612b12e0 .cell execution_count=9}\n``` {.python .cell-code}\nx = make_grids(1)\nmodel_inputs = perchannel_conv(x, filters)\nmodel_inputs.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> x <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">make_grids</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> model_inputs <span style=\"color:rgb(98,98,98)\">=</span> perchannel_conv(x, filters)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> model_inputs<span style=\"color:rgb(98,98,98)\">.</span>shape\n\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>, in <span class=\"ansi-cyan-fg\">make_grids</span><span class=\"ansi-blue-fg\">(n, sz)</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">make_grids</span>(n, sz<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">128</span>): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>zeros(n, num_channels, sz, sz)<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#81808ed1 .cell execution_count=10}\n``` {.python .cell-code}\n# Brain: linear layer style\nbrain = nn.Sequential(\n    nn.Linear(num_channels*4, hidden_n),\n    nn.ReLU(),\n    nn.Linear(hidden_n, num_channels, bias=False)\n).to(def_device)\nmodel_inputs_flat = einops.rearrange(model_inputs, 'b c h w -> (b h w) c') # (1*128*128, 16)\nbrain_preds = brain(model_inputs_flat).reshape(x.shape)\nbrain_preds.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Brain: linear layer style</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> brain <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(num_channels<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">4</span>, hidden_n),\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(),\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     nn<span style=\"color:rgb(98,98,98)\">.</span>Linear(hidden_n, num_channels, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n<span class=\"ansi-green-fg ansi-bold\">      7</span> model_inputs_flat <span style=\"color:rgb(98,98,98)\">=</span> einops<span style=\"color:rgb(98,98,98)\">.</span>rearrange(model_inputs, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">b c h w -&gt; (b h w) c</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># (1*128*128, 16)</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> brain_preds <span style=\"color:rgb(98,98,98)\">=</span> brain(model_inputs_flat)<span style=\"color:rgb(98,98,98)\">.</span>reshape(x<span style=\"color:rgb(98,98,98)\">.</span>shape)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ddaa4d5e .cell execution_count=11}\n``` {.python .cell-code}\n[p.shape for p in brain.parameters()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [p<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">brain</span><span style=\"color:rgb(98,98,98)\">.</span>parameters()]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'brain' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#47e95431 .cell execution_count=12}\n``` {.python .cell-code}\n# Brain: conv style\nbrain = nn.Sequential(\n    nn.Conv2d(num_channels*4, hidden_n, 1),\n    nn.ReLU(),\n    nn.Conv2d(hidden_n, num_channels, 1, bias=False)\n).to(def_device)\nbrain_preds = brain(model_inputs).reshape(x.shape)\nbrain_preds.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Brain: conv style</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> brain <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d(num_channels<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">4</span>, hidden_n, <span style=\"color:rgb(98,98,98)\">1</span>),\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     nn<span style=\"color:rgb(98,98,98)\">.</span>ReLU(),\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     nn<span style=\"color:rgb(98,98,98)\">.</span>Conv2d(hidden_n, num_channels, <span style=\"color:rgb(98,98,98)\">1</span>, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n<span class=\"ansi-green-fg ansi-bold\">      7</span> brain_preds <span style=\"color:rgb(98,98,98)\">=</span> brain(model_inputs)<span style=\"color:rgb(98,98,98)\">.</span>reshape(x<span style=\"color:rgb(98,98,98)\">.</span>shape)\n<span class=\"ansi-green-fg ansi-bold\">      8</span> brain_preds<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#075736d1 .cell execution_count=13}\n``` {.python .cell-code}\n[p.shape for p in brain.parameters()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [p<span style=\"color:rgb(98,98,98)\">.</span>shape <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">brain</span><span style=\"color:rgb(98,98,98)\">.</span>parameters()]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'brain' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nPutting this into a class, with a few extra features:\n- Random update: only update ~50% of the cells \n- to_rgb function to scale and show the first 3 channels as an RGB image\n- An option to zero out the weights of the second layer. Think: why is this useful?\n\n::: {#7d9ad576 .cell execution_count=14}\n``` {.python .cell-code}\nclass SimpleCA(nn.Module):\n    def __init__(self, zero_w2=True):\n        super().__init__()\n        self.w1 = nn.Conv2d(num_channels*4, hidden_n, 1)\n        self.relu = nn.ReLU()\n        self.w2 = nn.Conv2d(hidden_n, num_channels, 1, bias=False)\n        if zero_w2: self.w2.weight.data.zero_()\n\n\n    def forward(self, x, update_rate=0.5):\n        y = perchannel_conv(x, filters) # Apply the filters\n        y = self.w2(self.relu(self.w1(y))) # pass the result through our 'brain'\n        b, c, h, w = y.shape\n        update_mask = (torch.rand(b, 1, h, w).to(x.device)+update_rate).floor() # Random update\n        return x+y*update_mask\n\n    def to_rgb(self, x):\n        return x[...,:3,:,:]+0.5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">SimpleCA</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, zero_w2<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Training\n\n::: {#b2247da6 .cell execution_count=15}\n``` {.python .cell-code}\nclass LengthDataset():\n    def __init__(self, length=1): self.length=length\n    def __len__(self): return self.length\n    def __getitem__(self, idx): return 0,0\n\ndef get_dummy_dls(length=100):\n    return DataLoaders(DataLoader(LengthDataset(length), batch_size=1),\n                       DataLoader(LengthDataset(1), batch_size=1))\n```\n:::\n\n\n::: {#6864d9d3 .cell execution_count=16}\n``` {.python .cell-code}\nclass NCAProgressCB(ProgressCB):\n    def after_batch(self, learn):\n        learn.dl.comment = f'{learn.loss:.3f}'\n        if not (hasattr(learn, 'metrics') and learn.training): return \n        self.losses.append(learn.loss.item())\n        mbar = self.mbar\n        if not hasattr(mbar, 'graph_fig'):\n            mbar.graph_fig, mbar.graph_axs = plt.subplots(1, 2, figsize=(12, 3.5))\n            mbar.graph_out = display(mbar.graph_fig, display_id=True)\n\n        # Update preview image every 64 iters\n        if (len(self.losses))%64 != 10: return \n        \n        # Plot losses:\n        mbar.graph_axs[0].clear()\n        mbar.graph_axs[0].plot(self.losses, '.', alpha=0.3)\n        mbar.graph_axs[0].set_yscale('log')\n        mbar.graph_axs[0].set_ylim(tensor(self.losses).min(), self.losses[0])\n        \n        # Show preview images:\n        rgb = learn.model.to_rgb(learn.preds.detach()).clip(0, 1)\n        show_image(torchvision.utils.make_grid(rgb), ax=mbar.graph_axs[1])\n        \n        # Update graph\n        mbar.graph_out.update(mbar.graph_fig)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">NCAProgressCB</span>(<span class=\"ansi-yellow-bg\">ProgressCB</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">after_batch</span>(<span style=\"color:rgb(0,135,0)\">self</span>, learn):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         learn<span style=\"color:rgb(98,98,98)\">.</span>dl<span style=\"color:rgb(98,98,98)\">.</span>comment <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>learn<span style=\"color:rgb(98,98,98)\">.</span>loss<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.3f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ProgressCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f5a2d277 .cell execution_count=17}\n``` {.python .cell-code}\nclass NCACB(TrainCB):\n    order = DeviceCB.order+1\n    def __init__(self, ca, style_img_tensor, style_loss_scale=0.1, size=256, \n                 step_n_min=32, step_n_max=96, batch_size=4):\n        fc.store_attr()\n        with torch.no_grad(): self.pool = make_grids(256, sz=size) # Set up a 'pool' of grids\n    \n    def predict(self, learn): \n        \n        # Pick some random samples from the pool\n        batch_idx = torch.randint(0, len(self.pool), (self.batch_size,))\n        x = self.pool[batch_idx]\n        \n        # occasionally zero out some samples\n        if torch.randint(8, (1,)) < 1: \n            x[:1] =  make_grids(1, sz=self.size)\n        \n        # Apply the model a number of times\n        for _ in range(torch.randint(self.step_n_min, self.step_n_max, (1,))):\n            x = learn.model(x)\n        \n        # Update pool\n        with torch.no_grad(): self.pool[batch_idx] = x\n        \n        # and store preds\n        learn.preds = x\n        \n    def get_loss(self, learn): \n        style_loss = learn.loss_func(learn.model.to_rgb(self.learn.preds))\n        overflow_loss = (learn.preds-learn.preds.clamp(-1.0, 1.0)).abs().sum()\n        learn.loss = overflow_loss + style_loss*self.style_loss_scale\n        \n    def backward(self, learn):\n        learn.loss.backward()\n        # Gradient normalization:\n        for p in learn.model.parameters():\n            p.grad /= (p.grad.norm()+1e-8) \n        \n    def before_fit(self, learn): self.learn=learn \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">NCACB</span>(<span class=\"ansi-yellow-bg\">TrainCB</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     order <span style=\"color:rgb(98,98,98)\">=</span> DeviceCB<span style=\"color:rgb(98,98,98)\">.</span>order<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ca, style_img_tensor, style_loss_scale<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">256</span>, \n<span class=\"ansi-green-fg ansi-bold\">      4</span>                  step_n_min<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">32</span>, step_n_max<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">96</span>, batch_size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a5946461 .cell execution_count=18}\n``` {.python .cell-code}\nmodel = SimpleCA().to(def_device)\ncbs = [NCACB(model, style_im), NCAProgressCB(), MetricsCB()]\nstyle_loss = StyleLossToTarget(style_im)\n\nlearn = Learner(model, get_dummy_dls(1200), style_loss, lr=1e-3, cbs=cbs, opt_func=torch.optim.Adam)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">SimpleCA</span>()<span style=\"color:rgb(98,98,98)\">.</span>to(def_device)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [NCACB(model, style_im), NCAProgressCB(), MetricsCB()]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> style_loss <span style=\"color:rgb(98,98,98)\">=</span> StyleLossToTarget(style_im)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'SimpleCA' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b302f265 .cell execution_count=19}\n``` {.python .cell-code}\nlearn.fit(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#540946d8 .cell execution_count=20}\n``` {.python .cell-code}\n# Check out the final batch:\nrgb = model.to_rgb(learn.preds.detach())\nrgb = torchvision.utils.make_grid(rgb)\nshow_image(rgb.clip(0, 1));\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Check out the final batch:</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> rgb <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">model</span><span style=\"color:rgb(98,98,98)\">.</span>to_rgb(learn<span style=\"color:rgb(98,98,98)\">.</span>preds<span style=\"color:rgb(98,98,98)\">.</span>detach())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> rgb <span style=\"color:rgb(98,98,98)\">=</span> torchvision<span style=\"color:rgb(98,98,98)\">.</span>utils<span style=\"color:rgb(98,98,98)\">.</span>make_grid(rgb)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> show_image(rgb<span style=\"color:rgb(98,98,98)\">.</span>clip(<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>));\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9d5ac416 .cell execution_count=21}\n``` {.python .cell-code}\n# Apply a numbe of times to a random initial starting grid:\nimages = []\nx = torch.randn(1, num_channels, 128, 128).to(def_device) * 0.1\nfor i in range(900):\n    x = model(x)\n    if i%100==0: images.append(model.to_rgb(x)[0].clip(0, 1))\nshow_images(images)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Apply a numbe of times to a random initial starting grid:</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> images <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg\">----&gt; 3</span> x <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>randn(<span style=\"color:rgb(98,98,98)\">1</span>, num_channels, <span style=\"color:rgb(98,98,98)\">128</span>, <span style=\"color:rgb(98,98,98)\">128</span>)<span style=\"color:rgb(98,98,98)\">.</span>to(def_device) <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(98,98,98)\">0.1</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">900</span>):\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     x <span style=\"color:rgb(98,98,98)\">=</span> model(x)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b4f47578 .cell execution_count=22}\n``` {.python .cell-code}\nsum(p.numel() for p in model.parameters()) # !!\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">sum</span>(p<span style=\"color:rgb(98,98,98)\">.</span>numel() <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">model</span><span style=\"color:rgb(98,98,98)\">.</span>parameters()) <span style=\"font-style:italic;color:rgb(95,135,135)\"># !!</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "16B_NCA_files"
    ],
    "filters": [],
    "includes": {}
  }
}