{
  "hash": "bf3170e7bb8f4275a5df4ef4a7becd70",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Tiny Imagenet\njupyter: python3\nimage: cover.png\n---\n\n::: {#230d2f5a .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='2'\n```\n:::\n\n\n::: {#bacab283 .cell execution_count=2}\n``` {.python .cell-code}\nimport shutil,timm,os,torch,random,datasets,math\nimport fastcore.all as fc, numpy as np, matplotlib as mpl, matplotlib.pyplot as plt\nimport k_diffusion as K, torchvision.transforms as T\nimport torchvision.transforms.functional as TF,torch.nn.functional as F\n\nfrom torch.utils.data import DataLoader,default_collate\nfrom pathlib import Path\nfrom torch.nn import init\nfrom fastcore.foundation import L\nfrom torch import nn,tensor\nfrom operator import itemgetter\nfrom torcheval.metrics import MulticlassAccuracy\nfrom functools import partial\nfrom torch.optim import lr_scheduler\nfrom torch import optim\nfrom torchvision.io import read_image,ImageReadMode\nfrom glob import glob\n\nfrom miniai.datasets import *\nfrom miniai.conv import *\nfrom miniai.learner import *\nfrom miniai.activations import *\nfrom miniai.init import *\nfrom miniai.sgd import *\nfrom miniai.resnet import *\nfrom miniai.augment import *\nfrom miniai.accel import *\nfrom miniai.training import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">shutil</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">timm</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">os</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">k_diffusion</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">K</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">T</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/timm/__init__.py:2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">version</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> __version__\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">layers</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> is_scriptable, is_exportable, set_scriptable, set_exportable\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">models</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> create_model, list_models, list_pretrained, is_model, list_modules, model_entrypoint, \\\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     is_model_pretrained, get_pretrained_cfg, get_pretrained_cfg_value\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/timm/layers/__init__.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">activations</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">adaptive_avgmax_pool</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> \\\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     adaptive_avgmax_pool2d, select_adaptive_pool2d, AdaptiveAvgMaxPool2d, SelectAdaptivePool2d\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">attention2d</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MultiQueryAttention2d, Attention2d, MultiQueryAttentionV2\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/timm/layers/activations.py:9</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\" Activations</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">A collection of activations fn and modules with a common interface so that they can</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">Hacked together by / Copyright 2020 Ross Wightman</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg\">----&gt; 9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nn <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> nn\n<span class=\"ansi-green-fg ansi-bold\">     11</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> functional <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> F\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f1f104e9 .cell execution_count=3}\n``` {.python .cell-code}\nfrom fastprogress import progress_bar\n```\n:::\n\n\n::: {#ee5afa81 .cell execution_count=4}\n``` {.python .cell-code}\ntorch.set_printoptions(precision=5, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['figure.dpi'] = 70\n\nset_seed(42)\nif fc.defaults.cpus>8: fc.defaults.cpus=8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">figure.dpi</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">70</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#35e4df3e .cell execution_count=5}\n``` {.python .cell-code}\npath_data = Path('data')\npath_data.mkdir(exist_ok=True)\npath = path_data/'tiny-imagenet-200'\n\nurl = 'http://cs231n.stanford.edu/tiny-imagenet-200.zip'\nif not path.exists():\n    path_zip = fc.urlsave(url, path_data)\n    shutil.unpack_archive('data/tiny-imagenet-200.zip', 'data')\n\nbs = 512\n\nclass TinyDS:\n    def __init__(self, path):\n        self.path = Path(path)\n        self.files = glob(str(path/'**/*.JPEG'), recursive=True)\n    def __len__(self): return len(self.files)\n    def __getitem__(self, i): return self.files[i],Path(self.files[i]).parent.parent.name\n\ntds = TinyDS(path/'train')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> path_data <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Path</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> path_data<span style=\"color:rgb(98,98,98)\">.</span>mkdir(exist_ok<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> path <span style=\"color:rgb(98,98,98)\">=</span> path_data<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">tiny-imagenet-200</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#60d573ad .cell execution_count=6}\n``` {.python .cell-code}\npath_anno = path/'val'/'val_annotations.txt'\nanno = dict(o.split('\\t')[:2] for o in path_anno.read_text().splitlines())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> path_anno <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">path</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">val</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">val_annotations.txt</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> anno <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">dict</span>(o<span style=\"color:rgb(98,98,98)\">.</span>split(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\t</span><span style=\"color:rgb(175,0,0)\">'</span>)[:<span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> path_anno<span style=\"color:rgb(98,98,98)\">.</span>read_text()<span style=\"color:rgb(98,98,98)\">.</span>splitlines())\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#083a152a .cell execution_count=7}\n``` {.python .cell-code}\nclass TinyValDS(TinyDS):\n    def __getitem__(self, i): return self.files[i],anno[os.path.basename(self.files[i])]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TinyValDS</span>(<span class=\"ansi-yellow-bg\">TinyDS</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__getitem__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, i): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>files[i],anno[os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>basename(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>files[i])]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TinyDS' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b91fc317 .cell execution_count=8}\n``` {.python .cell-code}\nvds = TinyValDS(path/'val')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> vds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TinyValDS</span>(path<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">val</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TinyValDS' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#791a9bec .cell execution_count=9}\n``` {.python .cell-code}\nclass TfmDS:\n    def __init__(self, ds, tfmx=fc.noop, tfmy=fc.noop): self.ds,self.tfmx,self.tfmy = ds,tfmx,tfmy\n    def __len__(self): return len(self.ds)\n    def __getitem__(self, i):\n        x,y = self.ds[i]\n        return self.tfmx(x),self.tfmy(y)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TfmDS</span>:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ds, tfmx<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop, tfmy<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmx,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmy <span style=\"color:rgb(98,98,98)\">=</span> ds,tfmx,tfmy\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__len__</span>(<span style=\"color:rgb(0,135,0)\">self</span>): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds)\n\nCell <span class=\"ansi-green-fg\">In[9], line 2</span>, in <span class=\"ansi-cyan-fg\">TfmDS</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TfmDS</span>:\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ds, tfmx<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>noop, tfmy<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmx,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmy <span style=\"color:rgb(98,98,98)\">=</span> ds,tfmx,tfmy\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__len__</span>(<span style=\"color:rgb(0,135,0)\">self</span>): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__getitem__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, i):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fe017485 .cell execution_count=10}\n``` {.python .cell-code}\nid2str = (path/'wnids.txt').read_text().splitlines()\nstr2id = {v:k for k,v in enumerate(id2str)}\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> id2str <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">path</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">wnids.txt</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>read_text()<span style=\"color:rgb(98,98,98)\">.</span>splitlines()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> str2id <span style=\"color:rgb(98,98,98)\">=</span> {v:k <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> k,v <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">enumerate</span>(id2str)}\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f66006b5 .cell execution_count=11}\n``` {.python .cell-code}\nxmean,xstd = (tensor([0.47565, 0.40303, 0.31555]), tensor([0.28858, 0.24402, 0.26615]))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xmean,xstd <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">tensor</span>([<span style=\"color:rgb(98,98,98)\">0.47565</span>, <span style=\"color:rgb(98,98,98)\">0.40303</span>, <span style=\"color:rgb(98,98,98)\">0.31555</span>]), tensor([<span style=\"color:rgb(98,98,98)\">0.28858</span>, <span style=\"color:rgb(98,98,98)\">0.24402</span>, <span style=\"color:rgb(98,98,98)\">0.26615</span>]))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tensor' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3d8d1a70 .cell execution_count=12}\n``` {.python .cell-code}\ndef tfmx(x):\n    img = read_image(x, mode=ImageReadMode.RGB)/255\n    return (img-xmean[:,None,None])/xstd[:,None,None]\n\ndef tfmy(y): return tensor(str2id[y])\n\ntfm_tds = TfmDS(tds, tfmx, tfmy)\ntfm_vds = TfmDS(vds, tfmx, tfmy)\n\ndef denorm(x): return (x*xstd[:,None,None]+xmean[:,None,None]).clip(0,1)\n\nall_synsets = [o.split('\\t') for o in (path/'words.txt').read_text().splitlines()]\nsynsets = {k:v.split(',', maxsplit=1)[0] for k,v in all_synsets if k in id2str}\n\ndls = DataLoaders(*get_dls(tfm_tds, tfm_vds, bs=bs, num_workers=8))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 7</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (img<span style=\"color:rgb(98,98,98)\">-</span>xmean[:,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>])<span style=\"color:rgb(98,98,98)\">/</span>xstd[:,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>]\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">tfmy</span>(y): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> tensor(str2id[y])\n<span class=\"ansi-green-fg\">----&gt; 7</span> tfm_tds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TfmDS</span>(tds, tfmx, tfmy)\n<span class=\"ansi-green-fg ansi-bold\">      8</span> tfm_vds <span style=\"color:rgb(98,98,98)\">=</span> TfmDS(vds, tfmx, tfmy)\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">denorm</span>(x): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (x<span style=\"color:rgb(98,98,98)\">*</span>xstd[:,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>]<span style=\"color:rgb(98,98,98)\">+</span>xmean[:,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>])<span style=\"color:rgb(98,98,98)\">.</span>clip(<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TfmDS' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#873e9bbe .cell execution_count=13}\n``` {.python .cell-code}\ndef tfm_batch(b, tfm_x=fc.noop, tfm_y = fc.noop): return tfm_x(b[0]),tfm_y(b[1])\n\ntfms = nn.Sequential(T.Pad(4), T.RandomCrop(64),\n                     T.RandomHorizontalFlip(),\n                     RandErase())\naugcb = BatchTransformCB(partial(tfm_batch, tfm_x=tfms), on_val=False)\n\nact_gr = partial(GeneralRelu, leak=0.1, sub=0.4)\niw = partial(init_weights, leaky=0.1)\n\nnfs = (32,64,128,256,512,1024)\n\ndef get_dropmodel(act=act_gr, nfs=nfs, norm=nn.BatchNorm2d, drop=0.1):\n    layers = [nn.Conv2d(3, nfs[0], 5, padding=2)]\n#     layers += [ResBlock(nfs[0], nfs[0], ks=3, stride=1, act=act, norm=norm)]\n    layers += [ResBlock(nfs[i], nfs[i+1], act=act, norm=norm, stride=2)\n               for i in range(len(nfs)-1)]\n    layers += [nn.AdaptiveAvgPool2d(1), nn.Flatten(), nn.Dropout(drop)]\n    layers += [nn.Linear(nfs[-1], 200, bias=False), nn.BatchNorm1d(200)]\n    return nn.Sequential(*layers).apply(iw)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">tfm_batch</span>(b, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop, tfm_y <span style=\"color:rgb(98,98,98)\">=</span> fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> tfm_x(b[<span style=\"color:rgb(98,98,98)\">0</span>]),tfm_y(b[<span style=\"color:rgb(98,98,98)\">1</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> tfms <span style=\"color:rgb(98,98,98)\">=</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(T<span style=\"color:rgb(98,98,98)\">.</span>Pad(<span style=\"color:rgb(98,98,98)\">4</span>), T<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">64</span>),\n<span class=\"ansi-green-fg ansi-bold\">      4</span>                      T<span style=\"color:rgb(98,98,98)\">.</span>RandomHorizontalFlip(),\n<span class=\"ansi-green-fg ansi-bold\">      5</span>                      RandErase())\n<span class=\"ansi-green-fg ansi-bold\">      6</span> augcb <span style=\"color:rgb(98,98,98)\">=</span> BatchTransformCB(partial(tfm_batch, tfm_x<span style=\"color:rgb(98,98,98)\">=</span>tfms), on_val<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dfb8ec1d .cell execution_count=14}\n``` {.python .cell-code}\ndef res_blocks(n_bk, ni, nf, stride=1, ks=3, act=act_gr, norm=None):\n    return nn.Sequential(*[\n        ResBlock(ni if i==0 else nf, nf, stride=stride if i==n_bk-1 else 1, ks=ks, act=act, norm=norm)\n        for i in range(n_bk)])\n\nnbks = (3,2,2,1,1)\n\ndef get_dropmodel(act=act_gr, nfs=nfs, nbks=nbks, norm=nn.BatchNorm2d, drop=0.2):\n    layers = [ResBlock(3, nfs[0], ks=5, stride=1, act=act, norm=norm)]\n    layers += [res_blocks(nbks[i], nfs[i], nfs[i+1], act=act, norm=norm, stride=2)\n               for i in range(len(nfs)-1)]\n    layers += [nn.AdaptiveAvgPool2d(1), nn.Flatten(), nn.Dropout(drop)]\n    layers += [nn.Linear(nfs[-1], 200, bias=False), nn.BatchNorm1d(200)]\n    return nn.Sequential(*layers).apply(iw)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">res_blocks</span>(n_bk, ni, nf, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">act_gr</span>, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> nn<span style=\"color:rgb(98,98,98)\">.</span>Sequential(<span style=\"color:rgb(98,98,98)\">*</span>[\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         ResBlock(ni <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> i<span style=\"color:rgb(98,98,98)\">==</span><span style=\"color:rgb(98,98,98)\">0</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> nf, nf, stride<span style=\"color:rgb(98,98,98)\">=</span>stride <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> i<span style=\"color:rgb(98,98,98)\">==</span>n_bk<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> <span style=\"color:rgb(98,98,98)\">1</span>, ks<span style=\"color:rgb(98,98,98)\">=</span>ks, act<span style=\"color:rgb(98,98,98)\">=</span>act, norm<span style=\"color:rgb(98,98,98)\">=</span>norm)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(n_bk)])\n<span class=\"ansi-green-fg ansi-bold\">      6</span> nbks <span style=\"color:rgb(98,98,98)\">=</span> (<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'act_gr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c42fa7de .cell execution_count=15}\n``` {.python .cell-code}\nopt_func = partial(optim.AdamW, eps=1e-5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#85ac4bba .cell execution_count=16}\n``` {.python .cell-code}\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True), MixedPrecision()]\n\nepochs = 25\nlr = 3e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched), augcb]\nlearn = Learner(get_dropmodel(), dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> metrics <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">MetricsCB</span>(accuracy<span style=\"color:rgb(98,98,98)\">=</span>MulticlassAccuracy())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), metrics, ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), MixedPrecision()]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">25</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'MetricsCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#21b37a95 .cell execution_count=17}\n``` {.python .cell-code}\naug_tfms = nn.Sequential(T.Pad(4), T.RandomCrop(64),\n                     T.RandomHorizontalFlip(),\n                     T.TrivialAugmentWide())\n\nnorm_tfm = T.Normalize(xmean, xstd)\nerase_tfm = RandErase()\n\nfrom PIL import Image\n\ndef tfmx(x, aug=False):\n    x = Image.open(x).convert('RGB')\n    if aug: x = aug_tfms(x)\n    x = TF.to_tensor(x)\n    x = norm_tfm(x)\n    if aug: x = erase_tfm(x[None])[0]\n    return x\n\ntfm_tds = TfmDS(tds, partial(tfmx, aug=True), tfmy)\ntfm_vds = TfmDS(vds, tfmx, tfmy)\n\ndls = DataLoaders(*get_dls(tfm_tds, tfm_vds, bs=bs, num_workers=8))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> aug_tfms <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(T<span style=\"color:rgb(98,98,98)\">.</span>Pad(<span style=\"color:rgb(98,98,98)\">4</span>), T<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">64</span>),\n<span class=\"ansi-green-fg ansi-bold\">      2</span>                      T<span style=\"color:rgb(98,98,98)\">.</span>RandomHorizontalFlip(),\n<span class=\"ansi-green-fg ansi-bold\">      3</span>                      T<span style=\"color:rgb(98,98,98)\">.</span>TrivialAugmentWide())\n<span class=\"ansi-green-fg ansi-bold\">      5</span> norm_tfm <span style=\"color:rgb(98,98,98)\">=</span> T<span style=\"color:rgb(98,98,98)\">.</span>Normalize(xmean, xstd)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> erase_tfm <span style=\"color:rgb(98,98,98)\">=</span> RandErase()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#744b8f43 .cell execution_count=18}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, stride=1, act=nn.ReLU, norm=None, bias=True):\n    layers = []\n    if norm: layers.append(norm(ni))\n    if act : layers.append(act())\n    layers.append(nn.Conv2d(ni, nf, stride=stride, kernel_size=ks, padding=ks//2, bias=bias))\n    return nn.Sequential(*layers)\n\ndef _conv_block(ni, nf, stride, act=act_gr, norm=None, ks=3):\n    return nn.Sequential(conv(ni, nf, stride=1     , act=act, norm=norm, ks=ks),\n                         conv(nf, nf, stride=stride, act=act, norm=norm, ks=ks))\n\nclass ResBlock(nn.Module):\n    def __init__(self, ni, nf, stride=1, ks=3, act=act_gr, norm=None):\n        super().__init__()\n        self.convs = _conv_block(ni, nf, stride, act=act, ks=ks, norm=norm)\n        self.idconv = fc.noop if ni==nf else conv(ni, nf, ks=1, stride=1, act=None, norm=norm)\n        self.pool = fc.noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)\n\n    def forward(self, x): return self.convs(x) + self.idconv(self.pool(x))\n\ndef get_dropmodel(act=act_gr, nfs=nfs, nbks=nbks, norm=nn.BatchNorm2d, drop=0.2):\n    layers = [nn.Conv2d(3, nfs[0], 5, padding=2)]\n    layers += [res_blocks(nbks[i], nfs[i], nfs[i+1], act=act, norm=norm, stride=2)\n               for i in range(len(nfs)-1)]\n    layers += [act_gr(), norm(nfs[-1]), nn.AdaptiveAvgPool2d(1), nn.Flatten(), nn.Dropout(drop)]\n    layers += [nn.Linear(nfs[-1], 200, bias=False), nn.BatchNorm1d(200)]\n    return nn.Sequential(*layers).apply(iw)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">conv</span>(ni, nf, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> norm: layers<span style=\"color:rgb(98,98,98)\">.</span>append(norm(ni))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4a6f76f9 .cell execution_count=19}\n``` {.python .cell-code}\nepochs = 50\nlr = 0.1\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nmodel = get_dropmodel(nbks=(1,2,8,2,2), nfs=(32, 64, 128, 512, 1024, 1536), drop=0.1)\nlearn = Learner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">50</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.1</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> xtra <span style=\"color:rgb(98,98,98)\">=</span> [BatchSchedCB(sched)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4abd181b .cell execution_count=20}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f44253d7 .cell execution_count=21}\n``` {.python .cell-code}\ntorch.save(learn.model, 'models/inettiny-wide-50')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>save(learn<span style=\"color:rgb(98,98,98)\">.</span>model, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models/inettiny-wide-50</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### fin -\n\n",
    "supporting": [
      "24_imgnet_tiny-wide_files"
    ],
    "filters": [],
    "includes": {}
  }
}