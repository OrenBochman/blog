{
  "hash": "267d9b69945a48f98921bdb58bffe9f5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Full Imagenet\njupyter: python3\nimage: cover.png\n---\n\n::: {#39c84e1e .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='0'\nos.environ['OMP_NUM_THREADS']='1'\n```\n:::\n\n\n::: {#cf60b751 .cell execution_count=2}\n``` {.python .cell-code}\nimport pickle,gzip\n\nfrom glob import glob\nfrom torcheval.metrics import MulticlassAccuracy\n\nfrom miniai.imports import *\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pickle</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gzip</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">glob</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> glob\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MulticlassAccuracy\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">imports</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/__init__.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> functional\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> AUC, Cat, Max, Mean, Min, Sum, Throughput\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">audio</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> FrechetAudioDistance\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/functional/__init__.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> auc, mean, <span style=\"color:rgb(0,135,0)\">sum</span>, throughput\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">classification</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     binary_accuracy,\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     binary_auprc,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     39</span>     topk_multilabel_accuracy,\n<span class=\"ansi-green-fg ansi-bold\">     40</span> )\n<span class=\"ansi-green-fg ansi-bold\">     41</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">image</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> peak_signal_noise_ratio\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/functional/aggregation/__init__.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">auc</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> auc\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">mean</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> mean\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torcheval</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">aggregation</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">sum</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(0,135,0)\">sum</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torcheval/metrics/functional/aggregation/auc.py:7</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright (c) Meta Platforms, Inc. and affiliates.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># All rights reserved.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This source code is licensed under the BSD-style license found in the</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># LICENSE file in the root directory of this source tree.</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_auc_compute</span>(\n<span class=\"ansi-green-fg ansi-bold\">     11</span>     x: torch<span style=\"color:rgb(98,98,98)\">.</span>Tensor, y: torch<span style=\"color:rgb(98,98,98)\">.</span>Tensor, reorder: <span style=\"color:rgb(0,135,0)\">bool</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> ) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> torch<span style=\"color:rgb(98,98,98)\">.</span>Tensor:\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Computes area under the curve using the trapezoidal rule.</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    Args:</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        x: x-coordinates,</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        Tensor containing AUC score (float)</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    \"\"\"</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#55cc7dc4 .cell execution_count=3}\n``` {.python .cell-code}\nfrom fastprogress import progress_bar\nfrom diffusers import AutoencoderKL\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastprogress</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> progress_bar\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">diffusers</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> AutoencoderKL\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/diffusers/__init__.py:5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> __version__ <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">0.32.1</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">typing</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> TYPE_CHECKING\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     DIFFUSERS_SLOW_IMPORT,\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     OptionalDependencyNotAvailable,\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     _LazyModule,\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     is_flax_available,\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     is_k_diffusion_available,\n<span class=\"ansi-green-fg ansi-bold\">     11</span>     is_librosa_available,\n<span class=\"ansi-green-fg ansi-bold\">     12</span>     is_note_seq_available,\n<span class=\"ansi-green-fg ansi-bold\">     13</span>     is_onnx_available,\n<span class=\"ansi-green-fg ansi-bold\">     14</span>     is_scipy_available,\n<span class=\"ansi-green-fg ansi-bold\">     15</span>     is_sentencepiece_available,\n<span class=\"ansi-green-fg ansi-bold\">     16</span>     is_torch_available,\n<span class=\"ansi-green-fg ansi-bold\">     17</span>     is_torchsde_available,\n<span class=\"ansi-green-fg ansi-bold\">     18</span>     is_transformers_available,\n<span class=\"ansi-green-fg ansi-bold\">     19</span> )\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Lazy Import based on</span>\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># https://github.com/huggingface/transformers/blob/main/src/transformers/__init__.py</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> \n<span class=\"ansi-green-fg ansi-bold\">     25</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># When adding a new object to this init, please add it to `_import_structure`. The `_import_structure` is a dictionary submodule to list of object names,</span>\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># and is used to defer the actual importing for when the objects are requested.</span>\n<span class=\"ansi-green-fg ansi-bold\">     27</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This way `import diffusers` provides the names in the namespace without actually importing anything (and especially none of the backends).</span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span> _import_structure <span style=\"color:rgb(98,98,98)\">=</span> {\n<span class=\"ansi-green-fg ansi-bold\">     30</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">configuration_utils</span><span style=\"color:rgb(175,0,0)\">\"</span>: [<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">ConfigMixin</span><span style=\"color:rgb(175,0,0)\">\"</span>],\n<span class=\"ansi-green-fg ansi-bold\">     31</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">loaders</span><span style=\"color:rgb(175,0,0)\">\"</span>: [<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">FromOriginalModelMixin</span><span style=\"color:rgb(175,0,0)\">\"</span>],\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     53</span>     ],\n<span class=\"ansi-green-fg ansi-bold\">     54</span> }\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/diffusers/utils/__init__.py:106</span>\n<span class=\"ansi-green-fg ansi-bold\">    104</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">logging</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> get_logger\n<span class=\"ansi-green-fg ansi-bold\">    105</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">outputs</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> BaseOutput\n<span class=\"ansi-green-fg\">--&gt; 106</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">peft_utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">    107</span>     check_peft_version,\n<span class=\"ansi-green-fg ansi-bold\">    108</span>     delete_adapter_layers,\n<span class=\"ansi-green-fg ansi-bold\">    109</span>     get_adapter_name,\n<span class=\"ansi-green-fg ansi-bold\">    110</span>     get_peft_kwargs,\n<span class=\"ansi-green-fg ansi-bold\">    111</span>     recurse_remove_peft_layers,\n<span class=\"ansi-green-fg ansi-bold\">    112</span>     scale_lora_layers,\n<span class=\"ansi-green-fg ansi-bold\">    113</span>     set_adapter_layers,\n<span class=\"ansi-green-fg ansi-bold\">    114</span>     set_weights_and_activate_adapters,\n<span class=\"ansi-green-fg ansi-bold\">    115</span>     unscale_lora_layers,\n<span class=\"ansi-green-fg ansi-bold\">    116</span> )\n<span class=\"ansi-green-fg ansi-bold\">    117</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pil_utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> PIL_INTERPOLATION, make_image_grid, numpy_to_pil, pt_to_pil\n<span class=\"ansi-green-fg ansi-bold\">    118</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">state_dict_utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">    119</span>     convert_all_state_dict_to_peft,\n<span class=\"ansi-green-fg ansi-bold\">    120</span>     convert_state_dict_to_diffusers,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    123</span>     convert_unet_state_dict_to_peft,\n<span class=\"ansi-green-fg ansi-bold\">    124</span> )\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/diffusers/utils/peft_utils.py:28</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">import_utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> is_peft_available, is_torch_available\n<span class=\"ansi-green-fg ansi-bold\">     27</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> is_torch_available():\n<span class=\"ansi-green-fg\">---&gt; 28</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span>\n<span class=\"ansi-green-fg ansi-bold\">     31</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">recurse_remove_peft_layers</span>(model):\n<span class=\"ansi-green-fg ansi-bold\">     32</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"color:rgb(175,0,0)\">r</span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     33</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    Recursively replace all instances of `LoraLayer` with corresponding new layers in `model`.</span>\n<span class=\"ansi-green-fg ansi-bold\">     34</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    \"\"\"</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9f3da6b1 .cell execution_count=4}\n``` {.python .cell-code}\ntorch.set_printoptions(precision=5, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['figure.dpi'] = 70\n\nset_seed(42)\nif fc.defaults.cpus>8: fc.defaults.cpus=8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">figure.dpi</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">70</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#685a8090 .cell execution_count=5}\n``` {.python .cell-code}\npath_data = Path('data')/'ILSVRC'\npath = path_data/'Data'/'CLS-LOC'\n\ndest = path_data/'latents'\ndest.mkdir(exist_ok=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> path_data <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Path</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ILSVRC</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> path <span style=\"color:rgb(98,98,98)\">=</span> path_data<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Data</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">CLS-LOC</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> dest <span style=\"color:rgb(98,98,98)\">=</span> path_data<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">latents</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#31a4b726 .cell execution_count=6}\n``` {.python .cell-code}\nvae = AutoencoderKL.from_pretrained(\"stabilityai/sd-vae-ft-ema\").cuda().requires_grad_(False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> vae <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">AutoencoderKL</span><span style=\"color:rgb(98,98,98)\">.</span>from_pretrained(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">stabilityai/sd-vae-ft-ema</span><span style=\"color:rgb(175,0,0)\">\"</span>)<span style=\"color:rgb(98,98,98)\">.</span>cuda()<span style=\"color:rgb(98,98,98)\">.</span>requires_grad_(<span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'AutoencoderKL' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#018b8939 .cell execution_count=7}\n``` {.python .cell-code}\nclass ImagesDS:\n    def __init__(self, path, spec):\n        cache = path/'files.zpkl'\n        if cache.exists():\n            with gzip.open(cache) as f: self.files = pickle.load(f)\n        else:\n            self.files = glob(str(path/spec), recursive=True)\n            with gzip.open(cache, 'wb', compresslevel=1) as f: pickle.dump(self.files, f)\n\n    def __len__(self): return len(self.files)\n\n    def __getitem__(self, i):\n        f = self.files[i]\n        im = read_image(f, mode=ImageReadMode.RGB)/255\n        im = TF.resize(TF.center_crop(im, min(im.shape[1:])), 256)\n        return im,f\n```\n:::\n\n\n::: {#9bfd0ff5 .cell execution_count=8}\n``` {.python .cell-code}\nds = ImagesDS(path, '**/*.JPEG')\ndl = DataLoader(ds, batch_size=64, num_workers=fc.defaults.cpus)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ds <span style=\"color:rgb(98,98,98)\">=</span> ImagesDS(<span class=\"ansi-yellow-bg\">path</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">**/*.JPEG</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> dl <span style=\"color:rgb(98,98,98)\">=</span> DataLoader(ds, batch_size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">64</span>, num_workers<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>defaults<span style=\"color:rgb(98,98,98)\">.</span>cpus)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5d494d1d .cell execution_count=9}\n``` {.python .cell-code}\nxb,yb = next(iter(dl))\nxe = vae.encode(xb.cuda())\nxs = xe.latent_dist.mean\nxs.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dl</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xe <span style=\"color:rgb(98,98,98)\">=</span> vae<span style=\"color:rgb(98,98,98)\">.</span>encode(xb<span style=\"color:rgb(98,98,98)\">.</span>cuda())\n<span class=\"ansi-green-fg ansi-bold\">      3</span> xs <span style=\"color:rgb(98,98,98)\">=</span> xe<span style=\"color:rgb(98,98,98)\">.</span>latent_dist<span style=\"color:rgb(98,98,98)\">.</span>mean\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#92be84c1 .cell execution_count=10}\n``` {.python .cell-code}\nshow_images(((xs[:16,:3])/4).sigmoid(), imsize=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(((xs[:<span style=\"color:rgb(98,98,98)\">16</span>,:<span style=\"color:rgb(98,98,98)\">3</span>])<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(98,98,98)\">4</span>)<span style=\"color:rgb(98,98,98)\">.</span>sigmoid(), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8fd8e4e5 .cell execution_count=11}\n``` {.python .cell-code}\nxd = to_cpu(vae.decode(xs))\nshow_images(xd['sample'][:16].clamp(0,1), imsize=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">to_cpu</span>(vae<span style=\"color:rgb(98,98,98)\">.</span>decode(xs))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_images(xd[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sample</span><span style=\"color:rgb(175,0,0)\">'</span>][:<span style=\"color:rgb(98,98,98)\">16</span>]<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'to_cpu' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#978edc08 .cell execution_count=12}\n``` {.python .cell-code}\nif not dest.exists():\n    dest.mkdir()\n    for xb,yb in progress_bar(dl):\n        eb = to_cpu(vae.encode(xb.cuda()).latent_dist.mean).numpy()\n        for ebi,ybi in zip(eb,yb):\n            ybi = dest/Path(ybi).relative_to(path).with_suffix('')\n            (ybi.parent).mkdir(parents=True, exist_ok=True)\n            np.save(ybi, ebi)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span class=\"ansi-yellow-bg\">dest</span><span style=\"color:rgb(98,98,98)\">.</span>exists():\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     dest<span style=\"color:rgb(98,98,98)\">.</span>mkdir()\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> xb,yb <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> progress_bar(dl):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dest' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#44ca5420 .cell execution_count=13}\n``` {.python .cell-code}\nclass NumpyDS(ImagesDS):\n    def __getitem__(self, i):\n        f = self.files[i]\n        im = np.load(f)\n        return im,f\n```\n:::\n\n\n::: {#a21ffe96 .cell execution_count=14}\n``` {.python .cell-code}\nbs = 128\n```\n:::\n\n\n::: {#d828a4ef .cell execution_count=15}\n``` {.python .cell-code}\ntds = NumpyDS(dest/'train', '**/*.npy')\nvds = NumpyDS(dest/'val', '**/*.npy')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tds <span style=\"color:rgb(98,98,98)\">=</span> NumpyDS(<span class=\"ansi-yellow-bg\">dest</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">train</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">**/*.npy</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> vds <span style=\"color:rgb(98,98,98)\">=</span> NumpyDS(dest<span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">val</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">**/*.npy</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dest' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#69245167 .cell execution_count=16}\n``` {.python .cell-code}\ntdl = DataLoader(tds, batch_size=bs, num_workers=0)\nxb,yb = next(iter(tdl))\nxb.mean((0,2,3)),xb.std((0,2,3))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tdl <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">DataLoader</span>(tds, batch_size<span style=\"color:rgb(98,98,98)\">=</span>bs, num_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(tdl))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> xb<span style=\"color:rgb(98,98,98)\">.</span>mean((<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">3</span>)),xb<span style=\"color:rgb(98,98,98)\">.</span>std((<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">3</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DataLoader' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5d07a8e1 .cell execution_count=17}\n``` {.python .cell-code}\nxmean,xstd = (tensor([ 5.37007,  2.65468,  0.44876, -2.39154]),\n tensor([3.99512, 4.44317, 3.21629, 3.10339]))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xmean,xstd <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">tensor</span>([ <span style=\"color:rgb(98,98,98)\">5.37007</span>,  <span style=\"color:rgb(98,98,98)\">2.65468</span>,  <span style=\"color:rgb(98,98,98)\">0.44876</span>, <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2.39154</span>]),\n<span class=\"ansi-green-fg ansi-bold\">      2</span>  tensor([<span style=\"color:rgb(98,98,98)\">3.99512</span>, <span style=\"color:rgb(98,98,98)\">4.44317</span>, <span style=\"color:rgb(98,98,98)\">3.21629</span>, <span style=\"color:rgb(98,98,98)\">3.10339</span>]))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tensor' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fa37bc10 .cell execution_count=18}\n``` {.python .cell-code}\nclass TfmDS:\n    def __init__(self, ds, tfmx=fc.noop, tfmy=fc.noop): self.ds,self.tfmx,self.tfmy = ds,tfmx,tfmy\n    def __len__(self): return len(self.ds)\n    def __getitem__(self, i):\n        x,y = self.ds[i]\n        return self.tfmx(x),self.tfmy(y)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TfmDS</span>:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ds, tfmx<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop, tfmy<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmx,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmy <span style=\"color:rgb(98,98,98)\">=</span> ds,tfmx,tfmy\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__len__</span>(<span style=\"color:rgb(0,135,0)\">self</span>): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds)\n\nCell <span class=\"ansi-green-fg\">In[18], line 2</span>, in <span class=\"ansi-cyan-fg\">TfmDS</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TfmDS</span>:\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, ds, tfmx<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">fc</span><span style=\"color:rgb(98,98,98)\">.</span>noop, tfmy<span style=\"color:rgb(98,98,98)\">=</span>fc<span style=\"color:rgb(98,98,98)\">.</span>noop): <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmx,<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tfmy <span style=\"color:rgb(98,98,98)\">=</span> ds,tfmx,tfmy\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__len__</span>(<span style=\"color:rgb(0,135,0)\">self</span>): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ds)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__getitem__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, i):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'fc' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2986e7e2 .cell execution_count=19}\n``` {.python .cell-code}\nid2str = (path_data/'imagenet_lsvrc_2015_synsets.txt').read_text().splitlines()\nstr2id = {v:k for k,v in enumerate(id2str)}\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> id2str <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">path_data</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">imagenet_lsvrc_2015_synsets.txt</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>read_text()<span style=\"color:rgb(98,98,98)\">.</span>splitlines()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> str2id <span style=\"color:rgb(98,98,98)\">=</span> {v:k <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> k,v <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">enumerate</span>(id2str)}\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path_data' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1dabb76c .cell execution_count=20}\n``` {.python .cell-code}\naug_tfms = nn.Sequential(T.Pad(2), T.RandomCrop(32), RandErase())\nnorm_tfm = T.Normalize(xmean, xstd)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> aug_tfms <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Sequential(T<span style=\"color:rgb(98,98,98)\">.</span>Pad(<span style=\"color:rgb(98,98,98)\">2</span>), T<span style=\"color:rgb(98,98,98)\">.</span>RandomCrop(<span style=\"color:rgb(98,98,98)\">32</span>), RandErase())\n<span class=\"ansi-green-fg ansi-bold\">      2</span> norm_tfm <span style=\"color:rgb(98,98,98)\">=</span> T<span style=\"color:rgb(98,98,98)\">.</span>Normalize(xmean, xstd)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9ec2bdf3 .cell execution_count=21}\n``` {.python .cell-code}\ndef tfmx(x, aug=False):\n    x = norm_tfm(tensor(x))\n    if aug: x = aug_tfms(x[None])[0]\n    return x\n\ndef tfmy(y): return tensor(str2id[Path(y).parent.name])\n\ntfm_tds = TfmDS(tds, partial(tfmx, aug=True), tfmy)\ntfm_vds = TfmDS(vds, tfmx, tfmy)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">tfmy</span>(y): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> tensor(str2id[Path(y)<span style=\"color:rgb(98,98,98)\">.</span>parent<span style=\"color:rgb(98,98,98)\">.</span>name])\n<span class=\"ansi-green-fg\">----&gt; 8</span> tfm_tds <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TfmDS</span>(tds, partial(tfmx, aug<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), tfmy)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> tfm_vds <span style=\"color:rgb(98,98,98)\">=</span> TfmDS(vds, tfmx, tfmy)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TfmDS' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#622af7b2 .cell execution_count=22}\n``` {.python .cell-code}\ndef denorm(x): return (x*xstd[:,None,None]+xmean[:,None,None])\n```\n:::\n\n\n::: {#1fb8c9ef .cell execution_count=23}\n``` {.python .cell-code}\ndls = DataLoaders(*get_dls(tfm_tds, tfm_vds, bs=bs, num_workers=8))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> dls <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">DataLoaders</span>(<span style=\"color:rgb(98,98,98)\">*</span>get_dls(tfm_tds, tfm_vds, bs<span style=\"color:rgb(98,98,98)\">=</span>bs, num_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'DataLoaders' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f377a02a .cell execution_count=24}\n``` {.python .cell-code}\nall_synsets = [o.split('\\t') for o in (path_data/'words.txt').read_text().splitlines()]\nsynsets = {k:v.split(',', maxsplit=1)[0] for k,v in all_synsets if k in id2str}\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> all_synsets <span style=\"color:rgb(98,98,98)\">=</span> [o<span style=\"color:rgb(98,98,98)\">.</span>split(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\t</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> (<span class=\"ansi-yellow-bg\">path_data</span><span style=\"color:rgb(98,98,98)\">/</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">words.txt</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>read_text()<span style=\"color:rgb(98,98,98)\">.</span>splitlines()]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> synsets <span style=\"color:rgb(98,98,98)\">=</span> {k:v<span style=\"color:rgb(98,98,98)\">.</span>split(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">,</span><span style=\"color:rgb(175,0,0)\">'</span>, maxsplit<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)[<span style=\"color:rgb(98,98,98)\">0</span>] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> k,v <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> all_synsets <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> k <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> id2str}\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'path_data' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ee116a05 .cell execution_count=25}\n``` {.python .cell-code}\nxb,yb = next(iter(dls.train))\ntitles = [synsets[id2str[o]] for o in yb]\nxb.mean(),xb.std()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xb,yb <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span style=\"color:rgb(0,135,0)\">iter</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> titles <span style=\"color:rgb(98,98,98)\">=</span> [synsets[id2str[o]] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> yb]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> xb<span style=\"color:rgb(98,98,98)\">.</span>mean(),xb<span style=\"color:rgb(98,98,98)\">.</span>std()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2aea42b1 .cell execution_count=26}\n``` {.python .cell-code}\nxd = to_cpu(vae.decode(denorm(xb[:9]).cuda()))\nshow_images(xd['sample'].clamp(0,1), imsize=4, titles=titles[:9])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> xd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">to_cpu</span>(vae<span style=\"color:rgb(98,98,98)\">.</span>decode(denorm(xb[:<span style=\"color:rgb(98,98,98)\">9</span>])<span style=\"color:rgb(98,98,98)\">.</span>cuda()))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> show_images(xd[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sample</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>, titles<span style=\"color:rgb(98,98,98)\">=</span>titles[:<span style=\"color:rgb(98,98,98)\">9</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'to_cpu' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6e54ebbc .cell execution_count=27}\n``` {.python .cell-code}\nact_gr = partial(GeneralRelu, leak=0.1, sub=0.4)\niw = partial(init_weights, leaky=0.1)\n\nopt_func = partial(optim.AdamW, eps=1e-5)\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ncbs = [DeviceCB(), metrics, ProgressCB(plot=True), MixedPrecision()]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> act_gr <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">partial</span>(GeneralRelu, leak<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, sub<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.4</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> iw <span style=\"color:rgb(98,98,98)\">=</span> partial(init_weights, leaky<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> partial(optim<span style=\"color:rgb(98,98,98)\">.</span>AdamW, eps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1e-5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'partial' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3b151a4b .cell execution_count=28}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, stride=1, act=nn.ReLU, norm=None, bias=True):\n    layers = []\n    if norm: layers.append(norm(ni))\n    if act : layers.append(act())\n    layers.append(nn.Conv2d(ni, nf, stride=stride, kernel_size=ks, padding=ks//2, bias=bias))\n    return nn.Sequential(*layers)\n\ndef _conv_block(ni, nf, stride, act=act_gr, norm=None, ks=3):\n    return nn.Sequential(conv(ni, nf, stride=1     , act=act, norm=norm, ks=ks),\n                         conv(nf, nf, stride=stride, act=act, norm=norm, ks=ks))\n\nclass ResBlock(nn.Module):\n    def __init__(self, ni, nf, stride=1, ks=3, act=act_gr, norm=None):\n        super().__init__()\n        self.convs = _conv_block(ni, nf, stride, act=act, ks=ks, norm=norm)\n        self.idconv = fc.noop if ni==nf else conv(ni, nf, ks=1, stride=1, act=None, norm=norm)\n        self.pool = fc.noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)\n\n    def forward(self, x): return self.convs(x) + self.idconv(self.pool(x))\n\ndef res_blocks(n_bk, ni, nf, stride=1, ks=3, act=act_gr, norm=None):\n    return nn.Sequential(*[\n        ResBlock(ni if i==0 else nf, nf, stride=stride if i==n_bk-1 else 1, ks=ks, act=act, norm=norm)\n        for i in range(n_bk)])\n\ndef get_dropmodel(nfs, nbks, act=act_gr, norm=nn.BatchNorm2d, drop=0.2):\n    layers = [nn.Conv2d(4, nfs[0], 5, padding=2)]\n    layers += [res_blocks(nbks[i], nfs[i], nfs[i+1], act=act, norm=norm, stride=2)\n               for i in range(len(nfs)-1)]\n    layers += [act_gr(), norm(nfs[-1]), nn.AdaptiveAvgPool2d(1), nn.Flatten(), nn.Dropout(drop)]\n    layers += [nn.Linear(nfs[-1], 1000, bias=False), nn.BatchNorm1d(1000)]\n    return nn.Sequential(*layers).apply(iw)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">conv</span>(ni, nf, ks<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, stride<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, act<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>ReLU, norm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, bias<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     layers <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> norm: layers<span style=\"color:rgb(98,98,98)\">.</span>append(norm(ni))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7eab34c4 .cell execution_count=29}\n``` {.python .cell-code}\nepochs = 40\nlr = 1e-2\ntmax = epochs * len(dls.train)\nsched = partial(lr_scheduler.OneCycleLR, max_lr=lr, total_steps=tmax)\nxtra = [BatchSchedCB(sched)]\nmodel = get_dropmodel(nbks=(1,2,4,3), nfs=(32, 64, 128, 512, 1024), drop=0.1)\nlearn = Learner(model, dls, F.cross_entropy, lr=lr, cbs=cbs+xtra, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">40</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1e-2</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> tmax <span style=\"color:rgb(98,98,98)\">=</span> epochs <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">dls</span><span style=\"color:rgb(98,98,98)\">.</span>train)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> sched <span style=\"color:rgb(98,98,98)\">=</span> partial(lr_scheduler<span style=\"color:rgb(98,98,98)\">.</span>OneCycleLR, max_lr<span style=\"color:rgb(98,98,98)\">=</span>lr, total_steps<span style=\"color:rgb(98,98,98)\">=</span>tmax)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> xtra <span style=\"color:rgb(98,98,98)\">=</span> [BatchSchedCB(sched)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dls' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cbd51fd4 .cell execution_count=30}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e84255e9 .cell execution_count=31}\n``` {.python .cell-code}\ntorch.save(learn.model, 'models/imgnet-latents')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>save(learn<span style=\"color:rgb(98,98,98)\">.</span>model, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">models/imgnet-latents</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### fin -\n\n",
    "supporting": [
      "31_imgnet_latents-widish_files"
    ],
    "filters": [],
    "includes": {}
  }
}