{
  "hash": "545a5cabc790781234c61da5086e8967",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Training Consistency Models on FashionMNIST using miniai\njupyter: python3\n---\n\n\n\n\n\n\n## Imports\n\n::: {#287a9036 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='1'\n```\n:::\n\n\n::: {#22870b94 .cell execution_count=2}\n``` {.python .cell-code}\nfrom miniai.imports import *\nfrom miniai.diffusion import *\nfrom diffusers import UNet2DModel\nfrom fastprogress import progress_bar\nfrom glob import glob\nfrom copy import deepcopy\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">imports</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">miniai</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">diffusion</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">diffusers</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> UNet2DModel\n\nFile <span class=\"ansi-green-fg\">~/work/blog/notes/dlfc_p2/miniai/imports.py:1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">datasets</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">math</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fastcore</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">all</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">fc</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">mpl</span><span style=\"color:rgb(98,98,98)\">,</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">T</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torchvision</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">transforms</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">TF</span><span style=\"color:rgb(98,98,98)\">,</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">functional</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">F</span>\n\nFile <span class=\"ansi-green-fg\">~/work/blog/.venv/lib/python3.10/site-packages/torch/__init__.py:237</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> USE_GLOBAL_DEPS:\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         _load_global_deps()\n<span class=\"ansi-green-fg\">--&gt; 237</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">torch</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">_C</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F403</span>\n<span class=\"ansi-green-fg ansi-bold\">    239</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Appease the type checker; ordinarily this binding is inserted by the</span>\n<span class=\"ansi-green-fg ansi-bold\">    240</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># torch._C module initialization code in C</span>\n<span class=\"ansi-green-fg ansi-bold\">    241</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> TYPE_CHECKING:\n\n<span class=\"ansi-red-fg\">ImportError</span>: libcudnn.so.8: cannot open shared object file: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d4f6edf7 .cell execution_count=3}\n``` {.python .cell-code}\ntorch.set_printoptions(precision=4, linewidth=140, sci_mode=False)\ntorch.manual_seed(1)\nmpl.rcParams['image.cmap'] = 'gray_r'\nmpl.rcParams['figure.dpi'] = 70\n\nset_seed(42)\nif fc.defaults.cpus>8: fc.defaults.cpus=8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>set_printoptions(precision<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>, linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">140</span>, sci_mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> torch<span style=\"color:rgb(98,98,98)\">.</span>manual_seed(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> mpl<span style=\"color:rgb(98,98,98)\">.</span>rcParams[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">image.cmap</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">gray_r</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Data processing\n\nUse HuggingFace Datasets to load the Fashion MNIST dataset.\n\n::: {#b9032866 .cell execution_count=4}\n``` {.python .cell-code}\nxl,yl = 'image','label'\nname = \"fashion_mnist\"\nn_steps = 1000\nbs = 512\ndsd = load_dataset(name)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> n_steps <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1000</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> bs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">512</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> dsd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_dataset</span>(name)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_dataset' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNoisification based on Karras et al.\n\n::: {#e1edd371 .cell execution_count=5}\n``` {.python .cell-code}\nsig_data=0.5\n\ndef scalings(sig,eps):\n    # c_skip,c_out,c_in\n    return sig_data**2/((sig-eps)**2+sig_data**2),(sig-eps)*sig_data/(sig**2+sig_data**2).sqrt(),1/((sig-eps)**2+sig_data**2).sqrt()\n```\n:::\n\n\n::: {#75b0eed8 .cell execution_count=6}\n``` {.python .cell-code}\ndef sigmas_karras(n, sigma_min=0.002, sigma_max=80., rho=7.):\n    ramp = torch.linspace(0, 1, n)\n    min_inv_rho = sigma_min**(1/rho)\n    max_inv_rho = sigma_max**(1/rho)\n    sigmas = (max_inv_rho + ramp * (min_inv_rho-max_inv_rho))**rho\n    return sigmas.cuda()\n```\n:::\n\n\nCreate DataLoaders:\n\n::: {#02b431d5 .cell execution_count=7}\n``` {.python .cell-code}\ndef collate_consistency(b): return default_collate(b)[xl]\ndef dl_consistency(ds): return DataLoader(ds, batch_size=bs, collate_fn=collate_consistency, num_workers=8)\n```\n:::\n\n\n::: {#0c3dbaf9 .cell execution_count=8}\n``` {.python .cell-code}\n@inplace\ndef transformi(b): b[xl] = [F.pad(TF.to_tensor(o), (2,2,2,2))*2-1 for o in b[xl]]\n\ntds = dsd.with_transform(transformi)\ndls = DataLoaders(dl_consistency(tds['train']), dl_consistency(tds['test']))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(175,0,255)\">@inplace</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">transformi</span>(b): b[xl] <span style=\"color:rgb(98,98,98)\">=</span> [F<span style=\"color:rgb(98,98,98)\">.</span>pad(TF<span style=\"color:rgb(98,98,98)\">.</span>to_tensor(o), (<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">2</span>))<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> o <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> b[xl]]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> tds <span style=\"color:rgb(98,98,98)\">=</span> dsd<span style=\"color:rgb(98,98,98)\">.</span>with_transform(transformi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inplace' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Consistency model\n\nModel parameterization as described in the paper:\n![image.png](attachment:f9102c3d-7fcd-4d89-9b93-19fd9571b363.png)\n\n::: {#8f6ec0a9 .cell execution_count=9}\n``` {.python .cell-code}\nclass ConsistencyUNet(nn.Module):\n    def __init__(self, eps, model):\n        super().__init__()\n        self.eps = eps\n        self.F = model \n        \n    def forward(self, inp):\n        x,sig = inp\n        c_skip,c_out,c_in = scalings(sig.reshape(-1,1,1,1),self.eps)\n        return c_skip*x + c_out*self.F((x,sig.squeeze()))#.squeeze(-1).squeeze(-1)))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ConsistencyUNet</span>(<span class=\"ansi-yellow-bg\">nn</span><span style=\"color:rgb(98,98,98)\">.</span>Module):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, eps, model):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'nn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f0abea97 .cell execution_count=10}\n``` {.python .cell-code}\nclass UNet(UNet2DModel):\n    def forward(self, x): return super().forward(*x).sample\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">UNet</span>(<span class=\"ansi-yellow-bg\">UNet2DModel</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">forward</span>(<span style=\"color:rgb(0,135,0)\">self</span>, x): <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span>forward(<span style=\"color:rgb(98,98,98)\">*</span>x)<span style=\"color:rgb(98,98,98)\">.</span>sample\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'UNet2DModel' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nminiai Callback for Consistency Model training. \n\nBefore training, create EMA model.\n\nDuring each batch of training, calculate maximum timestep based on the adaptive N schedule. Our new batch is now $((\\mathbf{x}_n,\\sigma_n),(\\mathbf{x}_{n+1},\\sigma_{n+1}))$. The second tuple is passed into the EMA model while the first is passed into the regular model and the loss is the MSE between both of these outputs. \n\nFinally, the EMA model is updated.\n\n::: {#b7917595 .cell execution_count=11}\n``` {.python .cell-code}\nclass ConsistencyCB(TrainCB):\n    def __init__(self, N=150):\n        super().__init__()\n        self.N=N\n    \n    def before_fit(self, learn): \n        self.ema_model = deepcopy(learn.model)\n        self.ema_model.load_state_dict(learn.model.state_dict())\n        \n    def before_batch(self, learn):\n        self.N = math.ceil(math.sqrt((learn.epoch+1 * (self.N**2 - 4) / learn.n_epochs) + 4) - 1) + 1\n        noise_sched = sigmas_karras(self.N).flip(dims=(-1,))\n        x0 = learn.batch # original images, x_0\n        device = x0.device\n        t = torch.randint(self.N-1,[len(x0)])\n        t_1 = t+1\n        sig_n = noise_sched[t].reshape(-1,1,1,1).to(device)\n        sig_n_1 = noise_sched[t_1].reshape(-1,1,1,1).to(device)\n        z = torch.randn_like(x0, device=device)\n        noised_input_n = x0 + sig_n*z\n        noised_input_n_1 = x0 + sig_n_1*z\n        learn.batch = (noised_input_n,sig_n),(noised_input_n_1,sig_n_1)#.squeeze())\n    def predict(self, learn): \n        with torch.no_grad(): learn.preds = self.ema_model(*learn.batch[:self.n_inp])   \n    def get_loss(self, learn): learn.loss = learn.loss_func(learn.preds, learn.model(*learn.batch[self.n_inp:]))\n    def after_step(self, learn):\n        with torch.no_grad():\n            mu = math.exp(2 * math.log(0.95) / self.N)\n            # update \\theta_{-}\n            for p, ema_p in zip(learn.model.parameters(), self.ema_model.parameters()):\n                ema_p.mul_(mu).add_(p, alpha=1 - mu)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ConsistencyCB</span>(<span class=\"ansi-yellow-bg\">TrainCB</span>):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, N<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">150</span>):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'TrainCB' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nSetup and start training:\n\n::: {#6d97370a .cell execution_count=12}\n``` {.python .cell-code}\nlr = 3e-5\nepochs = 100\nopt_func = optim.AdamW\ncbs = [DeviceCB(), ProgressCB(plot=True), MetricsCB(), ConsistencyCB()]\nmodel = ConsistencyUNet(0.002,UNet(in_channels=1, out_channels=1, block_out_channels=(16, 32, 64, 64), norm_num_groups=8)) \nlearn = Learner(model, dls, nn.MSELoss(), lr=lr, cbs=cbs, opt_func=opt_func)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">3e-5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> epochs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">100</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> opt_func <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">optim</span><span style=\"color:rgb(98,98,98)\">.</span>AdamW\n<span class=\"ansi-green-fg ansi-bold\">      4</span> cbs <span style=\"color:rgb(98,98,98)\">=</span> [DeviceCB(), ProgressCB(plot<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>), MetricsCB(), ConsistencyCB()]\n<span class=\"ansi-green-fg ansi-bold\">      5</span> model <span style=\"color:rgb(98,98,98)\">=</span> ConsistencyUNet(<span style=\"color:rgb(98,98,98)\">0.002</span>,UNet(in_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, out_channels<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>, block_out_channels<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>, <span style=\"color:rgb(98,98,98)\">32</span>, <span style=\"color:rgb(98,98,98)\">64</span>, <span style=\"color:rgb(98,98,98)\">64</span>), norm_num_groups<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>)) \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'optim' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#773a0bd0 .cell execution_count=13}\n``` {.python .cell-code}\nlearn.fit(epochs)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>fit(epochs)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Sampling\n\n::: {#c2fbe539 .cell execution_count=14}\n``` {.python .cell-code}\nimport gc\ngc.collect()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n2007\n```\n:::\n:::\n\n\n::: {#5c9f41bf .cell execution_count=15}\n``` {.python .cell-code}\ntorch.cuda.empty_cache()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">torch</span><span style=\"color:rgb(98,98,98)\">.</span>cuda<span style=\"color:rgb(98,98,98)\">.</span>empty_cache()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nSampling with one-step is extremely simple 😉\n\n::: {#90a98d06 .cell execution_count=16}\n``` {.python .cell-code}\ndef one_step_sample(model,sz):\n    sig = sigmas_karras(learn.cbs[-1].N).flip(dims=(-1,))[-1] # get the max variance\n    x = torch.randn(sz).cuda() * sig # create noise\n    sig = sig[None] * torch.ones((len(x),1)).cuda().reshape(-1,1,1,1) # reshape it appropriately\n    return model((x,sig)) # simply return model output\n```\n:::\n\n\n::: {#e213db35 .cell execution_count=17}\n``` {.python .cell-code}\nsz = (512, 1, 32, 32)\n```\n:::\n\n\n::: {#eadae6c5 .cell execution_count=18}\n``` {.python .cell-code}\ns = one_step_sample(learn.model,sz)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> s <span style=\"color:rgb(98,98,98)\">=</span> one_step_sample(<span class=\"ansi-yellow-bg\">learn</span><span style=\"color:rgb(98,98,98)\">.</span>model,sz)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'learn' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nYou can see our samples are not perfect, but impressive for a single step!\n\n::: {#4a894ca1 .cell execution_count=19}\n``` {.python .cell-code}\nshow_images(s[:25].clamp(-1,1), imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(s[:<span style=\"color:rgb(98,98,98)\">25</span>]<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">1</span>), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWe can refine with the multi-step algorithm too. Here I just choose some seemingly appropriate timesteps, the original paper actually uses a greedy algorithm to optimize the timepoints used to get the best FID (although details on this seems minimal IMO).\n\n::: {#fbb192c0 .cell execution_count=20}\n``` {.python .cell-code}\nx=s\nfor sig in reversed([5.0, 10.0, 20.0, 40.0]):\n    print(sig)\n    z = torch.randn_like(x)\n    x = x + math.sqrt((sig)**2 - learn.model.eps**2) * torch.randn(sz).cuda()\n    x = learn.model((x, tensor(sig)[None].cuda() * torch.ones((len(x),1)).cuda().reshape(-1,1,1,1)))\n    gc.collect()\n    torch.cuda.empty_cache()\ns=x\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> x<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">s</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> sig <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">reversed</span>([<span style=\"color:rgb(98,98,98)\">5.0</span>, <span style=\"color:rgb(98,98,98)\">10.0</span>, <span style=\"color:rgb(98,98,98)\">20.0</span>, <span style=\"color:rgb(98,98,98)\">40.0</span>]):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(0,135,0)\">print</span>(sig)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 's' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nOutputs still a little noisy, but quite good for 5 steps!\n\n::: {#4e4a0441 .cell execution_count=21}\n``` {.python .cell-code}\nshow_images(s[:25].clamp(-1,1), imsize=1.5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">show_images</span>(s[:<span style=\"color:rgb(98,98,98)\">25</span>]<span style=\"color:rgb(98,98,98)\">.</span>clamp(<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">1</span>), imsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'show_images' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "consistency_files"
    ],
    "filters": [],
    "includes": {}
  }
}