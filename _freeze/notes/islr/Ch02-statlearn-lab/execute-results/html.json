{
  "hash": "4038c629b0fbffc1e735416d12592350",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Python\njupyter:\n  jupytext:\n    cell_metadata_filter: '-all'\n    main_language: python\n    notebook_metadata_filter: '-all'\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3\nexecute:\n  error: true\nimage: cover.jpg\n---\n\n\n\n- https://youtu.be/RelOJOIKaTk?si=0uXi7TiNQoW_yP6O \n\n| | |\n|---|---|\n| [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](a target=\"_blank\" href=\"https://colab.research.google.com/github/intro-stat-learning/ISLP_labs/blob/v2.2/Ch02-statlearn-lab.ipynb\">) | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/intro-stat-learning/ISLP_labs/v2.2?labpath=Ch02-statlearn-lab.ipynb)\n\n## Getting Started\n\nTo run the labs in this book, you will need two things:\n\n* An installation of `Python3`, which is the specific version of `Python`  used in the labs. \n* Access to  `Jupyter`, a very popular `Python` interface that runs code through a file called a *notebook*. \n\nYou can download and install  `Python3`   by following the instructions available at [anaconda.com](http://anaconda.com). \n\n There are a number of ways to get access to `Jupyter`. Here are just a few:\n \n * Using Google's `Colaboratory` service: [colab.research.google.com/](https://colab.research.google.com/). \n * Using `JupyterHub`, available at [jupyter.org/hub](https://jupyter.org/hub). \n * Using your own `jupyter` installation. Installation instructions are available at [jupyter.org/install](https://jupyter.org/install). \n \nPlease see the `Python` resources page on the book website [statlearning.com](https://www.statlearning.com) for up-to-date information about getting `Python` and `Jupyter` working on your computer. \n\nYou will need to install the `ISLP` package, which provides access to the datasets and custom-built functions that we provide.\nInside a macOS or Linux terminal type `pip install ISLP`; this also installs most other packages needed in the labs. The `Python` resources page has a link to the `ISLP` documentation website.\n\nTo run this lab, download the file `Ch2-statlearn-lab.ipynb` from the `Python` resources page. \nNow run the following code at the command line: `jupyter lab Ch2-statlearn-lab.ipynb`.\n\nIf you're using Windows, you can use the `start menu` to access `anaconda`, and follow the links. For example, to install `ISLP` and run this lab, you can run the same code above in an `anaconda` shell.\n\n## Basic Commands\n\nIn this lab, we will introduce some simple `Python` commands. \n For more resources about `Python` in general, readers may want to consult the tutorial at [docs.python.org/3/tutorial/](https://docs.python.org/3/tutorial/). \n\n\n \n\nLike most programming languages, `Python` uses *functions*\nto perform operations.   To run a\nfunction called `fun`, we type\n`fun(input1,input2)`, where the inputs (or *arguments*)\n`input1` and `input2` tell\n`Python` how to run the function.  A function can have any number of\ninputs. For example, the\n`print()`  function outputs a text representation of all of its arguments to the console.\n\n::: {#2263bacd .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.501766Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.501683Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.505368Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.505103Z\"}' execution_count=1}\n``` {.python .cell-code}\nprint('fit a model with', 11, 'variables')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfit a model with 11 variables\n```\n:::\n:::\n\n\n The following command will provide information about the `print()` function.\n\n::: {#a3defde1 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.506820Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.506738Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.524623Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.524324Z\"}' execution_count=2}\n``` {.python .cell-code}\nprint?\n```\n:::\n\n\nAdding two integers in `Python` is pretty intuitive.\n\n::: {#17aeccca .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.526184Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.526075Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.528792Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.528551Z\"}' execution_count=3}\n``` {.python .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\n8\n```\n:::\n:::\n\n\nIn `Python`, textual data is handled using\n*strings*. For instance, `\"hello\"` and\n`'hello'`\nare strings. \nWe can concatenate them using the addition `+` symbol.\n\n::: {#7fbb5c97 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.530311Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.530195Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.532255Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.532042Z\"}' execution_count=4}\n``` {.python .cell-code}\n\"hello\" + \" \" + \"world\"\n```\n\n::: {.cell-output .cell-output-display execution_count=118}\n```\n'hello world'\n```\n:::\n:::\n\n\n A string is actually a type of *sequence*: this is a generic term for an ordered list. \n The three most important types of sequences are lists, tuples, and strings.  \nWe introduce lists now. \n\nThe following command instructs `Python` to join together\nthe numbers 3, 4, and 5, and to save them as a\n*list* named `x`. When we\ntype `x`, it gives us back the list.\n\n::: {#3b52caf9 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.533676Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.533604Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.535708Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.535479Z\"}' execution_count=5}\n``` {.python .cell-code}\nx = [3, 4, 5]\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=119}\n```\n[3, 4, 5]\n```\n:::\n:::\n\n\nNote that we used the brackets\n`[]` to construct this list. \n\nWe will often want to add two sets of numbers together. It is reasonable to try the following code,\nthough it will not produce the desired results.\n\n::: {#ccc2b266 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.536964Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.536889Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.539316Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.539007Z\"}' execution_count=6}\n``` {.python .cell-code}\ny = [4, 9, 7]\nx + y\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```\n[3, 4, 5, 4, 9, 7]\n```\n:::\n:::\n\n\nThe result may appear slightly counterintuitive: why did `Python` not add the entries of the lists\nelement-by-element? \n In `Python`, lists hold *arbitrary* objects, and  are added using  *concatenation*. \n In fact, concatenation is the behavior that we saw earlier when we entered `\"hello\" + \" \" + \"world\"`. \n \n\nThis example reflects the fact that \n `Python` is a general-purpose programming language. Much of `Python`'s  data-specific\nfunctionality comes from other packages, notably `numpy`\nand `pandas`. \nIn the next section, we will introduce the  `numpy` package. \nSee [docs.scipy.org/doc/numpy/user/quickstart.html](https://docs.scipy.org/doc/numpy/user/quickstart.html) for more information about `numpy`.\n\n## Introduction to Numerical Python\n\nAs mentioned earlier, this book makes use of functionality   that is contained in the `numpy` \n *library*, or *package*. A package is a collection of modules that are not necessarily included in \n the base `Python` distribution. The name `numpy` is an abbreviation for *numerical Python*. \n\n  To access `numpy`, we must first `import` it.\n\n::: {#e848fcd6 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.541265Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.541131Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.623379Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.610113Z\"}' execution_count=7}\n``` {.python .cell-code}\nimport numpy as np \n```\n:::\n\n\nIn the previous line, we named the `numpy` *module* `np`; an abbreviation for easier referencing.\n\nIn `numpy`, an *array* is  a generic term for a multidimensional\nset of numbers.\nWe use the `np.array()` function to define   `x` and `y`, which are one-dimensional arrays, i.e. vectors.\n\n::: {#862878a6 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.637526Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.637154Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.640699Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.640168Z\"}' execution_count=8}\n``` {.python .cell-code}\nx = np.array([3, 4, 5])\ny = np.array([4, 9, 7])\n```\n:::\n\n\nNote that if you forgot to run the `import numpy as np` command earlier, then\nyou will encounter an error in calling the `np.array()` function in the previous line. \n The syntax `np.array()` indicates that the function being called\nis part of the `numpy` package, which we have abbreviated as `np`. \n\nSince `x` and `y` have been defined using `np.array()`, we get a sensible result when we add them together. Compare this to our results in the previous section,\n when we tried to add two lists without using `numpy`. \n\n::: {#2e80be0c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.644348Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.643939Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.647973Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.647309Z\"}' execution_count=9}\n``` {.python .cell-code}\nx + y\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```\narray([ 7, 13, 12])\n```\n:::\n:::\n\n\nIn `numpy`, matrices are typically represented as two-dimensional arrays, and vectors as one-dimensional arrays. {While it is also possible to create matrices using  `np.matrix()`, we will use `np.array()` throughout the labs in this book.}\nWe can create a two-dimensional array as follows. \n\n::: {#2824faea .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.654955Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.654830Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.658607Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.658268Z\"}' execution_count=10}\n``` {.python .cell-code}\nx = np.array([[1, 2], [3, 4]])\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```\narray([[1, 2],\n       [3, 4]])\n```\n:::\n:::\n\n\nThe object `x` has several \n*attributes*, or associated objects. To access an attribute of `x`, we type `x.attribute`, where we replace `attribute`\nwith the name of the attribute. \nFor instance, we can access the `ndim` attribute of  `x` as follows. \n\n::: {#efb3511b .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.662782Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.662526Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.665986Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.665545Z\"}' execution_count=11}\n``` {.python .cell-code}\nx.ndim\n```\n\n::: {.cell-output .cell-output-display execution_count=125}\n```\n2\n```\n:::\n:::\n\n\nThe output indicates that `x` is a two-dimensional array.  \nSimilarly, `x.dtype` is the *data type* attribute of the object `x`. This indicates that `x` is \ncomprised of 64-bit integers:\n\n::: {#3b966d4b .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.669473Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.668930Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.673438Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.672894Z\"}' execution_count=12}\n``` {.python .cell-code}\nx.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```\ndtype('int64')\n```\n:::\n:::\n\n\nWhy is `x` comprised of integers? This is because we created `x` by passing in exclusively integers to the `np.array()` function.\n  If\nwe had passed in any decimals, then we would have obtained an array of\n*floating point numbers* (i.e. real-valued numbers). \n\n::: {#9494ffc9 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.676213Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.676017Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.679945Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.679456Z\"}' execution_count=13}\n``` {.python .cell-code}\nnp.array([[1, 2], [3.0, 4]]).dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\ndtype('float64')\n```\n:::\n:::\n\n\n\nTyping `fun?` will cause `Python` to display \ndocumentation associated with the function `fun`, if it exists.\nWe can try this for `np.array()`. \n\n::: {#ac294363 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.682591Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.682418Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.685681Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.685193Z\"}' execution_count=14}\n``` {.python .cell-code}\nnp.array?\n```\n:::\n\n\nThis documentation indicates that we could create a floating point array by passing a `dtype` argument into `np.array()`.\n\n::: {#8d667d51 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.688520Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.688302Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.692577Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.692040Z\"}' execution_count=15}\n``` {.python .cell-code}\nnp.array([[1, 2], [3, 4]], float).dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=129}\n```\ndtype('float64')\n```\n:::\n:::\n\n\n\nThe array `x` is two-dimensional. We can find out the number of rows and columns by looking\nat its `shape` attribute.\n\n::: {#a93fcac6 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.695300Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.695057Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.698705Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.698186Z\"}' execution_count=16}\n``` {.python .cell-code}\nx.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=130}\n```\n(2, 2)\n```\n:::\n:::\n\n\n\nA *method* is a function that is associated with an\nobject. \nFor instance, given an array `x`, the expression\n`x.sum()` sums all of its elements, using the `sum()`\nmethod for arrays. \nThe call `x.sum()` automatically provides `x` as the\nfirst argument to its `sum()` method.\n\n::: {#b5054f22 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.701395Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.701161Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.705627Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.705062Z\"}' execution_count=17}\n``` {.python .cell-code}\nx = np.array([1, 2, 3, 4])\nx.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=131}\n```\n10\n```\n:::\n:::\n\n\nWe could also sum the elements of `x` by passing in `x` as an argument to the `np.sum()` function. \n\n::: {#048c77ec .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.708607Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.708219Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.712557Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.712089Z\"}' execution_count=18}\n``` {.python .cell-code}\nx = np.array([1, 2, 3, 4])\nnp.sum(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=132}\n```\n10\n```\n:::\n:::\n\n\n As another example, the\n`reshape()` method returns a new array with the same elements as\n`x`, but a different shape.\n We do this by passing in a `tuple` in our call to\n `reshape()`, in this case `(2, 3)`.  This tuple specifies that we would like to create a two-dimensional array with \n$2$ rows and $3$ columns. {Like lists, tuples represent a sequence of objects. Why do we need more than one way to create a sequence? There are a few differences between tuples and lists, but perhaps the most important is that elements of a tuple cannot be modified, whereas elements of a list can be.}\n \nIn what follows, the\n`\\n` character creates a *new line*.\n\n::: {#b1a8b2a1 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.715524Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.715284Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.719375Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.718798Z\"}' execution_count=19}\n``` {.python .cell-code}\nx = np.array([1, 2, 3, 4, 5, 6])\nprint('beginning x:\\n', x)\nx_reshape = x.reshape((2, 3))\nprint('reshaped x:\\n', x_reshape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbeginning x:\n [1 2 3 4 5 6]\nreshaped x:\n [[1 2 3]\n [4 5 6]]\n```\n:::\n:::\n\n\nThe previous output reveals that `numpy` arrays are specified as a sequence\nof *rows*. This is  called *row-major ordering*, as opposed to *column-major ordering*. \n\n`Python` (and hence `numpy`) uses 0-based\nindexing. This means that to access the top left element of `x_reshape`, \nwe type in `x_reshape[0,0]`.\n\n::: {#75e62e43 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.723002Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.722758Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.726457Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.725971Z\"}' execution_count=20}\n``` {.python .cell-code}\nx_reshape[0, 0] \n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\n1\n```\n:::\n:::\n\n\nSimilarly, `x_reshape[1,2]` yields the element in the second row and the third column \nof `x_reshape`. \n\n::: {#9d33b342 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.729274Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.729045Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.733265Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.732407Z\"}' execution_count=21}\n``` {.python .cell-code}\nx_reshape[1, 2] \n```\n\n::: {.cell-output .cell-output-display execution_count=135}\n```\n6\n```\n:::\n:::\n\n\nSimilarly, `x[2]` yields the\nthird entry of `x`. \n\nNow, let's modify the top left element of `x_reshape`.  To our surprise, we discover that the first element of `x` has been modified as well!\n\n::: {#50080eed .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.737696Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.737395Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.742687Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.741342Z\"}' execution_count=22}\n``` {.python .cell-code}\nprint('x before we modify x_reshape:\\n', x)\nprint('x_reshape before we modify x_reshape:\\n', x_reshape)\nx_reshape[0, 0] = 5\nprint('x_reshape after we modify its top left element:\\n', x_reshape)\nprint('x after we modify top left element of x_reshape:\\n', x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx before we modify x_reshape:\n [1 2 3 4 5 6]\nx_reshape before we modify x_reshape:\n [[1 2 3]\n [4 5 6]]\nx_reshape after we modify its top left element:\n [[5 2 3]\n [4 5 6]]\nx after we modify top left element of x_reshape:\n [5 2 3 4 5 6]\n```\n:::\n:::\n\n\nModifying `x_reshape` also modified `x` because the two objects occupy the same space in memory.\n \n\n    \n\nWe just saw that we can modify an element of an array. Can we also modify a tuple? It turns out that we cannot --- and trying to do so introduces\nan *exception*, or error.\n\n::: {#0a275d9f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.749078Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.748796Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.837133Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.836870Z\"}' execution_count=23}\n``` {.python .cell-code}\nmy_tuple = (3, 4, 5)\nmy_tuple[0] = 2\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[137], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> my_tuple <span style=\"color:rgb(98,98,98)\">=</span> (<span style=\"color:rgb(98,98,98)\">3</span>, <span style=\"color:rgb(98,98,98)\">4</span>, <span style=\"color:rgb(98,98,98)\">5</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">my_tuple</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">]</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n\nWe now briefly mention some attributes of arrays that will come in handy. An array's `shape` attribute contains its dimension; this is always a tuple.\nThe  `ndim` attribute yields the number of dimensions, and `T` provides its transpose. \n\n::: {#77f6dfd2 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.838869Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.838746Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.840973Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.840747Z\"}' execution_count=24}\n``` {.python .cell-code}\nx_reshape.shape, x_reshape.ndim, x_reshape.T\n```\n\n::: {.cell-output .cell-output-display execution_count=138}\n```\n((2, 3),\n 2,\n array([[5, 4],\n        [2, 5],\n        [3, 6]]))\n```\n:::\n:::\n\n\nNotice that the three individual outputs `(2,3)`, `2`, and `array([[5, 4],[2, 5], [3,6]])` are themselves output as a tuple. \n \nWe will often want to apply functions to arrays. \nFor instance, we can compute the\nsquare root of the entries using the `np.sqrt()` function: \n\n::: {#dee254bb .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.842256Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.842155Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.844341Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.844095Z\"}' execution_count=25}\n``` {.python .cell-code}\nnp.sqrt(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=139}\n```\narray([2.23606798, 1.41421356, 1.73205081, 2.        , 2.23606798,\n       2.44948974])\n```\n:::\n:::\n\n\nWe can also square the elements:\n\n::: {#a099776a .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.845842Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.845683Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.847796Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.847578Z\"}' execution_count=26}\n``` {.python .cell-code}\nx**2\n```\n\n::: {.cell-output .cell-output-display execution_count=140}\n```\narray([25,  4,  9, 16, 25, 36])\n```\n:::\n:::\n\n\nWe can compute the square roots using the same notation, raising to the power of $1/2$ instead of 2.\n\n::: {#85b4f75f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.848925Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.848841Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.850823Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.850640Z\"}' execution_count=27}\n``` {.python .cell-code}\nx**0.5\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```\narray([2.23606798, 1.41421356, 1.73205081, 2.        , 2.23606798,\n       2.44948974])\n```\n:::\n:::\n\n\n\nThroughout this book, we will often want to generate random data. \nThe `np.random.normal()`  function generates a vector of random\nnormal variables. We can learn more about this function by looking at the help page, via a call to `np.random.normal?`.\nThe first line of the help page  reads `normal(loc=0.0, scale=1.0, size=None)`. \n This  *signature* line tells us that the function's arguments are  `loc`, `scale`, and `size`. These are *keyword* arguments, which means that when they are passed into\n the function, they can be referred to by name (in any order). {`Python` also uses *positional* arguments. Positional arguments do not need to use a keyword. To see an example, type in `np.sum?`. We see that `a` is a positional argument, i.e. this function assumes that the first unnamed argument that it receives is the array to be summed. By contrast, `axis` and `dtype` are keyword arguments: the position in which these arguments are entered into `np.sum()` does not matter.}\n By default, this function will generate random normal variable(s) with mean (`loc`) $0$ and standard deviation (`scale`) $1$; furthermore, \n a single random variable will be generated unless the argument to `size` is changed. \n\nWe now generate 50 independent random variables from a $N(0,1)$ distribution. \n\n::: {#961e0903 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.852136Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.852038Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.854307Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.854071Z\"}' execution_count=28}\n``` {.python .cell-code}\nx = np.random.normal(size=50)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=142}\n```\narray([-1.25276284,  2.83098185, -0.65732981, -1.24173987,  0.19343933,\n        0.64109123,  0.61988149,  0.95318689,  0.19107133, -1.12078817,\n       -1.0108833 , -1.28438897, -1.56860039,  1.06174987, -0.97394847,\n       -1.63399616, -2.25360242,  1.08664512,  0.67743748, -0.10825853,\n        0.13856676,  1.10397169, -1.55479247, -0.76153415, -0.07356573,\n       -0.91379888, -1.20793705,  1.26591258, -0.70324129, -0.04694653,\n        1.4773346 ,  1.66375627,  0.3332231 , -1.28177032,  0.5303357 ,\n       -0.36118364, -1.83643142, -0.37801614, -0.30043248,  0.31833867,\n       -1.202222  , -1.78005314,  1.19249809,  0.83004857, -0.79748108,\n       -0.25731423, -0.48961665,  0.8508665 ,  0.27952548, -0.13191514])\n```\n:::\n:::\n\n\nWe create an array `y` by adding an independent $N(50,1)$ random variable to each element of `x`.\n\n::: {#9a194c26 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.856931Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.856831Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.858521Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.858270Z\"}' execution_count=29}\n``` {.python .cell-code}\ny = x + np.random.normal(loc=50, scale=1, size=50)\n```\n:::\n\n\nThe `np.corrcoef()` function computes the correlation matrix between `x` and `y`. The off-diagonal elements give the \ncorrelation between `x` and `y`. \n\n::: {#9ea5e482 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.859935Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.859837Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.861977Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.861747Z\"}' execution_count=30}\n``` {.python .cell-code}\nnp.corrcoef(x, y)\n```\n\n::: {.cell-output .cell-output-display execution_count=144}\n```\narray([[1.        , 0.84353019],\n       [0.84353019, 1.        ]])\n```\n:::\n:::\n\n\nIf you're following along in your own `Jupyter` notebook, then you probably noticed that you got a different set of results when you ran the past few \ncommands. In particular, \n each\ntime we call `np.random.normal()`, we will get a different answer, as shown in the following example.\n\n::: {#abb0e4b0 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.863299Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.863206Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.865015Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.864730Z\"}' execution_count=31}\n``` {.python .cell-code}\nprint(np.random.normal(scale=5, size=2))\nprint(np.random.normal(scale=5, size=2)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[-2.06444147 -3.05243514]\n[ 2.22910764 -5.16145222]\n```\n:::\n:::\n\n\nIn order to ensure that our code provides exactly the same results\neach time it is run, we can set a *random seed* \nusing the \n`np.random.default_rng()` function.\nThis function takes an arbitrary, user-specified integer argument. If we set a random seed before \ngenerating random data, then re-running our code will yield the same results. The\nobject `rng` has essentially all the random number generating methods found in `np.random`. Hence, to\ngenerate normal data we use `rng.normal()`.\n\n::: {#b9ddd03e .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.866527Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.866407Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.868523Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.868290Z\"}' execution_count=32}\n``` {.python .cell-code}\nrng = np.random.default_rng(1303)\nprint(rng.normal(scale=5, size=2))\nrng2 = np.random.default_rng(1303)\nprint(rng2.normal(scale=5, size=2)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 4.09482632 -1.07485605]\n[ 4.09482632 -1.07485605]\n```\n:::\n:::\n\n\nThroughout the labs in this book, we use `np.random.default_rng()`  whenever we\nperform calculations involving random quantities within `numpy`.  In principle, this\nshould enable the reader to exactly reproduce the stated results. However, as new versions of `numpy` become available, it is possible\nthat some small discrepancies may occur between the output\nin the labs and the output\nfrom `numpy`.\n\nThe `np.mean()`,  `np.var()`, and `np.std()`  functions can be used\nto compute the mean, variance, and standard deviation of arrays.  These functions are also\navailable as methods on the arrays.\n\n::: {#63656104 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.869817Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.869734Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.871794Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.871580Z\"}' execution_count=33}\n``` {.python .cell-code}\nrng = np.random.default_rng(3)\ny = rng.standard_normal(10)\nnp.mean(y), y.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=147}\n```\n(-0.1126795190952861, -0.1126795190952861)\n```\n:::\n:::\n\n\n::: {#89fed91b .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.873319Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.873222Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.875364Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.875114Z\"}' execution_count=34}\n``` {.python .cell-code}\nnp.var(y), y.var(), np.mean((y - y.mean())**2)\n```\n\n::: {.cell-output .cell-output-display execution_count=148}\n```\n(2.7243406406465125, 2.7243406406465125, 2.7243406406465125)\n```\n:::\n:::\n\n\n\nNotice that by default `np.var()` divides by the sample size $n$ rather\nthan $n-1$; see the `ddof` argument in `np.var?`.\n\n::: {#e5cf049c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.876542Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.876445Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.878423Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.878185Z\"}' execution_count=35}\n``` {.python .cell-code}\nnp.sqrt(np.var(y)), np.std(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=149}\n```\n(1.6505576756498128, 1.6505576756498128)\n```\n:::\n:::\n\n\nThe `np.mean()`,  `np.var()`, and `np.std()` functions can also be applied to the rows and columns of a matrix. \nTo see this, we construct a $10 \\times 3$ matrix of $N(0,1)$ random variables, and consider computing its row sums. \n\n::: {#d6a56f85 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.879714Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.879626Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.881633Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.881427Z\"}' execution_count=36}\n``` {.python .cell-code}\nX = rng.standard_normal((10, 3))\nX\n```\n\n::: {.cell-output .cell-output-display execution_count=150}\n```\narray([[ 0.22578661, -0.35263079, -0.28128742],\n       [-0.66804635, -1.05515055, -0.39080098],\n       [ 0.48194539, -0.23855361,  0.9577587 ],\n       [-0.19980213,  0.02425957,  1.54582085],\n       [ 0.54510552, -0.50522874, -0.18283897],\n       [ 0.54052513,  1.93508803, -0.26962033],\n       [-0.24355868,  1.0023136 , -0.88645994],\n       [-0.29172023,  0.88253897,  0.58035002],\n       [ 0.0915167 ,  0.67010435, -2.82816231],\n       [ 1.02130682, -0.95964476, -1.66861984]])\n```\n:::\n:::\n\n\nSince arrays are row-major ordered, the first axis, i.e. `axis=0`, refers to its rows. We pass this argument into the `mean()` method for the object `X`. \n\n::: {#902d4390 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.882917Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.882831Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.884797Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.884581Z\"}' execution_count=37}\n``` {.python .cell-code}\nX.mean(axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=151}\n```\narray([ 0.15030588,  0.14030961, -0.34238602])\n```\n:::\n:::\n\n\nThe following yields the same result.\n\n::: {#a01a3948 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.886134Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.886054Z\",\"iopub.status.idle\":\"2024-06-05T01:13:21.888025Z\",\"shell.execute_reply\":\"2024-06-05T01:13:21.887817Z\"}' execution_count=38}\n``` {.python .cell-code}\nX.mean(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=152}\n```\narray([ 0.15030588,  0.14030961, -0.34238602])\n```\n:::\n:::\n\n\n## Graphics\nIn `Python`, common practice is to use  the library\n`matplotlib` for graphics.\nHowever, since `Python` was not written with data analysis in mind,\n  the notion of plotting is not intrinsic to the language. \nWe will use the `subplots()` function\nfrom `matplotlib.pyplot` to create a figure and the\naxes onto which we plot our data.\nFor many more examples of how to make plots in `Python`,\nreaders are encouraged to visit [matplotlib.org/stable/gallery/](https://matplotlib.org/stable/gallery/index.html).\n\nIn `matplotlib`, a plot consists of a *figure* and one or more *axes*. You can think of the figure as the blank canvas upon which \none or more plots will be displayed: it is the entire plotting window. \nThe *axes* contain important information about each plot, such as its $x$- and $y$-axis labels,\ntitle,  and more. (Note that in `matplotlib`, the word *axes* is not the plural of *axis*: a plot's *axes* contains much more information \nthan just the $x$-axis and  the $y$-axis.)\n\nWe begin by importing the `subplots()` function\nfrom `matplotlib`. We use this function\nthroughout when creating figures.\nThe function returns a tuple of length two: a figure\nobject as well as the relevant axes object. We will typically\npass `figsize` as a keyword argument.\nHaving created our axes, we attempt our first plot using its  `plot()` method.\nTo learn more about it, \ntype `ax.plot?`.\n\n::: {#83443683 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:21.889264Z\",\"iopub.status.busy\":\"2024-06-05T01:13:21.889168Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.181786Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.181539Z\"}' execution_count=39}\n``` {.python .cell-code}\nfrom matplotlib.pyplot import subplots\nfig, ax = subplots(figsize=(8, 8))\nx = rng.standard_normal(100)\ny = rng.standard_normal(100)\nax.plot(x, y);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-40-output-1.png){width=643 height=633}\n:::\n:::\n\n\nWe pause here to note that we have *unpacked* the tuple of length two returned by `subplots()` into the two distinct\nvariables `fig` and `ax`. Unpacking\nis typically preferred to the following equivalent but slightly more verbose code:\n\n::: {#727e7e5c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.183312Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.183171Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.234220Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.233942Z\"}' execution_count=40}\n``` {.python .cell-code}\noutput = subplots(figsize=(8, 8))\nfig = output[0]\nax = output[1]\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-41-output-1.png){width=655 height=638}\n:::\n:::\n\n\nWe see that our earlier cell produced a line plot, which is the default. To create a scatterplot, we provide an additional argument to `ax.plot()`, indicating that circles should be displayed.\n\n::: {#96f9bf78 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.235936Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.235832Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.288490Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.288148Z\"}' execution_count=41}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.plot(x, y, 'o');\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-42-output-1.png){width=643 height=633}\n:::\n:::\n\n\nDifferent values\nof this additional argument can be used to produce different colored lines\nas well as different linestyles. \n\nAs an alternative, we could use the  `ax.scatter()` function to create a scatterplot.\n\n::: {#52892940 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.290146Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.290040Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.347902Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.347605Z\"}' execution_count=42}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(x, y, marker='o');\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-43-output-1.png){width=643 height=633}\n:::\n:::\n\n\nNotice that in the code blocks above, we have ended\nthe last line with a semicolon. This prevents `ax.plot(x, y)` from printing\ntext  to the notebook. However, it does not prevent a plot from being produced. \n If we omit the trailing semi-colon, then we obtain the following output:  \n\n::: {#d7aec62c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.349518Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.349396Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.406731Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.406399Z\"}' execution_count=43}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(x, y, marker='o')\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-44-output-1.png){width=643 height=633}\n:::\n:::\n\n\nIn what follows, we will use\n trailing semicolons whenever the text that would be output is not\ngermane to the discussion at hand.\n\n\n\n\nTo label our plot, we  make use of the `set_xlabel()`,  `set_ylabel()`, and  `set_title()` methods\nof `ax`.\n\n::: {#7f3fde08 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.408463Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.408338Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.474709Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.474398Z\"}' execution_count=44}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(x, y, marker='o')\nax.set_xlabel(\"this is the x-axis\")\nax.set_ylabel(\"this is the y-axis\")\nax.set_title(\"Plot of X vs Y\");\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-45-output-1.png){width=662 height=671}\n:::\n:::\n\n\n Having access to the figure object `fig` itself means that we can go in and change some aspects and then redisplay it. Here, we change\n  the size from `(8, 8)` to `(12, 3)`.\n\n::: {#1a442bd3 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.476314Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.476169Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.519810Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.519505Z\"}' execution_count=45}\n``` {.python .cell-code}\nfig.set_size_inches(12,3)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=159}\n![](Ch02-statlearn-lab_files/figure-html/cell-46-output-1.png){width=959 height=302}\n:::\n:::\n\n\nOccasionally we will want to create several plots within a figure. This can be\nachieved by passing additional arguments to `subplots()`. \nBelow, we create a  $2 \\times 3$ grid of plots\nin a figure of size determined by the `figsize` argument. In such\nsituations, there is often a relationship between the axes in the plots. For example,\nall plots may have a common $x$-axis. The `subplots()` function can automatically handle\nthis situation when passed the keyword argument `sharex=True`.\nThe `axes` object below is an array pointing to different plots in the figure. \n\n::: {#4db138e8 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.521455Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.521350Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.684396Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.684070Z\"}' execution_count=46}\n``` {.python .cell-code}\nfig, axes = subplots(nrows=2,\n                     ncols=3,\n                     figsize=(15, 5))\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-47-output-1.png){width=1176 height=416}\n:::\n:::\n\n\nWe now produce a scatter plot with `'o'` in the second column of the first row and\na scatter plot with `'+'` in the third column of the second row.\n\n::: {#d2432503 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.685979Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.685854Z\",\"iopub.status.idle\":\"2024-06-05T01:13:22.795331Z\",\"shell.execute_reply\":\"2024-06-05T01:13:22.795034Z\"}' execution_count=47}\n``` {.python .cell-code}\naxes[0,1].plot(x, y, 'o')\naxes[1,2].scatter(x, y, marker='+')\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=161}\n![](Ch02-statlearn-lab_files/figure-html/cell-48-output-1.png){width=1176 height=416}\n:::\n:::\n\n\nType  `subplots?` to learn more about \n`subplots()`. \n\n\n\nTo save the output of `fig`, we call its `savefig()`\nmethod. The argument `dpi` is the dots per inch, used\nto determine how large the figure will be in pixels.\n\n::: {#f05c8297 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:22.797136Z\",\"iopub.status.busy\":\"2024-06-05T01:13:22.796912Z\",\"iopub.status.idle\":\"2024-06-05T01:13:23.632356Z\",\"shell.execute_reply\":\"2024-06-05T01:13:23.632085Z\"}' execution_count=48}\n``` {.python .cell-code}\nfig.savefig(\"Figure.png\", dpi=400)\nfig.savefig(\"Figure.pdf\", dpi=200);\n```\n:::\n\n\n\nWe can continue to modify `fig` using step-by-step updates; for example, we can modify the range of the $x$-axis, re-save the figure, and even re-display it. \n\n::: {#fdb994f6 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:23.634325Z\",\"iopub.status.busy\":\"2024-06-05T01:13:23.634128Z\",\"iopub.status.idle\":\"2024-06-05T01:13:23.779590Z\",\"shell.execute_reply\":\"2024-06-05T01:13:23.779218Z\"}' execution_count=49}\n``` {.python .cell-code}\naxes[0,1].set_xlim([-1,1])\nfig.savefig(\"Figure_updated.jpg\")\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=163}\n![](Ch02-statlearn-lab_files/figure-html/cell-50-output-1.png){width=1176 height=416}\n:::\n:::\n\n\nWe now create some more sophisticated plots. The \n`ax.contour()` method  produces a  *contour plot* \nin order to represent three-dimensional data, similar to a\ntopographical map.  It takes three arguments:\n\n* A vector of `x` values (the first dimension),\n* A vector of `y` values (the second dimension), and\n* A matrix whose elements correspond to the `z` value (the third\ndimension) for each pair of `(x,y)` coordinates.\n\nTo create `x` and `y`, we’ll use the command  `np.linspace(a, b, n)`, \nwhich returns a vector of `n` numbers starting at  `a` and  ending at `b`.\n\n::: {#372aa448 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:23.781448Z\",\"iopub.status.busy\":\"2024-06-05T01:13:23.781337Z\",\"iopub.status.idle\":\"2024-06-05T01:13:23.857834Z\",\"shell.execute_reply\":\"2024-06-05T01:13:23.857499Z\"}' execution_count=50}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nx = np.linspace(-np.pi, np.pi, 50)\ny = x\nf = np.multiply.outer(np.cos(y), 1 / (1 + x**2))\nax.contour(x, y, f);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-51-output-1.png){width=643 height=633}\n:::\n:::\n\n\nWe can increase the resolution by adding more levels to the image.\n\n::: {#191c3f19 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:23.859532Z\",\"iopub.status.busy\":\"2024-06-05T01:13:23.859411Z\",\"iopub.status.idle\":\"2024-06-05T01:13:23.979913Z\",\"shell.execute_reply\":\"2024-06-05T01:13:23.979583Z\"}' execution_count=51}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.contour(x, y, f, levels=45);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-52-output-1.png){width=643 height=633}\n:::\n:::\n\n\nTo fine-tune the output of the\n`ax.contour()`  function, take a\nlook at the help file by typing `?plt.contour`.\n \nThe `ax.imshow()`  method is similar to \n`ax.contour()`, except that it produces a color-coded plot\nwhose colors depend on the `z` value. This is known as a\n*heatmap*, and is sometimes used to plot temperature in\nweather forecasts.\n\n::: {#7c470fce .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:23.981732Z\",\"iopub.status.busy\":\"2024-06-05T01:13:23.981600Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.056222Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.055931Z\"}' execution_count=52}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.imshow(f);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-53-output-1.png){width=637 height=633}\n:::\n:::\n\n\n\n## Sequences and Slice Notation\n\nAs seen above, the\nfunction `np.linspace()`  can be used to create a sequence\nof numbers.\n\n::: {#26bfa75f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.058049Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.057942Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.060262Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.060017Z\"}' execution_count=53}\n``` {.python .cell-code}\nseq1 = np.linspace(0, 10, 11)\nseq1\n```\n\n::: {.cell-output .cell-output-display execution_count=167}\n```\narray([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])\n```\n:::\n:::\n\n\n\nThe function `np.arange()`\n returns a sequence of numbers spaced out by `step`. If `step` is not specified, then a default value of $1$ is used. Let's create a sequence\n that starts at $0$ and ends at $10$.\n\n::: {#353a6f10 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.061789Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.061666Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.063954Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.063674Z\"}' execution_count=54}\n``` {.python .cell-code}\nseq2 = np.arange(0, 10)\nseq2\n```\n\n::: {.cell-output .cell-output-display execution_count=168}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\n\nWhy isn't $10$ output above? This has to do with *slice* notation in `Python`. \nSlice notation  \nis used to index sequences such as lists, tuples and arrays.\nSuppose we want to retrieve the fourth through sixth (inclusive) entries\nof a string. We obtain a slice of the string using the indexing  notation  `[3:6]`.\n\n::: {#e5085a71 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.065591Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.065473Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.067662Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.067371Z\"}' execution_count=55}\n``` {.python .cell-code}\n\"hello world\"[3:6]\n```\n\n::: {.cell-output .cell-output-display execution_count=169}\n```\n'lo '\n```\n:::\n:::\n\n\nIn the code block above, the notation `3:6` is shorthand for  `slice(3,6)` when used inside\n`[]`. \n\n::: {#6efd05b1 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.069190Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.069066Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.071066Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.070825Z\"}' execution_count=56}\n``` {.python .cell-code}\n\"hello world\"[slice(3,6)]\n```\n\n::: {.cell-output .cell-output-display execution_count=170}\n```\n'lo '\n```\n:::\n:::\n\n\nYou might have expected  `slice(3,6)` to output the fourth through seventh characters in the text string (recalling that  `Python` begins its indexing at zero),  but instead it output  the fourth through sixth. \n This also explains why the earlier `np.arange(0, 10)` command output only the integers from $0$ to $9$. \nSee the documentation `slice?` for useful options in creating slices. \n\n    \n\n\n\n    \n\n\n    \n\n \n\n    \n\n \n\n    \n\n\n    \n\n## Indexing Data\nTo begin, we  create a two-dimensional `numpy` array.\n\n::: {#a783f7de .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.072570Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.072457Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.074648Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.074370Z\"}' execution_count=57}\n``` {.python .cell-code}\nA = np.array(np.arange(16)).reshape((4, 4))\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=171}\n```\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n```\n:::\n:::\n\n\nTyping `A[1,2]` retrieves the element corresponding to the second row and third\ncolumn. (As usual, `Python` indexes from $0.$)\n\n::: {#ccec8feb .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.076007Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.075893Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.078027Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.077777Z\"}' execution_count=58}\n``` {.python .cell-code}\nA[1,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=172}\n```\n6\n```\n:::\n:::\n\n\nThe first number after the open-bracket symbol `[`\n refers to the row, and the second number refers to the column. \n\n### Indexing Rows, Columns, and Submatrices\n To select multiple rows at a time, we can pass in a list\n  specifying our selection. For instance, `[1,3]` will retrieve the second and fourth rows:\n\n::: {#9d4f9599 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.079352Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.079256Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.081380Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.081110Z\"}' execution_count=59}\n``` {.python .cell-code}\nA[[1,3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=173}\n```\narray([[ 4,  5,  6,  7],\n       [12, 13, 14, 15]])\n```\n:::\n:::\n\n\nTo select the first and third columns, we pass in  `[0,2]` as the second argument in the square brackets.\nIn this case we need to supply the first argument `:` \nwhich selects all rows.\n\n::: {#ca120886 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.082810Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.082704Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.084763Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.084520Z\"}' execution_count=60}\n``` {.python .cell-code}\nA[:,[0,2]]\n```\n\n::: {.cell-output .cell-output-display execution_count=174}\n```\narray([[ 0,  2],\n       [ 4,  6],\n       [ 8, 10],\n       [12, 14]])\n```\n:::\n:::\n\n\nNow, suppose that we want to select the submatrix made up of the second and fourth \nrows as well as the first and third columns. This is where\nindexing gets slightly tricky. It is natural to try  to use lists to retrieve the rows and columns:\n\n::: {#f62afd24 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.086007Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.085913Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.087984Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.087713Z\"}' execution_count=61}\n``` {.python .cell-code}\nA[[1,3],[0,2]]\n```\n\n::: {.cell-output .cell-output-display execution_count=175}\n```\narray([ 4, 14])\n```\n:::\n:::\n\n\n Oops --- what happened? We got a one-dimensional array of length two identical to\n\n::: {#381b639e .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.089374Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.089274Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.091441Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.091187Z\"}' execution_count=62}\n``` {.python .cell-code}\nnp.array([A[1,0],A[3,2]])\n```\n\n::: {.cell-output .cell-output-display execution_count=176}\n```\narray([ 4, 14])\n```\n:::\n:::\n\n\n Similarly,  the following code fails to extract the submatrix comprised of the second and fourth rows and the first, third, and fourth columns:\n\n::: {#432dd31b .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.092746Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.092650Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.108005Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.107740Z\"}' execution_count=63}\n``` {.python .cell-code}\nA[[1,3],[0,2,3]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[177], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">A</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">,</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">,</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">,</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-red-fg\">IndexError</span>: shape mismatch: indexing arrays could not be broadcast together with shapes (2,) (3,) </pre>\n```\n:::\n\n:::\n:::\n\n\nWe can see what has gone wrong here. When supplied with two indexing lists, the `numpy` interpretation is that these provide pairs of $i,j$ indices for a series of entries. That is why the pair of lists must have the same length. However, that was not our intent, since we are looking for a submatrix.\n\nOne easy way to do this is as follows. We first create a submatrix by subsetting the rows of `A`, and then on the fly we make a further submatrix by subsetting its columns.\n\n::: {#0250c8c9 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.109699Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.109581Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.111728Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.111490Z\"}' execution_count=64}\n``` {.python .cell-code}\nA[[1,3]][:,[0,2]]\n```\n\n::: {.cell-output .cell-output-display execution_count=178}\n```\narray([[ 4,  6],\n       [12, 14]])\n```\n:::\n:::\n\n\nThere are more efficient ways of achieving the same result.\n\nThe *convenience function* `np.ix_()` allows us  to extract a submatrix\nusing lists, by creating an intermediate *mesh* object.\n\n::: {#2d2a40b6 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.113315Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.113196Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.115420Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.115148Z\"}' execution_count=65}\n``` {.python .cell-code}\nidx = np.ix_([1,3],[0,2,3])\nA[idx]\n```\n\n::: {.cell-output .cell-output-display execution_count=179}\n```\narray([[ 4,  6,  7],\n       [12, 14, 15]])\n```\n:::\n:::\n\n\n\nAlternatively, we can subset matrices efficiently using slices.\n  \nThe slice\n`1:4:2` captures the second and fourth items of a sequence, while the slice `0:3:2` captures\nthe first and third items (the third element in a slice sequence is the step size).\n\n::: {#8972a3da .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.116829Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.116730Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.118831Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.118589Z\"}' execution_count=66}\n``` {.python .cell-code}\nA[1:4:2,0:3:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=180}\n```\narray([[ 4,  6],\n       [12, 14]])\n```\n:::\n:::\n\n\nWhy are we able to retrieve a submatrix directly using slices but not using lists?\nIts because they are different `Python` types, and\nare treated differently by `numpy`.\nSlices can be used to extract objects from arbitrary sequences, such as strings, lists, and tuples, while the use of lists for indexing is more limited.\n\n\n\n\n    \n\n \n\n    \n\n \n\n### Boolean Indexing\nIn `numpy`, a *Boolean* is a type  that equals either   `True` or  `False` (also represented as $1$ and $0$, respectively).\nThe next line creates a vector of $0$'s, represented as Booleans, of length equal to the first dimension of `A`. \n\n::: {#35ca4156 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.120208Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.120116Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.122067Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.121820Z\"}' execution_count=67}\n``` {.python .cell-code}\nkeep_rows = np.zeros(A.shape[0], bool)\nkeep_rows\n```\n\n::: {.cell-output .cell-output-display execution_count=181}\n```\narray([False, False, False, False])\n```\n:::\n:::\n\n\nWe now set two of the elements to `True`. \n\n::: {#cf44d2ff .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.123503Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.123411Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.125341Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.125066Z\"}' execution_count=68}\n``` {.python .cell-code}\nkeep_rows[[1,3]] = True\nkeep_rows\n```\n\n::: {.cell-output .cell-output-display execution_count=182}\n```\narray([False,  True, False,  True])\n```\n:::\n:::\n\n\nNote that the elements of `keep_rows`, when viewed as integers, are the same as the\nvalues of `np.array([0,1,0,1])`. Below, we use  `==` to verify their equality. When\napplied to two arrays, the `==`   operation is applied elementwise.\n\n::: {#8696caf2 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.126860Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.126762Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.128900Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.128625Z\"}' execution_count=69}\n``` {.python .cell-code}\nnp.all(keep_rows == np.array([0,1,0,1]))\n```\n\n::: {.cell-output .cell-output-display execution_count=183}\n```\nTrue\n```\n:::\n:::\n\n\n(Here, the function `np.all()` has checked whether\nall entries of an array are `True`. A similar function, `np.any()`, can be used to check whether any entries of an array are `True`.)\n\n   However, even though `np.array([0,1,0,1])`  and `keep_rows` are equal according to `==`, they index different sets of rows!\nThe former retrieves the first, second, first, and second rows of `A`. \n\n::: {#1dd27379 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.130396Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.130289Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.132282Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.132070Z\"}' execution_count=70}\n``` {.python .cell-code}\nA[np.array([0,1,0,1])]\n```\n\n::: {.cell-output .cell-output-display execution_count=184}\n```\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7],\n       [0, 1, 2, 3],\n       [4, 5, 6, 7]])\n```\n:::\n:::\n\n\n By contrast, `keep_rows` retrieves only the second and fourth rows  of `A` --- i.e. the rows for which the Boolean equals `TRUE`. \n\n::: {#e0ffa96f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.133653Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.133556Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.135615Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.135315Z\"}' execution_count=71}\n``` {.python .cell-code}\nA[keep_rows]\n```\n\n::: {.cell-output .cell-output-display execution_count=185}\n```\narray([[ 4,  5,  6,  7],\n       [12, 13, 14, 15]])\n```\n:::\n:::\n\n\nThis example shows that Booleans and integers are treated differently by `numpy`.\n\nWe again make use of the `np.ix_()` function\n to create a mesh containing the second and fourth rows, and the first,  third, and fourth columns. This time, we apply the function to Booleans,\n rather than lists.\n\n::: {#5929c3ef .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.137042Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.136932Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.139277Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.138995Z\"}' execution_count=72}\n``` {.python .cell-code}\nkeep_cols = np.zeros(A.shape[1], bool)\nkeep_cols[[0, 2, 3]] = True\nidx_bool = np.ix_(keep_rows, keep_cols)\nA[idx_bool]\n```\n\n::: {.cell-output .cell-output-display execution_count=186}\n```\narray([[ 4,  6,  7],\n       [12, 14, 15]])\n```\n:::\n:::\n\n\nWe can also mix a list with an array of Booleans in the arguments to `np.ix_()`:\n\n::: {#83d2b39f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.140843Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.140734Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.142836Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.142595Z\"}' execution_count=73}\n``` {.python .cell-code}\nidx_mixed = np.ix_([1,3], keep_cols)\nA[idx_mixed]\n```\n\n::: {.cell-output .cell-output-display execution_count=187}\n```\narray([[ 4,  6,  7],\n       [12, 14, 15]])\n```\n:::\n:::\n\n\nFor more details on indexing in `numpy`, readers are referred\nto the `numpy` tutorial mentioned earlier.\n\n## Loading Data\n\nData sets often contain different types of data, and may have names associated with the rows or columns. \nFor these reasons, they typically are best accommodated using a\n *data frame*. \n We can think of a data frame  as a sequence\nof arrays of identical length; these are the columns. Entries in the\ndifferent arrays can be combined to form a row.\n The `pandas`\nlibrary can be used to create and work with data frame objects.\n\n### Reading in a Data Set\n\nThe first step of most analyses involves importing a data set into\n`Python`.  \n Before attempting to load\na data set, we must make sure that `Python` knows where to find the file containing it. \nIf the\nfile is in the same location\nas this notebook file, then we are all set. \nOtherwise, \nthe command\n`os.chdir()`  can be used to *change directory*. (You will need to call `import os` before calling `os.chdir()`.) \n\nWe will begin by reading in `Auto.csv`, available on the book website. This is a comma-separated file, and can be read in using `pd.read_csv()`: \n\n::: {#d4ef2fd9 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.144284Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.144189Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.323344Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.323105Z\"}' execution_count=74}\n``` {.python .cell-code}\nimport pandas as pd\nAuto = pd.read_csv('Auto.csv')\nAuto\n```\n\n::: {.cell-output .cell-output-display execution_count=188}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>1</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>1</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>1</td>\n      <td>ford torino</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>387</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>86</td>\n      <td>2790</td>\n      <td>15.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>ford mustang gl</td>\n    </tr>\n    <tr>\n      <th>388</th>\n      <td>44.0</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>52</td>\n      <td>2130</td>\n      <td>24.6</td>\n      <td>82</td>\n      <td>2</td>\n      <td>vw pickup</td>\n    </tr>\n    <tr>\n      <th>389</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84</td>\n      <td>2295</td>\n      <td>11.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>dodge rampage</td>\n    </tr>\n    <tr>\n      <th>390</th>\n      <td>28.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>79</td>\n      <td>2625</td>\n      <td>18.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>ford ranger</td>\n    </tr>\n    <tr>\n      <th>391</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>82</td>\n      <td>2720</td>\n      <td>19.4</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chevy s-10</td>\n    </tr>\n  </tbody>\n</table>\n<p>392 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe book website also has a whitespace-delimited version of this data, called `Auto.data`. This can be read in as follows:\n\n::: {#bee80244 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.324726Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.324623Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.327567Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.327331Z\"}' execution_count=75}\n``` {.python .cell-code}\nAuto = pd.read_csv('Auto.data', delim_whitespace=True)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_91354/2891344115.py:1: FutureWarning:\n\nThe 'delim_whitespace' keyword in pd.read_csv is deprecated and will be removed in a future version. Use ``sep='\\s+'`` instead\n\n```\n:::\n:::\n\n\n Both `Auto.csv` and `Auto.data` are simply text\nfiles. Before loading data into `Python`, it is a good idea to view it using\na text editor or other software, such as Microsoft Excel.\n\n\nWe now take a look at the column of `Auto` corresponding to the variable `horsepower`: \n\n::: {#9a6245d1 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.328873Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.328782Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.331187Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.330966Z\"}' execution_count=76}\n``` {.python .cell-code}\nAuto['horsepower']\n```\n\n::: {.cell-output .cell-output-display execution_count=190}\n```\n0      130.0\n1      165.0\n2      150.0\n3      150.0\n4      140.0\n       ...  \n392    86.00\n393    52.00\n394    84.00\n395    79.00\n396    82.00\nName: horsepower, Length: 397, dtype: object\n```\n:::\n:::\n\n\nWe see that the `dtype` of this column is `object`. \nIt turns out that all values of the `horsepower` column were interpreted as strings when reading\nin the data. \nWe can find out why by looking at the unique values.\n\n::: {#81351180 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.332465Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.332343Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.334500Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.334302Z\"}' execution_count=77}\n``` {.python .cell-code}\nnp.unique(Auto['horsepower'])\n```\n\n::: {.cell-output .cell-output-display execution_count=191}\n```\narray(['100.0', '102.0', '103.0', '105.0', '107.0', '108.0', '110.0',\n       '112.0', '113.0', '115.0', '116.0', '120.0', '122.0', '125.0',\n       '129.0', '130.0', '132.0', '133.0', '135.0', '137.0', '138.0',\n       '139.0', '140.0', '142.0', '145.0', '148.0', '149.0', '150.0',\n       '152.0', '153.0', '155.0', '158.0', '160.0', '165.0', '167.0',\n       '170.0', '175.0', '180.0', '190.0', '193.0', '198.0', '200.0',\n       '208.0', '210.0', '215.0', '220.0', '225.0', '230.0', '46.00',\n       '48.00', '49.00', '52.00', '53.00', '54.00', '58.00', '60.00',\n       '61.00', '62.00', '63.00', '64.00', '65.00', '66.00', '67.00',\n       '68.00', '69.00', '70.00', '71.00', '72.00', '74.00', '75.00',\n       '76.00', '77.00', '78.00', '79.00', '80.00', '81.00', '82.00',\n       '83.00', '84.00', '85.00', '86.00', '87.00', '88.00', '89.00',\n       '90.00', '91.00', '92.00', '93.00', '94.00', '95.00', '96.00',\n       '97.00', '98.00', '?'], dtype=object)\n```\n:::\n:::\n\n\nWe see the culprit is the value `?`, which is being used to encode missing values.\n\n\nTo fix the problem, we must provide `pd.read_csv()` with an argument called `na_values`.\nNow,  each instance of  `?` in the file is replaced with the\nvalue `np.nan`, which means *not a number*:\n\n::: {#84b81b92 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.335798Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.335712Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.338898Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.338695Z\"}' execution_count=78}\n``` {.python .cell-code}\nAuto = pd.read_csv('Auto.data',\n                   na_values=['?'],\n                   delim_whitespace=True)\nAuto['horsepower'].sum()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_91354/931034241.py:1: FutureWarning:\n\nThe 'delim_whitespace' keyword in pd.read_csv is deprecated and will be removed in a future version. Use ``sep='\\s+'`` instead\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=192}\n```\n40952.0\n```\n:::\n:::\n\n\n\nThe `Auto.shape`  attribute tells us that the data has 397\nobservations, or rows, and nine variables, or columns.\n\n::: {#70e05ade .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.340150Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.340081Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.341961Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.341744Z\"}' execution_count=79}\n``` {.python .cell-code}\nAuto.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=193}\n```\n(397, 9)\n```\n:::\n:::\n\n\nThere are\nvarious ways to deal with  missing data. \nIn this case, since only five of the rows contain missing\nobservations,  we choose to use the `Auto.dropna()` method to simply remove these rows.\n\n::: {#b312fc64 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.343152Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.343088Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.345337Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.345111Z\"}' execution_count=80}\n``` {.python .cell-code}\nAuto_new = Auto.dropna()\nAuto_new.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\n(392, 9)\n```\n:::\n:::\n\n\n\n### Basics of Selecting Rows and Columns\n \nWe can use `Auto.columns`  to check the variable names.\n\n::: {#6904f3a6 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.346569Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.346495Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.348509Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.348265Z\"}' execution_count=81}\n``` {.python .cell-code}\nAuto = Auto_new # overwrite the previous value\nAuto.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=195}\n```\nIndex(['mpg', 'cylinders', 'displacement', 'horsepower', 'weight',\n       'acceleration', 'year', 'origin', 'name'],\n      dtype='object')\n```\n:::\n:::\n\n\n\nAccessing the rows and columns of a data frame is similar, but not identical, to accessing the rows and columns of an array. \nRecall that the first argument to the `[]` method\nis always applied to the rows of the array.  \nSimilarly, \npassing in a slice to the `[]` method creates a data frame whose *rows* are determined by the slice:\n\n::: {#bfa93536 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.349852Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.349784Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.353582Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.353356Z\"}' execution_count=82}\n``` {.python .cell-code}\nAuto[:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=196}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504.0</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693.0</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>1</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436.0</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>1</td>\n      <td>plymouth satellite</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSimilarly, an array of Booleans can be used to subset the rows:\n\n::: {#09c0065f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.354951Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.354871Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.366222Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.365980Z\"}' execution_count=83}\n``` {.python .cell-code}\nidx_80 = Auto['year'] > 80\nAuto[idx_80]\n```\n\n::: {.cell-output .cell-output-display execution_count=197}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>338</th>\n      <td>27.2</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2490.0</td>\n      <td>15.7</td>\n      <td>81</td>\n      <td>1</td>\n      <td>plymouth reliant</td>\n    </tr>\n    <tr>\n      <th>339</th>\n      <td>26.6</td>\n      <td>4</td>\n      <td>151.0</td>\n      <td>84.0</td>\n      <td>2635.0</td>\n      <td>16.4</td>\n      <td>81</td>\n      <td>1</td>\n      <td>buick skylark</td>\n    </tr>\n    <tr>\n      <th>340</th>\n      <td>25.8</td>\n      <td>4</td>\n      <td>156.0</td>\n      <td>92.0</td>\n      <td>2620.0</td>\n      <td>14.4</td>\n      <td>81</td>\n      <td>1</td>\n      <td>dodge aries wagon (sw)</td>\n    </tr>\n    <tr>\n      <th>341</th>\n      <td>23.5</td>\n      <td>6</td>\n      <td>173.0</td>\n      <td>110.0</td>\n      <td>2725.0</td>\n      <td>12.6</td>\n      <td>81</td>\n      <td>1</td>\n      <td>chevrolet citation</td>\n    </tr>\n    <tr>\n      <th>342</th>\n      <td>30.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2385.0</td>\n      <td>12.9</td>\n      <td>81</td>\n      <td>1</td>\n      <td>plymouth reliant</td>\n    </tr>\n    <tr>\n      <th>343</th>\n      <td>39.1</td>\n      <td>4</td>\n      <td>79.0</td>\n      <td>58.0</td>\n      <td>1755.0</td>\n      <td>16.9</td>\n      <td>81</td>\n      <td>3</td>\n      <td>toyota starlet</td>\n    </tr>\n    <tr>\n      <th>344</th>\n      <td>39.0</td>\n      <td>4</td>\n      <td>86.0</td>\n      <td>64.0</td>\n      <td>1875.0</td>\n      <td>16.4</td>\n      <td>81</td>\n      <td>1</td>\n      <td>plymouth champ</td>\n    </tr>\n    <tr>\n      <th>345</th>\n      <td>35.1</td>\n      <td>4</td>\n      <td>81.0</td>\n      <td>60.0</td>\n      <td>1760.0</td>\n      <td>16.1</td>\n      <td>81</td>\n      <td>3</td>\n      <td>honda civic 1300</td>\n    </tr>\n    <tr>\n      <th>346</th>\n      <td>32.3</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>67.0</td>\n      <td>2065.0</td>\n      <td>17.8</td>\n      <td>81</td>\n      <td>3</td>\n      <td>subaru</td>\n    </tr>\n    <tr>\n      <th>347</th>\n      <td>37.0</td>\n      <td>4</td>\n      <td>85.0</td>\n      <td>65.0</td>\n      <td>1975.0</td>\n      <td>19.4</td>\n      <td>81</td>\n      <td>3</td>\n      <td>datsun 210 mpg</td>\n    </tr>\n    <tr>\n      <th>348</th>\n      <td>37.7</td>\n      <td>4</td>\n      <td>89.0</td>\n      <td>62.0</td>\n      <td>2050.0</td>\n      <td>17.3</td>\n      <td>81</td>\n      <td>3</td>\n      <td>toyota tercel</td>\n    </tr>\n    <tr>\n      <th>349</th>\n      <td>34.1</td>\n      <td>4</td>\n      <td>91.0</td>\n      <td>68.0</td>\n      <td>1985.0</td>\n      <td>16.0</td>\n      <td>81</td>\n      <td>3</td>\n      <td>mazda glc 4</td>\n    </tr>\n    <tr>\n      <th>350</th>\n      <td>34.7</td>\n      <td>4</td>\n      <td>105.0</td>\n      <td>63.0</td>\n      <td>2215.0</td>\n      <td>14.9</td>\n      <td>81</td>\n      <td>1</td>\n      <td>plymouth horizon 4</td>\n    </tr>\n    <tr>\n      <th>351</th>\n      <td>34.4</td>\n      <td>4</td>\n      <td>98.0</td>\n      <td>65.0</td>\n      <td>2045.0</td>\n      <td>16.2</td>\n      <td>81</td>\n      <td>1</td>\n      <td>ford escort 4w</td>\n    </tr>\n    <tr>\n      <th>352</th>\n      <td>29.9</td>\n      <td>4</td>\n      <td>98.0</td>\n      <td>65.0</td>\n      <td>2380.0</td>\n      <td>20.7</td>\n      <td>81</td>\n      <td>1</td>\n      <td>ford escort 2h</td>\n    </tr>\n    <tr>\n      <th>353</th>\n      <td>33.0</td>\n      <td>4</td>\n      <td>105.0</td>\n      <td>74.0</td>\n      <td>2190.0</td>\n      <td>14.2</td>\n      <td>81</td>\n      <td>2</td>\n      <td>volkswagen jetta</td>\n    </tr>\n    <tr>\n      <th>355</th>\n      <td>33.7</td>\n      <td>4</td>\n      <td>107.0</td>\n      <td>75.0</td>\n      <td>2210.0</td>\n      <td>14.4</td>\n      <td>81</td>\n      <td>3</td>\n      <td>honda prelude</td>\n    </tr>\n    <tr>\n      <th>356</th>\n      <td>32.4</td>\n      <td>4</td>\n      <td>108.0</td>\n      <td>75.0</td>\n      <td>2350.0</td>\n      <td>16.8</td>\n      <td>81</td>\n      <td>3</td>\n      <td>toyota corolla</td>\n    </tr>\n    <tr>\n      <th>357</th>\n      <td>32.9</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>100.0</td>\n      <td>2615.0</td>\n      <td>14.8</td>\n      <td>81</td>\n      <td>3</td>\n      <td>datsun 200sx</td>\n    </tr>\n    <tr>\n      <th>358</th>\n      <td>31.6</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>74.0</td>\n      <td>2635.0</td>\n      <td>18.3</td>\n      <td>81</td>\n      <td>3</td>\n      <td>mazda 626</td>\n    </tr>\n    <tr>\n      <th>359</th>\n      <td>28.1</td>\n      <td>4</td>\n      <td>141.0</td>\n      <td>80.0</td>\n      <td>3230.0</td>\n      <td>20.4</td>\n      <td>81</td>\n      <td>2</td>\n      <td>peugeot 505s turbo diesel</td>\n    </tr>\n    <tr>\n      <th>360</th>\n      <td>30.7</td>\n      <td>6</td>\n      <td>145.0</td>\n      <td>76.0</td>\n      <td>3160.0</td>\n      <td>19.6</td>\n      <td>81</td>\n      <td>2</td>\n      <td>volvo diesel</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>25.4</td>\n      <td>6</td>\n      <td>168.0</td>\n      <td>116.0</td>\n      <td>2900.0</td>\n      <td>12.6</td>\n      <td>81</td>\n      <td>3</td>\n      <td>toyota cressida</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>24.2</td>\n      <td>6</td>\n      <td>146.0</td>\n      <td>120.0</td>\n      <td>2930.0</td>\n      <td>13.8</td>\n      <td>81</td>\n      <td>3</td>\n      <td>datsun 810 maxima</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>22.4</td>\n      <td>6</td>\n      <td>231.0</td>\n      <td>110.0</td>\n      <td>3415.0</td>\n      <td>15.8</td>\n      <td>81</td>\n      <td>1</td>\n      <td>buick century</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>26.6</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>105.0</td>\n      <td>3725.0</td>\n      <td>19.0</td>\n      <td>81</td>\n      <td>1</td>\n      <td>oldsmobile cutlass ls</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>20.2</td>\n      <td>6</td>\n      <td>200.0</td>\n      <td>88.0</td>\n      <td>3060.0</td>\n      <td>17.1</td>\n      <td>81</td>\n      <td>1</td>\n      <td>ford granada gl</td>\n    </tr>\n    <tr>\n      <th>366</th>\n      <td>17.6</td>\n      <td>6</td>\n      <td>225.0</td>\n      <td>85.0</td>\n      <td>3465.0</td>\n      <td>16.6</td>\n      <td>81</td>\n      <td>1</td>\n      <td>chrysler lebaron salon</td>\n    </tr>\n    <tr>\n      <th>367</th>\n      <td>28.0</td>\n      <td>4</td>\n      <td>112.0</td>\n      <td>88.0</td>\n      <td>2605.0</td>\n      <td>19.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chevrolet cavalier</td>\n    </tr>\n    <tr>\n      <th>368</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>112.0</td>\n      <td>88.0</td>\n      <td>2640.0</td>\n      <td>18.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chevrolet cavalier wagon</td>\n    </tr>\n    <tr>\n      <th>369</th>\n      <td>34.0</td>\n      <td>4</td>\n      <td>112.0</td>\n      <td>88.0</td>\n      <td>2395.0</td>\n      <td>18.0</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chevrolet cavalier 2-door</td>\n    </tr>\n    <tr>\n      <th>370</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>112.0</td>\n      <td>85.0</td>\n      <td>2575.0</td>\n      <td>16.2</td>\n      <td>82</td>\n      <td>1</td>\n      <td>pontiac j2000 se hatchback</td>\n    </tr>\n    <tr>\n      <th>371</th>\n      <td>29.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2525.0</td>\n      <td>16.0</td>\n      <td>82</td>\n      <td>1</td>\n      <td>dodge aries se</td>\n    </tr>\n    <tr>\n      <th>372</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>151.0</td>\n      <td>90.0</td>\n      <td>2735.0</td>\n      <td>18.0</td>\n      <td>82</td>\n      <td>1</td>\n      <td>pontiac phoenix</td>\n    </tr>\n    <tr>\n      <th>373</th>\n      <td>24.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>92.0</td>\n      <td>2865.0</td>\n      <td>16.4</td>\n      <td>82</td>\n      <td>1</td>\n      <td>ford fairmont futura</td>\n    </tr>\n    <tr>\n      <th>374</th>\n      <td>36.0</td>\n      <td>4</td>\n      <td>105.0</td>\n      <td>74.0</td>\n      <td>1980.0</td>\n      <td>15.3</td>\n      <td>82</td>\n      <td>2</td>\n      <td>volkswagen rabbit l</td>\n    </tr>\n    <tr>\n      <th>375</th>\n      <td>37.0</td>\n      <td>4</td>\n      <td>91.0</td>\n      <td>68.0</td>\n      <td>2025.0</td>\n      <td>18.2</td>\n      <td>82</td>\n      <td>3</td>\n      <td>mazda glc custom l</td>\n    </tr>\n    <tr>\n      <th>376</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>91.0</td>\n      <td>68.0</td>\n      <td>1970.0</td>\n      <td>17.6</td>\n      <td>82</td>\n      <td>3</td>\n      <td>mazda glc custom</td>\n    </tr>\n    <tr>\n      <th>377</th>\n      <td>38.0</td>\n      <td>4</td>\n      <td>105.0</td>\n      <td>63.0</td>\n      <td>2125.0</td>\n      <td>14.7</td>\n      <td>82</td>\n      <td>1</td>\n      <td>plymouth horizon miser</td>\n    </tr>\n    <tr>\n      <th>378</th>\n      <td>36.0</td>\n      <td>4</td>\n      <td>98.0</td>\n      <td>70.0</td>\n      <td>2125.0</td>\n      <td>17.3</td>\n      <td>82</td>\n      <td>1</td>\n      <td>mercury lynx l</td>\n    </tr>\n    <tr>\n      <th>379</th>\n      <td>36.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>88.0</td>\n      <td>2160.0</td>\n      <td>14.5</td>\n      <td>82</td>\n      <td>3</td>\n      <td>nissan stanza xe</td>\n    </tr>\n    <tr>\n      <th>380</th>\n      <td>36.0</td>\n      <td>4</td>\n      <td>107.0</td>\n      <td>75.0</td>\n      <td>2205.0</td>\n      <td>14.5</td>\n      <td>82</td>\n      <td>3</td>\n      <td>honda accord</td>\n    </tr>\n    <tr>\n      <th>381</th>\n      <td>34.0</td>\n      <td>4</td>\n      <td>108.0</td>\n      <td>70.0</td>\n      <td>2245.0</td>\n      <td>16.9</td>\n      <td>82</td>\n      <td>3</td>\n      <td>toyota corolla</td>\n    </tr>\n    <tr>\n      <th>382</th>\n      <td>38.0</td>\n      <td>4</td>\n      <td>91.0</td>\n      <td>67.0</td>\n      <td>1965.0</td>\n      <td>15.0</td>\n      <td>82</td>\n      <td>3</td>\n      <td>honda civic</td>\n    </tr>\n    <tr>\n      <th>383</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>91.0</td>\n      <td>67.0</td>\n      <td>1965.0</td>\n      <td>15.7</td>\n      <td>82</td>\n      <td>3</td>\n      <td>honda civic (auto)</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>38.0</td>\n      <td>4</td>\n      <td>91.0</td>\n      <td>67.0</td>\n      <td>1995.0</td>\n      <td>16.2</td>\n      <td>82</td>\n      <td>3</td>\n      <td>datsun 310 gx</td>\n    </tr>\n    <tr>\n      <th>385</th>\n      <td>25.0</td>\n      <td>6</td>\n      <td>181.0</td>\n      <td>110.0</td>\n      <td>2945.0</td>\n      <td>16.4</td>\n      <td>82</td>\n      <td>1</td>\n      <td>buick century limited</td>\n    </tr>\n    <tr>\n      <th>386</th>\n      <td>38.0</td>\n      <td>6</td>\n      <td>262.0</td>\n      <td>85.0</td>\n      <td>3015.0</td>\n      <td>17.0</td>\n      <td>82</td>\n      <td>1</td>\n      <td>oldsmobile cutlass ciera (diesel)</td>\n    </tr>\n    <tr>\n      <th>387</th>\n      <td>26.0</td>\n      <td>4</td>\n      <td>156.0</td>\n      <td>92.0</td>\n      <td>2585.0</td>\n      <td>14.5</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chrysler lebaron medallion</td>\n    </tr>\n    <tr>\n      <th>388</th>\n      <td>22.0</td>\n      <td>6</td>\n      <td>232.0</td>\n      <td>112.0</td>\n      <td>2835.0</td>\n      <td>14.7</td>\n      <td>82</td>\n      <td>1</td>\n      <td>ford granada l</td>\n    </tr>\n    <tr>\n      <th>389</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>144.0</td>\n      <td>96.0</td>\n      <td>2665.0</td>\n      <td>13.9</td>\n      <td>82</td>\n      <td>3</td>\n      <td>toyota celica gt</td>\n    </tr>\n    <tr>\n      <th>390</th>\n      <td>36.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2370.0</td>\n      <td>13.0</td>\n      <td>82</td>\n      <td>1</td>\n      <td>dodge charger 2.2</td>\n    </tr>\n    <tr>\n      <th>391</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>151.0</td>\n      <td>90.0</td>\n      <td>2950.0</td>\n      <td>17.3</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chevrolet camaro</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>86.0</td>\n      <td>2790.0</td>\n      <td>15.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>ford mustang gl</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>44.0</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>52.0</td>\n      <td>2130.0</td>\n      <td>24.6</td>\n      <td>82</td>\n      <td>2</td>\n      <td>vw pickup</td>\n    </tr>\n    <tr>\n      <th>394</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2295.0</td>\n      <td>11.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>dodge rampage</td>\n    </tr>\n    <tr>\n      <th>395</th>\n      <td>28.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>79.0</td>\n      <td>2625.0</td>\n      <td>18.6</td>\n      <td>82</td>\n      <td>1</td>\n      <td>ford ranger</td>\n    </tr>\n    <tr>\n      <th>396</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>82.0</td>\n      <td>2720.0</td>\n      <td>19.4</td>\n      <td>82</td>\n      <td>1</td>\n      <td>chevy s-10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHowever, if we pass  in a list of strings to the `[]` method, then we obtain a data frame containing the corresponding set of *columns*. \n\n::: {#8b43f15e .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.367542Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.367463Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.371446Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.371187Z\"}' execution_count=84}\n``` {.python .cell-code}\nAuto[['mpg', 'horsepower']]\n```\n\n::: {.cell-output .cell-output-display execution_count=198}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>horsepower</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>130.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>165.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>140.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>27.0</td>\n      <td>86.0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>44.0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>394</th>\n      <td>32.0</td>\n      <td>84.0</td>\n    </tr>\n    <tr>\n      <th>395</th>\n      <td>28.0</td>\n      <td>79.0</td>\n    </tr>\n    <tr>\n      <th>396</th>\n      <td>31.0</td>\n      <td>82.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>392 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nSince we did not specify an *index* column when we loaded our data frame, the rows are labeled using integers\n0 to 396.\n\n::: {#c2e0bc84 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.372753Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.372683Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.374830Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.374522Z\"}' execution_count=85}\n``` {.python .cell-code}\nAuto.index\n```\n\n::: {.cell-output .cell-output-display execution_count=199}\n```\nIndex([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       387, 388, 389, 390, 391, 392, 393, 394, 395, 396],\n      dtype='int64', length=392)\n```\n:::\n:::\n\n\nWe can use the\n`set_index()` method to re-name the rows using the contents of `Auto['name']`. \n\n::: {#a9e14efd .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.376370Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.376285Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.381671Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.381414Z\"}' execution_count=86}\n``` {.python .cell-code}\nAuto_re = Auto.set_index('name')\nAuto_re\n```\n\n::: {.cell-output .cell-output-display execution_count=200}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>chevrolet chevelle malibu</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504.0</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>buick skylark 320</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693.0</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>plymouth satellite</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436.0</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>amc rebel sst</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433.0</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford torino</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449.0</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>ford mustang gl</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>86.0</td>\n      <td>2790.0</td>\n      <td>15.6</td>\n      <td>82</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>vw pickup</th>\n      <td>44.0</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>52.0</td>\n      <td>2130.0</td>\n      <td>24.6</td>\n      <td>82</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>dodge rampage</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2295.0</td>\n      <td>11.6</td>\n      <td>82</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford ranger</th>\n      <td>28.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>79.0</td>\n      <td>2625.0</td>\n      <td>18.6</td>\n      <td>82</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevy s-10</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>82.0</td>\n      <td>2720.0</td>\n      <td>19.4</td>\n      <td>82</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>392 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#6d1e4e5c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.383087Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.382999Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.385187Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.384964Z\"}' execution_count=87}\n``` {.python .cell-code}\nAuto_re.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=201}\n```\nIndex(['mpg', 'cylinders', 'displacement', 'horsepower', 'weight',\n       'acceleration', 'year', 'origin'],\n      dtype='object')\n```\n:::\n:::\n\n\nWe see that the column `'name'` is no longer there.\n \nNow that the index has been set to `name`, we can  access rows of the data \nframe by `name` using the `{loc[]`} method of\n`Auto`:\n\n::: {#4b0e4a7a .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.386485Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.386407Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.390332Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.390075Z\"}' execution_count=88}\n``` {.python .cell-code}\nrows = ['amc rebel sst', 'ford torino']\nAuto_re.loc[rows]\n```\n\n::: {.cell-output .cell-output-display execution_count=202}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>amc rebel sst</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433.0</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford torino</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449.0</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs an alternative to using the index name, we could retrieve the 4th and 5th rows of `Auto` using the `{iloc[]`} method:\n\n::: {#b83cf883 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.391646Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.391572Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.395313Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.395048Z\"}' execution_count=89}\n``` {.python .cell-code}\nAuto_re.iloc[[3,4]]\n```\n\n::: {.cell-output .cell-output-display execution_count=203}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>amc rebel sst</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433.0</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford torino</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449.0</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can also use it to retrieve the 1st, 3rd and and 4th columns of `Auto_re`:\n\n::: {#dfc30435 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.396633Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.396547Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.400604Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.400364Z\"}' execution_count=90}\n``` {.python .cell-code}\nAuto_re.iloc[:,[0,2,3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=204}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>chevrolet chevelle malibu</th>\n      <td>18.0</td>\n      <td>307.0</td>\n      <td>130.0</td>\n    </tr>\n    <tr>\n      <th>buick skylark 320</th>\n      <td>15.0</td>\n      <td>350.0</td>\n      <td>165.0</td>\n    </tr>\n    <tr>\n      <th>plymouth satellite</th>\n      <td>18.0</td>\n      <td>318.0</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>amc rebel sst</th>\n      <td>16.0</td>\n      <td>304.0</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>ford torino</th>\n      <td>17.0</td>\n      <td>302.0</td>\n      <td>140.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>ford mustang gl</th>\n      <td>27.0</td>\n      <td>140.0</td>\n      <td>86.0</td>\n    </tr>\n    <tr>\n      <th>vw pickup</th>\n      <td>44.0</td>\n      <td>97.0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>dodge rampage</th>\n      <td>32.0</td>\n      <td>135.0</td>\n      <td>84.0</td>\n    </tr>\n    <tr>\n      <th>ford ranger</th>\n      <td>28.0</td>\n      <td>120.0</td>\n      <td>79.0</td>\n    </tr>\n    <tr>\n      <th>chevy s-10</th>\n      <td>31.0</td>\n      <td>119.0</td>\n      <td>82.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>392 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can extract the 4th and 5th rows, as well as the 1st, 3rd and 4th columns, using\na single call to `iloc[]`:\n\n::: {#190acfaa .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.401897Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.401825Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.405021Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.404756Z\"}' execution_count=91}\n``` {.python .cell-code}\nAuto_re.iloc[[3,4],[0,2,3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=205}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>amc rebel sst</th>\n      <td>16.0</td>\n      <td>304.0</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>ford torino</th>\n      <td>17.0</td>\n      <td>302.0</td>\n      <td>140.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIndex entries need not be unique: there are several cars  in the data frame named `ford galaxie 500`.\n\n::: {#c46d619f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.406268Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.406198Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.409290Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.409058Z\"}' execution_count=92}\n``` {.python .cell-code}\nAuto_re.loc['ford galaxie 500', ['mpg', 'origin']]\n```\n\n::: {.cell-output .cell-output-display execution_count=206}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ford galaxie 500</th>\n      <td>15.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford galaxie 500</th>\n      <td>14.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford galaxie 500</th>\n      <td>14.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### More on Selecting Rows and Columns\nSuppose now that we want to create a data frame consisting of the  `weight` and `origin`  of the subset of cars with \n`year` greater than 80 --- i.e. those built after 1980.\nTo do this, we first create a Boolean array that indexes the rows.\nThe `loc[]` method allows for Boolean entries as well as strings:\n\n::: {#a218c83e .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.410553Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.410479Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.415558Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.415322Z\"}' execution_count=93}\n``` {.python .cell-code}\nidx_80 = Auto_re['year'] > 80\nAuto_re.loc[idx_80, ['weight', 'origin']]\n```\n\n::: {.cell-output .cell-output-display execution_count=207}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>plymouth reliant</th>\n      <td>2490.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>buick skylark</th>\n      <td>2635.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>dodge aries wagon (sw)</th>\n      <td>2620.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet citation</th>\n      <td>2725.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>plymouth reliant</th>\n      <td>2385.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>toyota starlet</th>\n      <td>1755.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth champ</th>\n      <td>1875.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>honda civic 1300</th>\n      <td>1760.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>subaru</th>\n      <td>2065.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 210 mpg</th>\n      <td>1975.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota tercel</th>\n      <td>2050.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda glc 4</th>\n      <td>1985.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth horizon 4</th>\n      <td>2215.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford escort 4w</th>\n      <td>2045.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford escort 2h</th>\n      <td>2380.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>volkswagen jetta</th>\n      <td>2190.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>honda prelude</th>\n      <td>2210.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota corolla</th>\n      <td>2350.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 200sx</th>\n      <td>2615.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda 626</th>\n      <td>2635.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>peugeot 505s turbo diesel</th>\n      <td>3230.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>volvo diesel</th>\n      <td>3160.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>toyota cressida</th>\n      <td>2900.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 810 maxima</th>\n      <td>2930.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>buick century</th>\n      <td>3415.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>oldsmobile cutlass ls</th>\n      <td>3725.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford granada gl</th>\n      <td>3060.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chrysler lebaron salon</th>\n      <td>3465.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier</th>\n      <td>2605.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier wagon</th>\n      <td>2640.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier 2-door</th>\n      <td>2395.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>pontiac j2000 se hatchback</th>\n      <td>2575.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>dodge aries se</th>\n      <td>2525.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>pontiac phoenix</th>\n      <td>2735.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford fairmont futura</th>\n      <td>2865.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>volkswagen rabbit l</th>\n      <td>1980.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>mazda glc custom l</th>\n      <td>2025.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda glc custom</th>\n      <td>1970.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth horizon miser</th>\n      <td>2125.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>mercury lynx l</th>\n      <td>2125.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>nissan stanza xe</th>\n      <td>2160.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda accord</th>\n      <td>2205.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota corolla</th>\n      <td>2245.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda civic</th>\n      <td>1965.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda civic (auto)</th>\n      <td>1965.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 310 gx</th>\n      <td>1995.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>buick century limited</th>\n      <td>2945.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>oldsmobile cutlass ciera (diesel)</th>\n      <td>3015.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chrysler lebaron medallion</th>\n      <td>2585.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford granada l</th>\n      <td>2835.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>toyota celica gt</th>\n      <td>2665.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>dodge charger 2.2</th>\n      <td>2370.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet camaro</th>\n      <td>2950.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford mustang gl</th>\n      <td>2790.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>vw pickup</th>\n      <td>2130.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>dodge rampage</th>\n      <td>2295.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford ranger</th>\n      <td>2625.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevy s-10</th>\n      <td>2720.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\nTo do this more concisely, we can use an anonymous function called a `lambda`: \n\n::: {#5fe085c8 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.416807Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.416735Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.421885Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.421649Z\"}' execution_count=94}\n``` {.python .cell-code}\nAuto_re.loc[lambda df: df['year'] > 80, ['weight', 'origin']]\n```\n\n::: {.cell-output .cell-output-display execution_count=208}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>plymouth reliant</th>\n      <td>2490.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>buick skylark</th>\n      <td>2635.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>dodge aries wagon (sw)</th>\n      <td>2620.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet citation</th>\n      <td>2725.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>plymouth reliant</th>\n      <td>2385.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>toyota starlet</th>\n      <td>1755.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth champ</th>\n      <td>1875.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>honda civic 1300</th>\n      <td>1760.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>subaru</th>\n      <td>2065.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 210 mpg</th>\n      <td>1975.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota tercel</th>\n      <td>2050.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda glc 4</th>\n      <td>1985.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth horizon 4</th>\n      <td>2215.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford escort 4w</th>\n      <td>2045.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford escort 2h</th>\n      <td>2380.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>volkswagen jetta</th>\n      <td>2190.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>honda prelude</th>\n      <td>2210.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota corolla</th>\n      <td>2350.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 200sx</th>\n      <td>2615.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda 626</th>\n      <td>2635.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>peugeot 505s turbo diesel</th>\n      <td>3230.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>volvo diesel</th>\n      <td>3160.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>toyota cressida</th>\n      <td>2900.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 810 maxima</th>\n      <td>2930.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>buick century</th>\n      <td>3415.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>oldsmobile cutlass ls</th>\n      <td>3725.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford granada gl</th>\n      <td>3060.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chrysler lebaron salon</th>\n      <td>3465.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier</th>\n      <td>2605.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier wagon</th>\n      <td>2640.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier 2-door</th>\n      <td>2395.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>pontiac j2000 se hatchback</th>\n      <td>2575.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>dodge aries se</th>\n      <td>2525.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>pontiac phoenix</th>\n      <td>2735.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford fairmont futura</th>\n      <td>2865.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>volkswagen rabbit l</th>\n      <td>1980.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>mazda glc custom l</th>\n      <td>2025.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda glc custom</th>\n      <td>1970.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth horizon miser</th>\n      <td>2125.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>mercury lynx l</th>\n      <td>2125.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>nissan stanza xe</th>\n      <td>2160.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda accord</th>\n      <td>2205.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota corolla</th>\n      <td>2245.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda civic</th>\n      <td>1965.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda civic (auto)</th>\n      <td>1965.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 310 gx</th>\n      <td>1995.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>buick century limited</th>\n      <td>2945.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>oldsmobile cutlass ciera (diesel)</th>\n      <td>3015.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chrysler lebaron medallion</th>\n      <td>2585.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford granada l</th>\n      <td>2835.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>toyota celica gt</th>\n      <td>2665.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>dodge charger 2.2</th>\n      <td>2370.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevrolet camaro</th>\n      <td>2950.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford mustang gl</th>\n      <td>2790.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>vw pickup</th>\n      <td>2130.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>dodge rampage</th>\n      <td>2295.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford ranger</th>\n      <td>2625.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevy s-10</th>\n      <td>2720.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe `lambda` call creates a function that takes a single\nargument, here `df`, and returns `df['year']>80`.\nSince it is created inside the `loc[]` method for the\ndataframe `Auto_re`, that dataframe will be the argument supplied.\nAs another example of using a `lambda`, suppose that\nwe want all cars built after 1980 that achieve greater than 30 miles per gallon:\n\n::: {#da20d9a0 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.423165Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.423091Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.427651Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.427390Z\"}' execution_count=95}\n``` {.python .cell-code}\nAuto_re.loc[lambda df: (df['year'] > 80) & (df['mpg'] > 30),\n            ['weight', 'origin']\n           ]\n```\n\n::: {.cell-output .cell-output-display execution_count=209}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>toyota starlet</th>\n      <td>1755.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth champ</th>\n      <td>1875.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>honda civic 1300</th>\n      <td>1760.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>subaru</th>\n      <td>2065.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 210 mpg</th>\n      <td>1975.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota tercel</th>\n      <td>2050.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda glc 4</th>\n      <td>1985.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth horizon 4</th>\n      <td>2215.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford escort 4w</th>\n      <td>2045.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>volkswagen jetta</th>\n      <td>2190.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>honda prelude</th>\n      <td>2210.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota corolla</th>\n      <td>2350.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 200sx</th>\n      <td>2615.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda 626</th>\n      <td>2635.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>volvo diesel</th>\n      <td>3160.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>chevrolet cavalier 2-door</th>\n      <td>2395.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>pontiac j2000 se hatchback</th>\n      <td>2575.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>volkswagen rabbit l</th>\n      <td>1980.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>mazda glc custom l</th>\n      <td>2025.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>mazda glc custom</th>\n      <td>1970.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>plymouth horizon miser</th>\n      <td>2125.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>mercury lynx l</th>\n      <td>2125.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>nissan stanza xe</th>\n      <td>2160.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda accord</th>\n      <td>2205.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>toyota corolla</th>\n      <td>2245.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda civic</th>\n      <td>1965.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>honda civic (auto)</th>\n      <td>1965.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 310 gx</th>\n      <td>1995.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>oldsmobile cutlass ciera (diesel)</th>\n      <td>3015.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>toyota celica gt</th>\n      <td>2665.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>dodge charger 2.2</th>\n      <td>2370.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>vw pickup</th>\n      <td>2130.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>dodge rampage</th>\n      <td>2295.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>chevy s-10</th>\n      <td>2720.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe symbol `&` computes an element-wise *and* operation.\nAs another example, suppose that we want to retrieve all `Ford` and `Datsun`\ncars with `displacement` less than 300. We check whether each `name` entry contains either the string `ford` or `datsun` using the  `str.contains()` method of the `index` attribute of \nof the dataframe:\n\n::: {#8fa8cc2f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.428873Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.428804Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.434121Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.433857Z\"}' execution_count=96}\n``` {.python .cell-code}\nAuto_re.loc[lambda df: (df['displacement'] < 300)\n                       & (df.index.str.contains('ford')\n                       | df.index.str.contains('datsun')),\n            ['weight', 'origin']\n           ]\n```\n\n::: {.cell-output .cell-output-display execution_count=210}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ford maverick</th>\n      <td>2587.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun pl510</th>\n      <td>2130.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun pl510</th>\n      <td>2130.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford torino 500</th>\n      <td>3302.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford mustang</th>\n      <td>3139.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 1200</th>\n      <td>1613.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford pinto runabout</th>\n      <td>2226.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford pinto (sw)</th>\n      <td>2395.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 510 (sw)</th>\n      <td>2288.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford maverick</th>\n      <td>3021.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 610</th>\n      <td>2379.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford pinto</th>\n      <td>2310.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun b210</th>\n      <td>1950.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford pinto</th>\n      <td>2451.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 710</th>\n      <td>2003.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford maverick</th>\n      <td>3158.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford pinto</th>\n      <td>2639.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 710</th>\n      <td>2545.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford pinto</th>\n      <td>2984.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford maverick</th>\n      <td>3012.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford granada ghia</th>\n      <td>3574.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun b-210</th>\n      <td>1990.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford pinto</th>\n      <td>2565.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun f-10 hatchback</th>\n      <td>1945.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford granada</th>\n      <td>3525.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford mustang ii 2+2</th>\n      <td>2755.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 810</th>\n      <td>2815.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford fiesta</th>\n      <td>1800.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun b210 gx</th>\n      <td>2070.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford fairmont (auto)</th>\n      <td>2965.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford fairmont (man)</th>\n      <td>2720.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 510</th>\n      <td>2300.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 200-sx</th>\n      <td>2405.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford fairmont 4</th>\n      <td>2890.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 210</th>\n      <td>2020.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 310</th>\n      <td>2019.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford fairmont</th>\n      <td>2870.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 510 hatchback</th>\n      <td>2434.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 210</th>\n      <td>2110.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 280-zx</th>\n      <td>2910.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 210 mpg</th>\n      <td>1975.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford escort 4w</th>\n      <td>2045.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford escort 2h</th>\n      <td>2380.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 200sx</th>\n      <td>2615.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>datsun 810 maxima</th>\n      <td>2930.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford granada gl</th>\n      <td>3060.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford fairmont futura</th>\n      <td>2865.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>datsun 310 gx</th>\n      <td>1995.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>ford granada l</th>\n      <td>2835.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford mustang gl</th>\n      <td>2790.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ford ranger</th>\n      <td>2625.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere, the symbol `|` computes an element-wise *or* operation.\n \nIn summary, a powerful set of operations is available to index the rows and columns of data frames. For integer based queries, use the `iloc[]` method. For string and Boolean\nselections, use the `loc[]` method. For functional queries that filter rows, use the `loc[]` method\nwith a function (typically a `lambda`) in the rows argument.\n\n## For Loops\nA `for` loop is a standard tool in many languages that\nrepeatedly evaluates some chunk of code while\nvarying different values inside the code.\nFor example, suppose we loop over elements of a list and compute their sum.\n\n::: {#7e5f82f1 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.435453Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.435372Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.437109Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.436843Z\"}' execution_count=97}\n``` {.python .cell-code}\ntotal = 0\nfor value in [3,2,19]:\n    total += value\nprint('Total is: {0}'.format(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal is: 24\n```\n:::\n:::\n\n\nThe indented code beneath the line with the `for` statement is run\nfor each value in the sequence\nspecified in the `for` statement. The loop ends either\nwhen the cell ends or when code is indented at the same level\nas the original `for` statement.\nWe see that the final line above which prints the total is executed\nonly once after the for loop has terminated. Loops\ncan be nested by additional indentation.\n\n::: {#26c99218 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.438521Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.438449Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.440428Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.440188Z\"}' execution_count=98}\n``` {.python .cell-code}\ntotal = 0\nfor value in [2,3,19]:\n    for weight in [3, 2, 1]:\n        total += value * weight\nprint('Total is: {0}'.format(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal is: 144\n```\n:::\n:::\n\n\nAbove, we summed over each combination of `value` and `weight`.\nWe also took advantage of the *increment* notation\nin `Python`: the expression `a += b` is equivalent\nto `a = a + b`. Besides\nbeing a convenient notation, this can save time in computationally\nheavy tasks in which the intermediate value of `a+b` need not\nbe explicitly created.\n\nPerhaps a more\ncommon task would be to sum over `(value, weight)` pairs. For instance,\nto compute the average value of a random variable that takes on\npossible values 2, 3 or 19 with probability 0.2, 0.3, 0.5 respectively\nwe would compute the weighted sum. Tasks such as this\ncan often be accomplished using the `zip()`  function that\nloops over a sequence of tuples.\n\n::: {#1a7acc5f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.441636Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.441560Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.443474Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.443262Z\"}' execution_count=99}\n``` {.python .cell-code}\ntotal = 0\nfor value, weight in zip([2,3,19],\n                         [0.2,0.3,0.5]):\n    total += weight * value\nprint('Weighted average is: {0}'.format(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWeighted average is: 10.8\n```\n:::\n:::\n\n\n### String Formatting\nIn the code chunk above we also printed a string\ndisplaying the total. However, the object `total`\nis an  integer and not a string.\nInserting the value of something into\na string is a common task, made\nsimple using\nsome of the powerful string formatting\ntools in `Python`.\nMany data cleaning tasks involve\nmanipulating and programmatically\nproducing strings.\n\nFor example we may want to loop over the columns of a data frame and\nprint the percent missing in each column.\nLet’s create a data frame `D` with columns in which 20% of the entries are missing i.e. set\nto `np.nan`.  We’ll create the\nvalues in `D` from a normal distribution with mean 0 and variance 1 using `rng.standard_normal()`\nand then overwrite some random entries using `rng.choice()`.\n\n::: {#5dca8c4f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.444779Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.444708Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.448724Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.448517Z\"}' execution_count=100}\n``` {.python .cell-code}\nrng = np.random.default_rng(1)\nA = rng.standard_normal((127, 5))\nM = rng.choice([0, np.nan], p=[0.8,0.2], size=A.shape)\nA += M\nD = pd.DataFrame(A, columns=['food',\n                             'bar',\n                             'pickle',\n                             'snack',\n                             'popcorn'])\nD[:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=214}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>food</th>\n      <th>bar</th>\n      <th>pickle</th>\n      <th>snack</th>\n      <th>popcorn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.345584</td>\n      <td>0.821618</td>\n      <td>0.330437</td>\n      <td>-1.303157</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>-0.536953</td>\n      <td>0.581118</td>\n      <td>0.364572</td>\n      <td>0.294132</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>0.546713</td>\n      <td>NaN</td>\n      <td>-0.162910</td>\n      <td>-0.482119</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\n::: {#8061e526 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.450038Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.449931Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.452280Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.452065Z\"}' execution_count=101}\n``` {.python .cell-code}\nfor col in D.columns:\n    template = 'Column \"{0}\" has {1:.2%} missing values'\n    print(template.format(col,\n          np.isnan(D[col]).mean()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn \"food\" has 16.54% missing values\nColumn \"bar\" has 25.98% missing values\nColumn \"pickle\" has 29.13% missing values\nColumn \"snack\" has 21.26% missing values\nColumn \"popcorn\" has 22.83% missing values\n```\n:::\n:::\n\n\nWe see that the `template.format()` method expects two arguments `{0}`\nand `{1:.2%}`, and the latter includes some formatting\ninformation. In particular, it specifies that the second argument should be expressed as a percent with two decimal digits.\n\nThe reference\n[docs.python.org/3/library/string.html](https://docs.python.org/3/library/string.html)\nincludes many helpful and more complex examples.\n\n## Additional Graphical and Numerical Summaries\nWe can use the `ax.plot()` or  `ax.scatter()`  functions to display the quantitative variables. However, simply typing the variable names will produce an error message,\nbecause `Python` does not know to look in the  `Auto`  data set for those variables.\n\n::: {#c9673dbe .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.453702Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.453623Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.518273Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.518032Z\"}' execution_count=102}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.plot(horsepower, mpg, 'o');\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[216], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> fig, ax <span style=\"color:rgb(98,98,98)\">=</span> subplots(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">8</span>, <span style=\"color:rgb(98,98,98)\">8</span>))\n<span class=\"ansi-green-fg\">----&gt; 2</span> ax<span style=\"color:rgb(98,98,98)\">.</span>plot(<span class=\"ansi-yellow-bg\">horsepower</span>, mpg, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">o</span><span style=\"color:rgb(175,0,0)\">'</span>);\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'horsepower' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-103-output-2.png){width=655 height=638}\n:::\n:::\n\n\nWe can address this by accessing the columns directly:\n\n::: {#db605f1f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.519916Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.519789Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.583555Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.583240Z\"}' execution_count=103}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nax.plot(Auto['horsepower'], Auto['mpg'], 'o');\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-104-output-1.png){width=641 height=633}\n:::\n:::\n\n\nAlternatively, we can use the `plot()` method with the call `Auto.plot()`.\nUsing this method,\nthe variables  can be accessed by name.\nThe plot methods of a data frame return a familiar object:\nan axes. We can use it to update the plot as we did previously: \n\n::: {#9cce051c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.585300Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.585174Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.652899Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.652654Z\"}' execution_count=104}\n``` {.python .cell-code}\nax = Auto.plot.scatter('horsepower', 'mpg')\nax.set_title('Horsepower vs. MPG');\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-105-output-1.png){width=585 height=449}\n:::\n:::\n\n\nIf we want to save\nthe figure that contains a given axes, we can find the relevant figure\nby accessing the `figure` attribute:\n\n::: {#622e477f .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.654736Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.654609Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.686673Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.686397Z\"}' execution_count=105}\n``` {.python .cell-code}\nfig = ax.figure\nfig.savefig('horsepower_mpg.png');\n```\n:::\n\n\nWe can further instruct the data frame to plot to a particular axes object. In this\ncase the corresponding `plot()` method will return the\nmodified axes we passed in as an argument. Note that\nwhen we request a one-dimensional grid of plots, the object `axes` is similarly\none-dimensional. We place our scatter plot in the middle plot of a row of three plots\nwithin a figure.\n\n::: {#5b198970 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.688535Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.688413Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.803975Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.803707Z\"}' execution_count=106}\n``` {.python .cell-code}\nfig, axes = subplots(ncols=3, figsize=(15, 5))\nAuto.plot.scatter('horsepower', 'mpg', ax=axes[1]);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-107-output-1.png){width=1176 height=434}\n:::\n:::\n\n\nNote also that the columns of a data frame can be accessed as attributes: try typing in `Auto.horsepower`. \n\nWe now consider the `cylinders` variable. Typing in `Auto.cylinders.dtype` reveals that it is being treated as a quantitative variable. \nHowever, since there is only a small number of possible values for this variable, we may wish to treat it as \n qualitative.  Below, we replace\nthe `cylinders` column with a categorical version of `Auto.cylinders`. The function `pd.Series()`  owes its name to the fact that `pandas` is often used in time series applications.\n\n::: {#ef98392e .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.805818Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.805711Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.808717Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.808447Z\"}' execution_count=107}\n``` {.python .cell-code}\nAuto.cylinders = pd.Series(Auto.cylinders, dtype='category')\nAuto.cylinders.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=221}\n```\nCategoricalDtype(categories=[3, 4, 5, 6, 8], ordered=False, categories_dtype=int64)\n```\n:::\n:::\n\n\n Now that `cylinders` is qualitative, we can display it using\n the `boxplot()` method.\n\n::: {#7fac48ba .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.810317Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.810186Z\",\"iopub.status.idle\":\"2024-06-05T01:13:24.890120Z\",\"shell.execute_reply\":\"2024-06-05T01:13:24.889777Z\"}' execution_count=108}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nAuto.boxplot('mpg', by='cylinders', ax=ax);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-109-output-1.png){width=660 height=697}\n:::\n:::\n\n\nThe `hist()`  method can be used to plot a *histogram*.\n\n::: {#45943f64 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:24.891763Z\",\"iopub.status.busy\":\"2024-06-05T01:13:24.891650Z\",\"iopub.status.idle\":\"2024-06-05T01:13:25.003998Z\",\"shell.execute_reply\":\"2024-06-05T01:13:25.003699Z\"}' execution_count=109}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nAuto.hist('mpg', ax=ax);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-110-output-1.png){width=641 height=653}\n:::\n:::\n\n\nThe color of the bars and the number of bins can be changed:\n\n::: {#7ebe3c58 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:25.005602Z\",\"iopub.status.busy\":\"2024-06-05T01:13:25.005490Z\",\"iopub.status.idle\":\"2024-06-05T01:13:25.073490Z\",\"shell.execute_reply\":\"2024-06-05T01:13:25.073206Z\"}' execution_count=110}\n``` {.python .cell-code}\nfig, ax = subplots(figsize=(8, 8))\nAuto.hist('mpg', color='red', bins=12, ax=ax);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-111-output-1.png){width=641 height=653}\n:::\n:::\n\n\n See `Auto.hist?` for more plotting\noptions.\n \nWe can use the `pd.plotting.scatter_matrix()`   function to create a *scatterplot matrix* to visualize all of the pairwise relationships between the columns in\na data frame.\n\n::: {#bb2f7488 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:25.074969Z\",\"iopub.status.busy\":\"2024-06-05T01:13:25.074887Z\",\"iopub.status.idle\":\"2024-06-05T01:13:25.692705Z\",\"shell.execute_reply\":\"2024-06-05T01:13:25.692389Z\"}' execution_count=111}\n``` {.python .cell-code}\npd.plotting.scatter_matrix(Auto);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-112-output-1.png){width=598 height=444}\n:::\n:::\n\n\n We can also produce scatterplots\nfor a subset of the variables.\n\n::: {#bab0e367 .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:25.694496Z\",\"iopub.status.busy\":\"2024-06-05T01:13:25.694384Z\",\"iopub.status.idle\":\"2024-06-05T01:13:25.844894Z\",\"shell.execute_reply\":\"2024-06-05T01:13:25.844571Z\"}' execution_count=112}\n``` {.python .cell-code}\npd.plotting.scatter_matrix(Auto[['mpg',\n                                 'displacement',\n                                 'weight']]);\n```\n\n::: {.cell-output .cell-output-display}\n![](Ch02-statlearn-lab_files/figure-html/cell-113-output-1.png){width=595 height=444}\n:::\n:::\n\n\nThe `describe()`  method produces a numerical summary of each column in a data frame.\n\n::: {#571cc9ad .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:25.846556Z\",\"iopub.status.busy\":\"2024-06-05T01:13:25.846449Z\",\"iopub.status.idle\":\"2024-06-05T01:13:25.851555Z\",\"shell.execute_reply\":\"2024-06-05T01:13:25.851286Z\"}' execution_count=113}\n``` {.python .cell-code}\nAuto[['mpg', 'weight']].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=227}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>392.000000</td>\n      <td>392.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>23.445918</td>\n      <td>2977.584184</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.805007</td>\n      <td>849.402560</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>9.000000</td>\n      <td>1613.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>17.000000</td>\n      <td>2225.250000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>22.750000</td>\n      <td>2803.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>29.000000</td>\n      <td>3614.750000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>46.600000</td>\n      <td>5140.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can also produce a summary of just a single column.\n\n::: {#8af5236c .cell execution='{\"iopub.execute_input\":\"2024-06-05T01:13:25.853203Z\",\"iopub.status.busy\":\"2024-06-05T01:13:25.853071Z\",\"iopub.status.idle\":\"2024-06-05T01:13:25.856902Z\",\"shell.execute_reply\":\"2024-06-05T01:13:25.856620Z\"}' execution_count=114}\n``` {.python .cell-code}\nAuto['cylinders'].describe()\nAuto['mpg'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=228}\n```\ncount     392\nunique      5\ntop         4\nfreq      199\nName: cylinders, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=228}\n```\ncount    392.000000\nmean      23.445918\nstd        7.805007\nmin        9.000000\n25%       17.000000\n50%       22.750000\n75%       29.000000\nmax       46.600000\nName: mpg, dtype: float64\n```\n:::\n:::\n\n\nTo exit `Jupyter`,  select `File / Shut Down`.\n\n",
    "supporting": [
      "Ch02-statlearn-lab_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}