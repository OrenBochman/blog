{
  "hash": "764207072b35a7ecc2fa0049f1ff25a8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndraft: true\ntitle: mesa tests\n---\n\nSo this is supposed to become a python Shiney app for the schelling model\nusing mesa modeling environment.\n\n\n\nBut I soon decided to just try to get the demo notebook from [here](https://github.com/projectmesa/mesa-examples/blob/main/examples/schelling/analysis.ipynb) running!\n\n```python\n#| label: installation\n#| eval: False\n\n# This will install or update the \"mese\" package\n!pip install --quiet --upgrade mesa \n# This will install the \"mesa_models\" package\n!pip install -U -e git+https://github.com/projectmesa/mesa-examples#egg=mesa-models\n```\n\n::: {#d4f546d3 .cell execution_count=2}\n``` {.python .cell-code}\nimport mesa\n#| label: importing packages\n#| eval: True\n#| warning: false\n\n# Data visualization tools.\nimport seaborn as sns\n\n# Has multi-dimensional arrays and matrices. Has a large collection of\n# mathematical functions to operate on these arrays.\nimport numpy as np\n\n# Data manipulation and analysis.\nimport pandas as pd\n```\n:::\n\n\n## Create The Agent\n\n::: {#create-agent .cell execution_count=3}\n``` {.python .cell-code}\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, unique_id, model):\n        # Pass the parameters to the parent class.\n        super().__init__(unique_id, model)\n\n        # Create the agent's variable and set the initial values.\n        self.wealth = 1\n\n\n    def move(self):\n        possible_steps = self.model.grid.get_neighborhood(\n            self.pos,\n            moore=True,\n            include_center=False)\n        new_position = self.random.choice(possible_steps)\n        self.model.grid.move_agent(self, new_position)\n\n    def give_money(self):\n        cellmates = self.model.grid.get_cell_list_contents([self.pos])\n        if len(cellmates) > 1:\n            other = self.random.choice(cellmates)\n            other.wealth += 1\n            self.wealth -= 1\n\n\n    def step(self):\n        # The agent's step will go here.\n        if self.wealth > 0:\n            self.give_money()\n\n```\n:::\n\n\n## Create Model\n\n::: {#create-model .cell execution_count=4}\n``` {.python .cell-code}\ndef compute_gini(model):\n    agent_wealths = [agent.wealth for agent in model.schedule.agents]\n    x = sorted(agent_wealths)\n    N = model.num_agents\n    B = sum(xi * (N - i) for i, xi in enumerate(x)) / (N * sum(x))\n    return 1 + (1 / N) - 2 * B\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, N, width, height):\n        super().__init__()\n        self.num_agents = N\n        # create a grid\n        self.grid = mesa.space.MultiGrid(width, height, True)\n        # Create scheduler and assign it to the model\n        self.schedule = mesa.time.RandomActivation(self)\n\n        # Create agents\n        for i in range(self.num_agents):\n            a = MoneyAgent(i, self)            \n            # Add the agent to the scheduler\n            self.schedule.add(a)\n            # Add the agent to a random grid cell\n            x = self.random.randrange(self.grid.width)\n            y = self.random.randrange(self.grid.height)\n            self.grid.place_agent(a, (x, y))\n        \n        self.datacollector = mesa.DataCollector(\n            model_reporters={\"Gini\": compute_gini}, agent_reporters={\"Wealth\": \"wealth\"}\n        )\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n\n        # The model's step will go here for now this will call the step method of each agent and print the agent's unique_id\n        self.datacollector.collect(self)\n        self.schedule.step()\n\n```\n:::\n\n\n## Running the Model\n\n::: {#47d03713 .cell execution_count=5}\n``` {.python .cell-code}\n#from money_model import MoneyModel\n\nmodel = MoneyModel(100, 10, 10)\nfor i in range(20):\n    model.step()\n\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/oren/work/blog/env/lib/python3.10/site-packages/mesa/time.py:82: FutureWarning:\n\nThe AgentSet is experimental. It may be changed or removed in any and all future releases, including patch releases.\nWe would love to hear what you think about this new feature. If you have any thoughts, share them with us here: https://github.com/projectmesa/mesa/discussions/1919\n\n```\n:::\n:::\n\n\n::: {#357306bf .cell execution_count=6}\n``` {.python .cell-code}\nagent_wealth = [a.wealth for a in model.schedule.agents]\n# Create a histogram with seaborn\ng = sns.histplot(agent_wealth, discrete=True)\ng.set(\n    title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"Number of agents\"\n);  # The semicolon is just to avoid printing the object representation\n```\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-6-output-1.png){width=585 height=449}\n:::\n:::\n\n\n::: {#864872ad .cell execution_count=7}\n``` {.python .cell-code}\nall_wealth = []\n# This runs the model 100 times, each model executing 10 steps.\nfor j in range(100):\n    # Run the model\n    model = MoneyModel(100, 10, 10)\n    for i in range(10):\n        model.step()\n\n    # Store the results\n    for agent in model.schedule.agents:\n        all_wealth.append(agent.wealth)\n\n# Use seaborn\ng = sns.histplot(all_wealth, discrete=True)\ng.set(title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"Number of agents\");\n```\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-7-output-1.png){width=601 height=449}\n:::\n:::\n\n\n::: {#218c0cb5 .cell execution_count=8}\n``` {.python .cell-code}\nagent_counts = np.zeros((model.grid.width, model.grid.height))\nfor cell_content, (x, y) in model.grid.coord_iter():\n    agent_count = len(cell_content)\n    agent_counts[x][y] = agent_count\n# Plot using seaborn, with a size of 5x5\ng = sns.heatmap(agent_counts, cmap=\"viridis\", annot=True, cbar=False, square=True)\ng.figure.set_size_inches(4, 4)\ng.set(title=\"Number of agents on each cell of the grid\");\n```\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-8-output-1.png){width=356 height=357}\n:::\n:::\n\n\n::: {#1a95b6e6 .cell execution_count=9}\n``` {.python .cell-code}\nmodel = MoneyModel(100, 10, 10)\nfor i in range(100):\n    model.step()\n```\n:::\n\n\n::: {#8ef277ce .cell execution_count=10}\n``` {.python .cell-code}\ngini = model.datacollector.get_model_vars_dataframe()\n# Plot the Gini coefficient over time\ng = sns.lineplot(data=gini)\ng.set(title=\"Gini Coefficient over Time\", ylabel=\"Gini Coefficient\");\n```\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-10-output-1.png){width=589 height=431}\n:::\n:::\n\n\n::: {#0350c7bc .cell execution_count=11}\n``` {.python .cell-code}\nagent_wealth = model.datacollector.get_agent_vars_dataframe()\nagent_wealth.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>Wealth</th>\n    </tr>\n    <tr>\n      <th>Step</th>\n      <th>AgentID</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">0</th>\n      <th>0</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#61660854 .cell execution_count=12}\n``` {.python .cell-code}\nlast_step = agent_wealth.index.get_level_values(\"Step\").max()\nend_wealth = agent_wealth.xs(last_step, level=\"Step\")[\"Wealth\"]\n# Create a histogram of wealth at the last step\ng = sns.histplot(end_wealth, discrete=True)\ng.set(\n    title=\"Distribution of wealth at the end of simulation\",\n    xlabel=\"Wealth\",\n    ylabel=\"Number of agents\",\n);\n```\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-12-output-1.png){width=585 height=449}\n:::\n:::\n\n\n::: {#9d3da1e0 .cell execution_count=13}\n``` {.python .cell-code}\nagent_list = [3, 14, 25]\n\n# Get the wealth of multiple agents over time\nmultiple_agents_wealth = agent_wealth[\n    agent_wealth.index.get_level_values(\"AgentID\").isin(agent_list)\n]\n# Plot the wealth of multiple agents over time\ng = sns.lineplot(data=multiple_agents_wealth, x=\"Step\", y=\"Wealth\", hue=\"AgentID\")\ng.set(title=\"Wealth of agents 3, 14 and 25 over time\");\n```\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-13-output-1.png){width=597 height=449}\n:::\n:::\n\n\nWe can also plot the average of all agents, with a 95% confidence interval for that average.\n\n::: {#b0200180 .cell execution_count=14}\n``` {.python .cell-code}\n# Transform the data to a long format\nagent_wealth_long = agent_wealth.T.unstack().reset_index()\nagent_wealth_long.columns = [\"Step\", \"AgentID\", \"Variable\", \"Value\"]\nagent_wealth_long.head(3)\n\n# Plot the average wealth over time\ng = sns.lineplot(data=agent_wealth_long, x=\"Step\", y=\"Value\", errorbar=(\"ci\", 95))\ng.set(title=\"Average wealth over time\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Step</th>\n      <th>AgentID</th>\n      <th>Variable</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>Wealth</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>Wealth</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>2</td>\n      <td>Wealth</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](money_files/figure-html/cell-14-output-2.png){width=597 height=449}\n:::\n:::\n\n\nWhich is exactly 1, as expected in this model, since each agent starts with one wealth unit, and each agent gives one wealth unit to another agent at each step.\n\n\nYou can also use pandas to export the data to a CSV (comma separated value), which can be opened by any common spreadsheet application or opened by pandas.\n\nIf you do not specify a file path, the file will be saved in the local directory. After you run the code below you will see two files appear (model_data.csv and agent_data.csv)\n\n::: {#batch_run .cell execution_count=15}\n``` {.python .cell-code}\n# save the model data (stored in the pandas gini object) to CSV\ngini.to_csv(\"model_data.csv\")\n\n# save the agent data (stored in the pandas agent_wealth object) to CSV\nagent_wealth.to_csv(\"agent_data.csv\")\n```\n:::\n\n\n## designing a Shineylive app\n\nthe MVP app should have:\n1. a UI with controls for the x,y, number of steps, \n2. a simulate button\n3. a panel with with the seaborn chart for map\n4. \n3. a panel with the graph of the wealth distribution results tab with\n3. a panel with the wealth over time of top middle and poorest agents \n\n\n```{shinylive-python}\n#| standalone: true\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"n\", 0, 100, 100),\n    ui.input_slider(\"x\", \"y\", 0, 10, 10),\n    ui.input_slider(\"y\", \"y\", 0, 10, 10),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text    \n    def txt():\n        model = MoneyModel(n, x, y)\n        for i in range(100):\n            model.step()\n\n        last_step = agent_wealth.index.get_level_values(\"Step\").max()\n        end_wealth = agent_wealth.xs(last_step, level=\"Step\")[\"Wealth\"]\n        return f\"the final wealth is {end_wealth}\"\n        # Create a histogram of wealth at the last step\n        #g = sns.histplot(end_wealth, discrete=True)\n        #g.set(\n        #    title=\"Distribution of wealth at the end of simulation\",\n        #    xlabel=\"Wealth\",\n        #    ylabel=\"Numeylive ber of agents\",\n        #);\n\napp = App(app_ui, server)\n\n```\n\n",
    "supporting": [
      "money_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}