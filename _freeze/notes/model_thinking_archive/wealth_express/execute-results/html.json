{
  "hash": "99ac1c9f9840b9af61c85b8a4689a812",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: agents\nformat: html\nfilters:\n  - shinylive\n---\n\n:::{.column-screen-inset}\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 620\n#| components: [ viewer]\n## file: wealth.py\n\nimport micropip\nasync def install_agentpy():    \n    await micropip.install(\"agentpy\")\ninstall_agentpy()\n#package_list = micropip.list()\n#print(package_list)\nimport agentpy as ap\n\n# Model design\nclass WealthAgent(ap.Agent):\n    \"\"\" An agent with wealth \"\"\"\n    def setup(self):\n        self.wealth = 1\n\n    def wealth_transfer(self):\n        if self.wealth > 0:\n            partner = self.model.agents.random()\n            partner.wealth += 1\n            self.wealth -= 1\n\ndef gini(x):\n    \"\"\" Calculate Gini Coefficient \"\"\"\n    x = np.array(x)\n    mad = np.abs(np.subtract.outer(x, x)).mean()  # Mean absolute difference\n    rmad = mad / np.mean(x)  # Relative mean absolute difference\n    return 0.5 * rmad\n\nclass WealthModel(ap.Model):\n    \"\"\" A simple model of random wealth transfers \"\"\"\n    def setup(self):\n        self.agents = ap.AgentList(self, self.p.agents, WealthAgent)\n    def step(self):\n        self.agents.wealth_transfer()\n    def update(self):\n        self.record('Gini Coefficient', gini(self.agents.wealth))\n    def end(self):\n        self.agents.record('wealth')\n\n## file: app.py\nfrom wealth import *\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_widget\n\n\nwith ui.sidebar():    \n    ui.panel_title(\"Hello Shiny!\")\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n    ui.input_slider(\"agents\", \"Agents\", 0, 100, 100),\n    ui.input_slider(\"steps\", \"Steps\", 0, 100, 100),\n    ui.input_slider(\"x\", \"y\", 0, 10, 10),\n    ui.input_slider(\"y\", \"y\", 0, 10, 10),\n    ui.input_selectize(\n        \"var\", \"Select variable\",\n        choices=[\"bill_length_mm\", \"body_mass_g\"]\n    )\n\n@render.text\ndef wealth_run():\n    model = WealthModel(parameters)\n    results = model.run()\n    return f\"{results.info['completed_steps']}\"\n\n\n\n@render.text\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"\n\n@render.plot\ndef hist():\n    from matplotlib import pyplot as plt\n    from palmerpenguins import load_penguins\n\n    df = load_penguins()\n    df[input.var()].hist(grid=False)\n    plt.xlabel(input.var())\n    plt.ylabel(\"count\")\n\n## file: requirements.txt\npandas\n\n## file: fruit.csv\nid,name,count\n1,\"apple\",20\n2,\"orange\",12\n3,\"grape\",100\n\n```\n:::\n\n",
    "supporting": [
      "wealth_express_files"
    ],
    "filters": [],
    "includes": {}
  }
}