{
  "hash": "e040fc497004d42ba6d198f24459f95f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2021-04-14\ntitle: Bayesian agents\ncategories: [idea, game theory, bayesian games, sub-perfect bayesian equilibrium]\nimage: notes-formulas.jpg\nfig-caption: Notes about ... Bayesian games\n---\n\n\n\n\nLet's try to define a KR framework for a Bayesian agent.\n\nA starting point is that instead of using large monolithic context frames which are difficult to handle, and inefficient to process we use a notion of *context splitting* to put together smaller, more flexible units.\nEmbeddings that are good representation would be easier to easier to acquire on short context. And hopefully if with a little luck we could put them together into a package that feeds different attention heads allowing  few-shot learning to proceed.\n\n\n```{mermaid}\nerDiagram    \n    Thematic-Role-Frame {\n    verb move-object\n    agent Alice\n    object wedge\n    destination block\n    }    \n    Thematic-Role-Frame ||--|| State-Change-Frame : induces     \n    State-Change-Frame {\n    object alice\n    destination happy\n    }\n```\n\n\nSo this is splits cause action from its outcome.\n\nBayesian Games and Sub\n\nIn a Bayesian game there are a number of constructs, lets put them into a pro-ontology\n\n- state of the world:\n    - information \n        - what moves have been made.\n        - what types each player is.\n        - other information.\n    - information sets:\n        - set of agent who are privy to a bit of info.\n    - contrafactuals:\n        - competing hypothesis regarding the state of the world.\n    - incomplete information:\n        - players may be unaware of other player's type,moves and strategy.\n    - uncertainty\n        knowledge is modeled using distribution.\n- agents:\n    - type which determines a strategy\n    - information\n- a strategy profile:\n    - for each type their full strategy\n    - simple strategy\n    - complex strategy\n    - utility (payoffs driving an agent's preference)\n- population dynamics\n    - the number of a agent at a given type (based on their score at the previous round)\n\n\n```{mermaid}\nerDiagram    \n    Action-Frame {\n    verb move-object\n    agent Alice\n    object bullet\n    destination Bob\n    tool gun\n    visibility universe\n    }\n    Action-Frame ||--|| State-Change-Frame : induces\n    Action-Frame ||--|| Agent-Frame_1 : participates\n    Action-Frame ||--|| Agent-Frame_2 : participates\n    Action-Frame ||--|| Information-Set-Frame : visibility\n    State-Change-Frame {\n    object alice\n    destination angry\n    info-set universe\n    payoffs Alice_1__Bob_0\n    }\n    Information-Set-Frame{\n    name universe\n    members Alice_Bob\n    }\n    Agent-Frame_1 {\n    name Alice\n    type robber\n    info json_data1\n    }\n    Agent-Frame_2 {\n    name Alice\n    type sherif\n    info json_data1\n    }\n    Info-Frame_0 {\n    Alice-Type any\n    Bob-Type any\n    }\n    Info-Frame_1 {\n    Alice-Type robber\n    }\n    Info-Frame_2 {\n    Bob-Type sheriff\n    }\n\n    State-Change-Frame ||--|| Information-Set-Frame : visibility\n```\n\n\nHow many information sets for k players?\n\nThere are $2^k$ and they form the power set of $\\{a \\space ... \\space k\\}$.\n\nA Bayesian game usually start with a move by nature which assigns types to players $m_n: p \\to \\tau$.\n\n## Extensive form game\n\n>The most important TikZ command used to draw game trees is:\n\n`...node(coordinate label)[drawing/style options] at(coordinate) {node texts}...;`\n\n> The command `child{}` is used to specify a successor of a (parent) node.\n>  Note that if the style of a particular branch needs to be modified,\nsuch as adding texts to the branch or changing its color, edge from parent must be put\nafter node{} and all of its children.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Complete pooling](2021-04-25-bayesian-agent_files/figure-html/complete-pooling-1.svg){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n## info sets\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![info-sets](2021-04-25-bayesian-agent_files/figure-html/info-sets-1.svg){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![info-sets-extended](2021-04-25-bayesian-agent_files/figure-html/info-sets-extended-1.svg){fig-align='center' width=100%}\n:::\n:::",
    "supporting": [
      "2021-04-25-bayesian-agent_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}