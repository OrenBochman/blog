{
  "hash": "ad2cb10b69c662260bcbd193bf438d7e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: RAD REPL\ndate: 2024-05-01\nimage: /images/cover.png\nfig-caption: A RAD REPL\n---\n\n#  REPL MVP\n\nTODO:\n1. [x] basic REPL\n2. [x] command based class\n3. [x] add task command\n4. [x] list tasks command\n5. [x] set current task command\n6. [x] complete task command\n\n3. [] semantic kernel support\n\n::: {#b32012e7 .cell execution_count=2}\n``` {.python .cell-code}\nclass ReplCommand:\n    def __init__(self, name):\n        self.name = name\n\n    def execute(self):\n        raise NotImplementedError(\"execute method must be implemented in subclasses\")\n\nclass QuitCommand(ReplCommand):\n    def execute(self):\n        print(\"Exiting REPL...\")\n        exit()\n\nclass HelpCommand(ReplCommand):\n\n    def execute(self):\n        print(\"Available commands:\")\n        print(\"- quit: Exit the REPL\")\n        print(\"- help: Show available commands\")\n        print(\"- list_commands: List all available commands\")\n        print(\"- add_feature: Add a new feature\")\n        print(\"- list_features: List all features\")\n        print(\"- remove_feature: Remove a feature\")\n        print(\"- update_feature: Update a feature\")\n\n\nfeatures= {}\nclass AddFeatuerCommand(ReplCommand):\n    def execute(self, feature_name, feature_text):\n        print(f\"Adding feature: {feature_name}\")\n        features[feature_name] = feature_text\n\n\nclass ListFeaturesCommand(ReplCommand):\n    def execute(self):\n        print(\"Current features:\")\n        for feature_name, feature_text in features.items():\n            print(f\"- {feature_name}: {feature_text}\")\n\nclass RemoveFeatureCommand(ReplCommand):\n    def execute(self, feature_name):\n        if feature_name in features:\n            del features[feature_name]\n            print(f\"Removed feature: {feature_name}\")\n        else:\n            print(f\"Feature {feature_name} does not exist.\")\n\nclass UpdateFeatureCommand(ReplCommand):\n    def execute(self, feature_name, feature_text):\n        if feature_name in features:\n            features[feature_name] = feature_text\n            print(f\"Updated feature: {feature_name}\")\n        else:\n            print(f\"Feature {feature_name} does not exist.\")\n\nclass ListCommandsCommand(ReplCommand):\n    def execute(self):\n        print(\"Available commands:\")\n        for command_name in commands.keys():\n            print(f\"- {command_name}\")\n\n\n# Create a dictionary to map command names to command objects\ncommands = {\n    \"quit\": QuitCommand(\"quit\"),\n    \"help\": HelpCommand(\"help\"),\n    \"list_commands\": ListCommandsCommand(\"list_commands\"),\n    \"add_feature\": AddFeatuerCommand(\"add_feature\"),\n    \"list_features\": ListFeaturesCommand(\"list_features\"),\n    \"remove_feature\": RemoveFeatureCommand(\"remove_feature\"),\n    \"update_feature\": UpdateFeatureCommand(\"update_feature\"),\n\n\n}\n\ndef my_repl():\n    # Define any initial setup or variables here\n    \n    while True:\n        \n        # Get user input\n        user_input = input(\">>> \")\n\n        # Evaluate user input\n        try:\n            # Split user input into command and arguments\n            command_parts = user_input.split(\" \")\n            command_name = command_parts[0]\n            command_args = command_parts[1:]\n\n            # Check if command exists in the commands dictionary\n            if command_name in commands:\n                # Get the command object\n                command = commands[command_name]\n\n                # Execute the command\n                command.execute(*command_args)\n            else:\n                print(\"Unknown command. Type 'help' for available commands.\")\n        except Exception as e:\n            print(\"Error:\", e)\n\n        # Start the REPL\n        if __name__ == \"__main__\":\n            my_repl()\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}