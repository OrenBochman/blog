{
  "hash": "1767fd94be3e357b26fa883858fa4bd7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2024-05-02\ntitle: \"Urn models using Numpy\"\ncategories: [probability, urn models, emergent languages]\nkeywords: [\"numpy\", \"probability\", \"urn\", \"polya\", \"hoppe\", \"moran\", \"ehrenfest\"]\nexecute: \n  error: true\n---\n\n\n\n\n\n> \"[There is a tendency in our planning to confuse the unfamiliar with the improbable.]{.mark}  The contingency we have not considered seriously looks strange; what looks strange is thought improbable; what is improbable need not be considered seriously.\" -- Thomas Schelling in his forward to “Pearl Harbor: Warning and Decision” by Roberta Wohlstetter\n\n> \"[Models tend to be useful when they are simultaneously simple enough to fit a variety of behaviors and complex enough]{.mark} to fit behaviors that need the help of an explanatory model.\" ― Thomas C. Schelling, in Micromotives and Macrobehavior\n\nLet's create one of the most fundamental models in probability theory - the urn model. It's worth noting that urn models are both very simple and very powerful thus as Schelling intimates they can be very useful. \n\n\n::: {.callout-note}\n## TL;DR: Urn Models\n\n![Urn Models In a Nutshell](/images/in_the_nut_shell_coach_retouched.jpg)\n\nThe urn model is a simple model that describes the process of drawing balls from an urn. \n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Bayesian Statistics and Urn \n\nI have also written some notes on using urn models to understand probability distribution. Though the focus came not from modeling with code but the 'story' of the process and or distribution.\n\n<!-- add link here -->\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n\nSo I said they are useful \n\n- here are a couple of RL algorithms for the lewis signaling game with a multi-urn model. \n- elsewhere I worked out details of additional RL algorithms using the urn model.\n- and they also crop up in at least on paper in the review section!\n\n\n<!-- add link here to 8 rook model -->\n<!-- add link here to the Bayesian model -->\n<!-- add link here to the Hernstien Model -->\n<!-- add link here to the paper review of Self-assembling Games\n -->\n:::\n\n::: {.callout-important collapse=\"true\"}\n## TODO:\n\n- [x] add Schelling's quotes on models and uncertainty\n- [ ] fix bugs in the code for binomial urn.\n- [ ] add links to relevant lesson and appendix from notes on Bayesian statistics.\n- [ ] add link citation and list results from skyms paper with urn models!\n:::\n\n\n## History of Urn Models\n\nUrn models go back to the 17th century and were first introduced in [@bernoulli1713ars] by [Jacob Bernoulli](https://en.wikipedia.org/wiki/Jacob_Bernoulli) \n\nThe urn model is a simple model that describes the process of drawing balls from an urn. The urn contains balls of different colors, and the goal is to study the probabilities of drawing balls of different colors.\n\nTwo useful texts on urns models are [@johnson1977urn] and [@mahmoud2008polya]\n\n\nThe urn contains balls of different colors, and the goal is to study the probabilities of drawing balls of different colors.\n\nAlthough basic urn models can be represented with draws from well known distributions\nan the urn model is useful concrete form for thinking about probability particularly\nwhen implementing simple reinforcement learning algorithms or model with Bayesian updating.\n\nSome more complex processes in probability theory can be set up as urn model\nmaking this a useful model to understand.\n\nWhen it comes to implementing agents, we can quickly set them up for \nreinforcement or Bayesian learning by equipping the agnet with such an urn model.\n\nIn python we can implement the urn model using a numpy array to represent the balls in the urn and their counts.\n\n\n\nThe basic operations of the urn model is to draw a ball from the urn and update the urn with the new ball counts.\n\nbasic operations:\n\n- draw() draw a ball from the urn \n\n\noperations:\n\n- we might want to draw n balls then observe how many were of a certain color\n- we might want to draw n balls then update the urn with the new ball counts\n- we might want to draw n balls without updating the urn with new balls to capture the current distribution of balls.\n- convert balls/weights to probabilities\n- estimate probability of drawing a certain sequence of balls with or without updating the urn.\n- given n observations of balls estimate the ball proportions and thier confidence intervals.\n\n\n## Urn Models and distributions\n\n\n- [x] The Bernoulli urn model - sampling with replacement from an urn with two balls of different colors yields a binomial distribution.\n- [x] The Multinomial urn model - sampling with replacement from an urn with more than two balls of different colors yields a multinomial distribution.\n- [ ] hypergeometric urn - sampling without replacement...\n- [ ] urn with sampling with replacement and adding a new ball of the same color\n- [ ] polya urn - when a ball is observed the urn is updated with the same color ball and a new ball of the same color\n- [ ] beta-binomial when ever a ball is observed the urn is updated with the number of balls of the same color\n- [ ] dirichlet\n- [ ] hoppe urn - the urn has a mutator ball that generates new ball color (a new column) and a mutator state that generates new states (a new row)\n    - derichlet process\n    - chinee restaurant process \n- [] moran urn - like a polya urn but we also remove a ball so that the total number of balls remains constant.\n- [] ehrenfest urn - two urns with balls that are moved between them from physics\n\n## The Basic Urn model \n\n::: {#050af06b .cell require='altair, numpy, matplotlib, seaborn, pandas' results='hold' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport altair as alt\nimport pandas as pd\n\nclass Urn():\n  ''' classic urn model using np array of ball counts\n      for two balls this is a model for the  Binomial distribution\n      for more balls this is a model of the multinomial distribution\n  '''\n  def __init__(self, ball_names=np.array(['white','black']), init='ones', weights=None):\n    '''initialize the urn with ball names and weights'''\n    self.ball_names = ball_names\n    \n    if weights is not None:\n      assert type(weights) == np.ndarray, \"Weights must be a numpy array.\"\n      assert weights.shape[0] == (len(self.ball_names)), f\"Weight shape {weights.shape} not the same as the number of balls. {len(self.ball_names)}\"\n      self.weights = weights\n    else:\n      if init == 'ones':\n        self._weights = np.ones((self.ball_colors))\n      elif init == 'zeros':\n        self._weights = np.zeros((self.ball_colors))\n      elif init == 'random':\n        self._weights = np.random.rand(self.ball_colors)\n      else:\n        raise ValueError(\"Initialization parameter must be 'ones', 'zeros', or 'random'.\")\n\n  @property\n  def ball_names(self):\n    return self._ball_names\n  \n  @ball_names.setter\n  def ball_names(self, ball_names):\n    \n    #assert type(ball_names) ==  np.ndarray , \"Ball names must be numpy array.\"\n    self._ball_names = ball_names\n    self._num_balls = len(ball_names)\n\n  @property\n  def ball_colors(self):\n    return len(self.ball_names)\n\n  @property\n  def weights(self):\n    return self._weights\n  \n  @weights.setter\n  def weights(self, weights):\n    assert type(weights) == np.ndarray, f\"Weights must be a numpy array. not {type(weights)}\"\n    print(weights.shape, self.ball_colors)\n    assert weights.shape == self.ball_names.shape, f\"Weights must have the same shape as the number of balls and columns. but we get {weights.shape} and not{self.ball_names.shape}\"\n    #not nan\n    assert np.isnan(weights).sum() == 0, \"Weights must not be nan.\"\n    assert weights.sum() > 0, \"Weights must sum to a positive number.\"\n    self._weights = weights\n\n  def draw(self,n=1):\n    ''' draw a ball from the urn with replacement'''\n    row_idx = np.random.choice(self.ball_colors, p=self.weights/self.weights.sum(), size=n)\n    result = []\n    for i in range(n):\n      result.append(self.ball_names[row_idx[i]])\n    return list(map(str,result))\n```\n:::\n\n\n### Bernoulli Urn Model\n\n::: {#bernoulli-urn-sampling .cell execution_count=2}\n``` {.python .cell-code}\n#some examples\nbenulli_urn = Urn()\nprint(benulli_urn.draw(10))\nprint(benulli_urn.draw(10))\nprint(benulli_urn.draw(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['black', 'black', 'black', 'white', 'white', 'black', 'white', 'black', 'white', 'black']\n['white', 'white', 'white', 'black', 'white', 'white', 'white', 'white', 'black', 'white']\n['black', 'black', 'black', 'white', 'black', 'white', 'black', 'white', 'white', 'black']\n```\n:::\n:::\n\n\n::: {#bernoulli-urn-weighted .cell execution_count=3}\n``` {.python .cell-code}\nweights = np.array([1., 9.])\nprint(weights.shape)\nprint(benulli_urn.ball_colors)\n\n\n#benulli_urn.weights = np.array([1., 9.])\nprint(benulli_urn.draw(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2,)\n2\n['black', 'white', 'black', 'white', 'black', 'white', 'black', 'black', 'black', 'black']\n```\n:::\n:::\n\n\n::: {#cell-bernoulli-urn-weighted-sampling .cell execution_count=4}\n``` {.python .cell-code}\nbern_df = pd.DataFrame({'balls': benulli_urn.draw(100)})\nbern_df.head()\n```\n\n::: {#bernoulli-urn-weighted-sampling .cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>balls</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>black</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>black</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>black</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>black</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-fig-urn-bernoulli .cell execution_count=5}\n``` {.python .cell-code}\nfig=alt.Chart(bern_df).mark_bar().encode(\n    x='balls',\n    y='count()'\n).properties(width=200, height=200)\nfig.show()\n```\n\n::: {#fig-urn-bernoulli .cell-output .cell-output-display}\n```{=html}\n\n<style>\n  #altair-viz-310ff60ce3df4efd8bb8903d86d576d8.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-310ff60ce3df4efd8bb8903d86d576d8.vega-embed details,\n  #altair-viz-310ff60ce3df4efd8bb8903d86d576d8.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-310ff60ce3df4efd8bb8903d86d576d8\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-310ff60ce3df4efd8bb8903d86d576d8\") {\n      outputDiv = document.getElementById(\"altair-viz-310ff60ce3df4efd8bb8903d86d576d8\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-eb7d668cf091dca2a2ba9c07b992172c\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"field\": \"balls\", \"type\": \"nominal\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 200, \"width\": 200, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-eb7d668cf091dca2a2ba9c07b992172c\": [{\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n\nBernoulli urn model\n:::\n:::\n\n\n### Multinomial Urn Model\n\n::: {#b98c1f6a .cell execution_count=6}\n``` {.python .cell-code}\nmultinomial_urn = Urn(ball_names=np.array(['red','blue','green']),\n                      weights   =np.array([3., 9., 1.]))\nmulti_df = pd.DataFrame({'balls': multinomial_urn.draw(100)})\nmulti_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(3,) 3\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>balls</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>red</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>blue</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>red</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>blue</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>blue</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-fig-urn-multinomial .cell execution_count=7}\n``` {.python .cell-code}\n#alt.renderers.enable(\"html\")\nalt.Chart(multi_df).mark_bar().encode(\n    x='balls',\n    y='count()'\n).properties(width=200, height=200)\n```\n\n::: {#fig-urn-multinomial .cell-output .cell-output-display execution_count=7}\n```{=html}\n\n<style>\n  #altair-viz-763e7e73bedd41eeb20c1fbdc30572de.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-763e7e73bedd41eeb20c1fbdc30572de.vega-embed details,\n  #altair-viz-763e7e73bedd41eeb20c1fbdc30572de.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-763e7e73bedd41eeb20c1fbdc30572de\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-763e7e73bedd41eeb20c1fbdc30572de\") {\n      outputDiv = document.getElementById(\"altair-viz-763e7e73bedd41eeb20c1fbdc30572de\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-74b4170bdb73fc8a85ad826265b196a8\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"field\": \"balls\", \"type\": \"nominal\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 200, \"width\": 200, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-74b4170bdb73fc8a85ad826265b196a8\": [{\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"red\"}, {\"balls\": \"red\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"red\"}, {\"balls\": \"red\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"green\"}, {\"balls\": \"red\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"red\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}, {\"balls\": \"blue\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n\nMultinomial urn model\n:::\n:::\n\n\n::: {#ad011377 .cell execution_count=8}\n``` {.python .cell-code}\nprint(multinomial_urn.draw(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['blue', 'blue', 'red', 'red', 'blue', 'blue', 'blue', 'green', 'red', 'blue']\n```\n:::\n:::\n\n\n## The Polya Urn model\n\n::: {#polya-urn-model .cell execution_count=9}\n``` {.python .cell-code}\nclass Polya(Urn):\n  ''' \n    The polya urn model is a generalization of the urn model where c is the number of balls of the same color added to the urn\n    for c=0 the polya urn model we get drawing with replacement reulting in binomial and multinomial distributions.\n    for c=1 the polya urn model we get drawing with replacement and adding a new ball of the same color resulting in a  BetaBinomial and Dirichlet distributions.\n    for c=-1 the polya urn model we get drawing withot replacement resulting in a  the hypergeometric distribution.\n  '''\n  \n  def __init__(self,ball_names=['white','black'], init='ones', weights=None, c=1):\n    '''initialize the urn with ball names and weights'''\n    super().__init__(ball_names, init, weights)\n    self.c = c\n\n  def draw(self,n=1,update=True):\n    ''' \n    draw a ball from the urn with replacement and add a new ball of the same color\n\n    Parameters:\n    n: int, number of balls to draw\n    update: bool, update the urn with the new ball counts or keep it frozen    \n    '''\n    result = []\n    for i in range(n):\n      row_idx = np.random.choice(self.ball_colors, p=self.weights/self.weights.sum(), size=n)\n      result.append(self.ball_names[row_idx[i]])\n      if update:\n        self.weights[row_idx[i]] += self.c\n    return result\n```\n:::\n\n\n### BetaBinomial Urn Model - Polya Urn Model with c=1\n\n\nthis is not correct - we need to add an operation to return the number white balls from n draws.\n\n::: {#betabinomial-urn-model .cell execution_count=10}\n``` {.python .cell-code}\nbetabinomial_urn = Polya(ball_names=['white','black'], c=1)\nprint(betabinomial_urn.draw(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['white', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white']\n```\n:::\n:::\n\n\n::: {#cell-betabinomial-urn-chart .cell execution_count=11}\n``` {.python .cell-code}\nbetabinomial_df = pd.DataFrame({'balls': betabinomial_urn.draw(100)})\nalt.Chart(betabinomial_df).mark_bar().encode(\n    x='balls',\n    y='count()'\n).properties(width=200, height=200)\n```\n\n::: {#betabinomial-urn-chart .cell-output .cell-output-display execution_count=11}\n```{=html}\n\n<style>\n  #altair-viz-5bd0eb0db4454cb6813848ece9bc36c7.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-5bd0eb0db4454cb6813848ece9bc36c7.vega-embed details,\n  #altair-viz-5bd0eb0db4454cb6813848ece9bc36c7.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-5bd0eb0db4454cb6813848ece9bc36c7\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-5bd0eb0db4454cb6813848ece9bc36c7\") {\n      outputDiv = document.getElementById(\"altair-viz-5bd0eb0db4454cb6813848ece9bc36c7\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-35af27b6e5e8615a5456e458bb9fd916\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"field\": \"balls\", \"type\": \"nominal\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 200, \"width\": 200, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-35af27b6e5e8615a5456e458bb9fd916\": [{\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"black\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}, {\"balls\": \"white\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n\nBetaBinomial urn model\n:::\n:::\n\n\n### Beta Negative Binomial Distribution - Polya Urn Model with c=1\n\nthis time \n\n\n### Dirichlet Urn Model - Polya Urn Model with c=1\n\n### Hypergeometric Urn Model - Polya Urn Model with c=-1\n\n::: {#hypergeometric-urn-model .cell execution_count=12}\n``` {.python .cell-code}\nhypergeometric_urn = Polya(ball_names=['white','black'], c=-1)\nprint(hypergeometric_urn.draw(10))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_817099/451444112.py:24: RuntimeWarning:\n\ninvalid value encountered in divide\n\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> hypergeometric_urn <span style=\"color:rgb(98,98,98)\">=</span> Polya(ball_names<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">white</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">black</span><span style=\"color:rgb(175,0,0)\">'</span>], c<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">hypergeometric_urn</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">draw</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">10</span><span class=\"ansi-yellow-bg\">)</span>)\n\nCell <span class=\"ansi-green-fg\">In[9], line 24</span>, in <span class=\"ansi-cyan-fg\">Polya.draw</span><span class=\"ansi-blue-fg\">(self, n, update)</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> result <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(n):\n<span class=\"ansi-green-fg\">---&gt; 24</span>   row_idx <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">choice</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">ball_colors</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">p</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">weights</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">/</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">weights</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">sum</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">size</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">n</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     25</span>   result<span style=\"color:rgb(98,98,98)\">.</span>append(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ball_names[row_idx[i]])\n<span class=\"ansi-green-fg ansi-bold\">     26</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> update:\n\nFile <span class=\"ansi-green-fg\">numpy/random/mtrand.pyx:994</span>, in <span class=\"ansi-cyan-fg\">numpy.random.mtrand.RandomState.choice</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">ValueError</span>: probabilities contain NaN</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#hypergeometric-urn-chart .cell execution_count=13}\n``` {.python .cell-code}\nhypergeometric_df = pd.DataFrame({'balls': hypergeometric_urn.draw(100)})\nalt.Chart(hypergeometric_df).mark_bar().encode(\n    x='balls',\n    y='count()'\n).properties(width=200, height=200)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_817099/451444112.py:24: RuntimeWarning:\n\ninvalid value encountered in divide\n\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> hypergeometric_df <span style=\"color:rgb(98,98,98)\">=</span> pd<span style=\"color:rgb(98,98,98)\">.</span>DataFrame({<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">balls</span><span style=\"color:rgb(175,0,0)\">'</span>: <span class=\"ansi-yellow-bg\">hypergeometric_urn</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">draw</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">100</span><span class=\"ansi-yellow-bg\">)</span>})\n<span class=\"ansi-green-fg ansi-bold\">      2</span> alt<span style=\"color:rgb(98,98,98)\">.</span>Chart(hypergeometric_df)<span style=\"color:rgb(98,98,98)\">.</span>mark_bar()<span style=\"color:rgb(98,98,98)\">.</span>encode(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">balls</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">count()</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> )<span style=\"color:rgb(98,98,98)\">.</span>properties(width<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">200</span>, height<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">200</span>)\n\nCell <span class=\"ansi-green-fg\">In[9], line 24</span>, in <span class=\"ansi-cyan-fg\">Polya.draw</span><span class=\"ansi-blue-fg\">(self, n, update)</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> result <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(n):\n<span class=\"ansi-green-fg\">---&gt; 24</span>   row_idx <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">choice</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">ball_colors</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">p</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">weights</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">/</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">weights</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">sum</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">size</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">n</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     25</span>   result<span style=\"color:rgb(98,98,98)\">.</span>append(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>ball_names[row_idx[i]])\n<span class=\"ansi-green-fg ansi-bold\">     26</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> update:\n\nFile <span class=\"ansi-green-fg\">numpy/random/mtrand.pyx:994</span>, in <span class=\"ansi-cyan-fg\">numpy.random.mtrand.RandomState.choice</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">ValueError</span>: probabilities contain NaN</pre>\n```\n:::\n\n:::\n:::\n\n\n## The Hoppe  Urn models\n\n::: {#0873bc00 .cell execution_count=14}\n``` {.python .cell-code}\nclass Hoppe(Polya):\n  ''' Hoppe urn model'''\n  \n  def __init__(self,ball_names=['0'], init='ones', weights=None, c=1, mutator_mass=1.0):\n    '''initialize the urn with ball names and weights'''\n    super().__init__(ball_names, init, weights, c)\n    self.mutator_mass = mutator_mass\n    if weights is not None:\n      assert type(weights) == np.ndarray, \"Weights must be a numpy array.\"\n      assert weights.shape[0] == (len(self.ball_names)), f\"Weight shape {weights.shape} not the same as the number of balls. {len(self.ball_names)}\"\n      self.weights = weights\n    else:\n      if init == 'ones':\n        self._weights = np.ones((self.ball_colors))\n      elif init == 'zeros':\n        self._weights = np.zeros((self.ball_colors))\n      elif init == 'random':\n        self._weights = np.random.rand(self.ball_colors)\n      else:\n        raise ValueError(\"Initialization parameter must be 'ones', 'zeros', or 'random'.\")\n      #set the weight of the mutator ball to the mutator mass\n      self.weights[0] = self.mutator_mass\n    \n  def draw(self,n=1):\n    ''' draw a ball from the urn with replacement and add a new ball of the same color'''\n    result = []\n    for i in range(n):\n      row_idx = np.random.choice(self.ball_colors, p=self.weights/self.weights.sum(), size=1)\n      if row_idx[i] == 0:\n        #add a new ball color\n        self.ball_names.append(str(len(self.ball_names)))\n        self.weights = np.append(self.weights, c)\n        result.append(self.ball_names[-1])\n      else:\n        result.append(self.ball_names[row_idx[0]])\n        self.weights[row_idx[i]] += c\n        \n    return result\n```\n:::\n\n\n## The Moran Urn model\n\n::: {#a910ab9a .cell execution_count=15}\n``` {.python .cell-code}\nclass Moran(Polya):\n  ''' Moran urn model'''\n  \n  def draw(self,n=1):\n    ''' draw a ball from the urn with replacement and add a new ball of the same color'''\n    result = []\n    for i in range(n):\n      row_idx = np.random.choice(self.ball_colors, p=self.weights/self.weights.sum(), size=2)\n      self.weights[row_idx[0]] += c\n      self.weights[row_idx[1]] -= c\n      \n      result.append(self.ball_names[row_idx[0]])\n        \n    return result\n```\n:::\n\n\n### Ehrenfest Urn Model\n\nThe Ehrenfest urn model is a simple model that describes the process of moving balls between two urns. I view this as a precursor to compartmental models in epidemiology and other fields and it demostrates how one can extend the urn model can be used to model more complex systems. The more general model is the multiurn model where we have multiple urns and we can move balls between them which is a Markov chain model.\n\n\nThe model consists of two urns, each containing a fixed number of balls. At each time step, a ball is randomly selected from one of the urns and moved to the other urn.\n\n## The MultiUrn model\n\n> \"any problem of probability appears comparable to a suitable problem about bags containing balls, and any random mass phenomenon appears\nas similar in certain essential respects to successive drawings of balls from a system of suitibly combined bags.\" - @polya1954patterns\n\nSo I actualy implemented this model first to do some basic RL algorithms for the Lewis Signalling model.\n\nThe MultiUrn model is an extension of the basic Urn model that allows for multiple urns to be used together.\n\nWe may for example need to learn an urn model per state in our system extending\na bandit algorithm to a contextual bandit algorithm.\n\nWe can represent these using rows of a matrix where each row represents an urn\nand each column represents a ball color.\n\nIn cases where we have hierarchical models we may be able to use additional constraints - for example on both rows and columns to speed up learning.\n\n::: {#multi-urn-model .cell execution_count=16}\n``` {.python .cell-code}\nclass MultiUrn:\n    def __init__(self, row_names, col_names, init='ones'):\n        self.row_names = row_names\n        self.col_names = col_names\n        self.num_rows = len(row_names)\n        self.num_cols = len(col_names)\n        \n        if init == 'ones':\n            self.weights = np.ones((self.num_rows, self.num_cols))\n        elif init == 'zeros':\n            self.weights = np.zeros((self.num_rows, self.num_cols))\n        elif init == 'random':\n            self.weights = np.random.rand(self.num_rows, self.num_cols)\n        else:\n            raise ValueError(\"Initialization parameter must be 'ones', 'zeros', or 'random'.\")\n    \n    def _convert_to_numeric(self, row_name, col_name):\n        try:\n            row_idx = self.row_names.index(row_name)\n            col_idx = self.col_names.index(col_name)\n            return row_idx, col_idx\n        except ValueError:\n            raise ValueError(\"Invalid row or column name.\")\n    \n    def get_weight(self, row_name, col_name):\n        row_idx, col_idx = self._convert_to_numeric(row_name, col_name)\n        return self.weights[row_idx, col_idx]\n    \n    def set_weight(self, row_name, col_name, value):\n        row_idx, col_idx = self._convert_to_numeric(row_name, col_name)\n        self.weights[row_idx, col_idx] = value\n    \n    def add_weights(self, other_urn):\n        if self.weights.shape != other_urn.weights.shape:\n            raise ValueError(\"Urns must have the same dimensions to add weights.\")\n        return Urn(self.row_names, self.col_names, init=None, weights=self.weights + other_urn.weights)\n    \n    def get_conditional_probabilities(self):\n        row_sums = self.weights.sum(axis=1, keepdims=True)\n        conditional_probs = self.weights / row_sums\n        return conditional_probs\n    \n    def get_conditional_probability(self, row_name, col_name):\n        row_idx, col_idx = self._convert_to_numeric(row_name, col_name)\n        row_sum = self.weights[row_idx, :].sum()\n        conditional_prob = self.weights[row_idx, col_idx] / row_sum\n        return conditional_prob\n\n    def choose_option(self, row_name):\n        row_idx = self.row_names.index(row_name)\n        row_weights = self.weights[row_idx, :]\n        col_idx = np.random.choice(self.num_cols, p=row_weights/row_weights.sum())\n        return self.col_names[col_idx]\n    \n    def update_weights(self, row_name, col_name, reward):\n        row_idx, col_idx = self._convert_to_numeric(row_name, col_name)\n        self.weights[row_idx, col_idx] += reward\n\n    def plot_heatmap(self):\n        for idx, row_name in enumerate(self.row_names):\n            plt.figure(figsize=(10, 1))\n            sns.heatmap(self.weights[idx, :].reshape(1, -1), annot=True, cmap=\"viridis\", cbar=False, xticklabels=self.col_names, yticklabels=[row_name])\n            plt.title(f\"Urn for {row_name}\")\n            plt.show()\n            \n\n    def calculate_expected_reward(self, receiver_urn):\n        result = 0.0\n        sender_probs = self.get_conditional_probabilities()\n        receiver_probs = receiver_urn.get_conditional_probabilities()\n        \n        for sender_state in self.row_names:\n            for sender_signal in self.col_names:\n                p_sender = self.get_conditional_probability(sender_state, sender_signal)\n                for receiver_signal in receiver_urn.row_names:\n                    for receiver_state in receiver_urn.col_names:\n                        p_receiver = receiver_urn.get_conditional_probability(receiver_signal, receiver_state)\n                        if receiver_signal == sender_signal:\n                            result += p_sender * p_receiver\n        return result\n    \n    def add_expected_reward(self, receiver_urn):\n        expected_reward = self.calculate_expected_reward(receiver_urn)\n        for row_name in self.row_names:\n            for col_name in self.col_names:\n                self.update_weights(row_name, col_name, expected_reward)    \n\n    def __str__(self):\n        return str(self.weights)\n```\n:::\n\n\n::: {#multi-urn-model-examples .cell execution_count=17}\n``` {.python .cell-code}\n# Example usage\nrow_names = ['state0', 'state1', 'state2', 'state3', 'state4']\ncol_names = ['a', 'b', 'c', 'd']\n\nurn = MultiUrn(row_names, col_names, init='ones')\n\nprint(\"Initial weights:\")\nprint(urn)\n\nweight_0_a = urn.get_weight('state0', 'a')\nprint(f\"Weight for state0 and signal 'a': {weight_0_a}\")\n\nurn.set_weight('state0', 'a', 2.0)\nprint(\"Weights after setting weight for state0 and signal 'a' to 0.5:\")\nprint(urn)\n\nconditional_probs = urn.get_conditional_probabilities()\nprint(\"Conditional probabilities:\")\nprint(conditional_probs)\n\nstate = 'state0'\nsignal = 'a'\nconditional_prob = urn.get_conditional_probability(state, signal)\nprint(f\"Conditional probability of signal {signal} given {state}: {conditional_prob}\")\n\nstate = 'state1'\nsignal = 'a'\nconditional_prob = urn.get_conditional_probability(state, signal)\nprint(f\"Conditional probability of signal {signal} given {state}: {conditional_prob}\")\n\nchosen_signal = urn.choose_option('state0')\nprint(f\"Chosen signal for state0: {chosen_signal}\")\n\nurn.update_weights('state0', 'a', 1.0)\nprint(\"Weights after updating weight for state0 and signal 'a' with a reward of 0.1:\")\nprint(urn)\n\n\n\n# Plot heatmaps\nurn.plot_heatmap()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInitial weights:\n[[1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]]\nWeight for state0 and signal 'a': 1.0\nWeights after setting weight for state0 and signal 'a' to 0.5:\n[[2. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]]\nConditional probabilities:\n[[0.4  0.2  0.2  0.2 ]\n [0.25 0.25 0.25 0.25]\n [0.25 0.25 0.25 0.25]\n [0.25 0.25 0.25 0.25]\n [0.25 0.25 0.25 0.25]]\nConditional probability of signal a given state0: 0.4\nConditional probability of signal a given state1: 0.25\nChosen signal for state0: c\nWeights after updating weight for state0 and signal 'a' with a reward of 0.1:\n[[3. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/multi-urn-model-examples-output-2.png){#multi-urn-model-examples-1 width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/multi-urn-model-examples-output-3.png){#multi-urn-model-examples-2 width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/multi-urn-model-examples-output-4.png){#multi-urn-model-examples-3 width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/multi-urn-model-examples-output-5.png){#multi-urn-model-examples-4 width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/multi-urn-model-examples-output-6.png){#multi-urn-model-examples-5 width=786 height=135}\n:::\n:::\n\n\n::: {#7725b64b .cell execution_count=18}\n``` {.python .cell-code}\ns_row_names = ['state0', 'state1', 'state2', 'state3', 'state4']\ns_col_names = ['a', 'b', 'c', 'd']\ns_urn = MultiUrn(s_row_names, s_col_names, init='ones')\ns_urn.plot_heatmap()\n```\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-19-output-1.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-19-output-2.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-19-output-3.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-19-output-4.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-19-output-5.png){width=786 height=135}\n:::\n:::\n\n\n::: {#17055d58 .cell execution_count=19}\n``` {.python .cell-code}\nr_row_names = ['a', 'b', 'c', 'd']\nr_col_names = ['state0', 'state1', 'state2', 'state3', 'state4']\nr_urn = MultiUrn(r_row_names, r_col_names, init='ones')\nr_urn.plot_heatmap()\n```\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-20-output-1.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-20-output-2.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-20-output-3.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-20-output-4.png){width=786 height=135}\n:::\n:::\n\n\nlets add a method to calculate the expected reward of two urns\n\nresult = 0.0\nfor each sender state sender_state\n  for each sender signal sender_signal\n    p_sender = the conditional probability of the sender_signal given the sender_state\n    for each reciever signal reciever_signal\n      for each reciever state reciever_state\n          p_reciever = the conditional probability of the reciever_state given the reciever_signal \n          if the reciever_signal is the same as the sender_signal\n            result += p_sender * p_reciever\nreturn result\n\n# note I think the expected reward could be less then one - since the expected reward is the probability of the reciever signal given the sender signal\n\nand sum of probabilities of the reciever signal given the sender signal is less then one.\n      \n      \n        calculate the expected reward\n        add the expected reward to the urn\nwhere we start with a reciever, chose \n\n::: {#737292fa .cell execution_count=20}\n``` {.python .cell-code}\nexpected_reward = s_urn.calculate_expected_reward(r_urn)/(s_urn.num_rows*r_urn.num_cols*s_urn.num_rows*r_urn.num_cols)\nprint(f\"Expected reward: {expected_reward}\")\n\ns_urn.add_expected_reward(r_urn)\nprint(\"Sender Urn weights after adding expected reward:\")\nprint(s_urn)\ns_urn.plot_heatmap()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nExpected reward: 0.007999999999999985\nSender Urn weights after adding expected reward:\n[[6. 6. 6. 6.]\n [6. 6. 6. 6.]\n [6. 6. 6. 6.]\n [6. 6. 6. 6.]\n [6. 6. 6. 6.]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-21-output-2.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-21-output-3.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-21-output-4.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-21-output-5.png){width=786 height=135}\n:::\n\n::: {.cell-output .cell-output-display}\n![](urn_files/figure-html/cell-21-output-6.png){width=786 height=135}\n:::\n:::\n\n\n",
    "supporting": [
      "urn_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}