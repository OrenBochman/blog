{
  "hash": "bb836787e2ccc3a1049100b3be91cadb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Gradio Apps\"\ndate: 2024-03-31\ndraft: true\n---\n\nThere are many prompts floating on the web. We can quickly integrate them with \\[Gradio\\](www.gradio.app) to create small demos to test them.\n\nSome advantages are:\n\n1.  automation\n2.  ability to quickly switch between models.\n\n## Interviewer\n\n::: {#0a6447af .cell execution_count=2}\n``` {.python .cell-code}\nposition = 'rocket scientist'\nnot_all_at_once = 'Do not write all the conversation at once.'\nno_explanations = 'Do not write explanations.'\nsent = \"Hi\"\nprompt = f'''\nI want you to act as an interviewer. \nI will be the candidate and you will ask me the interview questions for the position {position}. \nI want you to only reply as the interviewer. {not_all_at_once} I want you to only do the interview with me.\nAsk me the questions and wait for my answers. {no_explanations}  Ask me the questions one by one like an interviewer does and wait for my answers. My first sentence is \"{sent}\"\n'''\nprint(prompt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nI want you to act as an interviewer. \nI will be the candidate and you will ask me the interview questions for the position rocket scientist. \nI want you to only reply as the interviewer. Do not write all the conversation at once. I want you to only do the interview with me.\nAsk me the questions and wait for my answers. Do not write explanations.  Ask me the questions one by one like an interviewer does and wait for my answers. My first sentence is \"Hi\"\n\n```\n:::\n:::\n\n\n::: {#e41bb46b .cell execution_count=3}\n``` {.python .cell-code}\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import AIMessage, HumanMessage\nimport openai\nimport gradio as gr\nimport os\n\n#os.environ[\"OPENAI_API_KEY\"] #= \"sk-...\"  # Replace with your key\n#key = os.environ.get('API_Key')\n\nllm = ChatOpenAI(temperature=1.0, model='gpt-3.5-turbo-0613')\n\ndef predict(message, history):\n    history_langchain_format = []\n    for human, ai in history:\n        history_langchain_format.append(HumanMessage(content=human))\n        history_langchain_format.append(AIMessage(content=ai))\n    history_langchain_format.append(HumanMessage(content=message))\n    gpt_response = llm(history_langchain_format)\n    return gpt_response.content\n\ngr.ChatInterface(predict,examples=[prompt]).launch()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning on local URL:  http://127.0.0.1:7864\n\nTo create a public link, set `share=True` in `launch()`.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div><iframe src=\"http://127.0.0.1:7864/\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n\n```\n:::\n:::\n\n\nReusable:\n\n-   Do not write all the conversation at once.\n-   Ask me the questions and wait for my answers.\n-   Do not write explanations.\n\nNotes:\n\n-   note: Now pretty much everything is written twice. this helps since LLM tend to process the prompt left to right and so stuff at the beginning can miss stuff written later.\n\n## Act as an Excel Sheet\n\n::: {#e4211024 .cell execution_count=4}\n``` {.python .cell-code}\nprompt = f\"\"\"\nI want you to act as a text based excel. you'll only reply me the text-based 10 rows excel\nsheet with row numbers and cell letters as columns (A to L). First column header should\nbe empty to reference row number. I will tell you what to write into cells and you'll reply\nonly the result of excel table as text, and nothing else. Do not write explanations. \nI will write you formulas and you'll execute formulas and you'll only reply the result of excel \ntable as text. First, reply me the empty sheet.\n\"\"\"\n```\n:::\n\n\n::: {#d5c54b8c .cell execution_count=5}\n``` {.python .cell-code}\nlang_source='hebrew'\nlang_target='english'\nsent='how the weather is in Istanbul?'\nscript = ['latin','hebrew dotted script','ipa','arpabet']\n\nprompt=f'''\nI want you to act as an {lang_target} pronunciation\nassistant for {lang_source} speaking people. I\nwill write you sentences and you will only answer\ntheir pronunciations, and nothing else.\nThe replies must not be translations of my\nsentence but only pronunciations.\nPronunciations should use {lang_source} {script[0]} letters for phonetics. \n{no_explanations} \nMy first sentence is \"{sent}\"\n'''\n```\n:::\n\n\n",
    "supporting": [
      "prompts_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}