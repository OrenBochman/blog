{
  "hash": "a29b2fffc09222cb23e925f57ad45e7c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Shiny Mesa Tutorial\"\nformat: html\nfilters:\n  - shinylive\n---\n\n\nIn this is the Mesa tutorial intergrated into a shiny app and running via pyodide in the browser from a static backend.\n\n:::{.column-screen-inset}\n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_altair\n\n# Has multi-dimensional arrays and matrices.\n# Has a large collection of mathematical functions to operate on these arrays.\nimport numpy as np\n\n# Data manipulation and analysis.\nimport pandas as pd\n\n# Data visualization tools.\nimport seaborn as sns\nimport mesa\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\n\n### UI for Agent Sim #############################################################\n\nDEFAULT_RUNS = 100\nDEFAULT_STEPS = 30\nDEFAULT_AGENTS = 12\n\n# Add page title and sidebar\nui.page_opts(title=\"Mesa Wealth Agents Tutorial in Shineylive for Python\", fillable=True)\n\n\nwith ui.sidebar(open=\"desktop\"):\n    ui.input_slider(\"runs\", \"Runs\", min=1, max=500, value=DEFAULT_RUNS)\n    ui.input_slider(\"steps\", \"Steps per run\", min=1, max=500, value=DEFAULT_STEPS)\n    ui.input_slider(\"agents\", \"Agents\", min=1, max=50, value=DEFAULT_AGENTS)\n    ui.input_action_button(\"reset\", \"Reset\")\n\n\n\n### MESA MODEL ##########################################################################\n\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        # Pass the parameters to the parent class.\n        super().__init__(model)\n\n        # Create the agent's variable and set the initial values.\n        self.wealth = 1\n\n    def exchange(self):\n        # Verify agent has some wealth\n        if self.wealth > 0:\n            other_agent = self.random.choice(self.model.agents)\n            if other_agent is not None:\n                other_agent.wealth += 1\n                self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n):\n        super().__init__()\n        self.num_agents = n\n\n        # Create agents\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\" Advance the model by one step.\"\"\"\n        # This function pseudo-randomly reorders the list of agent objects and\n        # then iterates through calling the function passed in as the parameter\n        self.agents.shuffle_do(\"exchange\")\n\n\nui.input_selectize(\"var\", \"Select variable\", choices=[\"bill_length_mm\", \"body_mass_g\"])\n\n\n# ---------- RESET BEHAVIOR ----------\n@reactive.effect\n@reactive.event(input.reset)\ndef _reset_sliders():\n    # These update_* helpers pick up the current session implicitly in Shiny Express\n    ui.update_slider(\"runs\", value=DEFAULT_RUNS)\n    ui.update_slider(\"steps\", value=DEFAULT_STEPS)\n    ui.update_slider(\"agents\", value=DEFAULT_AGENTS)\n\n# ---------- SIMULATION (reactive) ----------\n@reactive.calc\ndef sim_df():\n    runs = input.runs()\n    steps = input.steps()\n    n = input.agents()\n\n    all_wealth = []\n    for _ in range(runs):\n        model = MoneyModel(n)\n        for _ in range(steps):\n            model.step()\n        # collect wealth after final step of this run\n        all_wealth.extend(a.wealth for a in model.agents)\n\n    return pd.DataFrame({\"wealth\": all_wealth})\n\n\n# ---------- PLOT ----------\n@render_altair\ndef hist():\n    import altair as altÂ·\n    df = sim_df()  # depends on inputs via sim_df()\n    return (\n        alt.Chart(df, title=\"Wealth distribution\")\n        .mark_bar()\n        .encode(x=alt.X(\"wealth:Q\", bin=True, title=\"Wealth\"),\n                y=alt.Y(\"count()\", title=\"Agents\"))\n        .properties(width=\"container\", height=300)\n        .interactive()\n    )\n\n\n## file: requirements.txt\nshinyswatch\naltair\nanywidget\npalmerpenguins\njsonschema\nmesa\n```\n:::\n\n::: {#0bc4c8b8 .cell execution_count=1}\n``` {.python .cell-code}\nimport shinylive\n\nprint (shinylive.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.8.3\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}