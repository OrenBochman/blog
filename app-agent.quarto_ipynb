{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Basic App\n",
        "format: html\n",
        "filters:\n",
        "  - shinylive\n",
        "jupyter: python3\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "```{shinylive-python}\n",
        "#| standalone: true\n",
        "#| components: [editor, viewer]\n",
        "## file: app.py\n",
        "from shiny import App, render, ui\n",
        "import sys\n",
        "sys.path.append('.')\n",
        "import mini_mesa as mm\n",
        "\n",
        "def compute_gini(model):\n",
        "    agent_wealths = [agent.wealth for agent in model.schedule.agents]\n",
        "    x = sorted(agent_wealths)\n",
        "    N = model.num_agents\n",
        "    B = sum(xi * (N - i) for i, xi in enumerate(x)) / (N * sum(x))\n",
        "    return 1 + (1 / N) - 2 * B\n",
        "\n",
        "class MoneyModel(Model):\n",
        "    \"\"\"A model with some number of agents.\"\"\"\n",
        "\n",
        "    def __init__(self, N, width, height):\n",
        "        super().__init__()\n",
        "        self.num_agents = N\n",
        "        self.grid = mm.space.MultiGrid(width, height, True)\n",
        "        self.schedule = mm.time.RandomActivation(self)\n",
        "        self.running = True\n",
        "\n",
        "        # Create agents\n",
        "        for i in range(self.num_agents):\n",
        "            a = MoneyAgent(i, self)\n",
        "            self.schedule.add(a)\n",
        "            # Add the agent to a random grid cell\n",
        "            x = self.random.randrange(self.grid.width)\n",
        "            y = self.random.randrange(self.grid.height)\n",
        "            self.grid.place_agent(a, (x, y))\n",
        "\n",
        "        self.datacollector = mm.DataCollector(\n",
        "            model_reporters={\"Gini\": compute_gini},\n",
        "            agent_reporters={\"Wealth\": \"wealth\", \"Steps_not_given\": \"steps_not_given\"},\n",
        "        )\n",
        "\n",
        "    def step(self):\n",
        "        self.datacollector.collect(self)\n",
        "        self.schedule.step()\n",
        "\n",
        "\n",
        "class MoneyAgent(Agent):\n",
        "    \"\"\"An agent with fixed initial wealth.\"\"\"\n",
        "\n",
        "    def __init__(self, unique_id, model):\n",
        "        super().__init__(unique_id, model)\n",
        "        self.wealth = 1\n",
        "        self.steps_not_given = 0\n",
        "\n",
        "    def move(self):\n",
        "        possible_steps = self.model.grid.get_neighborhood(\n",
        "            self.pos, moore=True, include_center=False\n",
        "        )\n",
        "        new_position = self.random.choice(possible_steps)\n",
        "        self.model.grid.move_agent(self, new_position)\n",
        "\n",
        "    def give_money(self):\n",
        "        cellmates = self.model.grid.get_cell_list_contents([self.pos])\n",
        "        if len(cellmates) > 1:\n",
        "            other = self.random.choice(cellmates)\n",
        "            other.wealth += 1\n",
        "            self.wealth -= 1\n",
        "            self.steps_not_given = 0\n",
        "        else:\n",
        "            self.steps_not_given += 1\n",
        "\n",
        "    def step(self):\n",
        "        self.move()\n",
        "        if self.wealth > 0:\n",
        "            self.give_money()\n",
        "        else:\n",
        "            self.steps_not_given += 1\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.input_slider(\"agents\", \"Agents\", 0, 100, 100),\n",
        "    ui.input_slider(\"steps\", \"Steps\", 0, 100, 100),\n",
        "    ui.input_slider(\"x\", \"y\", 0, 10, 10),\n",
        "    ui.input_slider(\"y\", \"y\", 0, 10, 10),\n",
        "    ui.output_text_verbatim(\"txt\"),\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @output\n",
        "    @render.text    \n",
        "    def txt():\n",
        "      params = {\"width\": 10, \"height\": 10, \"N\": range(5, 100, 5)}\n",
        "\n",
        "      params['N']=input.agents(),\n",
        "      params['N']=input.steps(),\n",
        "      \n",
        "\n",
        "      results = mm.batch_run(\n",
        "        MoneyModel,\n",
        "        parameters=params,\n",
        "        iterations=7,\n",
        "        max_steps=100,\n",
        "        number_processes=1,\n",
        "        data_collection_period=1,\n",
        "        display_progress=True,\n",
        "      )\n",
        "\n",
        "      \n",
        "      results = model.run()\n",
        "      return results.info['completed_steps'] \n",
        "\n",
        "## file: requirements.txt\n",
        "pandas\n",
        "```\n",
        ":::"
      ],
      "id": "83b13e5e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/oren/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}