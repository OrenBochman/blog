<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Oren Bochman&#39;s Blog</title>
<link>https://orenbochman.github.io/</link>
<atom:link href="https://orenbochman.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Personal website, portfolio and blog</description>
<generator>quarto-1.5.41</generator>
<lastBuildDate>Tue, 02 Sep 2025 21:00:00 GMT</lastBuildDate>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/baysian_agent.qmd/</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/baysian_agent.qmd/</guid>
  <pubDate>Tue, 02 Sep 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-02-19-rhetoric/rhetoric-ideas.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>rhetoric</category>
  <category>nlp</category>
  <category>ideas</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-02-19-rhetoric/rhetoric-ideas.html</guid>
  <pubDate>Thu, 01 May 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/further-research.html</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/further-research.html</guid>
  <pubDate>Fri, 28 Jun 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>the war</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-06-06-notes-in-time-of-war/2024-06-06-notes-in-time-of-war.html</link>
  <description><![CDATA[ 





<p>In discussion I had last afternoon with a friend, we discussed the ongoing war.</p>
<p>I made mention of few points I’d like to make note of here.</p>
<ol type="1">
<li>Drones attacks are likely to become a fact of life in this part of the world going foreward. Our enemeis have been investing in rockets and missiles for several decades now with a rather small investment in tanks and aeroplanes which cost orders of magnitude more. Drones are cheaper than most missiles and rockets and now that the is lost of knowledge of how to build them, they are accessible to orgeanizations that do not have the resources to build or even buy rockets and missiles.</li>
<li>Prolonged wars for a small and isolated country are a bad idea. While I could go into detail about the reasons why, I think it would be much better to come up with a formal model represnting what I mean in this context.</li>
<li>The war in Ukraine likely had economical reasons as well as the official resitance to Nato’s continuing incursion into the former Soviet Union. Putin and his advisers had tried and succeeded in the past to make territorial gains in the former Soviet Union and at practically no cost. This made them bold and they miscaculated the likelyhood of a quick victory in Ukraine.</li>
<li>The war in the Ukraine like many recent wars featured large costs to civilians population. This strategy of targeting civilians is against the Geneva convention and likely to be a war crime. However a player like Putin isn’t likely to be deterred by the threat of being tried for war crimes as he can litteraly veto any such action in the UN security council. However there is a munition economy in any war and destroying civilian infrastructure when they could be used to support the war effort suggests that for Russia the notion of the battlefield is not limited to the front lines. It seems that they view this more as a total war where the entire country is the battlefield. Perhaps even as assymetric warfare where thier enemy is the military of Ukraine which is embedded in the civilian population.</li>
<li>Many conflicts by an attacker against a defender follow the Colonel Blotto game where the attacker can divide his forces between several fronts and thereby gain and advantage over a stronge defender.</li>
<li>The real reason why Israel refused to give the iron dome technology to Ukraine:
<ul>
<li><p>not that they are the technology would be reverse engineed</p></li>
<li><p>not that they are afraid that on that battlefield the russians and thier allies would be able to learn to counter the iron dome system</p></li>
<li><p>not to avoid angering Russia which has a large Jewish population and a significant military presence in Syria.</p></li>
<li><p>not because they are afraid of the technology falling into the hands of the wrong people.</p></li>
<li><p>I think that these all seem to be valid concerns and were raised by differnt people in the media. The real reason is unspoken and has emerged during the “Swords of Iron” operation in Gaza.</p></li>
</ul></li>
</ol>
<ul>
<li>The real concerns are related to its muinition economy.</li>
<li>The iron dome is a very expensive system to operate and the cost of operating it is likely to be higher than the cost of the rockets it is intercepting. This is a munition economy that is not sustainable in a prolonged war. Most if not all the munitions used by the iron dome are made in the US and the US is likely to be the one paying for the operation of the iron dome in Ukraine. Once iron dome was needed in Israel, the US would be have to make a choice between supporting Israel or supporting Ukraine. By not giving the iron dome to Ukraine the US was spared from having to make this choice. This is a euphemism for the Israeli descision being a practical one - they did not want to create scarcity in the munition comming from the US and would rather make exclisive use of it than share it with Ukraine. In the longrun, this might signinificantly reduce the costs of munitions due to a economy of scale. However it is just as likely that in the long term the battle field will change and the iron dome will be rendered obsolete and be supplanted by a more econmicaly viable system.</li>
</ul>
<ol start="7" type="1">
<li>There seems to be a rule of thumb that in assymetrical warfare the stronger side would prefer to attack just the insurgents and not the civilian population. However both sides will try to maximze the effect if their resources. In this case these are weopons and soldiers. The insurgents are embedded in the civilian population and if they force the stronger side to attack then it is the civilian population that will suffer the most. The rule I was thinking of is both military and economic. The costs to the civilian population are likely to in proportion to the budget of the stronger side. The are likely to inversly proportional to the proportion of the insuregents to the population in which they are embedded.</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bcosts%20to%20civilians%7D%20%5Cpropto%20%5Ctext%7Bbudget%20of%20the%20stronger%20side%7D%20%5Ctimes%20%5Ctext%7Binsurgents%20%5C%20population%7D%0A"></p>
<section id="a-simple-model-of-the-cost-of-war" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-model-of-the-cost-of-war">a simple model of the cost of war</h2>
<ol type="1">
<li>Contemporary wars have four forces.</li>
</ol>
<ul>
<li>a military objective which is the goal of the war.</li>
<li>a costs to human lives,</li>
<li>an economic costs which human lives are also a part of.
<ul>
<li>munitions costs</li>
<li>infrastructure costs</li>
<li>losses in productivity due to the war</li>
<li>losses due to sanctions, embargos and boycotts</li>
<li>losses due to payment of reparations if the war is lost.</li>
</ul></li>
<li>a cost in public opinion.</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Ctext%7Bcost%20of%20war%7D%20=%20%5Ctext%7Bmunitions%20costs%7D%20+%20%5Ctext%7Binfrastructure%20costs%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>One of the problems is however that many of these costs are not borne by the the decision makers.</p>
<p>Some costs of the war are borne by the population of the countries that is at war. Others are borne by their allies and enemies.</p>
<p>In the war in Gaza, the cost of the war was borne by: - The IDF and the population of Israel and their allies (The US) - The Hamas embeded in the population of Gaza and their allies (Quatar, Iran and their proxies,</p>
<ol type="1">
<li>The cost of war is the sum of the costs of the munitions used in the war and the costs of the infrastructure destroyed in the war.</li>
</ol>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {The War},
  date = {2024-06-06},
  url = {https://orenbochman.github.io//posts/2024/2024-06-06-notes-in-time-of-war/2024-06-06-notes-in-time-of-war.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“The War.”</span> June 6, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-06-06-notes-in-time-of-war/2024-06-06-notes-in-time-of-war.html">https://orenbochman.github.io//posts/2024/2024-06-06-notes-in-time-of-war/2024-06-06-notes-in-time-of-war.html</a>.
</div></div></section></div> ]]></description>
  <category>war</category>
  <category>economics</category>
  <category>politics</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-06-06-notes-in-time-of-war/2024-06-06-notes-in-time-of-war.html</guid>
  <pubDate>Wed, 05 Jun 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>emergent communications</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/shanon-game.html</link>
  <description><![CDATA[ 





<p>it seems that we might want to look at the emergent communications by considering 1. a lewis signaling games to model coordination tasks for a basic communication system 2. a shannon game to model the communication of information between agents in which the learn a shared communication protocol potentially using error detection and correction and corection. 3. a chomsky game to model development of a shared grammar for complex signals.</p>
<section id="shannon-game" class="level2">
<h2 class="anchored" data-anchor-id="shannon-game">Shannon Game</h2>
<div id="bce09a18" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CommunicationAgent:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_strategies):</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_strategies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_strategies</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((num_strategies, num_strategies))</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.discount_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb1-10">    </span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_strategy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.random.rand() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon:</span>
<span id="cb1-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_strategies)</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-16">    </span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_q_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sender_strategy, receiver_strategy, reward):</span>
<span id="cb1-18">        max_future_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[receiver_strategy])</span>
<span id="cb1-19">        current_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[sender_strategy, receiver_strategy]</span>
<span id="cb1-20">        new_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.discount_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> max_future_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> current_q)</span>
<span id="cb1-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[sender_strategy, receiver_strategy] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_q</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulation parameters</span></span>
<span id="cb1-24">num_strategies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-25">num_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize agents</span></span>
<span id="cb1-28">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommunicationAgent(num_strategies)</span>
<span id="cb1-29">bob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommunicationAgent(num_strategies)</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iterations):</span>
<span id="cb1-32">    sender_strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.choose_strategy()</span>
<span id="cb1-33">    receiver_strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bob.choose_strategy()</span>
<span id="cb1-34">    </span>
<span id="cb1-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate message transmission and reception with noise</span></span>
<span id="cb1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is a placeholder for actual encoding/decoding logic</span></span>
<span id="cb1-37">    success <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume 80% chance of success</span></span>
<span id="cb1-38">    </span>
<span id="cb1-39">    reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> success <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-40">    alice.update_q_values(sender_strategy, receiver_strategy, reward)</span>
<span id="cb1-41">    bob.update_q_values(receiver_strategy, sender_strategy, reward)</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice's Q-Table:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alice.q_table)</span>
<span id="cb1-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob's Q-Table:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, bob.q_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Alice's Q-Table:
 [[5.51822968 2.35177511 2.90702021 4.76366083 3.37332381]
 [4.89761615 0.1        0.         0.         0.        ]
 [4.7879317  0.18171545 0.2552969  0.         0.        ]
 [5.58902632 0.         0.1        0.55136978 0.        ]
 [4.4114806  0.         0.         0.         0.19186254]]
Bob's Q-Table:
 [[5.51822968 2.72004242 3.63249823 4.14833012 3.24329082]
 [3.77818662 0.1        0.30752146 0.         0.        ]
 [4.86271285 0.         0.3543934  0.15511159 0.        ]
 [5.33458643 0.         0.         0.48117073 0.        ]
 [5.48950986 0.         0.         0.         0.33812458]]</code></pre>
</div>
</div>
<p>This example illustrates a basic game-theoretic approach where the sender and receiver iteratively learn better strategies for encoding and decoding messages over a noisy channel. The reinforcement learning framework allows both parties to adapt and improve their protocols, enhancing the reliability of communication over time. This model can be extended and refined to include more sophisticated encoding/decoding techniques and more complex noise models.</p>
<div id="b2075aae" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomActivation</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.datacollection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataCollector</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hamming_distance(a, b):</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sender(Agent):</span>
<span id="cb3-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb3-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random_protocol()</span>
<span id="cb3-13">    </span>
<span id="cb3-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> random_protocol(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a random protocol for encoding</span></span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> msg: msg  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity for simplicity</span></span>
<span id="cb3-17">    </span>
<span id="cb3-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-19">        message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.message_length)</span>
<span id="cb3-20">        encoded_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol(message)</span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.sent_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_message</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Receiver(Agent):</span>
<span id="cb3-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb3-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb3-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random_protocol()</span>
<span id="cb3-27">    </span>
<span id="cb3-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> random_protocol(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a random protocol for decoding</span></span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> msg: msg  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity for simplicity</span></span>
<span id="cb3-31">    </span>
<span id="cb3-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-33">        noisy_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.sent_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> np.random.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.error_rate, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.message_length)</span>
<span id="cb3-34">        recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol(noisy_message)</span>
<span id="cb3-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recovered_message</span>
<span id="cb3-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.evaluate_performance()</span>
<span id="cb3-37">    </span>
<span id="cb3-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> evaluate_performance(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-39">        original_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.original_message</span>
<span id="cb3-40">        recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.recovered_message</span>
<span id="cb3-41">        distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hamming_distance(original_message, recovered_message)</span>
<span id="cb3-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.recovery_payoff(distance)</span>
<span id="cb3-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.length_payoff(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(recovered_message))</span>
<span id="cb3-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.early_recovery_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.current_step)</span>
<span id="cb3-45">    </span>
<span id="cb3-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NoisyChannelModel(Model):</span>
<span id="cb3-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, error_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, max_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb3-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> message_length</span>
<span id="cb3-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.error_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error_rate</span>
<span id="cb3-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_steps</span>
<span id="cb3-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-54">        </span>
<span id="cb3-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-56">        </span>
<span id="cb3-57">        sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sender(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-58">        receiver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Receiver(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(sender)</span>
<span id="cb3-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(receiver)</span>
<span id="cb3-61">        </span>
<span id="cb3-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.original_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message_length)</span>
<span id="cb3-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sent_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-65">        </span>
<span id="cb3-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datacollector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCollector(</span>
<span id="cb3-67">            model_reporters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payoff"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"payoff"</span>}</span>
<span id="cb3-68">        )</span>
<span id="cb3-69">    </span>
<span id="cb3-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> recovery_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, distance):</span>
<span id="cb3-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> distance</span>
<span id="cb3-72">    </span>
<span id="cb3-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> length_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, length):</span>
<span id="cb3-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> length</span>
<span id="cb3-75">    </span>
<span id="cb3-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> early_recovery_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, step):</span>
<span id="cb3-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> step) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps</span>
<span id="cb3-78">    </span>
<span id="cb3-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.step()</span>
<span id="cb3-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datacollector.collect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps:</span>
<span id="cb3-84">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-85"></span>
<span id="cb3-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of running the model</span></span>
<span id="cb3-87">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NoisyChannelModel()</span>
<span id="cb3-88"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> model.running:</span>
<span id="cb3-89">    model.step()</span>
<span id="cb3-90"></span>
<span id="cb3-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve results</span></span>
<span id="cb3-92">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.datacollector.get_model_vars_dataframe()</span>
<span id="cb3-93"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    Payoff
0     1.69
1     3.47
2     4.94
3     6.50
4     7.75
..     ...
95  105.34
96  105.77
97  106.29
98  106.80
99  107.10

[100 rows x 1 columns]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/oren/work/blog/env/lib/python3.10/site-packages/mesa/time.py:82: FutureWarning:

The AgentSet is experimental. It may be changed or removed in any and all future releases, including patch releases.
We would love to hear what you think about this new feature. If you have any thoughts, share them with us here: https://github.com/projectmesa/mesa/discussions/1919
</code></pre>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Emergent Communications},
  date = {2024-06-01},
  url = {https://orenbochman.github.io//posts/2024/2024-05-01-Signals/shanon-game.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Emergent Communications.”</span> June 1,
2024. <a href="https://orenbochman.github.io//posts/2024/2024-05-01-Signals/shanon-game.html">https://orenbochman.github.io//posts/2024/2024-05-01-Signals/shanon-game.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/shanon-game.html</guid>
  <pubDate>Sat, 01 Jun 2024 06:11:36 GMT</pubDate>
</item>
<item>
  <title>Bayesian Agents</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-06-01-Bayesian-Agents.html</link>
  <description><![CDATA[ 





<p>I want to create a baysian and updating scheme for Lewis signaling games that supports fast learning of signaling systems.</p>
<p>One direction is to use hierachial model. First I wanted to draw the intial wights from a prior is there a prior one can use for hierarchical learning in the Lewis signaling game.</p>
<p>the name of a prior for an distribution that is like an identity matrix?</p>
<p>Some thought on modeling games with agents.</p>
<ol type="1">
<li>Idealy one should be able to plug in a minimal amount of information about the agents and then be able to simulate the game and identify the optimal strategies for the agents.</li>
<li>One should be able to simulate the game with different solution concepts and see how the agents behave - like making mistakes or introducing private information.</li>
</ol>
<p>For example for two player games we can provide a payoff matrix. then we can simulate the players playing the game in turn or at the same time once and repeatedly (with memory) and see how the agents behave.</p>
<p>This could cover a wide range of games from the prisoner’s dilemma, stag hunt, battle of the sexes, Lewis signaling game with two signals. A simple bandit algorithm could be used to simulate the agents playing the game and identify the optimal strategies for the agents.</p>
<section id="prisoners-dilemma" class="level2">
<h2 class="anchored" data-anchor-id="prisoners-dilemma">prisoners dilemma</h2>
<p>the payoff matrix for the prisoners dilemma is:</p>
<div id="826aceb5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3">prisoners_dillema_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)], [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]])</span>
<span id="cb1-4">stag_hunt_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)], [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]])</span>
<span id="cb1-5">lewis_signaling_game_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)], [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]])</span>
<span id="cb1-6">battle_of_the_sexes_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)], [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]])</span>
<span id="cb1-7">dove_hawk_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)], [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]])</span>
<span id="cb1-8">suppot_oppose_evade_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)],</span>
<span id="cb1-9">                                              [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)], </span>
<span id="cb1-10">                                              [(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)]])</span>
<span id="cb1-11">chicken_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)], [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]])</span>
<span id="cb1-12">a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-13">b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-14">robber_guards_payoff_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (a, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a)], [(b, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mixed stategy</span></span></code></pre></div>
</div>
<p>For games with incomplete information we can provide a prior distribution over the possible payoffs and then update the distribution based on the agents actions.</p>
<p>ion exploring the space of possible games and strategies one should be able to identify the optimal strategies for the agents. 2.</p>
<p>Some thoughts on developing the Bayesian agents:</p>
<dl>
<dt>Pareto improvement</dt>
<dd>
In welfare economics, a Pareto improvement formalizes the idea of an outcome being “better in every possible way”. A change is called a Pareto improvement if it leaves everyone in a society better-off (or at least as well-off as they were before).
</dd>
<dt>Pareto efficient or Pareto optimality</dt>
<dd>
A situation is called Pareto efficient or Pareto optimal if all possible Pareto improvements have already been made; in other words, there are no longer any ways left to make one person better-off, unless we are willing to make some other person worse-off
</dd>
<dt>Multi-objective optimization or Pareto optimization</dt>
<dd>
is an area of multiple-criteria decision making that is concerned with mathematical optimization problems involving more than one objective function to be optimized simultaneously.
</dd>
<dt>Admissible decision rule</dt>
<dd>
In statistical decision theory, an admissible decision rule is a rule for making a decision such that there is no other rule that is always “better” than it, in the precise sense of “better” defined below. This concept is analogous to Pareto efficiency.
</dd>
</dl>
<p>e.g.&nbsp;The James–Stein estimator is a nonlinear estimator of the mean of Gaussian random vectors and can be shown to dominate the ordinary least squares technique with respect to a mean-squared-error loss function. Therefore in this context the James–Stein estimator is admissible, while the ordinary least squares estimator is inadmissible.</p>
</section>
<section id="hiererchy-of-solution-concepts" class="level2">
<h2 class="anchored" data-anchor-id="hiererchy-of-solution-concepts">Hiererchy of solution concepts</h2>
<ol type="1">
<li>What is the hierarchy of solution concepts - in the sense that one solution concept can provide better solutions for a broader class of games than another?</li>
</ol>
<p>One of the tricky aspects is that games can seem very different at first yet when we work out the optimal strategies, it turns out that the crucial aspects of the games are the same.</p>
<p>Solution concepts typically apply to a given class of games and these classes can be used to provide a multidimensional hierarchy of solution concepts.</p>
<p>strict dominance, weak dominance, iterated dominance, Nash equilibrium, correlated equilibrium, subgame perfect equilibrium, Bayesian Nash equilibrium, trembling hand perfect equilibrium, sequential equilibrium, perfect Bayesian equilibrium,</p>
<p>pareto optimality, ESS, backward induction, minimax, maxmin, risk dominance, quantal response equilibrium, level-k reasoning, cognitive hierarchy, iterated elimination of dominated strategies, rationalizability, sequential equilibrium, trembling hand perfect equilibrium, proper equilibrium, sequential equilibrium, perfect Bayesian equilibrium, core, Shapley value, nucleolus, kernel, bargaining set, von Neumann-Morgenstern solution, Nash bargaining solution, Kalai-Smorodinsky solution, egalitarian solution, competitive equilibrium, Walrasian equilibrium, Arrow-Debreu equilibrium, Radner,</p>
<p>for non-coopertaive game: Mertens stable equilibrium &gt; forward induction, backward induction</p>
<ol type="1">
<li>Given a set of agent, with a schedule, action and payoff - can we define a ‘formal models’ for game in extensive and normal form.</li>
<li>For the formal game can we identifying all the different equlibria for a game is specified?</li>
<li>Implementing different solution concepts for game theoretic agents.</li>
<li>For games with incomplete information, can we implement a bayesian updating scheme for agents.</li>
<li>Can we implement a learning scheme for agents in a game.</li>
</ol>
<div id="b7aa6e3c" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> warnings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> simplefilter</span>
<span id="cb2-3">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>, message<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The AgentSet is experimental*'</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import necessary modules</span></span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomActivation</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.space <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultiGrid</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.datacollection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataCollector</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianUpdater:</span>
<span id="cb2-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, prior<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prior <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default prior: uniform distribution over actions 'A' and 'B'</span></span>
<span id="cb2-16">            prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>}</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior.copy()</span>
<span id="cb2-19"></span>
<span id="cb2-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_belief(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, observation, likelihoods):</span>
<span id="cb2-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update belief using Bayesian updating for each action</span></span>
<span id="cb2-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief:</span>
<span id="cb2-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief[action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> likelihoods[action]</span>
<span id="cb2-24">        </span>
<span id="cb2-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize to get new belief</span></span>
<span id="cb2-26">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief.values())</span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief:</span>
<span id="cb2-28">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief[action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> total</span>
<span id="cb2-29"></span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_decision(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example decision rule: choose action with highest belief</span></span>
<span id="cb2-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.belief.get)</span>
<span id="cb2-33"></span>
<span id="cb2-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianAgent(Agent):</span>
<span id="cb2-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model, prior<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-36">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb2-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bayesian_updater <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianUpdater(prior)</span>
<span id="cb2-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observed_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-40"></span>
<span id="cb2-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a decision based on current belief</span></span>
<span id="cb2-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bayesian_updater.make_decision()</span>
<span id="cb2-44">        </span>
<span id="cb2-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update belief based on the observed outcome</span></span>
<span id="cb2-46">        observation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.observe(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb2-47">        likelihoods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {action: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.likelihood(observation, action) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bayesian_updater.prior}</span>
<span id="cb2-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bayesian_updater.update_belief(observation, likelihoods)</span>
<span id="cb2-49">        </span>
<span id="cb2-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Observe actions of all other agents</span></span>
<span id="cb2-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observe_other_agents()</span>
<span id="cb2-52">        </span>
<span id="cb2-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print detailed output</span></span>
<span id="cb2-54">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-55">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> belief: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>bayesian_updater<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>belief<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-56"></span>
<span id="cb2-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> observe_other_agents(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Observe actions of all other agents in the model</span></span>
<span id="cb2-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observed_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [agent.action <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.schedule.agents <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>]</span>
<span id="cb2-60">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> observed actions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>observed_actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-61"></span>
<span id="cb2-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_belief_about_others(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update belief about the world based on observed actions</span></span>
<span id="cb2-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observed_actions:</span>
<span id="cb2-65">            likelihoods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.likelihood(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.likelihood(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)}</span>
<span id="cb2-66">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bayesian_updater.update_belief(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, likelihoods)</span>
<span id="cb2-67"></span>
<span id="cb2-68"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianModel(Model):</span>
<span id="cb2-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, N):</span>
<span id="cb2-70">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N</span>
<span id="cb2-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb2-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiGrid(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-74">        </span>
<span id="cb2-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define priors for three types of agents</span></span>
<span id="cb2-76">        prior_type_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>}</span>
<span id="cb2-77">        prior_type_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>}</span>
<span id="cb2-78">        prior_type_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>}</span>
<span id="cb2-79"></span>
<span id="cb2-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create agents with different priors</span></span>
<span id="cb2-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_agents):</span>
<span id="cb2-82">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-83">                prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior_type_1</span>
<span id="cb2-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-85">                prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior_type_2</span>
<span id="cb2-86">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-87">                prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior_type_3</span>
<span id="cb2-88"></span>
<span id="cb2-89">            agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianAgent(i, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, prior)</span>
<span id="cb2-90">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(agent)</span>
<span id="cb2-91">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random.randrange(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grid.width)</span>
<span id="cb2-92">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random.randrange(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grid.height)</span>
<span id="cb2-93">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grid.place_agent(agent, (x, y))</span>
<span id="cb2-94">        </span>
<span id="cb2-95">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datacollector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCollector(</span>
<span id="cb2-96">            agent_reporters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Belief"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a: a.bayesian_updater.belief}</span>
<span id="cb2-97">        )</span>
<span id="cb2-98"></span>
<span id="cb2-99">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-100">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datacollector.collect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb2-101">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.step()</span>
<span id="cb2-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.agents:</span>
<span id="cb2-103">            agent.update_belief_about_others()</span>
<span id="cb2-104"></span>
<span id="cb2-105">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> observe(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, agent):</span>
<span id="cb2-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate an observation based on the agent's action</span></span>
<span id="cb2-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>:</span>
<span id="cb2-108">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 70% chance of success</span></span>
<span id="cb2-109">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-110">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 30% chance of success</span></span>
<span id="cb2-111"></span>
<span id="cb2-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> likelihood(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, observation, action):</span>
<span id="cb2-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return likelihood of observation given action</span></span>
<span id="cb2-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>:</span>
<span id="cb2-115">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> observation <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span>
<span id="cb2-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-117">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> observation <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span></span>
<span id="cb2-118"></span>
<span id="cb2-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the model</span></span>
<span id="cb2-120"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-121">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianModel(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-122">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduced the number of steps for brevity</span></span>
<span id="cb2-123">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--- Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb2-124">        model.step()</span>
<span id="cb2-125">    </span>
<span id="cb2-126">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and print data</span></span>
<span id="cb2-127">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.datacollector.get_agent_vars_dataframe()</span>
<span id="cb2-128">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(data.tail())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
--- Step 1 ---
Agent 7 observed actions: [None, None, None, None, None, None, None, None, None]
Agent 7 action: A
Agent 7 belief: {'A': 0.3, 'B': 0.7}
Agent 8 observed actions: ['A', None, None, None, None, None, None, None, None]
Agent 8 action: B
Agent 8 belief: {'A': 0.09677419354838711, 'B': 0.903225806451613}
Agent 3 observed actions: ['A', 'B', None, None, None, None, None, None, None]
Agent 3 action: A
Agent 3 belief: {'A': 0.903225806451613, 'B': 0.09677419354838711}
Agent 0 observed actions: ['A', 'B', 'A', None, None, None, None, None, None]
Agent 0 action: A
Agent 0 belief: {'A': 0.903225806451613, 'B': 0.09677419354838711}
Agent 5 observed actions: ['A', 'B', 'A', 'A', None, None, None, None, None]
Agent 5 action: B
Agent 5 belief: {'A': 0.09677419354838711, 'B': 0.903225806451613}
Agent 4 observed actions: ['A', 'B', 'A', 'A', 'B', None, None, None, None]
Agent 4 action: A
Agent 4 belief: {'A': 0.7, 'B': 0.3}
Agent 6 observed actions: ['A', 'B', 'A', 'A', 'B', 'A', None, None, None]
Agent 6 action: A
Agent 6 belief: {'A': 0.631578947368421, 'B': 0.3684210526315789}
Agent 1 observed actions: ['A', 'B', 'A', 'A', 'B', 'A', 'A', None, None]
Agent 1 action: A
Agent 1 belief: {'A': 0.3, 'B': 0.7}
Agent 9 observed actions: ['A', 'B', 'A', 'A', 'B', 'A', 'A', 'A', None]
Agent 9 action: A
Agent 9 belief: {'A': 0.903225806451613, 'B': 0.09677419354838711}
Agent 2 observed actions: ['A', 'B', 'A', 'A', 'B', 'A', 'A', 'A', 'A']
Agent 2 action: B
Agent 2 belief: {'A': 0.09677419354838711, 'B': 0.903225806451613}

--- Step 2 ---
Agent 1 observed actions: ['A', 'A', 'B', 'B', 'A', 'A', 'B', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 0.997351434488271, 'B': 0.0026485655117290162}
Agent 6 observed actions: ['A', 'A', 'B', 'B', 'A', 'A', 'B', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 0.9998780740955051, 'B': 0.00012192590449486855}
Agent 4 observed actions: ['A', 'A', 'B', 'B', 'A', 'A', 'B', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 0.9999104188867107, 'B': 8.958111328923861e-05}
Agent 5 observed actions: ['A', 'A', 'A', 'B', 'A', 'A', 'B', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 0.9980527468371296, 'B': 0.0019472531628704443}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'B', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 0.9980527468371296, 'B': 0.0019472531628704443}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'B', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 0.9998780740955052, 'B': 0.00012192590449486855}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'B', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 0.9999776032169311, 'B': 2.239678306888071e-05}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 0.9980527468371296, 'B': 0.0019472531628704443}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 0.997351434488271, 'B': 0.0026485655117290162}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 0.9999776032169311, 'B': 2.239678306888071e-05}

--- Step 3 ---
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 0.9999994448703694, 'B': 5.551296306621704e-07}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 0.999999592149599, 'B': 4.078504009625729e-07}
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 0.9999999812721682, 'B': 1.8727831821417877e-08}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 0.999999995318042, 'B': 4.6819580211166604e-09}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 0.9999998612175346, 'B': 1.3878246544723665e-07}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 0.9999999745093402, 'B': 2.5490659806763155e-08}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 0.9999999745093402, 'B': 2.5490659806763158e-08}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 0.999999592149599, 'B': 4.078504009625729e-07}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 0.9999994448703694, 'B': 5.551296306621704e-07}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 0.9999977794851753, 'B': 2.220514824627957e-06}

--- Step 4 ---
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 0.9999999999946714, 'B': 5.328601407091876e-12}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 0.9999999999147423, 'B': 8.525762250665542e-11}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 0.9999999999946715, 'B': 5.328601407091877e-12}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 0.9999999999709888, 'B': 2.9011274326813147e-11}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 0.9999999998839549, 'B': 1.1604509729715271e-10}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 0.9999999974727957, 'B': 2.5272043350445003e-09}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 0.9999999998839549, 'B': 1.1604509729715271e-10}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 0.9999999999147423, 'B': 8.525762250665542e-11}
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 0.999999999996085, 'B': 3.914890829705688e-12}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 0.9999999999946714, 'B': 5.328601407091876e-12}

--- Step 5 ---
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 0.9999999999999956, 'B': 4.455591569214526e-15}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 0.9999999999999031, 'B': 9.703288306288511e-14}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 0.9999999999999757, 'B': 2.425822076572305e-14}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 0.9999999999998679, 'B': 1.3207253528003347e-13}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 0.9999999999999939, 'B': 6.064555191430872e-15}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 0.9999999999999939, 'B': 6.064555191430872e-15}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 0.9999999999999822, 'B': 1.7822366276857863e-14}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 0.9999999999994716, 'B': 5.282901411199244e-13}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 0.999999999999967, 'B': 3.301813382001164e-14}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 0.9999999999999989, 'B': 1.1138978923036352e-15}

--- Step 6 ---
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 1.0, 'B': 2.3285069001793296e-19}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 1.0, 'B': 2.760861761644727e-17}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 1.0, 'B': 2.028388233045105e-17}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 1.0, 'B': 2.7608617616447268e-17}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 1.0, 'B': 1.2677426456531907e-18}
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 1.0, 'B': 5.0709705826127634e-18}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 1.0, 'B': 6.9021544041118146e-18}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 1.0, 'B': 3.725611040286927e-18}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 0.9999999999999994, 'B': 6.012543392026289e-16}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 1.0, 'B': 6.9021544041118146e-18}

--- Step 7 ---
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 1.0, 'B': 5.771341975641892e-21}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 1.0, 'B': 3.1421750756272515e-20}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 1.0, 'B': 3.1421750756272515e-20}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 1.0, 'B': 1.4428354939104723e-21}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 1.0, 'B': 7.7880666393501565e-22}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 1.0, 'B': 1.4428354939104723e-21}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 1.0, 'B': 1.2568700302509001e-19}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 1.0, 'B': 7.855437689068126e-21}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 1.0, 'B': 4.240169614757307e-21}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 1.0, 'B': 4.867541649593848e-23}

--- Step 8 ---
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 1.0, 'B': 8.863706695300737e-25}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 1.0, 'B': 3.0161224171509453e-25}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 1.0, 'B': 1.4304612194724779e-22}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 1.0, 'B': 1.01751735022585e-26}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 1.0, 'B': 1.6421110937821813e-24}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 1.0, 'B': 3.0161224171509453e-25}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 1.0, 'B': 6.568444375128727e-24}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 1.0, 'B': 6.568444375128727e-24}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 1.0, 'B': 4.8257958674415124e-24}
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 1.0, 'B': 1.2064489668603783e-24}

--- Step 9 ---
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 1.0, 'B': 2.127031739105971e-30}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 1.0, 'B': 1.8528809816212014e-28}
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 1.0, 'B': 1.373076307676699e-27}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 1.0, 'B': 2.990255070051478e-26}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 1.0, 'B': 1.373076307676699e-27}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 1.0, 'B': 6.304942229127699e-29}
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 1.0, 'B': 1.0087907566604319e-27}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 1.0, 'B': 3.4326907691917473e-28}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 1.0, 'B': 1.373076307676699e-27}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 1.0, 'B': 6.304942229127699e-29}

--- Step 10 ---
Agent 8 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 8 action: A
Agent 8 belief: {'A': 1.0, 'B': 2.10878955239161e-31}
Agent 2 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 2 action: A
Agent 2 belief: {'A': 1.0, 'B': 6.2508687843114266e-30}
Agent 3 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 3 action: A
Agent 3 belief: {'A': 1.0, 'B': 1.3179934702447563e-32}
Agent 6 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 6 action: A
Agent 6 belief: {'A': 1.0, 'B': 1.3179934702447563e-32}
Agent 7 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 7 action: A
Agent 7 belief: {'A': 1.0, 'B': 2.8702968907552474e-31}
Agent 1 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 1 action: A
Agent 1 belief: {'A': 1.0, 'B': 2.8702968907552474e-31}
Agent 4 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 4 action: A
Agent 4 belief: {'A': 1.0, 'B': 2.8702968907552474e-31}
Agent 9 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 9 action: A
Agent 9 belief: {'A': 1.0, 'B': 2.4208043331026137e-33}
Agent 0 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 0 action: A
Agent 0 belief: {'A': 1.0, 'B': 7.175742226888119e-32}
Agent 5 observed actions: ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
Agent 5 action: A
Agent 5 belief: {'A': 1.0, 'B': 3.873286932964182e-32}
                                               Belief
Step AgentID                                         
9    6         {'A': 1.0, 'B': 6.428685662431004e-36}
     8        {'A': 1.0, 'B': 1.0285897059889607e-34}
     0         {'A': 1.0, 'B': 3.500062193990214e-35}
     7        {'A': 1.0, 'B': 1.4000248775960855e-34}
     3         {'A': 1.0, 'B': 6.428685662431004e-36}</code></pre>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Bayesian {Agents}},
  date = {2024-06-01},
  url = {https://orenbochman.github.io//posts/2024/2024-06-01-Bayesian-Agents.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Bayesian Agents.”</span> June 1, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-06-01-Bayesian-Agents.html">https://orenbochman.github.io//posts/2024/2024-06-01-Bayesian-Agents.html</a>.
</div></div></section></div> ]]></description>
  <category>game theory</category>
  <category>bayesian agents</category>
  <category>Agent Based Modeling</category>
  <category>ABM</category>
  <category>MESA</category>
  <category>bayesian game theory</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-06-01-Bayesian-Agents.html</guid>
  <pubDate>Fri, 31 May 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Roth Erev learning in Lewis signaling games</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html</link>
  <description><![CDATA[ 





<section id="learning-in-lewis-signaling-games" class="level2">
<h2 class="anchored" data-anchor-id="learning-in-lewis-signaling-games">Learning in Lewis signaling games</h2>
<p>I wish now to implement learning in the Lewis signaling game. In the book some reinforcement learning RL algorithms are presented in some detail and a few variations are mentioned. It worthwhile pointing out that the book statement of the algorithms is good enough to understand how the algorithms operate in general. However some of the details required to implement the algorithms were glossed over. As my one time collage Yuri Stool like to point out, “the devil is in the details.”</p>
<p>I ended up implementing the algorithms a number of times - once to get it to work, second time to develop my own algorithm as I gained new insights into the problems. A third time after reading more of the papers whihc suggested how more details on conducting experiments which led to a deeper understanding of enumerating and ranking the partial pooling equilibria. The point here is that natural language is mostly a separating equilibrium - most words are unambiguous but there are a significant subset of words that have multiple meaning and there are many synonyms. Mechanisms in the lexicon seem to eventually resolves some ambiguities while letting others persist indefinitely. So while the separating equilibria are of primary interests in reality users if signaling systems satisfice with a systems that is good enough. This are the much more common partial pooling variants with high degree of separation plus a context based disambiguation mechanism. I consider the erosion of English and Latin conjugation and declination after the classical period as a simpler contextual disambiguation mechanism dismantling a nearly perfect signaling subsystem with a rather degenerate one with high degree of partial pooling. A simulation might show how a few prepositions and auxilary verbs are more efficent to learn and process than fully inflected systems of case and verb ending (especially if modified by phonetics). But my guess is that this happened as more speakers had to master an use a core language, without access to resources for learning the classical forms. I guess the dark ages and a decline in literacy likely speed up the process.</p>
<p>Adding better analysis, estimating expected returns for a set of weights, tracking regret during learning. Considering different path to salience via differntial risks/costs for signals, and non uniform state distribution.</p>
<p>The big question seems to be:</p>
<p>What is a simple rl algorithm to evolve and disseminate a signaling system with certain added requirements like</p>
<ul>
<li><p>complex signals</p>
<ul>
<li><p>conjunctive signal aggregation</p></li>
<li><p>ordered signal aggregation via learning a grammar like SVO.</p></li>
<li><p>recursive signal aggregation replacing linear ordered with a partial order.</p></li>
</ul></li>
<li><p>resolving ambiguity by context</p></li>
<li><p>mechanism for correcting errors (vowel harmony, agreement)</p></li>
<li><p>simple growth of the lexicon (black bead leads to mutation in the urn model)</p></li>
<li><p>sufficient capacity,</p></li>
<li><p>minimal burden for processing (extending inference mechanism to reduce cognitive load, compress messages, erode unneeded structures)</p></li>
<li><p>minimal burden in learning (e.g.&nbsp;by generalization via regularity in morphology, and syntax)</p></li>
<li><p>high accuracy for transmission of messages</p></li>
<li><p>saliencey - a information theoretic measure of more efficient transition subset of states/messages pairs.</p></li>
</ul>
<p>Where the great unknown seems to be to find a minimal extension to the Lewis game in which all these might evlove.</p>
<p>Having stated the problem in detail lets me make the following two observations:</p>
<ol type="1">
<li><p>The aggregation rules for complex signaling should be made to arise by imposing costs on systems under which agents more frequently fail to make good inference with high probability of a partials message’s describing risky states for sender and or receiver.</p></li>
<li><p>A second cost to fitness is the role of mistakes in signaling and or receiving. (ie. adding an small chance for decoding similar sounding signals (homophones, short vs long sounds, hissed and hushed, round, front and back vouwels). This may lead to excluding simple signals from places they might be confused, is it (a,a) (a.a) or (aa,a), (a,_,a) are avoided if signal ‘a’ is excluded from the first positions (say verb class). here dot might be a short pause, comma a long pause, undescore an unmarked slot, and two aa no pause. (either two a or a long a.) if we prefix V with v S with s and P with C</p>
<p>we end up with a system that is much more robust. And we may have the added bonus that we can easily detect a tree formation based on multiple Vprefix in the sentence….</p>
<ol type="1">
<li>word grammar</li>
<li>sub word grammar - a complex morphology - highly regular yet differented complex signals</li>
<li>this could lead to redundancy based Error correction like subject verb agreement, noun adjective agreement or vowel harmony.</li>
<li>Concord - case agreement (nouns pronouns and adjective are in agreement)</li>
</ol></li>
<li><p>Ease of processing</p>
<ol type="1">
<li>agreement can also ease processing</li>
<li>assimilation and elision</li>
<li>limiting processing/disabihation context windows.</li>
<li>word order</li>
<li>however redundencies add overhead, making signals longer and may make learning much longer (this is when we students who generelize are wrong and then need to learn via negative examples.</li>
</ol></li>
<li><p>If many we have different complex signaling systems with minimal mistakes are possible one would prefer a system that is easier to learn. (Shorter lexicon, with lower chances of collision. Shorter grammar, fewer negtive examples, more room for expansion)</p></li>
</ol>
<section id="richard-herrnsteins-matching-law" class="level3">
<h3 class="anchored" data-anchor-id="richard-herrnsteins-matching-law">Richard Herrnstein’s Matching law</h3>
<ol type="1">
<li>we start with some initial weights, perhaps equal.</li>
<li>An act is chosen with probability proportional to its weight.</li>
<li>The payoff gained is added to the weight for the act that was chosen,</li>
<li>and the process repeats</li>
</ol>
</section>
<section id="roth-erev-learning-algorithm" class="level3">
<h3 class="anchored" data-anchor-id="roth-erev-learning-algorithm">Roth-Erev learning algorithm</h3>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
</ol>
</section>
<section id="bush-mosteller-learning" class="level3">
<h3 class="anchored" data-anchor-id="bush-mosteller-learning">Bush-Mosteller learning</h3>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
<li>if the reward is 0 the weight is multiplied by a forgetting factor.</li>
</ol>
</section>
<section id="roth-erev-learning-with-forgetting" class="level3">
<h3 class="anchored" data-anchor-id="roth-erev-learning-with-forgetting">Roth-Erev learning with forgetting:</h3>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
<li>if the reward is 0 the weight is multiplied by a forgetting factor.</li>
</ol>
</section>
<section id="arp-learning" class="level3">
<h3 class="anchored" data-anchor-id="arp-learning">ARP learning</h3>
</section>
<section id="bochman-8-rooks-rl" class="level3">
<h3 class="anchored" data-anchor-id="bochman-8-rooks-rl">Bochman 8-Rooks RL</h3>
<p>this is a special purpose rl algorithm for coordination problems where agents need to establish a convention like in the Lewis signaling game. The idea is that the matrix is similar to a placing 8 rooks on on a chess board with no two under attack. In this case once an option has been chosen we want to exclude all options that shares a row or a collumm. So we set to zero any weights which share the same prefix or suffix as a reward 1 option.</p>
<ol type="1">
<li>set starting weight for each option (state_signal) for the sender and (signal_action) for the receiver, perhaps to 1</li>
<li>weights evolve by</li>
</ol>
<ul>
<li>addition of rewards gotten for a correct choice and</li>
<li>zeroing of options with the same prefix or suffix to exclude them from the choice set.</li>
</ul>
<ol start="3" type="1">
<li>probability of choosing an alternative is proportional to its weight.</li>
</ol>
<div id="dc121222" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StagedActivation</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> abc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ABC, abstractmethod</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's define a lambda to take a list of options and intilize the weights uniformly </span></span>
<span id="cb1-9">uniform_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> options, w : {option: w <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> options}</span>
<span id="cb1-10">random_init  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> options, w : {option: random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> options}</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lets make LeaningRule an abstract class with all the methods that are common to all learning rules</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then we can subclass it to implement the specific learning rules</span></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LearningRule(ABC):</span>
<span id="cb1-15">  </span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LearningRule'</span>,init_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uniform_init):</span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-21">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'LearningRule.__init__(Options: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options</span>
<span id="cb1-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_weight(options,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start with one ball per option </span></span>
<span id="cb1-24">        </span>
<span id="cb1-25">        </span>
<span id="cb1-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_filtered_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-28">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'get_filtered_weights(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if filter is int convert to string</span></span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb1-31">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-32">        filter_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k.startswith(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)]</span>
<span id="cb1-33">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {opt: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[opt] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filter_keys}</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weights</span>
<span id="cb1-35">      </span>
<span id="cb1-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abstractmethod</span></span>
<span id="cb1-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-39">      </span>
<span id="cb1-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abstractmethod</span></span>
<span id="cb1-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-43">      </span>
<span id="cb1-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HerrnsteinRL(LearningRule):</span>
<span id="cb1-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                    The Urn model</span></span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     nature            sender                 reciever     reward</span></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                       </span></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    | (0) | --{0}--&gt;  | (0_a)  | --{a}--&gt; | (a_0) | --{0}--&gt;   1   </span></span>
<span id="cb1-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           | (0_b)  | --{b}    | (a_1) | --{1}--&gt;   0</span></span>
<span id="cb1-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           +--------+    | +--&gt;+-------+</span></span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |                         +-|-+  </span></span>
<span id="cb1-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    | (1) | --{1}--&gt;  | (1_a)  | --{a}+ +&gt;| (b_0) | --{1}--&gt;   1</span></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           | (1_b)  | --{b}---&gt;| (b_1) | --{0}--&gt;   0</span></span>
<span id="cb1-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    +-----+           +--------+          +-------+</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Herrnstein urn algorithm</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ------------------------</span></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    1. nature picks a state </span></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    2. sender  gets the state, chooses a signal by picking a ball in choose_option() from the stat'es urn</span></span>
<span id="cb1-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    3. reciver gets the action, chooses an actuion by picking a ball in choose_option()</span></span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    4. the balls in the urns are incremented if action == state</span></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    5. repeat</span></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb1-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Herrnstein matching law'</span>):</span>
<span id="cb1-69">      </span>
<span id="cb1-70">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-71"></span>
<span id="cb1-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-73">      </span>
<span id="cb1-74">        old_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]</span>
<span id="cb1-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward </span>
<span id="cb1-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-77">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-78">          </span>
<span id="cb1-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-80">      </span>
<span id="cb1-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb1-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span></span>
<span id="cb1-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subseting the weights by the filter simulates different urns per state or signal</span></span>
<span id="cb1-85">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-86"></span>
<span id="cb1-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate their probabilities then</span></span>
<span id="cb1-88">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"total weights is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span></span>
<span id="cb1-90">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then drawn an option from the filtered option using the probabilities</span></span>
<span id="cb1-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(weights.keys()), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probabilities)</span>
<span id="cb1-93"></span>
<span id="cb1-94"></span>
<span id="cb1-95"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RothErevRL(LearningRule):</span>
<span id="cb1-96"></span>
<span id="cb1-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Roth Erev RL'</span>):</span>
<span id="cb1-98">      </span>
<span id="cb1-99">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-100"></span>
<span id="cb1-101">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-102">        old_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]</span>
<span id="cb1-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-104">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward</span>
<span id="cb1-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-106">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-107"></span>
<span id="cb1-108">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we subset the weights by the filter, calculate their probabilities then</span></span>
<span id="cb1-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then drawn an option from the filtered option using the probabilities</span></span>
<span id="cb1-111">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-112">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-113">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(weights.keys()), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probabilities)</span>
<span id="cb1-115">  </span>
<span id="cb1-116"></span>
<span id="cb1-117"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RothErevForget_RL(LearningRule):</span>
<span id="cb1-118"></span>
<span id="cb1-119">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Roth Erev with forgetting'</span>):</span>
<span id="cb1-120">      </span>
<span id="cb1-121">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-122"></span>
<span id="cb1-123">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-124">        old_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]</span>
<span id="cb1-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-126">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward</span>
<span id="cb1-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-128">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate </span>
<span id="cb1-129">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-130">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-131"></span>
<span id="cb1-132">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-133">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-134">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-135">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-136">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(weights.keys()), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probabilities)</span>
<span id="cb1-137">  </span>
<span id="cb1-138"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> EightRooksRL(LearningRule):</span>
<span id="cb1-139">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Eight Rooks RL'</span>):</span>
<span id="cb1-140">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-141"></span>
<span id="cb1-142"></span>
<span id="cb1-143">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-144">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-145">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-146">        </span>
<span id="cb1-147">        old_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.copy()</span>
<span id="cb1-148">        </span>
<span id="cb1-149">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> test_option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options:</span>
<span id="cb1-150">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-151">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> test_option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> option:</span>
<span id="cb1-152">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increment the weight of the good option </span></span>
<span id="cb1-153">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[test_option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward</span>
<span id="cb1-154">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> test_option.startswith(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prefix) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> test_option.endswith(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suffix) :</span>
<span id="cb1-155">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decrement all other options with same prefix  or suffix</span></span>
<span id="cb1-156">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if self.weights[test_option] &lt; 0.000001:</span></span>
<span id="cb1-157">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   self.weights[test_option] = 0.0</span></span>
<span id="cb1-158">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else:</span></span>
<span id="cb1-159">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[test_option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate </span>
<span id="cb1-160">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># elif test_option == option:</span></span>
<span id="cb1-161">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # decrement the weights of the bad option combo</span></span>
<span id="cb1-162">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   self.weights[option] *= self.learning_rate </span></span>
<span id="cb1-163"></span>
<span id="cb1-164">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-165">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb1-166">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options:</span>
<span id="cb1-167">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> old_weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]:</span>
<span id="cb1-168">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: weight </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-169">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(f"Updated weight {old_weights} -&gt; {self.weights}")</span></span>
<span id="cb1-170"></span>
<span id="cb1-171"></span>
<span id="cb1-172">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-173">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-174">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-175">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-176">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if there is a max weight return it otherwise return a random option from the max wights</span></span>
<span id="cb1-177">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([opt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> weights[opt]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(weights.values())]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-178">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(weights, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weights.get)</span>
<span id="cb1-179">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-180">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice([opt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> weights[opt]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(weights.values())])</span>
<span id="cb1-181"></span>
<span id="cb1-182"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LewisAgent(Agent):</span>
<span id="cb1-183">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model, learning_options, learning_rule, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-184">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb1-185">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-186">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-187">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-188">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rule</span>
<span id="cb1-189">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-190">        </span>
<span id="cb1-191">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-192">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-193">    </span>
<span id="cb1-194">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> receive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-195">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-196">    </span>
<span id="cb1-197">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-198">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-199"></span>
<span id="cb1-200">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-201">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.reward</span>
<span id="cb1-202">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-203">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-204">        </span>
<span id="cb1-205">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_learning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-206">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule.update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights based on signals and rewards        </span></span>
<span id="cb1-207"></span>
<span id="cb1-208"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sender(LewisAgent):</span>
<span id="cb1-209">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-210">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.get_state()</span>
<span id="cb1-211">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self.message = self.learning_rule.choose_option(filter=state)  # Send a signal based on the learned weights</span></span>
<span id="cb1-212">        </span>
<span id="cb1-213">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send a signal based on the learned weights</span></span>
<span id="cb1-214">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-215">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-216">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal for state </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>message<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-217"></span>
<span id="cb1-218"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Receiver(LewisAgent):</span>
<span id="cb1-219">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> receive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-220">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sender.message <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sender <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.senders]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Receive signals from all senders</span></span>
<span id="cb1-221">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(f"Receiver {self.unique_id} receives signals: {self.received_signals}")</span></span>
<span id="cb1-222">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals:</span>
<span id="cb1-223">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals:</span>
<span id="cb1-224">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>signal)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose an action based on received signals and learned weights</span></span>
<span id="cb1-225">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-226">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-227">                  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> receives signals: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>received_signals<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and chooses action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-228"></span>
<span id="cb1-229"></span>
<span id="cb1-230">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-231">        correct_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.current_state</span>
<span id="cb1-232">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> correct_action <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-233">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-234">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> calculated reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> for action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-235"></span>
<span id="cb1-236"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SignalingGame(Model):</span>
<span id="cb1-237">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb1-238">                senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb1-239">                receivers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-240">                learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LearningRule,</span>
<span id="cb1-241">                learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb1-242">                verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-243">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-244">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-245">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k</span>
<span id="cb1-246">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-247">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate</span>
<span id="cb1-248"></span>
<span id="cb1-249">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the states, signals, and actions mapping</span></span>
<span id="cb1-250">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># States are simply numbers</span></span>
<span id="cb1-251">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Signals are characters</span></span>
<span id="cb1-252">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actions are simply numbers</span></span>
<span id="cb1-253"></span>
<span id="cb1-254">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a list of state_signal keys for the sender's weights</span></span>
<span id="cb1-255">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals]</span>
<span id="cb1-256">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a list of signal_action keys for the receiver's weights</span></span>
<span id="cb1-257">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions]</span>
<span id="cb1-258">        </span>
<span id="cb1-259">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Sender(i, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learning_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals_keys, </span>
<span id="cb1-260">                                  learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rule(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals_keys, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb1-261">                              ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(senders_count)]</span>
<span id="cb1-262">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Receiver(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> senders_count, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learning_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions_keys, </span>
<span id="cb1-263">                                  learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rule(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions_keys, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb1-264">                              ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(receivers_count)]</span>
<span id="cb1-265">        </span>
<span id="cb1-266">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StagedActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb1-267">          agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers, </span>
<span id="cb1-268">          stage_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'send'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receive'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calc_reward'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set_reward'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'update_learning'</span>])</span>
<span id="cb1-269"></span>
<span id="cb1-270">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-271">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states)</span>
<span id="cb1-272"></span>
<span id="cb1-273">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-274">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_state()</span>
<span id="cb1-275">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-276">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current state of the world: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-277">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.step()</span>
<span id="cb1-278"></span>
<span id="cb1-279"></span>
<span id="cb1-280"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to plot agent weights side by side</span></span>
<span id="cb1-281"></span>
<span id="cb1-282"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_weights(sender,reciver,title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Agent'</span>):</span>
<span id="cb1-283">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-284">    weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender.learning_rule.weights</span>
<span id="cb1-285">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].bar(weights.keys(), weights.values())</span>
<span id="cb1-286">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Options'</span>)</span>
<span id="cb1-287">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weights'</span>)</span>
<span id="cb1-288">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sender<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> weights: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-289">    </span>
<span id="cb1-290">    weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reciver.learning_rule.weights</span>
<span id="cb1-291">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].bar(weights.keys(), weights.values())</span>
<span id="cb1-292">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Options'</span>)</span>
<span id="cb1-293">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weights'</span>)</span>
<span id="cb1-294">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>reciver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> weights: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-295">    plt.show()</span>
<span id="cb1-296"></span>
<span id="cb1-297"></span>
<span id="cb1-298"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running the model</span></span>
<span id="cb1-299">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-300">verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-301"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> LR <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [HerrnsteinRL,</span>
<span id="cb1-302">           RothErevRL,</span>
<span id="cb1-303">           RothErevForget_RL,</span>
<span id="cb1-304">           EightRooksRL</span>
<span id="cb1-305">           ]:</span>
<span id="cb1-306">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>LR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb1-307">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> LR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> HerrnsteinRL:</span>
<span id="cb1-308">    learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb1-309">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-310">    learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span></span>
<span id="cb1-311">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SignalingGame(senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, receivers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k, learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR,learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose)</span>
<span id="cb1-312">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>):</span>
<span id="cb1-313">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose:</span>
<span id="cb1-314">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb1-315">      model.step()</span>
<span id="cb1-316">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb1-317">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print the agent weights</span></span>
<span id="cb1-318">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print('Sender weights:',model.senders[0].learning_rule.weights)</span></span>
<span id="cb1-319">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot weights side by side</span></span>
<span id="cb1-320">  </span>
<span id="cb1-321">  plot_weights(model.senders[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],model.receivers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb1-322">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print('Receiver weights:',model.receivers[0].learning_rule.weights)</span></span>
<span id="cb1-323">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_weights(model.receivers[0],title=LR.__name__)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--- HerrnsteinRL ---
--- RothErevRL ---
--- RothErevForget_RL ---
--- EightRooksRL ---</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/oren/work/blog/env/lib/python3.10/site-packages/mesa/time.py:82: FutureWarning:

The AgentSet is experimental. It may be changed or removed in any and all future releases, including patch releases.
We would love to hear what you think about this new feature. If you have any thoughts, share them with us here: https://github.com/projectmesa/mesa/discussions/1919
</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-3.png" width="750" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-4.png" width="742" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-5.png" width="751" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-6.png" width="742" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>currently only the eight rooks learning rule is producing consistently good signaling systems. The other learning rules are not learning to signal correctly.</p>
<p>Please suggest how to fix this - according to the literature the Roth-Erev with forgetting learning rule should work well in this case.</p>
<p>TODO: implement Bush-Mosteller learning - as this is a match for population dynamics.</p>
<p>TODO: also implement population dynamics as it may not be clear that BM RL is a perfect fit for population dynamics under all lewis game conditions.</p>
<p>TODO: implement ARP learning.</p>
<p>TODO: implement epsilon-greedy, UCB and thompson sampling urn schemes, and Contextual bandits associative search (that’s our multiurn bandit)</p>
</section>
</section>
<section id="estimating-the-gittins-index-for-a-lewis-games." class="level2">
<h2 class="anchored" data-anchor-id="estimating-the-gittins-index-for-a-lewis-games.">Estimating the Gittins index for a Lewis games.</h2>
<div id="c03ee418" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ContextualBandit:</span>
<span id="cb4-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb4-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_states, n_actions))</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_gittins_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplified Gittins index computation</span></span>
<span id="cb4-17">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards[state, action]</span>
<span id="cb4-18">        total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts[state, action]</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count)</span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb4-22">        gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_gittins_index(state, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(gittins_indices)</span>
<span id="cb4-24"></span>
<span id="cb4-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb4-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb4-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb4-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb4-29">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb4-33"></span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb4-36">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-37">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-38">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb4-39"></span>
<span id="cb4-40">sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ContextualBandit(n_states, n_actions)</span>
<span id="cb4-41">receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ContextualBandit(n_actions, n_states)</span>
<span id="cb4-42">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb4-43"></span>
<span id="cb4-44">rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-45">regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-46">total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-47">total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-48">sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions)]</span>
<span id="cb4-49">receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states)]</span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate the learning process</span></span>
<span id="cb4-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb4-53">    state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb4-54">    sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb4-55">    receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb4-56">    </span>
<span id="cb4-57">    reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-58">    total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb4-59">    total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb4-60">    </span>
<span id="cb4-61">    rewards.append(total_reward)</span>
<span id="cb4-62">    regrets.append(total_regret)</span>
<span id="cb4-63">    </span>
<span id="cb4-64">    sender_bandit.update(state, sender_action, reward)</span>
<span id="cb4-65">    receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb4-66">    </span>
<span id="cb4-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb4-68">        sender_gittins_indices[action].append(sender_bandit.get_gittins_index(state, action))</span>
<span id="cb4-69">    </span>
<span id="cb4-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb4-71">        receiver_gittins_indices[state].append(receiver_bandit.get_gittins_index(sender_action, state))</span>
<span id="cb4-72"></span>
<span id="cb4-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print final policy</span></span>
<span id="cb4-74"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sender policy:"</span>)</span>
<span id="cb4-75"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb4-76">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sender_bandit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>select_action(state)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-77"></span>
<span id="cb4-78"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Receiver policy:"</span>)</span>
<span id="cb4-79"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb4-80">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>receiver_bandit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>select_action(action)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-81"></span>
<span id="cb4-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the total rewards and regrets over time</span></span>
<span id="cb4-83">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-84">plt.plot(rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards'</span>)</span>
<span id="cb4-85">plt.plot(regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Regret'</span>)</span>
<span id="cb4-86">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb4-87">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb4-88">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb4-89">plt.legend()</span>
<span id="cb4-90">plt.show()</span>
<span id="cb4-91"></span>
<span id="cb4-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gittins indices over time for the sender</span></span>
<span id="cb4-93">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-94"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb4-95">    plt.plot(sender_gittins_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sender Gittins Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb4-96">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb4-97">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb4-98">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sender Gittins Indices Over Time'</span>)</span>
<span id="cb4-99">plt.legend()</span>
<span id="cb4-100">plt.show()</span>
<span id="cb4-101"></span>
<span id="cb4-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gittins indices over time for the receiver</span></span>
<span id="cb4-103">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-104"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb4-105">    plt.plot(receiver_gittins_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Receiver Gittins Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb4-106">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb4-107">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb4-108">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Receiver Gittins Indices Over Time'</span>)</span>
<span id="cb4-109">plt.legend()</span>
<span id="cb4-110">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sender policy:
State 0: Action 4
State 1: Action 0
State 2: Action 2
State 3: Action 3
State 4: Action 1
Receiver policy:
Action 0: State 1
Action 1: State 4
Action 2: State 2
Action 3: State 3
Action 4: State 0</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-3-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-3-output-2.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-3-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-3-output-3.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-3-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-3-output-4.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="making-it-bayesian" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="making-it-bayesian">Making it Bayesian</h2>
<p>According to <span class="citation" data-cites="sutton2018reinforcement">(Sutton and Barto 2018)</span> Gitting’s index are usually associated with the Bayesian paradigm.</p>
<div class="no-row-height column-margin column-container"><div id="ref-sutton2018reinforcement" class="csl-entry">
Sutton, R. S., and A. G. Barto. 2018. <em>Reinforcement Learning, Second Edition: An Introduction</em>. Adaptive Computation and Machine Learning Series. MIT Press. <a href="http://incompleteideas.net/book/RLbook2020.pdf">http://incompleteideas.net/book/RLbook2020.pdf</a>.
</div></div><p>As such one should be able to we could use a Bayesian updating scheme to learn expected rewards based on success counts. Since we are tracking successes vs failures we can use beta-binomial conjugate distributions to keep track of successes, failures and their likelihood.</p>
<p>This most basic form is like so:</p>
<div id="tbl-panel" class="quarto-layout-panel anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-panel-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: sender &amp; receiver prior
</figcaption>
<div aria-describedby="tbl-panel-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="tbl-panel" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-sender-prior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-tbl figure">
<figcaption class="quarto-float-caption-top quarto-subfloat-caption quarto-subfloat-tbl" id="tbl-sender-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) sender <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-sender-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">State/Signal</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="tbl-panel" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-receiver-prior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-tbl figure">
<figcaption class="quarto-float-caption-top quarto-subfloat-caption quarto-subfloat-tbl" id="tbl-receiver-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) receiver <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-receiver-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">Signal/Action</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
</div>
</figure>
</div>
<p>Where we have a table of independent beta-binomial priors for each state/signal and signal/action pair.</p>
<p>After 5 failures we update the beta distribution for the sender and receiver as follows:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-sender-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: sender <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">State/Signal</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,2</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-receiver-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;3: receiver <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">Signal/Action</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>sender &amp; receiver posterior</p>
</div>
</div>
</div>
<p>Failures are outcomes of uncorrelated signal action pairs and are basically like adding noise to the distribution on the loss side. Failures here tend to have a confounding effect - they reduce the probabilities associated with reward signals. And the model is not aware of the order of rewards/failures recency.</p>
<p>Now lets update for 2 success as follows:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-sender-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;4: sender <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 6%">
<col style="width: 36%">
<col style="width: 38%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">State/Signal</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">1,1</td>
<td style="text-align: left;"><span style="color: red">1</span>,2</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;"><span style="color: green">1</span>,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-receiver-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;5: receiver <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<colgroup>
<col style="width: 19%">
<col style="width: 35%">
<col style="width: 38%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Signal/Action</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;"><span style="color: red">1</span>,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,2</td>
<td style="text-align: left;"><span style="color: green">1</span>,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>sender &amp; receiver posterior</p>
</div>
</div>
</div>
<p>The Rewards are for <em>Corralated</em> <strong>signals/action</strong> pairs. However before learning progresses signal/action pairs are picked by chance. And so if different signal/action pairs are picked for the same state we will get a synonym and consequently will be missing a state/signal pair for one of the other states which will need to be shared (homonym).</p>
<p>Note that if we have a ties (between two signal/action pairs for a state then the next success or failure can be a spontaneous symmetry breaking event.</p>
<p>This will result in a a partial pooling equilibrium.</p>
<p>The Gittin’s index might help here by picking an options with the greatest expected return. If we set it up so it can recognize that a separating equilibria have the greatest expected return we should eventual learn these.</p>
<p>The problem is that micommunications (may confound the learning, until the pattern due to rewards are sufficiently reinforced.)</p>
<div id="a4bad961" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianContextualBandit:</span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb6-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb6-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb6-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb6-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb6-10"></span>
<span id="cb6-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb6-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb6-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_expected_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb6-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action])</span>
<span id="cb6-19"></span>
<span id="cb6-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_gittins_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb6-21">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action]</span>
<span id="cb6-22">        total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action]</span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count)</span>
<span id="cb6-24"></span>
<span id="cb6-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb6-26">        gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_gittins_index(state, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb6-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(gittins_indices)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb6-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb6-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb6-33">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb6-37"></span>
<span id="cb6-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k):</span>
<span id="cb6-39">    all_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb6-40">    all_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb6-41">    all_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_actions, n_iterations))</span>
<span id="cb6-42">    all_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_states, n_iterations))</span>
<span id="cb6-43">    </span>
<span id="cb6-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb6-45">        sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_states, n_actions)</span>
<span id="cb6-46">        receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_actions, n_states)</span>
<span id="cb6-47">        </span>
<span id="cb6-48">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-49">        total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-50">        </span>
<span id="cb6-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb6-52">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb6-53">            sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb6-54">            receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb6-55">            </span>
<span id="cb6-56">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-57">            total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb6-58">            total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb6-59">            </span>
<span id="cb6-60">            all_rewards[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_reward</span>
<span id="cb6-61">            all_regrets[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_regret</span>
<span id="cb6-62">            </span>
<span id="cb6-63">            sender_bandit.update(state, sender_action, reward)</span>
<span id="cb6-64">            receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb6-65">            </span>
<span id="cb6-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb6-67">                all_sender_gittins_indices[i, action, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.get_gittins_index(state, action)</span>
<span id="cb6-68">            </span>
<span id="cb6-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb6-70">                all_receiver_gittins_indices[i, s, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.get_gittins_index(sender_action, s)</span>
<span id="cb6-71">    </span>
<span id="cb6-72">    mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_rewards, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-73">    mean_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_regrets, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-74">    mean_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_sender_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-75">    mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_receiver_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-76">    </span>
<span id="cb6-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices</span>
<span id="cb6-78"></span>
<span id="cb6-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb6-80">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-81">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-82">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb6-83">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb6-84">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of experiment runs</span></span>
<span id="cb6-85"></span>
<span id="cb6-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the experiment</span></span>
<span id="cb6-87">all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k)</span>
<span id="cb6-88"></span>
<span id="cb6-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean total rewards and regrets over time along with individual curves</span></span>
<span id="cb6-90">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-91"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb6-92">    plt.plot(all_rewards[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb6-93">plt.plot(mean_rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Rewards'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-94"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb6-95">    plt.plot(all_regrets[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb6-96">plt.plot(mean_regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Regret'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-97">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb6-98">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb6-99">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb6-100">plt.legend()</span>
<span id="cb6-101">plt.show()</span>
<span id="cb6-102"></span>
<span id="cb6-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the sender</span></span>
<span id="cb6-104">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-105"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb6-106">    plt.plot(mean_sender_gittins_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Sender Gittins Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb6-107">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb6-108">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb6-109">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Sender Gittins Indices Over Time'</span>)</span>
<span id="cb6-110">plt.legend()</span>
<span id="cb6-111">plt.show()</span>
<span id="cb6-112"></span>
<span id="cb6-113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the receiver</span></span>
<span id="cb6-114">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-115"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb6-116">    plt.plot(mean_receiver_gittins_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Receiver Gittins Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb6-117">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb6-118">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb6-119">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Receiver Gittins Indices Over Time'</span>)</span>
<span id="cb6-120">plt.legend()</span>
<span id="cb6-121">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-4-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-4-output-1.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-4-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-4-output-2.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-4-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-4-output-3.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Of course there is no reason to use independent probabilities for for learning.</p>
<p>The schemes described in the book condition state for the sender and on the signal for the receiver. I.E. a success for a signal/action pair implies:</p>
<ol type="1">
<li>a failure for the other state/signals options with the same states for the sender.</li>
<li>a failure for the other signal/action options with the same signal for the receiver.</li>
</ol>
<p>In my algorithm I went further and added the logic that a success for a signals/action pair also implies:</p>
<ol type="1">
<li>a failure for the other state/signals options with the same signal but different states for the sender.</li>
<li>a failure for the other signal/action options with the same action but different signals for the receiver.</li>
</ol>
<p>also implies that the signal wasn’t available for other states.</p>
<p>I’m not sure if there is a distribution that updates like that, though it isn’t that hard to implement either of the two schemes and they should work an extended beta distribution.</p>
</section>
<section id="derichlet-multinomial-variant" class="level2">
<h2 class="anchored" data-anchor-id="derichlet-multinomial-variant">Derichlet-Multinomial variant</h2>
<div id="725ab945" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianContextualBandit:</span>
<span id="cb7-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb7-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb7-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb7-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb7-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_expected_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb7-15">        alpha_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state])</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> alpha_sum</span>
<span id="cb7-17"></span>
<span id="cb7-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_gittins_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb7-19">        alpha_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state])</span>
<span id="cb7-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> alpha_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(alpha_sum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb7-23">        gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_gittins_index(state, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb7-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(gittins_indices)</span>
<span id="cb7-25"></span>
<span id="cb7-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb7-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb7-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb7-30">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb7-34"></span>
<span id="cb7-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k):</span>
<span id="cb7-36">    all_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb7-37">    all_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb7-38">    all_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_actions, n_iterations))</span>
<span id="cb7-39">    all_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_states, n_iterations))</span>
<span id="cb7-40">    </span>
<span id="cb7-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb7-42">        sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_states, n_actions)</span>
<span id="cb7-43">        receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_actions, n_states)</span>
<span id="cb7-44">        </span>
<span id="cb7-45">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-46">        total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-47">        </span>
<span id="cb7-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb7-49">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb7-50">            sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb7-51">            receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb7-52">            </span>
<span id="cb7-53">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-54">            total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb7-55">            total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb7-56">            </span>
<span id="cb7-57">            all_rewards[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_reward</span>
<span id="cb7-58">            all_regrets[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_regret</span>
<span id="cb7-59">            </span>
<span id="cb7-60">            sender_bandit.update(state, sender_action, reward)</span>
<span id="cb7-61">            receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb7-62">            </span>
<span id="cb7-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb7-64">                all_sender_gittins_indices[i, action, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.get_gittins_index(state, action)</span>
<span id="cb7-65">            </span>
<span id="cb7-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb7-67">                all_receiver_gittins_indices[i, s, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.get_gittins_index(sender_action, s)</span>
<span id="cb7-68">    </span>
<span id="cb7-69">    mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_rewards, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-70">    mean_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_regrets, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-71">    mean_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_sender_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-72">    mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_receiver_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-73">    </span>
<span id="cb7-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices</span>
<span id="cb7-75"></span>
<span id="cb7-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb7-77">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-78">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-79">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb7-80">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb7-81">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of experiment runs</span></span>
<span id="cb7-82"></span>
<span id="cb7-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the experiment</span></span>
<span id="cb7-84">all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k)</span>
<span id="cb7-85"></span>
<span id="cb7-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean total rewards and regrets over time along with individual curves</span></span>
<span id="cb7-87">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-88"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb7-89">    plt.plot(all_rewards[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb7-90">plt.plot(mean_rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Rewards'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-91"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb7-92">    plt.plot(all_regrets[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb7-93">plt.plot(mean_regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Regret'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-94">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb7-95">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb7-96">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb7-97">plt.legend()</span>
<span id="cb7-98">plt.show()</span>
<span id="cb7-99"></span>
<span id="cb7-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the sender</span></span>
<span id="cb7-101">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb7-103">    plt.plot(mean_sender_gittins_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Sender Gittins Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb7-104">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb7-105">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb7-106">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Sender Gittins Indices Over Time'</span>)</span>
<span id="cb7-107">plt.legend()</span>
<span id="cb7-108">plt.show()</span>
<span id="cb7-109"></span>
<span id="cb7-110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the receiver</span></span>
<span id="cb7-111">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-112"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb7-113">    plt.plot(mean_receiver_gittins_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Receiver Gittins Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb7-114">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb7-115">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb7-116">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Receiver Gittins Indices Over Time'</span>)</span>
<span id="cb7-117">plt.legend()</span>
<span id="cb7-118">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-5-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-5-output-1.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-5-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-5-output-2.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-5-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-5-output-3.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="thompson-sampling" class="level2">
<h2 class="anchored" data-anchor-id="thompson-sampling">Thompson sampling</h2>
<div id="4be8ac16" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ThompsonSamplingContextualBandit:</span>
<span id="cb8-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb8-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb8-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb8-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb8-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-16"></span>
<span id="cb8-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb8-18">        samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.random.beta(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, a], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, a]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb8-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(samples)</span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb8-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb8-25">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k):</span>
<span id="cb8-31">    all_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb8-32">    all_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb8-33">    all_sender_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_actions, n_iterations))</span>
<span id="cb8-34">    all_receiver_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_states, n_iterations))</span>
<span id="cb8-35">    </span>
<span id="cb8-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb8-37">        sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ThompsonSamplingContextualBandit(n_states, n_actions)</span>
<span id="cb8-38">        receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ThompsonSamplingContextualBandit(n_actions, n_states)</span>
<span id="cb8-39">        </span>
<span id="cb8-40">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-41">        total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-42">        </span>
<span id="cb8-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb8-44">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb8-45">            sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb8-46">            receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb8-47">            </span>
<span id="cb8-48">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-49">            total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb8-50">            total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb8-51">            </span>
<span id="cb8-52">            all_rewards[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_reward</span>
<span id="cb8-53">            all_regrets[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_regret</span>
<span id="cb8-54">            </span>
<span id="cb8-55">            sender_bandit.update(state, sender_action, reward)</span>
<span id="cb8-56">            receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb8-57">            </span>
<span id="cb8-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb8-59">                all_sender_ts_indices[i, action, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.beta(sender_bandit.alpha[state, action], sender_bandit.beta[state, action])</span>
<span id="cb8-60">            </span>
<span id="cb8-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb8-62">                all_receiver_ts_indices[i, s, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.beta(receiver_bandit.alpha[sender_action, s], receiver_bandit.beta[sender_action, s])</span>
<span id="cb8-63">    </span>
<span id="cb8-64">    mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_rewards, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-65">    mean_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_regrets, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-66">    mean_sender_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_sender_ts_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-67">    mean_receiver_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_receiver_ts_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-68">    </span>
<span id="cb8-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_ts_indices, mean_receiver_ts_indices</span>
<span id="cb8-70"></span>
<span id="cb8-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb8-72">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-73">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-74">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-75">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb8-76">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of experiment runs</span></span>
<span id="cb8-77"></span>
<span id="cb8-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the experiment</span></span>
<span id="cb8-79">all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_ts_indices, mean_receiver_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k)</span>
<span id="cb8-80"></span>
<span id="cb8-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean total rewards and regrets over time along with individual curves</span></span>
<span id="cb8-82">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-83"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb8-84">    plt.plot(all_rewards[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb8-85">plt.plot(mean_rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Rewards'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-86"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb8-87">    plt.plot(all_regrets[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb8-88">plt.plot(mean_regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Regret'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-89">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb8-90">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb8-91">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb8-92">plt.legend()</span>
<span id="cb8-93">plt.show()</span>
<span id="cb8-94"></span>
<span id="cb8-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Thompson Sampling indices over time for the sender</span></span>
<span id="cb8-96">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-97"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb8-98">    plt.plot(mean_sender_ts_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Sender TS Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb8-99">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb8-100">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thompson Sampling Index'</span>)</span>
<span id="cb8-101">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Sender Thompson Sampling Indices Over Time'</span>)</span>
<span id="cb8-102">plt.legend()</span>
<span id="cb8-103">plt.show()</span>
<span id="cb8-104"></span>
<span id="cb8-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Thompson Sampling indices over time for the receiver</span></span>
<span id="cb8-106">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-107"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb8-108">    plt.plot(mean_receiver_ts_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Receiver TS Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb8-109">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb8-110">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thompson Sampling Index'</span>)</span>
<span id="cb8-111">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Receiver Thompson Sampling Indices Over Time'</span>)</span>
<span id="cb8-112">plt.legend()</span>
<span id="cb8-113"></span>
<span id="cb8-114">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-6-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-6-output-1.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-6-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-6-output-2.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-6-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-6-output-3.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Roth {Erev} Learning in {Lewis} Signaling Games},
  date = {2024-05-28},
  url = {https://orenbochman.github.io//posts/2024/2024-05-09-RE-RL/re-rel.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Roth Erev Learning in Lewis Signaling
Games.”</span> May 28, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-05-09-RE-RL/re-rel.html">https://orenbochman.github.io//posts/2024/2024-05-09-RE-RL/re-rel.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html</guid>
  <pubDate>Tue, 28 May 2024 12:30:39 GMT</pubDate>
</item>
<item>
  <title>urn using numpy</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn.html</link>
  <description><![CDATA[ 





<p>Let’s create one of the most fundumental models in probability theory - the urn model.</p>
<p>Urn models gor back to the 17th century and were first introduced by Jacob Bernoulli in his book Ars Conjectandi (1713).</p>
<p>The urn model is a simple model that describes the process of drawing balls from an urn.</p>
<p>The urn contains balls of different colors, and the goal is to study the probabilities of drawing balls of different colors.</p>
<p>Although basic urn models can be represented with draws from well known distributions an the urn model is useful concrete form for thinking about probability particularly when implementing simple reinforcement learning algorithms or model with Bayesian updating.</p>
<p>Some more complex processess in probability theory can be set up as urn model making this a useful model to understand.</p>
<p>When it comes to implementing agents, we can quickly set them up for reinforcement or Bayesian learning by equipping the agnet with such an urn model.</p>
<p>In python we can implement the urn model using a numpy array to represent the balls in the urn and their counts.</p>
<section id="the-basic-urn-model" class="level2">
<h2 class="anchored" data-anchor-id="the-basic-urn-model">The Basic Urn model</h2>
<div id="c28a3f8e" class="cell" data-require="altair, numpy, matplotlib, seaborn, pandas" data-results="hold" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> altair <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> alt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Urn():</span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' classic urn model using np array of ball counts</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      for two valls this is a simple binomial distribution</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      for more balls this is a multinomial distribution</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ball_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>], init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>, weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''initialize the urn with ball names and weights'''</span></span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ball_names</span>
<span id="cb1-15">    </span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> weights <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(weights) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.ndarray, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weights must be a numpy array."</span></span>
<span id="cb1-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> weights.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names)), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Weight shape </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>weights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not the same as the number of balls. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>:</span>
<span id="cb1-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors))</span>
<span id="cb1-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zeros'</span>:</span>
<span id="cb1-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors))</span>
<span id="cb1-25">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'random'</span>:</span>
<span id="cb1-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors)</span>
<span id="cb1-27">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initialization parameter must be 'ones', 'zeros', or 'random'."</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb1-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ball_names(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._ball_names</span>
<span id="cb1-33">  </span>
<span id="cb1-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ball_names.setter</span></span>
<span id="cb1-35">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ball_names(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ball_names):</span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(ball_names) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ball names must be a list."</span></span>
<span id="cb1-37">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._ball_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ball_names</span>
<span id="cb1-38">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ball_names)</span>
<span id="cb1-39"></span>
<span id="cb1-40">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb1-41">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ball_colors(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names)</span>
<span id="cb1-43"></span>
<span id="cb1-44">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb1-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights</span>
<span id="cb1-47">  </span>
<span id="cb1-48">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@weights.setter</span></span>
<span id="cb1-49">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, weights):</span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(weights) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.ndarray, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weights must be a numpy array."</span></span>
<span id="cb1-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#assert weights.shape == (self.ball_colors), "Weights must have the same shape as the number of balls and columns."</span></span>
<span id="cb1-52">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb1-53"></span>
<span id="cb1-54">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draw a ball from the urn with replacement'''</span></span>
<span id="cb1-56">    row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb1-57">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-59">      result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[row_idx[i]])</span>
<span id="cb1-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
</div>
<div id="45d3d3fa" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#some examples</span></span>
<span id="cb2-2">urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Urn()</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn.draw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn.draw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn.draw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb2-6"></span>
<span id="cb2-7">urn.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.</span>])</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn.draw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['white', 'white', 'white', 'white', 'black', 'black', 'black', 'black', 'white', 'black']
['black', 'white', 'black', 'black', 'black', 'white', 'white', 'white', 'black', 'black']
['black', 'black', 'black', 'black', 'white', 'black', 'black', 'white', 'black', 'black']
['white', 'black', 'black', 'white', 'black', 'black', 'black', 'black', 'black', 'black']</code></pre>
</div>
</div>
<div id="74ac7948" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Urn(ball_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>], weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]))</span>
<span id="cb4-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balls'</span>: urn.draw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)})</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#alt.renderers.enable("html")</span></span>
<span id="cb4-4">alt.Chart(df).mark_bar().encode(</span>
<span id="cb4-5">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balls'</span>,</span>
<span id="cb4-6">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count()'</span></span>
<span id="cb4-7">).properties(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<style>
  #altair-viz-979c58939d2c48b09752b22839abad98.vega-embed {
    width: 100%;
    display: flex;
  }

  #altair-viz-979c58939d2c48b09752b22839abad98.vega-embed details,
  #altair-viz-979c58939d2c48b09752b22839abad98.vega-embed details summary {
    position: relative;
  }
</style>
<div id="altair-viz-979c58939d2c48b09752b22839abad98"></div>
<script type="text/javascript">
  var VEGA_DEBUG = (typeof VEGA_DEBUG == "undefined") ? {} : VEGA_DEBUG;
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-979c58939d2c48b09752b22839abad98") {
      outputDiv = document.getElementById("altair-viz-979c58939d2c48b09752b22839abad98");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm/vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm/vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm/vega-lite@5.16.3?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm/vega-embed@6?noext",
    };

    function maybeLoadScript(lib, version) {
      var key = `${lib.replace("-", "")}_version`;
      return (VEGA_DEBUG[key] == version) ?
        Promise.resolve(paths[lib]) :
        new Promise(function(resolve, reject) {
          var s = document.createElement('script');
          document.getElementsByTagName("head")[0].appendChild(s);
          s.async = true;
          s.onload = () => {
            VEGA_DEBUG[key] = version;
            return resolve(paths[lib]);
          };
          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
          s.src = paths[lib];
        });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else {
      maybeLoadScript("vega", "5")
        .then(() => maybeLoadScript("vega-lite", "5.16.3"))
        .then(() => maybeLoadScript("vega-embed", "6"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 300, "continuousHeight": 300}}, "data": {"name": "data-faa77774476fe02fc0b97c5e259680ed"}, "mark": {"type": "bar"}, "encoding": {"x": {"field": "balls", "type": "nominal"}, "y": {"aggregate": "count", "type": "quantitative"}}, "height": 200, "width": 200, "$schema": "https://vega.github.io/schema/vega-lite/v5.16.3.json", "datasets": {"data-faa77774476fe02fc0b97c5e259680ed": [{"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "green"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "green"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "red"}, {"balls": "blue"}, {"balls": "blue"}, {"balls": "green"}, {"balls": "blue"}, {"balls": "red"}, {"balls": "blue"}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
<div id="6490abb1" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn.draw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['green', 'blue', 'blue', 'blue', 'red', 'blue', 'red', 'red', 'green', 'blue']</code></pre>
</div>
</div>
<div id="3b137424" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Polya(Urn):</span>
<span id="cb7-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' Polya urn model'''</span></span>
<span id="cb7-3"></span>
<span id="cb7-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draw a ball from the urn with replacement and add a new ball of the same color'''</span></span>
<span id="cb7-6">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-8">      row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb7-9">      result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[row_idx[i]])</span>
<span id="cb7-10">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Hypergeometric(Urn):</span>
<span id="cb7-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' Hypergeometric urn model'''</span></span>
<span id="cb7-15"></span>
<span id="cb7-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draw a ball from the urn without replacement'''</span></span>
<span id="cb7-18">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-20">      row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb7-21">      result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[row_idx[i]])</span>
<span id="cb7-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb7-24"></span>
<span id="cb7-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Polya(Urn):</span>
<span id="cb7-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' </span></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The polya urn model is a generalization of the urn model where c is the number of balls of the same color added to the urn</span></span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for c=0 the polya urn model we get drawing with replacement reulting in binomial and multinomial distributions.</span></span>
<span id="cb7-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for c=1 the polya urn model we get drawing with replacement and adding a new ball of the same color resulting in a  BetaBinomial and Dirichlet distributions.</span></span>
<span id="cb7-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for c=-1 the polya urn model we get drawing withot replacement resulting in a  the hypergeometric distribution.</span></span>
<span id="cb7-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-32">  </span>
<span id="cb7-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,ball_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>], init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>, weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''initialize the urn with ball names and weights'''</span></span>
<span id="cb7-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(ball_names, init, weights)</span>
<span id="cb7-36">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span>
<span id="cb7-37"></span>
<span id="cb7-38">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draw a ball from the urn with replacement and add a new ball of the same color'''</span></span>
<span id="cb7-40">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-42">      row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb7-43">      result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[row_idx[i]])</span>
<span id="cb7-44">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb7-46"></span>
<span id="cb7-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Hoppe(Polya):</span>
<span id="cb7-48">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' Hoppe urn model'''</span></span>
<span id="cb7-49">  </span>
<span id="cb7-50">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,ball_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>], init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>, weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mutator_mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb7-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''initialize the urn with ball names and weights'''</span></span>
<span id="cb7-52">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(ball_names, init, weights, c)</span>
<span id="cb7-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mutator_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutator_mass</span>
<span id="cb7-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> weights <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb7-55">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(weights) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.ndarray, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weights must be a numpy array."</span></span>
<span id="cb7-56">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> weights.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names)), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Weight shape </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>weights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not the same as the number of balls. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-57">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb7-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-59">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>:</span>
<span id="cb7-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors))</span>
<span id="cb7-61">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zeros'</span>:</span>
<span id="cb7-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors))</span>
<span id="cb7-63">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'random'</span>:</span>
<span id="cb7-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors)</span>
<span id="cb7-65">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initialization parameter must be 'ones', 'zeros', or 'random'."</span>)</span>
<span id="cb7-67">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#set the weight of the mutator ball to the mutator mass</span></span>
<span id="cb7-68">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mutator_mass</span>
<span id="cb7-69">    </span>
<span id="cb7-70">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draw a ball from the urn with replacement and add a new ball of the same color'''</span></span>
<span id="cb7-72">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-74">      row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-75">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row_idx[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add a new ball color</span></span>
<span id="cb7-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names)))</span>
<span id="cb7-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights, c)</span>
<span id="cb7-79">        result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb7-80">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-81">        result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[row_idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb7-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c</span>
<span id="cb7-83">        </span>
<span id="cb7-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb7-85">  </span>
<span id="cb7-86"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Moran(Polya):</span>
<span id="cb7-87">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' Moran urn model'''</span></span>
<span id="cb7-88">  </span>
<span id="cb7-89">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draw a ball from the urn with replacement and add a new ball of the same color'''</span></span>
<span id="cb7-91">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-93">      row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_colors, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-94">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c</span>
<span id="cb7-95">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> c</span>
<span id="cb7-96">      </span>
<span id="cb7-97">      result.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ball_names[row_idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb7-98">        </span>
<span id="cb7-99">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
</div>
<section id="ehrenfest-urn-model" class="level3">
<h3 class="anchored" data-anchor-id="ehrenfest-urn-model">Ehrenfest Urn Model</h3>
<p>The Ehrenfest urn model is a simple model that describes the process of moving balls between two urns. I view this as a precursor to compartmental models in epidemiology and other fields and it demostrates how one can extend the urn model can be used to model more complex systems. The more general model is the multiurn model where we have multiple urns and we can move balls between them which is a Markov chain model.</p>
<p>The model consists of two urns, each containing a fixed number of balls. At each time step, a ball is randomly selected from one of the urns and moved to the other urn.</p>
</section>
</section>
<section id="the-multiurn-model" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-multiurn-model">The MultiUrn model</h2>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>“any problem of probability appears comparable to a suitable problem about bags containing balls, and any random mass phenomenon appears as similar in certain essential respects to successive drawings of balls from a system of suitibly combined bags.” - <span class="citation" data-cites="polya1954patterns">Polya (1954)</span></p>
</blockquote><div class="no-row-height column-margin column-container"><div id="ref-polya1954patterns" class="csl-entry">
Polya, G. 1954. <em>Patterns of Plausible Inference</em>. Princeton Paperbacks. Princeton University Press. <a href="https://www.google.com/books?id=Zu2hEAAAQBAJ">https://www.google.com/books?id=Zu2hEAAAQBAJ</a>.
</div></div></div>
<p>per polya’s suggestion we can think</p>
<p>The MultiUrn model is an extension of the basic Urn model that allows for multiple urns to be used together. We may for example need to learn an urn model per state in our system extending a bandit algorithm to a contextual bandit algorithm.</p>
<p>We can represent these using rows of a matrix where each row represents an urn and each column represents a ball color.</p>
<p>In cases where we have hierarchical models we may be able to use additional constraints - for example on both rows and columns to speed up learning.</p>
<div id="cf246056" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultiUrn:</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_names, col_names, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>):</span>
<span id="cb8-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row_names</span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_names</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(row_names)</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(col_names)</span>
<span id="cb8-7">        </span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>:</span>
<span id="cb8-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_rows, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols))</span>
<span id="cb8-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zeros'</span>:</span>
<span id="cb8-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_rows, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols))</span>
<span id="cb8-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'random'</span>:</span>
<span id="cb8-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_rows, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols)</span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initialization parameter must be 'ones', 'zeros', or 'random'."</span>)</span>
<span id="cb8-16">    </span>
<span id="cb8-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _convert_to_numeric(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_name, col_name):</span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb8-19">            row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names.index(row_name)</span>
<span id="cb8-20">            col_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names.index(col_name)</span>
<span id="cb8-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> row_idx, col_idx</span>
<span id="cb8-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb8-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid row or column name."</span>)</span>
<span id="cb8-24">    </span>
<span id="cb8-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_weight(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_name, col_name):</span>
<span id="cb8-26">        row_idx, col_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._convert_to_numeric(row_name, col_name)</span>
<span id="cb8-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx, col_idx]</span>
<span id="cb8-28">    </span>
<span id="cb8-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_weight(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_name, col_name, value):</span>
<span id="cb8-30">        row_idx, col_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._convert_to_numeric(row_name, col_name)</span>
<span id="cb8-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx, col_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb8-32">    </span>
<span id="cb8-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other_urn):</span>
<span id="cb8-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other_urn.weights.shape:</span>
<span id="cb8-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Urns must have the same dimensions to add weights."</span>)</span>
<span id="cb8-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Urn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other_urn.weights)</span>
<span id="cb8-37">    </span>
<span id="cb8-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_conditional_probabilities(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-39">        row_sums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-40">        conditional_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> row_sums</span>
<span id="cb8-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> conditional_probs</span>
<span id="cb8-42">    </span>
<span id="cb8-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_conditional_probability(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_name, col_name):</span>
<span id="cb8-44">        row_idx, col_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._convert_to_numeric(row_name, col_name)</span>
<span id="cb8-45">        row_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx, :].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-46">        conditional_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx, col_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> row_sum</span>
<span id="cb8-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> conditional_prob</span>
<span id="cb8-48"></span>
<span id="cb8-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_name):</span>
<span id="cb8-50">        row_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names.index(row_name)</span>
<span id="cb8-51">        row_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx, :]</span>
<span id="cb8-52">        col_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>row_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>row_weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb8-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names[col_idx]</span>
<span id="cb8-54">    </span>
<span id="cb8-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row_name, col_name, reward):</span>
<span id="cb8-56">        row_idx, col_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._convert_to_numeric(row_name, col_name)</span>
<span id="cb8-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[row_idx, col_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb8-58"></span>
<span id="cb8-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_heatmap(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, row_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names):</span>
<span id="cb8-61">            plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-62">            sns.heatmap(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[idx, :].reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viridis"</span>, cbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, xticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names, yticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[row_name])</span>
<span id="cb8-63">            plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Urn for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-64">            plt.show()</span>
<span id="cb8-65">            </span>
<span id="cb8-66"></span>
<span id="cb8-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_expected_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, receiver_urn):</span>
<span id="cb8-68">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb8-69">        sender_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_conditional_probabilities()</span>
<span id="cb8-70">        receiver_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_urn.get_conditional_probabilities()</span>
<span id="cb8-71">        </span>
<span id="cb8-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sender_state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names:</span>
<span id="cb8-73">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sender_signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names:</span>
<span id="cb8-74">                p_sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_conditional_probability(sender_state, sender_signal)</span>
<span id="cb8-75">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> receiver_signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> receiver_urn.row_names:</span>
<span id="cb8-76">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> receiver_state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> receiver_urn.col_names:</span>
<span id="cb8-77">                        p_receiver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_urn.get_conditional_probability(receiver_signal, receiver_state)</span>
<span id="cb8-78">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sender_signal:</span>
<span id="cb8-79">                            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> p_sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p_receiver</span>
<span id="cb8-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb8-81">    </span>
<span id="cb8-82">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_expected_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, receiver_urn):</span>
<span id="cb8-83">        expected_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.calculate_expected_reward(receiver_urn)</span>
<span id="cb8-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row_names:</span>
<span id="cb8-85">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col_names:</span>
<span id="cb8-86">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update_weights(row_name, col_name, expected_reward)    </span>
<span id="cb8-87"></span>
<span id="cb8-88">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights)</span>
<span id="cb8-90"></span>
<span id="cb8-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb8-92">row_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state4'</span>]</span>
<span id="cb8-93">col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>]</span>
<span id="cb8-94"></span>
<span id="cb8-95">urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiUrn(row_names, col_names, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>)</span>
<span id="cb8-96"></span>
<span id="cb8-97"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial weights:"</span>)</span>
<span id="cb8-98"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn)</span>
<span id="cb8-99"></span>
<span id="cb8-100">weight_0_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urn.get_weight(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb8-101"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Weight for state0 and signal 'a': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>weight_0_a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-102"></span>
<span id="cb8-103">urn.set_weight(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)</span>
<span id="cb8-104"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weights after setting weight for state0 and signal 'a' to 0.5:"</span>)</span>
<span id="cb8-105"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn)</span>
<span id="cb8-106"></span>
<span id="cb8-107">conditional_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urn.get_conditional_probabilities()</span>
<span id="cb8-108"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Conditional probabilities:"</span>)</span>
<span id="cb8-109"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(conditional_probs)</span>
<span id="cb8-110"></span>
<span id="cb8-111">state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span></span>
<span id="cb8-112">signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span></span>
<span id="cb8-113">conditional_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urn.get_conditional_probability(state, signal)</span>
<span id="cb8-114"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Conditional probability of signal </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> given </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>conditional_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-115"></span>
<span id="cb8-116">state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state1'</span></span>
<span id="cb8-117">signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span></span>
<span id="cb8-118">conditional_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urn.get_conditional_probability(state, signal)</span>
<span id="cb8-119"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Conditional probability of signal </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> given </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>conditional_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-120"></span>
<span id="cb8-121">chosen_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urn.choose_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>)</span>
<span id="cb8-122"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Chosen signal for state0: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chosen_signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-123"></span>
<span id="cb8-124">urn.update_weights(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb8-125"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weights after updating weight for state0 and signal 'a' with a reward of 0.1:"</span>)</span>
<span id="cb8-126"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(urn)</span>
<span id="cb8-127"></span>
<span id="cb8-128"></span>
<span id="cb8-129"></span>
<span id="cb8-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot heatmaps</span></span>
<span id="cb8-131">urn.plot_heatmap()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Initial weights:
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Weight for state0 and signal 'a': 1.0
Weights after setting weight for state0 and signal 'a' to 0.5:
[[2. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Conditional probabilities:
[[0.4  0.2  0.2  0.2 ]
 [0.25 0.25 0.25 0.25]
 [0.25 0.25 0.25 0.25]
 [0.25 0.25 0.25 0.25]
 [0.25 0.25 0.25 0.25]]
Conditional probability of signal a given state0: 0.4
Conditional probability of signal a given state1: 0.25
Chosen signal for state0: a
Weights after updating weight for state0 and signal 'a' with a reward of 0.1:
[[3. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-7-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-7-output-2.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-7-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-7-output-3.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-7-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-7-output-4.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-7-output-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-7-output-5.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-7-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-7-output-6.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="b50a77b4" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">s_row_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state4'</span>]</span>
<span id="cb10-2">s_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>]</span>
<span id="cb10-3">s_urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiUrn(s_row_names, s_col_names, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>)</span>
<span id="cb10-4">s_urn.plot_heatmap()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-8-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-8-output-1.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-8-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-8-output-2.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-8-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-8-output-3.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-8-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-8-output-4.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-8-output-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-8-output-5.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="e53735c3" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">r_row_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>]</span>
<span id="cb11-2">r_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state4'</span>]</span>
<span id="cb11-3">r_urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiUrn(r_row_names, r_col_names, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ones'</span>)</span>
<span id="cb11-4">r_urn.plot_heatmap()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-9-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-9-output-1.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-9-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-9-output-2.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-9-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-9-output-3.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-9-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-9-output-4.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>lets add a method to calculate the expected reward of two urns</p>
<p>result = 0.0 for each sender state sender_state for each sender signal sender_signal p_sender = the conditional probability of the sender_signal given the sender_state for each reciever signal reciever_signal for each reciever state reciever_state p_reciever = the conditional probability of the reciever_state given the reciever_signal if the reciever_signal is the same as the sender_signal result += p_sender * p_reciever return result</p>
</section>
<section id="note-i-think-the-expected-reward-chould-be-less-then-one---since-the-expected-reward-is-the-probability-of-the-reciever-signal-given-the-sender-signal" class="level1">
<h1>note I think the expected reward chould be less then one - since the expected reward is the probability of the reciever signal given the sender signal</h1>
<p>and sum of probabilities of the reciever signal given the sender signal is less then one.</p>
<pre><code>    calculate the expected reward
    add the expected reward to the urn</code></pre>
<p>where we start with a reciever, chose</p>
<div id="d5ac1ab1" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">expected_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s_urn.calculate_expected_reward(r_urn)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(s_urn.num_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>r_urn.num_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>s_urn.num_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>r_urn.num_cols)</span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Expected reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>expected_reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4">s_urn.add_expected_reward(r_urn)</span>
<span id="cb13-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sender Urn weights after adding expected reward:"</span>)</span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(s_urn)</span>
<span id="cb13-7">s_urn.plot_heatmap()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Expected reward: 0.007999999999999985
Sender Urn weights after adding expected reward:
[[6. 6. 6. 6.]
 [6. 6. 6. 6.]
 [6. 6. 6. 6.]
 [6. 6. 6. 6.]
 [6. 6. 6. 6.]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-10-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-10-output-2.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-10-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-10-output-3.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-10-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-10-output-4.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-10-output-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-10-output-5.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="urn_files/figure-html/cell-10-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn_files/figure-html/cell-10-output-6.png" width="786" height="135" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>basic operations:</p>
<ul>
<li>draw() draw a ball from the urn</li>
</ul>
<p>operations:</p>
<ul>
<li>convert balls/weights to probabilities</li>
<li>given the balls counts estimate/simulate probability of drawing some sequence of balls.</li>
<li>given n observations of balls estimate the ball proportions and thier confidence intervals.</li>
</ul>
<p>what about other urn types</p>
<ul>
<li>basic urn - sampling is with replacement</li>
<li>hypergeometric urn - sampling without replacement…</li>
<li>urn with sampling with replacement and adding a new ball of the same color</li>
<li>polya urn - when a ball is observed the urn is updated with the same color ball and a new ball of the same color</li>
<li>beta-binomial when ever a ball is observed the urn is updated with the number of balls of the same color</li>
<li>dirichlet</li>
<li>hopper urn - the urn has a mutator ball that generates new ball color (a new column) and a mutator state that generates new states (a new row)</li>
<li>moran urn</li>
</ul>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Urn Using Numpy},
  date = {2024-05-27},
  url = {https://orenbochman.github.io//posts/2024/2024-05-01-Signals/urn.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Urn Using Numpy.”</span> May 27, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-05-01-Signals/urn.html">https://orenbochman.github.io//posts/2024/2024-05-01-Signals/urn.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/urn.html</guid>
  <pubDate>Mon, 27 May 2024 08:47:42 GMT</pubDate>
</item>
<item>
  <title>Mesa Lessons</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-3-31-sugarscapes/mesa-lessons.html</link>
  <description><![CDATA[ 





<p>Implementing Sugarscape has some interesting lessons.</p>
<p>In this post I’d like to cover engineering the simulation.</p>
<section id="seperating-the-environment-from-the-agents" class="level2">
<h2 class="anchored" data-anchor-id="seperating-the-environment-from-the-agents">Seperating the environment from the agents</h2>
<p>Mesa is a great tool for ABM but it has some limitations. One of these is that the reporting mechanism tries to get the same data from all agents. The way Sugarscape is implemented is that there are agents for sugar, spice and pollution as well as different actors. This makes it impractical to get a single data frame for all agents. This assumption is also carried over to the visualization code so that it is not a simple fix. Another problem with this approach it increases the number of agents in proportion to the size of the simulation.</p>
<p>For example for a 50x50 grid we have 2500 agents. If we have 2 resources and pollution which also requires tracking pollution flux and two iterations to perform the diffusion. Python isn’t particularly fast since it is interpreted and adding all this overhead makes the simulation slow. Also I wanted to also test some ideas with more resources which would require a larger grid.</p>
<p>One way to reduce the number of agents is to have a single patch agent type that can handle resources and pollution - which had been implemented in the Sugarscape with traders sample. This still means most agent are patches and makes agent’s code more complex. Data processing becomes flaky and there are not samples or documentation to help out.</p>
<p>What this led me to do is to make a clearer separation between the environment and the agents. I migrated the resource code into the grid which had the added bonus of making agents simpler.</p>
</section>
<section id="encapsulating-rules-in-classes" class="level2">
<h2 class="anchored" data-anchor-id="encapsulating-rules-in-classes">Encapsulating rules in classes</h2>
<p>A second idea issue that arises when trying to implement Sugarscape is the keeping track of the code belonging to each rule. And a second facet for this is to be able to support different variants of the rules. E.g constant growth, full growth, seasonal growth. This got me thinking about using a strategy pattern and then the agent delegating the rule’s behavior to the rule. THis is perhaps not the most elegant solution - but it does have a number of advantages.</p>
<ol type="1">
<li>it allows one to define an api for the model and agent step.</li>
<li>it allows one to easily swap out rules and test different variants.</li>
<li>it allows one to easily extend the rules by inheriting from the base rule class.</li>
<li>it allows one to store data collection and visualization code in the rule along size the code that generates the data. This is made simpler by also using the builder pattern to construct the data collector.</li>
<li>it also easy to add two functions to support rules’ initialization, at the model and agent levels</li>
<li>these can be expanded with a update model and agent state operation that facilitates controlling the simulation from a ui at run time - another big advantage of the strategy pattern.</li>
</ol>
</section>
<section id="makeing-sugrscape-more-dynamic" class="level2">
<h2 class="anchored" data-anchor-id="makeing-sugrscape-more-dynamic">Makeing sugrscape more dynamic</h2>
<p>There are a number of ways to make Sugerscape more dynamic.</p>
<section id="dynamic-rules---swapping-rules-during-the-simulation" class="level3">
<h3 class="anchored" data-anchor-id="dynamic-rules---swapping-rules-during-the-simulation">Dynamic rules - swapping rules during the simulation</h3>
<p>One way is to swap rules in the middle of the simulation as the book frequently does. The simple way to do this is use an array of rules which specific the rules in use. This is frequently used in the book which generaly used three or four rules in most cases.</p>
</section>
<section id="evolution-based-on-fitness-and-reproduction" class="level3">
<h3 class="anchored" data-anchor-id="evolution-based-on-fitness-and-reproduction">Evolution based on fitness and reproduction</h3>
<p>This concept is not fully implemented in the book but at least two aspects are inherent in the simulation</p>
<ol type="1">
<li>selection weeds out less fit agents</li>
<li>sexual reproduction allows for the creation of new agents with a mix of the parents’ traits.</li>
</ol>
<p>what the authors did not include are</p>
<ol type="1">
<li><p>mutation</p></li>
<li><p>differential reproduction based on fitness</p></li>
<li><p>a fitness function - based on the expected progeny of an agent.</p></li>
<li><p>This can be based recusively by a linear model of intrinsics like high vision and low metabolism a smaller initial endowment the total amount of resources an agent has collected thier age the number of progeny they have - and the thier fitness.</p></li>
</ol>
<p>the amount of resources an agent has.</p>
</section>
<section id="private-information-and-coalitions" class="level3">
<h3 class="anchored" data-anchor-id="private-information-and-coalitions">Private information and coalitions</h3>
<p>Agents do not have private information.</p>
<p>The agents form coalitions through culture but these are not used in any social sense nor for optimizing behaviour.</p>
<p>Adding private information can make trade more realistic. Adding private opens the door to construction of bayesian agents that can estimate the private information of other agents based on watching thier actions.</p>
<p>Establishing coalitions can be used to coordinate activities in ways that are optimal for the group and possibly over come the social dilemmas that arise in the simulation like the problems posed by pollution.</p>
<p>Private information and coalitions can be used to implement more realistic trade rules. These could be rudimentary versions of cooperative and companies but could also lead to a form of goverment.</p>
</section>
<section id="learning-and-reinforcement-learning" class="level3">
<h3 class="anchored" data-anchor-id="learning-and-reinforcement-learning">Learning and reinforcement learning</h3>
<p>Learning and reinforcement learning</p>
<p>This idea is already inhernet in of the sugarscape pardigm. IT basicaly involves adding a fitness function to the agents and then selecting the best agents to reproduce. The book uses a simple fitness function based on the amount of resources an agent has. This can be extended to include other factors such as pollution, trade, combat, and culture.</p>
<ol start="2" type="1">
<li>More challenging and beyond the scope of what is discussed in the book are scenarios where we test different rule variants during a single run. For example we can use a variant of culture that turns combat/trade rule on or off for agents with culture rule c_1 but other agents can have trade and combat on or of controlled by sex - i.e.&nbsp;at birth. This can let us study highly dynamic version of hawk dove game from game theory in simulations before we analyze it mathematically.</li>
<li>Agent having private information, and forming coalitions. Both concepts are discussed in to text but not implemented. The first in the context of more realistic trade rules. The latter in the context of paying agents to reduce harvesting to avoid pollution.</li>
<li>Even more dynamic is granting agents the ability to learn optimal behavior and take charge of their actions which also involves adding reinforcement learning to the model. This is already extant in Sugarscape through selection and reproduction but adding RL add a much greater level of dynamism to the model. Note also that this is a different behavioural paradigm from the one used in the book and requires some deeper thinking on hot to implement it. (What are the limits on experience for agent learning - do they only have thier last state, thier full sim’s history, all thier past lives, every past life. What about being taught by their parents at some cost or rate of transmision. Basicaly what is the minimal experience to get to pareto optimality on a set of rules.)</li>
</ol>
<p>The problem of using an array is that some of the logic for action in the book have constraints on order. e.g.&nbsp;agents move, harvest, pollute, eat pollute again, perhaps die die if they are out of resources trade reproduce etc and then die of old age and pass of thier inheritance. This is a lot of steps for only some of the rules and and the order is important in some cases.</p>
<p>More challanging and beyond the scope of what is discussed in the book are scenarios where we test different rule variants during a single run. For example we can use a variant of culture that turns combant rule on or off for agents Alson side agent that have combat on or off permamently.</p>
<p>Even more intersting is granting agents the ability to learn optimal behavior and take charge of thier actions which also involves adding reinforcement learning to the model.</p>
<p>A third</p>
<p>This becomes a problem when we want to test different variants of the rules or change rules during the simulation. My approach to this is to to encapsulate each rule in a class this also makes it much simpler to extend simple rules using inheriatance.</p>
<p>The next idea was to make each rule also take charge of it’s own data collection and visualization. Again this makes it easier to extend the rules and to keep track of the data.</p>
</section>
<section id="second-order-effects---linking-rules" class="level3">
<h3 class="anchored" data-anchor-id="second-order-effects---linking-rules">Second order effects - linking rules</h3>
<p>Following Schelling segregation model, Sugarscape is a model of social activity that emerges from simple rules. One of the key ideas in the development of the sugarscape model is the reductionsit study of how a social activity like segregation can emerge from a simple rule. Many aspects of a society are considered in the book yet many others are not.</p>
<p>However it would seem that the next step in a reductionist study of society would be to consider how different rules interact with each other. The book does consider many such cases - most simulations cobine just a few rules. This is not done in the book.</p>
<p>from hetrogineity interacting with simple rules. THe One of the things that is not done in the book is to link the rules. For example</p>
<p>The next Idea I had to handle this is to move the environment to the grid. This has a few implications</p>
<ol type="1">
<li>we need to override the grid.</li>
<li>agents need to access the grid during the simulation.</li>
<li>the environment will need to activate the resource growth and pollution diffusion.</li>
</ol>
<p>However, this seems to be a good way to separate the environment from the agents and indeed the agent code get a little bit simpler in when it comes to harvesting.</p>
<p>We also have a sigle type of agent allowing the data collection to proceed in the way mesa is designed.</p>
<p>It is now possible to replace Multigrid with SingleGrid. - This quickly uncovered a bug in the agent creation code. It does not check if a new agent’s position is already occupied. - The following fixes this issue.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grid.select_cells(only_empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span></code></pre></div>
<p>I want some help in coding Sugarscape pollution diffusion rule using mesa’s new add_property_layer</p>
<p>I have written the following code:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResourceGrid(SingleGrid):</span>
<span id="cb2-2"></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, width, height, torus):</span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(width, height, torus)</span>
<span id="cb2-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize each cell with resource attributes</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">        sugar_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.genfromtxt(Path(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sugar-map.txt"</span>)</span>
<span id="cb2-8">        spice_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.flip(sugar_distribution, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#elevation = PropertyLayer("elevation", width, height, default_value=0)</span></span>
<span id="cb2-11">        max_sugar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropertyLayer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_sugar'</span>,width,height,sugar_distribution)</span>
<span id="cb2-12">        sugar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropertyLayer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>,width,height,sugar_distribution)</span>
<span id="cb2-13">        max_spice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropertyLayer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_spice'</span>,width,height,spice_distribution)        </span>
<span id="cb2-14">        spice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropertyLayer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spice'</span>,width,height,spice_distribution)</span>
<span id="cb2-15">        pollution_flux <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropertyLayer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pollution_flux'</span>,width,height,default_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb2-16">        pollution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropertyLayer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pollution'</span>,width,height,default_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self.add_property_layer(elevation )</span></span>
<span id="cb2-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_property_layer(max_sugar)</span>
<span id="cb2-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_property_layer(max_spice)</span>
<span id="cb2-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_property_layer(sugar)</span>
<span id="cb2-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_property_layer(spice)</span>
<span id="cb2-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_property_layer(pollution_flux)</span>
<span id="cb2-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_property_layer(pollution)</span>
<span id="cb2-25"></span>
<span id="cb2-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_resource(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x,y, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>):        </span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[key].data[x,y]</span>
<span id="cb2-28"></span>
<span id="cb2-29"></span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_resource(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x,y, amount,key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>):        </span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[key].set_cell((x,y),amount)</span>
<span id="cb2-32"></span>
<span id="cb2-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_resources(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pos, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>):        </span>
<span id="cb2-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[key].data[pos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],pos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-35"></span>
<span id="cb2-36"></span>
<span id="cb2-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sugar_growth_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, spice_growth_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, pollution_decay_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):   </span>
<span id="cb2-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># growback can be done without a loop using a lambda.</span></span>
<span id="cb2-39"></span>
<span id="cb2-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>].modify_cells(np.add,sugar_growth_rate)</span>
<span id="cb2-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>].modify_cells(np.fmin,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_sugar'</span>].data)</span>
<span id="cb2-42"></span>
<span id="cb2-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spice'</span>].modify_cells(np.add,spice_growth_rate)</span>
<span id="cb2-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spice'</span>].modify_cells(np.fmin,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_spice'</span>].data)</span>
<span id="cb2-45"></span>
<span id="cb2-46">           <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sugar_growth_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, spice_growth_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, pollution_decay_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):   </span>
<span id="cb2-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># growback can be done without a loop using a lambda.</span></span>
<span id="cb2-48"></span>
<span id="cb2-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>].modify_cells(np.add,sugar_growth_rate)</span>
<span id="cb2-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sugar'</span>].modify_cells(np.fmin,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_sugar'</span>].data)</span>
<span id="cb2-51"></span>
<span id="cb2-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spice'</span>].modify_cells(np.add,spice_growth_rate)</span>
<span id="cb2-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spice'</span>].modify_cells(np.fmin,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_spice'</span>].data)</span>
<span id="cb2-54"></span>
<span id="cb2-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pollution_flux'</span>].modify_cells(np.multiply,pollution_decay_rate)</span>
<span id="cb2-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pollution'</span>].data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.properties[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pollution_flux'</span>].data</span></code></pre></div>
<p>Note: the diffusion rule should: 1. update the pollution_flux using the mean pollution from the adjacent cells 2. apply the pollution_decay_rate to the flux 3. update the pollution from the flux</p>
<p>Some more ideas.</p>
<p>As I went on improving the design of my sugarscape simulaition I came across.</p>
<p>There are many variants on even the most basic rule.</p>
<p>The motion rule:</p>
<ol type="1">
<li><p>the ability to go to any of the maximal sugar points in the field of view creates a nomadic type of individual.</p></li>
<li><p>there was a bug in mesa’s randomization which led to near cyclic motion for agents at the edge of the sugar contours. Periodic motion is a form of teratorilaism which could be good for avoiding desiases and may make it easier to mate with other nearby teritorial agents. The idea here is to implement an exploter agent that prefers to go and exploit places it visted before if they are maximal. This can lead to near periodic motion. Is this a form of chaos. Also we may give it a epsilon chance to explore which may let it discover nearby maxima.</p></li>
<li><p>A friend suggested letting agents leave phenome tracks. These can form the basis of a signaling system.</p>
<ul>
<li>The first signal is a phenome trail from distant maximum sugar/spice zones.</li>
<li>The second might indicate where a viable mates might be found. Since i’m interested in adding basic and complex singaling sytems to ABM these can be intersting to implemnt using new resource layers.</li>
</ul></li>
<li><p>Boids/Flocking motion.</p></li>
<li><p>Fire fighthing - go the the hottest safe spot and put out the fire.</p></li>
<li><p>Pollution cleaners - go to highest safe pollution and clean up.</p></li>
<li><p>A missonary might go to pockets of counter culture to switch them over. This might work better if the culture had memory based on age. I.e. a binomial with a,b where a is the time steps it was 0 and b the time steps it was one. making it harder to convert you and increasing the chance you flip back. More generaly an urn model is even more genral.</p>
<p>These can be used to comunicate</p></li>
<li></li>
</ol>
</section>
</section>
<section id="pheromone-signaling" class="level2">
<h2 class="anchored" data-anchor-id="pheromone-signaling">Pheromone Signaling:</h2>
<p>if agents can signal using a pheromene trail they could lay a path from higher levels of resources to a nest…. (there might be unique pheromones for each resource or a more complex signal using combination of multiple pheromenes to encode each resource) a weak diffusion rule would create a gradient to lead to the agent or to the resource.</p>
</section>
<section id="the-sugarscape-trade-rule-issues" class="level2">
<h2 class="anchored" data-anchor-id="the-sugarscape-trade-rule-issues">The SugarScape Trade rule issues</h2>
<ol type="1">
<li>the rule is unfair.</li>
</ol>
<ul>
<li><p>While the Edgeworth box has pareto-efficent solutions where indifference curves are at a tangent and therefore the MRS which corresponding to prices for trade are in agreement. Also there is only one such point for each pair of curves if they have a common point. Also there is one point where both utilities are highest. This seems to be the best trade to consider.</p>
<p>The trade algorithms uses points where the two curves intersect not tangents. However each indiffence curve probably intersect with all the other traders curves. Some may have more curves in the box (their utility levels are packed closer) Others less. Without some mechanism to sort these out we cant be certain that bragaining steps are sensible. The problem is that agents are not realy indiffernt to all the combinatino of sugar and spice - at least in the sense that under a certain amount of sugar or spice they will be wealthy on paper but likely starve in the next time step. The algorithm leads to more on diagonal solutions but what if I am very sugar rich. I may trade 1/N of my excess sufar with each nighbour for one unit of spice. But one unit of spice from each may mean they have less then thier metabolism and they will starve before they can makr a trade or harvest ay spice.</p>
<p>One agent may have more viable cuves than the other. idealy we should be picking two curves with similar utiltiy levels…. The intersection points can represent radicaly different pricing levels, particularly for an agent with a highly imballnced endowment. The pareto point leads to a point where both MRS are equal and the resulting endowments are better.</p>
<p>But we don’t really consider which points on the current curve to use. Each intersection corresponds to different utility level for our trading partner. It seem the intersection closest to the diagonal is best for our partner but we seem to be picking the one which is furthest - most likely to be the worst for them - possibly starving them.</p>
<p>So on this issue we should pick a point on the indiffeerence curve that at a utility level that at least won’t starve out trade partner or ourseves.</p>
<p>This mean clipping the indiffernce curves at the metabolic minimum.</p></li>
<li><p>there is no mony and trades are in integral units and detrmine the trade amount</p></li>
<li><p>the trade amount are unfair because the prices are unfair and because one side is pegged to 1.</p></li>
<li><p>All this is moot if the alg can reach the same pareto optimal solution by small steps. But I think that its unlikely. In the trade because the steps are integral and one side is pegged to one there are roundoff errors. With every trade some value is lost (on one or both sides).</p>
<ul>
<li>after each both sides are reevaluated reducing the price as well and the price drops so that the more needy agent will less willing or able to make all the trades it needs to make to get the the pareto point. And they may now be approximating different pareto point.</li>
</ul></li>
<li><p>Both agents agent who participite in trade could be better off if allowed to pick<br>
their preffered trade partner.</p></li>
<li><p>perhaps in view of this agents should be allowed to refuse unless they get a better deal. This suggest looking at stable marriage alg. where prior to trade the are serveral rounds in each neighbourhood for matching traders.</p></li>
</ul>
<ol start="2" type="1">
<li>trade is inefficent.</li>
</ol>
<ul>
<li>trade always use 1 unit for one of the agents.</li>
<li>to trade 3 for 3 3 trades are needed.</li>
</ul>
<ol start="3" type="1">
<li>trade increases utulity but can make an agent worse off.</li>
</ol>
<ul>
<li>after a trade a fertile agent can become wealthier but infertile if they are reduced below a multiple of thier endowment.</li>
<li>after a trade an agent can be wealthier in utility but not in survivability so they may have an extra unit of sugar they don’t need but not enogh spice so they might starve.</li>
</ul>
<ol start="4" type="1">
<li>agents that have participate in tradetraded will generaly</li>
<li>a smarter agent who can pick his trade partners and thier order can do them some damage</li>
</ol>
</section>
<section id="better-trade-rules" class="level2">
<h2 class="anchored" data-anchor-id="better-trade-rules">Better trade rules:</h2>
<p>A fundumental question is this:</p>
<p>If localy markets are hertogenious and weakly ineracting can we be sure of the globall market reaching an reaching an equilibrium between supply and demand? It there are many possible equilibiria how long to reach one and if not what other can we say for the long term, i.e.&nbsp;is there a local and global steady state where supply and demand meet or can we have other outcomes like periodic, chaotic, and random states globably.</p>
<ul>
<li><p>How long until will prices reflect the equilibrium of global supply and demand ?</p></li>
<li><p>If the market is out of equilibrium does it mean that an agent with a good estimate of the true equilibrium price can trade or use arbitrage to benefit from this state?</p></li>
<li><p>Is the trade rule realy inefficnet ?</p></li>
<li><p>Can a better trade rules</p>
<ul>
<li>let prices reach equilibrium prices</li>
<li>increase trade amounts</li>
<li>increase overall welfare and</li>
<li>reduce welfare inequality</li>
</ul></li>
<li><p>What is in the way of equilibrium formation ?</p>
<ul>
<li>is it lack of information</li>
<li>inability or inefficency of making tades accross market boundries</li>
<li>not enough trades within markets for them to reach equilibria?
<ul>
<li>will it help if there are multiple rounds of trades for all agents.</li>
</ul></li>
</ul></li>
</ul>
<p>The down side of a inefficent trade rule is that it may lead to less efficent market. The market in SC can be viewd as localy fragmented or if there are enough agents it may be a collection of weakly interacting markets.</p>
<p>Intuitively</p>
<p>Agents with lower vision tend to persist at the local market edges and beocome inefficent conduits of trade in the trade network instead of finding strategic locations where they could maximize the benefit of arbitrage between local markets.</p>
<section id="arbitraders" class="level3">
<h3 class="anchored" data-anchor-id="arbitraders">Arbitraders</h3>
<p>We can explore this by letting some agents who are less efficent harvesters have a movement rule that lets them seek out such locations with maximal arbitrage option. If there landscape is made of K blobs of different resources there may be greater need for such traders, and As more regions</p>
</section>
<section id="supertraders" class="level3">
<h3 class="anchored" data-anchor-id="supertraders">Supertraders</h3>
<p>We can setup a supertrader that is basicalt a supermarket in each neighbourhood. These agents with better vision that dont have a metablism cost or harvesting step.</p>
<p>They can see each other and trade with each other allowing for greater efficency in the market.</p>
<p>WE can rerun markets with or without supertraders and with supertraders with more vision. Thier wealth distribution could be a way to track the lost benefits due to vision fragmentation.</p>
</section>
<section id="edgworth-box-with-pareto-efficent-trades-maximising-utility-objective" class="level3">
<h3 class="anchored" data-anchor-id="edgworth-box-with-pareto-efficent-trades-maximising-utility-objective">Edgworth box with pareto-efficent trades maximising utility objective</h3>
<ol start="0" type="1">
<li>neighbours := agents in field of visions</li>
<li>for each neighbour in neighbours:</li>
</ol>
<ol type="a">
<li>setup the edgeworth box with</li>
<li>store the pareto-optimal solution that maximises both agents’ utilities and is viable for both agents</li>
<li>do the trade with the highest gain in utility to me.</li>
<li>remove agent from neighbours</li>
<li>my prefrences have changed so return to 1</li>
</ol>
</section>
<section id="edgworth-box-with-pareto-efficent-trades-for-survivability-objective" class="level3">
<h3 class="anchored" data-anchor-id="edgworth-box-with-pareto-efficent-trades-for-survivability-objective">Edgworth box with pareto-efficent trades for survivability objective</h3>
<p>we want to restric solutions to trades that increase the survivability this is like a quantum contraint on the utility.</p>
<ol type="1">
<li>are the any solutions ?</li>
<li>what is the best solution - and what is the closest option.</li>
</ol>
</section>
<section id="edgworth-box-with-pareto-efficent-trades-for-hybrid-objective" class="level3">
<h3 class="anchored" data-anchor-id="edgworth-box-with-pareto-efficent-trades-for-hybrid-objective">Edgworth box with pareto-efficent trades for hybrid objective</h3>
<ol type="1">
<li>we want a multiterm utility for</li>
<li>survivability of n rounds Quant(U(M))</li>
<li>reproduction endowments for up to 4 offsprings U(E)</li>
<li>trades for U(M) that do not reduce the above two utility componenets</li>
<li>side trades that reduce pollutions ?</li>
</ol>
<p>the tricky part here is to define an hybrid utlities and solve its edgworth box as we add more rules we arrive at more complex utilities.</p>
<p>So we may need to rethink a simlpler way to find accaptable trades….</p>
</section>
</section>
<section id="gale-shapley-trade-partner-allocation" class="level2">
<h2 class="anchored" data-anchor-id="gale-shapley-trade-partner-allocation">Gale-Shapley Trade partner allocation</h2>
<p>A second idea - based on Gale–Shapley algorithm for Stable marriage within neighborhoods</p>
<ol type="1">
<li>Each agent should find their preferred trades within thier FOV.</li>
</ol>
</section>
<section id="median-approximate-solution-to-the-stable-trade-partner-lattice-simplex" class="level2">
<h2 class="anchored" data-anchor-id="median-approximate-solution-to-the-stable-trade-partner-lattice-simplex">Median approximate solution to the stable trade partner lattice simplex</h2>
<p>GS alg is best for one side (proposers or acceptors) Can we find a variant that leads to a median graph ?</p>
<p>This seems very hard to do.</p>
<p>The originals GS alg considers all marriages within the population. Here I want and trade alg in which optimal trades emerge in the the median point on the trader’s marriage simplex.</p>
<p>For this variant for ABM we want to impose two restrictions on marriages: 1. offers made are restricted by miopia to the agents FOV. 2. offers received are restricted localy to the agents Max_Vision FOV.</p>
<p>we should iterate over all agents once to so all</p>
<p>, yet if all agents get to play both roles per round then it should cancel out the proposer advantage and give a median solution!</p>
</section>
<section id="better-trades" class="level2">
<h2 class="anchored" data-anchor-id="better-trades">Better trades ?</h2>
<p>Lessons from the history of the East India Company suggest that if agents can form temporary trading companies they may be able to trade more efficiently.</p>
<p>Different forms of companies can be tested to see which maximally parsimonious structure emerge as most realistic while local and need minimal computation:</p>
<ol type="1">
<li><p>A set of Agent contributes (resources) or money to partnership at some price becoming an share owner of this company.</p></li>
<li><p>agents can be silent partners of active members acting on behalf of company</p></li>
<li><p>providing information on market conditions, supply, (by agent and on ground) demand, prices.</p></li>
<li><p>Getting and receiving trade offers.</p></li>
<li><p>Making localized decisions on behalf of the company (possibly subject to share majority in a neighborhood)</p></li>
<li><p>Once the company has traded agents can contribute/withdraw resources with ownership adjustments</p></li>
<li><p>the company can be dissolved after n-time steps, if enough agents migrate, or if the inventory is too low</p></li>
<li><p>The partnership has no Metabolism so it will need a different utility function - (this can be ml based based on info from agents).</p></li>
<li><p>members of a company may use an information utility to deploy to locations that maximize information….</p></li>
<li><p>will agents have shares in multiple companies. (perhaps conflict of interest can force agent to be a silent partner in the coorporation)</p></li>
<li><p>can agents get rewards for bringing in trades</p></li>
<li><p>can agents get loans from companies</p></li>
<li><p>will comparative advantage let certain agent gain control of such companies</p></li>
</ol>
<p>Owners can cash out individuals or other</p>
</section>
<section id="emergence-in-abm" class="level2">
<h2 class="anchored" data-anchor-id="emergence-in-abm">Emergence in ABM</h2>
<p>If we consider lessons in thinking for ABM here are some guidelines:</p>
<p>Let us consider some effect we wish to study, say segregation.</p>
<ol type="1">
<li>We need to have a metric which we can measure the effect in our world.</li>
<li>We want to find a maximally parsimonious rule for which the effect emerges</li>
</ol>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Mesa {Lessons}},
  date = {2024-05-24},
  url = {https://orenbochman.github.io//posts/2024/2024-3-31-sugarscapes/mesa-lessons.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Mesa Lessons.”</span> May 24, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-3-31-sugarscapes/mesa-lessons.html">https://orenbochman.github.io//posts/2024/2024-3-31-sugarscapes/mesa-lessons.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-3-31-sugarscapes/mesa-lessons.html</guid>
  <pubDate>Fri, 24 May 2024 00:26:30 GMT</pubDate>
</item>
<item>
  <title>Evolutionary Games and Population Dynamics Summary</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-10-Evolutionary-Games-and-Population-Dynamics/</link>
  <description><![CDATA[ 





<p>I’ve recently come across a book called “Evolutionary Games and Population Dynamics” by Josef Hofbauer and Karl Sigmund. This book is a comprehensive introduction to the mathematical theory of evolutionary games and population dynamics. The book covers a wide range of topics, including the basic concepts of game theory, the dynamics of evolutionary games, and the mathematical analysis of population dynamics. The book also includes numerous examples and exercises to help readers understand the material.</p>
<p>Although the boook is primarily grounded in differential equations, my interest is to try and implement the models using agent-based modeling. This should have a two fold benefit:</p>
<ol type="1">
<li>learn how the differential equations are implemented in agent-based models</li>
<li>see and apply the techniques used in the book for analysis these dynamic systems ` - Lyapanov functions
<ul>
<li>stability analysis</li>
<li>bifurcation analysis</li>
<li>sensitivity to initial conditions</li>
<li>identifying phase Boundries</li>
<li>etc.</li>
</ul></li>
<li>create more realistic model with heterogeneous agents with spatial dynamics using ABM like Mesa and study them with the above tools</li>
<li>create interactive visualizations of phase space to help understand the dynamics of these systems</li>
<li>study parameter space to map out the different regions of the phase space.</li>
</ol>
<p>I will be summarizing the key concepts from the book in this document.</p>
<p>Dynamical Systems and Lotka-Volterra Equations</p>
<section id="logistic-growth" class="level2">
<h2 class="anchored" data-anchor-id="logistic-growth">Logistic Growth</h2>
<section id="density-dependence" class="level3">
<h3 class="anchored" data-anchor-id="density-dependence">Density Dependence</h3>
<ul>
<li>competition</li>
<li>mutualism</li>
<li>host-parasite realtionshuip</li>
</ul>
</section>
<section id="exponetial-growth" class="level3">
<h3 class="anchored" data-anchor-id="exponetial-growth">Exponetial Growth</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%20x%20=%20Rx%0A"></p>
</section>
<section id="logistic-growth-1" class="level3">
<h3 class="anchored" data-anchor-id="logistic-growth-1">Logistic Growth</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%20x%20=%20r%20x%20(1-%5Cfrac%7Bx%7D%7BK%7D)%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax(t)%20=%20%5Cfrac%7BK%7D%7B1+(%5Cfrac%7BK%7D%7Bx_0%7D-1)e%5E%7B-rt%7D%7D%0A"></p>
</section>
</section>
<section id="lotka-volterra-equations-for-predator-prey-systems" class="level2">
<h2 class="anchored" data-anchor-id="lotka-volterra-equations-for-predator-prey-systems">Lotka-Volterra equations for predator-prey systems</h2>
<blockquote class="blockquote">
<p>In the years after the First World War, the amouiif of predatory fish in the Adriatic was found to be considerably higher than in the years before.</p>
</blockquote>
<section id="predator-prey-model" class="level3">
<h3 class="anchored" data-anchor-id="predator-prey-model">Predator-Prey Model</h3>
<blockquote class="blockquote">
<p>Volterra assumed that the rate of growth of the prey population, in the absence of predators, is given by some constant a, but decreases linearly as a function of the density у of predators. This leads to x/x = a — by (with a,b&gt; 0). In the absence of prey, the predatory fish would have to die, which means a negative rate of growth; but this rate picks up with the density χ of prey fish, hence y/y = — c + dx (with c,d &gt; 0). Together, this yields</p>
</blockquote>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cdot%20x%20&amp;=%20x(%5Calpha%20-%20%5Cbeta%20y)%20%5C%5C%0A%5Cdot%20y%20&amp;=%20y(%5Cdelta%20x%20-%20%5Cgamma%20)%5C%5C%0A%5Ctext%7Bwhere%7D%20&amp;%20%5Cquad%20%5Calpha,%20%5Cbeta,%20%5Cgamma,%20%5Cdelta%20%3E%200%0A%5Cend%7Balign*%7D%20%5Cqquad%0A"> here, x is the prey population (rabbits) and y is the predator population (fox).</p>
<p>phase space diagram</p>
<div id="10221a5c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pylab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">alpha, beta, gamma, delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-4">xvalues, yvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> meshgrid(arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb1-5">xdot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xvalues<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> yvalues)</span>
<span id="cb1-6">ydot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>( delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> gamma)</span>
<span id="cb1-7">streamplot(xvalues, yvalues, xdot, ydot)</span>
<span id="cb1-8">show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/cell-2-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://orenbochman.github.io/posts/2024/2024-05-10-Evolutionary-Games-and-Population-Dynamics/index_files/figure-html/cell-2-output-1.png" width="571" height="411" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Evolutionary {Games} and {Population} {Dynamics} {Summary}},
  date = {2024-05-12},
  url = {https://orenbochman.github.io//posts/2024/2024-05-10-Evolutionary-Games-and-Population-Dynamics},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Evolutionary Games and Population Dynamics
Summary.”</span> May 12, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-05-10-Evolutionary-Games-and-Population-Dynamics">https://orenbochman.github.io//posts/2024/2024-05-10-Evolutionary-Games-and-Population-Dynamics</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-10-Evolutionary-Games-and-Population-Dynamics/</guid>
  <pubDate>Sat, 11 May 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/discarded_biliographical_entries.html</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/discarded_biliographical_entries.html</guid>
  <pubDate>Tue, 30 Apr 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Signals Experiment</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/experiment.html</link>
  <description><![CDATA[ 





<div id="796a14cc" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomActivation</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Urn:</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options</span>
<span id="cb1-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> balls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {option: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options}</span>
<span id="cb1-12">    </span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_filtered_urn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Filters urn's options by prefix and normalizes the weights.'''</span></span>
<span id="cb1-15">        filtered_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k.startswith(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)]</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(filtered_options) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no options found for filter=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-17">        filtered_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {opt: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[opt] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filtered_options}</span>
<span id="cb1-18">        total_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(filtered_balls.values())</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> total_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"total weights is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> after filter=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-20">        filtered_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {opt: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[opt]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total_balls <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filtered_options}</span>
<span id="cb1-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> filtered_probs</span>
<span id="cb1-22"></span>
<span id="cb1-23"></span>
<span id="cb1-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>, model):</span>
<span id="cb1-25">          </span>
<span id="cb1-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Filters the urn based on a option prefix (state for sender, signal for reciever).</span></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          In the litrature agents have multiple urns to support learning conditional probabilites for differnt context.</span></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - sender need one urns per state, and </span></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - recievers need one urn per signal.</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          I choose a simpler representation by implemented multiple urns as a single matrix</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          To get the wieghts coresponding to a for a given prefix we filter the urn based on the prefix.</span></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          allow updating the conditional probabilities for each signal given a state.</span></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          We have one urn and estimate the conditional probabilities by filtering the urn based on the prefix.</span></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span></span>
<span id="cb1-36">        </span>
<span id="cb1-37">        </span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-39">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'choose_option(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-40">        urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_urn(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.random.choices(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(urn.keys()), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(urn.values()))</span>
<span id="cb1-42"></span>
<span id="cb1-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-44">        old_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[option]</span>
<span id="cb1-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward </span>
<span id="cb1-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-47">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balls[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-48"></span>
<span id="cb1-49"></span>
<span id="cb1-50"></span>
<span id="cb1-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HerrnsteinRL(Urn):</span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' Herrnstein matching law with learning rate.'''</span></span>
<span id="cb1-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Herrnstein matching law'</span>):</span>
<span id="cb1-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add docstring</span></span>
<span id="cb1-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Herrnstein matching law with learning rate.</span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          options: list of options</span></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          learning_rate: float, default 1.0 should behave like the parent urn model</span></span>
<span id="cb1-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          verbose: bool, default False</span></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          name: str, the rule name 'Herrnstein matching law'</span></span>
<span id="cb1-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span></span>
<span id="cb1-64">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(options)</span>
<span id="cb1-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb1-67">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb1-68">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options</span>
<span id="cb1-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-70">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'LearningRule.__init__(Options: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-71"></span>
<span id="cb1-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' this adds the learning rate to the update'''</span></span>
<span id="cb1-74">        old_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[option]</span>
<span id="cb1-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward </span>
<span id="cb1-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-77">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balls[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-78"></span>
<span id="cb1-79"></span>
<span id="cb1-80"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LewisAgent(Agent):</span>
<span id="cb1-81">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model, game, role, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Agent for Lewis signaling game.</span></span>
<span id="cb1-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb1-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb1-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          unique_id: int, unique identifier</span></span>
<span id="cb1-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          model: SignalingGame, the model</span></span>
<span id="cb1-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          game: int, the game number</span></span>
<span id="cb1-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          role: str, the role of the agent</span></span>
<span id="cb1-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          verbose: bool, default False</span></span>
<span id="cb1-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span></span>
<span id="cb1-91">        </span>
<span id="cb1-92">          </span>
<span id="cb1-93">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb1-94">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> role</span>
<span id="cb1-95">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-96">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-97">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-98">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> game</span>
<span id="cb1-99">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb1-101">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HerrnsteinRL(model.states_signals, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_signal_weights'</span>)</span>
<span id="cb1-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-103">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HerrnsteinRL(model.signals_actions, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'signal_action_weights'</span>)</span>
<span id="cb1-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-105">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># consider adding an urn for nature to use for choosing states</span></span>
<span id="cb1-106">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this way one could use simple modifcation of the urn class to to support some basic distribution via their urn model.</span></span>
<span id="cb1-107">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and we could also visualize the urns and their weights using a simple schematic</span></span>
<span id="cb1-108">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HerrnsteinRL(model.states, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_weights'</span>)</span>
<span id="cb1-109">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-110">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-111">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-112">        </span>
<span id="cb1-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-114">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-115">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-116"></span>
<span id="cb1-117">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nature"</span>:</span>
<span id="cb1-119">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self.current_state = self.model.random.choice(self.model.states)</span></span>
<span id="cb1-120">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#use the urn to choose the state</span></span>
<span id="cb1-121">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-122">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-123">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Nature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> set state </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-124"></span>
<span id="cb1-125">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb1-126">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nature"</span>:</span>
<span id="cb1-128">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state</span>
<span id="cb1-129"></span>
<span id="cb1-130">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_signal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb1-131">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb1-132">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model)</span>
<span id="cb1-133">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-134">            </span>
<span id="cb1-135">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self.verbose:</span></span>
<span id="cb1-136">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-137">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal</span>
<span id="cb1-138"></span>
<span id="cb1-139">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send_signal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, receiver):</span>
<span id="cb1-140">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb1-141">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(state) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"state must be a string"</span></span>
<span id="cb1-142">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(state) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"state must be a non-empty string"</span></span>
<span id="cb1-143">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> receiver <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"receiver must be a valid agent"</span></span>
<span id="cb1-144">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.states, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> must be in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>states<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-145">            signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.choose_signal(state)</span>
<span id="cb1-146">            receiver.messages.append(signal)</span>
<span id="cb1-147">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-148">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-149"></span>
<span id="cb1-150">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fuse_actions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, actions):</span>
<span id="cb1-151">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-152">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-153">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(actions) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-154">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> actions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-155">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-156">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(actions)):</span>
<span id="cb1-157">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(actions[i]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> i)</span>
<span id="cb1-158">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action</span>
<span id="cb1-159"></span>
<span id="cb1-160">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decode_message(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, signal):</span>
<span id="cb1-161">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-162">            message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>signal, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model)</span>
<span id="cb1-163">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-164">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>message<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-165">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> message</span>
<span id="cb1-166"></span>
<span id="cb1-167">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-168">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Receiver decodes each message then </span></span>
<span id="cb1-169"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           then fuses them into one action'''</span></span>
<span id="cb1-170">           </span>
<span id="cb1-171">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-172">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.messages:</span>
<span id="cb1-173">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(signal) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> must be a string"</span></span>
<span id="cb1-174">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode_message(signal))</span>
<span id="cb1-175">            action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuse_actions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions)</span>
<span id="cb1-176">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-177">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> decided on action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-178"></span>
<span id="cb1-179">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,reward):</span>
<span id="cb1-180">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nature"</span>:</span>
<span id="cb1-181">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reward</span>
<span id="cb1-182">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-183">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-184"></span>
<span id="cb1-185">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,state):</span>
<span id="cb1-186">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' only reveiver calculates reward'''</span></span>
<span id="cb1-187">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-188">            action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action</span>
<span id="cb1-189">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-190">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reward</span>
<span id="cb1-191"></span>
<span id="cb1-192"></span>
<span id="cb1-193"></span>
<span id="cb1-194"></span>
<span id="cb1-195"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SignalingGame(Model):</span>
<span id="cb1-196">  </span>
<span id="cb1-197">  </span>
<span id="cb1-198">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, receivers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-199">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-200">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-201">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb1-202">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># states, signals, and actions</span></span>
<span id="cb1-203">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb1-204">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb1-205">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb1-206">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># urn options for sender and receiver</span></span>
<span id="cb1-207">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals]</span>
<span id="cb1-208">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions]</span>
<span id="cb1-209">        </span>
<span id="cb1-210">        </span>
<span id="cb1-211">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-212">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-213">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-214">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> senders_count</span>
<span id="cb1-215">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receivers_count</span>
<span id="cb1-216">        </span>
<span id="cb1-217">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(game_count):</span>
<span id="cb1-218">            game <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'senders'</span>: [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>: [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>}</span>
<span id="cb1-219">            nature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisAgent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i, role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nature"</span>)</span>
<span id="cb1-220">            game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nature</span>
<span id="cb1-221">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(nature)</span>
<span id="cb1-222">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-223">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(senders_count):</span>
<span id="cb1-224">                sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisAgent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i, role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>)</span>
<span id="cb1-225">                game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'senders'</span>].append(sender)</span>
<span id="cb1-226">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(sender)</span>
<span id="cb1-227">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-228">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(receivers_count):</span>
<span id="cb1-229">                receiver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisAgent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i, role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>)</span>
<span id="cb1-230">                game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>].append(receiver)</span>
<span id="cb1-231">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(receiver)</span>
<span id="cb1-232">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-233">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games.append(game)</span>
<span id="cb1-234">    </span>
<span id="cb1-235">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-236">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.agents:</span>
<span id="cb1-237">          agent.step()</span>
<span id="cb1-238">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>:</span>
<span id="cb1-239">                agent.gen_state()</span>
<span id="cb1-240">        </span>
<span id="cb1-241">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.agents:</span>
<span id="cb1-242">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sender'</span>:</span>
<span id="cb1-243">                state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games[agent.game][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>].current_state</span>
<span id="cb1-244">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> receiver <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games[agent.game][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>]:</span>
<span id="cb1-245">                    agent.send_signal(state, receiver)</span>
<span id="cb1-246">        </span>
<span id="cb1-247">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.agents:</span>
<span id="cb1-248">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receiver'</span>:</span>
<span id="cb1-249">                agent.set_action()</span>
<span id="cb1-250">                state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games[agent.game][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>].current_state</span>
<span id="cb1-251">                agent.calc_reward(state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state)</span>
<span id="cb1-252">                agent.calc_reward(state)</span>
<span id="cb1-253">                </span>
<span id="cb1-254">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.agents:</span>
<span id="cb1-255">          reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games[agent.game][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].reward</span>
<span id="cb1-256">          agent.set_reward(reward)</span>
<span id="cb1-257">        </span>
<span id="cb1-258">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, game <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games):</span>
<span id="cb1-259">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Game </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, expected_rewards=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>expected_rewards(game)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-260"></span>
<span id="cb1-261">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> expected_rewards(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game):</span>
<span id="cb1-262">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb1-263"></span>
<span id="cb1-264"></span>
<span id="cb1-265"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running the model</span></span>
<span id="cb1-266">state_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of states, signals, and actions</span></span>
<span id="cb1-267">steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-268">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SignalingGame(senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, receivers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state_count, game_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-269"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(steps):</span>
<span id="cb1-270">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb1-271">    model.step()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--- Step 1 ---
Sender 1 sends signal: B
Sender 4 sends signal: B
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 2 ---
Sender 1 sends signal: B
Sender 4 sends signal: B
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 3 ---
Sender 1 sends signal: A
Sender 4 sends signal: A
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 4 ---
Sender 1 sends signal: A
Sender 4 sends signal: B
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 5 ---
Sender 1 sends signal: A
Sender 4 sends signal: B
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 6 ---
Sender 1 sends signal: B
Sender 4 sends signal: A
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 7 ---
Sender 1 sends signal: A
Sender 4 sends signal: A
Sender 7 sends signal: A
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 8 ---
Sender 1 sends signal: B
Sender 4 sends signal: B
Sender 7 sends signal: A
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 9 ---
Sender 1 sends signal: A
Sender 4 sends signal: B
Sender 7 sends signal: B
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25
--- Step 10 ---
Sender 1 sends signal: B
Sender 4 sends signal: B
Sender 7 sends signal: A
Game 0, expected_rewards=0.25
Game 1, expected_rewards=0.25
Game 2, expected_rewards=0.25</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/oren/work/blog/env/lib/python3.10/site-packages/mesa/time.py:82: FutureWarning:

The AgentSet is experimental. It may be changed or removed in any and all future releases, including patch releases.
We would love to hear what you think about this new feature. If you have any thoughts, share them with us here: https://github.com/projectmesa/mesa/discussions/1919
</code></pre>
</div>
</div>
<p>some refactoring ideas:</p>
<ul>
<li>in the urn class add support a matrix based representation of the weights</li>
</ul>
<p>lets fix bugs - remove unused items from the agent - replace the expected_rewards for a game with a code that calculates the expected rewards as follows:</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Signals {Experiment}},
  date = {2024-05-01},
  url = {https://orenbochman.github.io//posts/2024/2024-05-01-Signals/experiment.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Signals Experiment.”</span> May 1, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-05-01-Signals/experiment.html">https://orenbochman.github.io//posts/2024/2024-05-01-Signals/experiment.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/experiment.html</guid>
  <pubDate>Tue, 30 Apr 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Skryms Signals Summary and Models</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/signals-summary.html</link>
  <description><![CDATA[ 





<p>In <span class="citation" data-cites="Skyrms2010signals">(Skyrms 2010)</span> philosopher and mathematician Brian Skyrms discusses how one can extend the concept of a signaling games into a full fledged signaling systems and to some extent a rudimentary language.</p>
<div class="no-row-height column-margin column-container"></div><p>I like many other found Signals to be a fascinating little book worth reading at least a couple of times. While Skyrms starts with a basic exposition motivated by Greek philosophers he eventually makes a deep dive into areas like reinforcement learning, replicator dynamics, mean field games and some other deep mathematical fields without much of introduction. In places the monographs seems incomplete and may require hunting the papers in the bibliography and possibly more recent work by the same authors.</p>
<p>I slowly noticed it being cited in more and more papers which I read. This sort of indicated that intellectually more people we on the same path of thinking how to equip their problem solving with a signaling system or better yet to evolve a more sophisticated language.<br>
</p>
<p>I went back several times to review the chapter on Complex signals, which I feel is the most interesting for real-world application. I began to think that the Lewis games are too rudimentary since signaling systems that evolve/learned from them are basically n-k maps of signals to meaning.</p>
<p>What I wanted was a recipe for quickly agent that need to evolve and teach/learn a language for efficient communication.</p>
<p>I wanted to go the relevant papers he covers on this area and then to see of there were newer results he did not cover. This turned out to be a bit of a challenge. In the mean time I also learned some courses on RL and even tried a couple of ideas from this book at work. I think I should summarize at least some of the more interesting results from the book.</p>
<p>Besides a summary I also want to try to implement some of the keystone models in the book to see if I can derive the reductionist simple language learning game.</p>
<section id="signals" class="level2">
<h2 class="anchored" data-anchor-id="signals">1. Signals</h2>
<section id="big-research-questions" class="level3">
<h3 class="anchored" data-anchor-id="big-research-questions">Big Research Questions</h3>
<p><strong>Q1. How can interacting individuals spontaneously learn to signal?</strong></p>
<p><strong>Q2. How can species spontaneously evolve signaling systems?</strong></p>
</section>
</section>
<section id="sender-receiver" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sender-receiver">Sender-Receiver</h2>
<blockquote class="blockquote">
<p>There are two players, the sender and the receiver.<br>
Nature chooses a state at random and the sender observes the state chosen.<br>
The sender then sends a signal to the receiver, who cannot observe the state directly but does observe the signal.<br>
The receiver then chooses an act, the outcome of which affects them both, with the payoff depending on the state.<br>
Both have pure common interest—they get the same payoff—and there is exactly one “correct” act for each state.<br>
In the correct act-state combination they both get positive payoff; otherwise payoff is zero.<br>
The simplest case is one where there are the same number of states, acts, and signals.</p>
</blockquote>
<p>A separating equilibrium is called a signaling system</p>
<blockquote class="blockquote">
<p>If we start with a pair of sender and receiver strategies, and switch the messages around the same way in both, we get the same payoffs. In particular, permutation of messages takes one signaling-system equilibrium into another.</p>
</blockquote>
<p>We can understand a signaling system as a encoding look-up table by the sender and a decoding lookup table for the reciever which is the inverse of the first. The product of two permutations is the identity matrix. Each permutation of the identity matrix gives a valid signaling system</p>
<p><strong>Q3. Is there a most salient signaling system?</strong></p>
<p>Salience is a concept from Schelling’s Game theory that suggest that one solution to a coordination problem might be naturally better then others. (e.g.&nbsp;meeting a relative at the airport). This can be due to an externality to the pure coordination problem. Salience can also arise from non uniformity of the state distribution - by providing less frequent messages longer messages based on binary coding. The salience hierarchy might be grounded in risk - more urgent messages might be shorter and learned before the longer ones.</p>
<p>my thoughts on Salience:</p>
<ul>
<li>Salience would arise in nature through the non-uniform distribution of states which is ignored in most papers leading to equally salient signaling system. When the states are not uniformly distributed then the signals will not be uniformly distributed. The more common states should have more common signals. e.g.&nbsp;if snakes are more common than eagles then the signal for snake should be shorter/simpler/learned first than the signal for eagle. In another location the distributions could be reversed leading to a different salience hierarchy.</li>
<li>Another way (of seeing this is that) salience would arise in nature to minimize risks for the sender, who could become a target for a predator by sending a signal.</li>
<li>Two other source of salience are the risk of making mistakes and the cost of sending a signal.</li>
<li>Finally there is nothing stopping the salience from being a function of all these factors through a product of their probabilities. Though this is more easily expressed in the language of fitness. Salience will select the language whose speakers gain the highest expected progeny (fitness) by avoiding risks, conserving energy and avoiding miscommunication for their habitat.</li>
<li>If the speakers migrate they might benefit from a language that is salient in multiple habitats. This is a form of generalization.</li>
<li>If there are different cost for encoding and decoding then the salience will be a function of the product of the encoding and decoding costs. This is a form of cost minimization. In this scenario there may be a competition between the sender and the receiver to minimize their costs. But the sender has the upper hand since the sender chooses the signal. The sender is the causal agent in the signaling system.</li>
</ul>
<p><strong>Q4. How can two agents with different signaling find a SS that is midway between them (including systems with both shared and unique states)?</strong></p>
<ul>
<li>Its fairly clear that under the rules of the Lewis game all valid signaling systems are isomorphic and none are more salient.</li>
<li>In nature salience might arise and a systems leading to greatest fitness in its users would be the most salient.</li>
<li>To find a signaling system that is midway between two signaling systems we could use the Cayley distance between the two permutations. This is the minimum number of transpositions required to transform one permutation into another. The median permutation would be the one that has half the Cayley distance to each signaling systems.</li>
<li>If the systems have salience we may want to also keep the most salient signals intact and now we have a more complex optimization problem. We could use the KL divergence between the two signaling systems to estimate the distance of the signaling distribution from a separating distribution.</li>
</ul>
<p>the Cayley distance between two permutations is the minimum number of transpositions required to transform one permutation into another. it is a metric on the symmetric group.</p>
<p><strong>Information in signals</strong></p>
<p><strong>Q5. How can we minimally extend this framework to handle Errors and Deception</strong></p>
<blockquote class="blockquote">
<p>Signals carry information. The natural way to measure the information in a signal is to measure the extent that the use of that particular signal changes probabilities. Accordingly, there are two kinds of information in the signals in Lewis sender-receiver games: information about what state the sender has observed and information about what act the receiver will take. The ﬁrst kind of infor- mation measures effectiveness of the sender’s use of signals to discriminate states; the second kind measures the effectiveness of the signal in changing the receiver’s probabilities of action.</p>
</blockquote>
<ul class="task-list">
<li><label><input type="checkbox">TODO: estimate information content of each signal for sender and receiver for separating and partial pooling cases</label></li>
<li><label><input type="checkbox">TODO: use entropy for message level estimates of sender and receiver under separating signal, a synonym, a homonym.</label></li>
<li><label><input type="checkbox">TODO: use entropy KL divergence to estimate a the distance of the signaling distribution from a separating distribution.</label></li>
</ul>
<p>Actually there are a number of extensions one would like to consider for the Lewis framework:</p>
<ol type="1">
<li>bottlenecks
<ol type="1">
<li>more state than signals - this is the interesting case and where complex signaling systems should arise</li>
<li>more signals than states - this is the case where synonyms can arrise</li>
</ol></li>
<li>basic logical reasoning, conjunctions, disjunctions, negations</li>
<li>multiple senders and or receivers
<ol type="1">
<li>rewarding coordination (each state requires different actions from the agents - they are learning different receiver maps )</li>
<li>rewarding correlated equilibrium (sender lets the receivers pick from correlated states at random allowing the receivers avoid penalty of miscoordination.)</li>
<li>networks of agents per the goyal model in ch 11 and 13</li>
</ol></li>
</ol>
<p>complex signals</p>
<ol type="1">
<li>conjunction of signals,</li>
<li>ordered signals,</li>
<li>recursive signals, group</li>
</ol>
<section id="evolution" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="evolution">Evolution</h3>
<p>In Banes 1982</p>
<p>We first see two competing Signaling systems being tested in a population</p>
<p><span class="citation" data-cites="hofbauer1998evolutionary">(Hofbauer and Sigmund 1998)</span> Population dynamics - can be used to identify which dynamic equlibria are stable or unstable given an intial population of strategies</p>
<div class="no-row-height column-margin column-container"></div><p>There is a figure showing the field dynamics with basins of attractions arrising from the population dynamics equations</p>
<p>We also see symmetry breaking selecting a signaling system to a system</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bdp(A)%7D%7Bdt%7D=p(A)%5BU(A)-U%5D%0A"></p>
<p>where</p>
<ul>
<li>U(A) is the average payoff to strategy A and</li>
<li>U is the average payoff in the population.</li>
</ul>
<div id="bd50bfb1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pylab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">alpha, beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-4">xvalues, yvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> meshgrid(arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb1-5">xdot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta</span>
<span id="cb1-6">ydot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta</span>
<span id="cb1-7">streamplot(xvalues, yvalues, xdot, ydot)</span>
<span id="cb1-8">show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="signals-summary_files/figure-html/cell-2-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://orenbochman.github.io/posts/2024/2024-05-01-Signals/signals-summary_files/figure-html/cell-2-output-1.png" width="594" height="416" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>we have a discussion of how signals might arise.</p>
</section>
</section>
<section id="evolution-1" class="level2">
<h2 class="anchored" data-anchor-id="evolution-1">Evolution</h2>
<div id="8d763ac8" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StagedActivation, RandomActivation</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import random</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># agent_roles</span></span>
<span id="cb2-7">r_nature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span></span>
<span id="cb2-8">r_sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sender'</span></span>
<span id="cb2-9">r_receiver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receiver'</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> multiurn:</span>
<span id="cb2-12"></span>
<span id="cb2-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,options,balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options</span>
<span id="cb2-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> balls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls</span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {option: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options}</span>
<span id="cb2-19">  </span>
<span id="cb2-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_filtered_urn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' filters urn's options by prefix and normalizes the weights</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        usege:</span></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        urn=urn.get_filtered_urn(1)</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        choice = model.random.choice(list(urn.keys()), p=list(urn.values()))</span></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"filter must be a int"</span></span>
<span id="cb2-27">    filtered_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>]</span>
<span id="cb2-28">    filtered_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {opt: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[opt] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filtered_options}</span>
<span id="cb2-29">    total_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(filtered_balls.values())</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> total_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"total weights is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-31">    filtered_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {opt: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[opt]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total_balls <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filtered_options}</span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> filtered_probs</span>
<span id="cb2-33"></span>
<span id="cb2-34">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_filtered_urn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb2-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' filters urn's options by prefix and normalizes the weights</span></span>
<span id="cb2-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        usege:</span></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        urn=urn.get_filtered_urn('A')</span></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        choice = model.random.choice(list(urn.keys()), p=list(urn.values()))</span></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb2-40"></span>
<span id="cb2-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HerrnsteinRL(multiurn):</span>
<span id="cb2-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                    The Urn model</span></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     nature            sender                 reciever     reward</span></span>
<span id="cb2-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                       </span></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    | (0) | --{0}--&gt;  | (0_a)  | --{a}--&gt; | (a_0) | --{0}--&gt;   1   </span></span>
<span id="cb2-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           | (0_b)  | --{b}    | (a_1) | --{1}--&gt;   0</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           +--------+    | +--&gt;+-------+</span></span>
<span id="cb2-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |                         +-|-+  </span></span>
<span id="cb2-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    | (1) | --{1}--&gt;  | (1_a)  | --{a}+ +&gt;| (b_0) | --{1}--&gt;   1</span></span>
<span id="cb2-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           | (1_b)  | --{b}---&gt;| (b_1) | --{0}--&gt;   0</span></span>
<span id="cb2-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    +-----+           +--------+          +-------+</span></span>
<span id="cb2-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Herrnstein urn algorithm</span></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ------------------------</span></span>
<span id="cb2-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    1. nature picks a state </span></span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    2. sender  gets the state, chooses a signal by picking a ball in choose_option() from the stat'es urn</span></span>
<span id="cb2-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    3. reciver gets the action, chooses an actuion by picking a ball in choose_option()</span></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    4. the balls in the urns are incremented if action == state</span></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    5. repeat</span></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb2-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Herrnstein matching law'</span>):</span>
<span id="cb2-66">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(options)</span>
<span id="cb2-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># filter options in choose option by input</span></span>
<span id="cb2-68">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb2-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name</span>
<span id="cb2-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb2-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options</span>
<span id="cb2-72"></span>
<span id="cb2-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-74">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'LearningRule.__init__(Options: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb2-75">      </span>
<span id="cb2-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>,random):</span>
<span id="cb2-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' choose an option from the urn based on the filter and the random choice</span></span>
<span id="cb2-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            usage:</span></span>
<span id="cb2-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            urn.choose_option(1,random=model.random)</span></span>
<span id="cb2-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span></span>
<span id="cb2-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-82">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'choose_option(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>random<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb2-83">        urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_urn(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb2-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> random:</span>
<span id="cb2-85">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> random.choices(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls.keys()), weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls.values()),k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-87">          throw(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"random must be a random number generator"</span>)</span>
<span id="cb2-88">        </span>
<span id="cb2-89">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb2-90">        old_balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[option]</span>
<span id="cb2-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balls[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward </span>
<span id="cb2-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-93">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_balls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balls[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-94"></span>
<span id="cb2-95"></span>
<span id="cb2-96"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LewisAgent(Agent):</span>
<span id="cb2-97">  </span>
<span id="cb2-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model, game, role, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb2-99">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb2-100">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> role <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#( one of nature, sender, receiver)</span></span>
<span id="cb2-101">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb2-102">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> game</span>
<span id="cb2-103">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-104">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb2-106">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HerrnsteinRL(model.states_signals, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_signal_weights'</span>)</span>
<span id="cb2-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb2-108">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HerrnsteinRL(model.signals_actions, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'signal_action_weights'</span>)</span>
<span id="cb2-109">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-110">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-111">        </span>
<span id="cb2-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-113">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset agent state before step</span></span>
<span id="cb2-114">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-115">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-116"></span>
<span id="cb2-117">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nature"</span>:</span>
<span id="cb2-119">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.states)</span>
<span id="cb2-120">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-121">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Nature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> set state </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-122">                </span>
<span id="cb2-123">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb2-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> r_nature:</span>
<span id="cb2-126">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state</span>
<span id="cb2-127"></span>
<span id="cb2-128">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_signal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb2-129">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> r_sender:</span>
<span id="cb2-130">          throw(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only sender can send signals"</span>)</span>
<span id="cb2-131">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>,random<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.random)</span>
<span id="cb2-132">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-133">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> choose_signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-134">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal</span>
<span id="cb2-135">          </span>
<span id="cb2-136"></span>
<span id="cb2-137">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send_signal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>, receiver):</span>
<span id="cb2-138">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> r_sender:</span>
<span id="cb2-139">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"filter must be a int"</span></span>
<span id="cb2-140">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.states, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"filter must be a valid state"</span></span>
<span id="cb2-141">          signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.choose_signal(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb2-142">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"signal must be a valid signal"</span></span>
<span id="cb2-143">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-144">          receiver.messages.append(signal)</span>
<span id="cb2-145">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-146">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-147">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-148">          throw(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only sender can send signals"</span>)</span>
<span id="cb2-149"></span>
<span id="cb2-150">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fuse_actions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,actions):</span>
<span id="cb2-151">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' </span></span>
<span id="cb2-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            # Message fusion logic:</span></span>
<span id="cb2-153"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            1. single message:  if there is only one signal then the action is the action associated with the signal</span></span>
<span id="cb2-154"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            2. ordered messages: if there are multiple signals then the action is the number from the string assocciated with the concatenated signal</span></span>
<span id="cb2-155"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               if there are two signals possible per message we concat and covert binary string to number</span></span>
<span id="cb2-156"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            3. is the messages are sets we could perform a intersetion and take the action associated with the intersection </span></span>
<span id="cb2-157"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               currently this is not implemented</span></span>
<span id="cb2-158"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            4. support for recursive signals is currently under research .</span></span>
<span id="cb2-159"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span> </span>
<span id="cb2-160">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> r_receiver:</span>
<span id="cb2-161">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only receiver can set actions"</span>)</span>
<span id="cb2-162">        </span>
<span id="cb2-163">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(actions) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># single action no need to fuse</span></span>
<span id="cb2-164">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> actions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-165">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-166">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fuse the actions into a binary number</span></span>
<span id="cb2-167">          action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-168">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if there are multiple signals</span></span>
<span id="cb2-169">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(actions)):</span>
<span id="cb2-170">            action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> actions[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>i)</span>
<span id="cb2-171">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-172">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fused actions : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> into action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-173">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> action</span>
<span id="cb2-174"></span>
<span id="cb2-175">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decode_message(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,signal):</span>
<span id="cb2-176">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' first we need to get the filtered urn for the signal</span></span>
<span id="cb2-177"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            and then choose the option based on the urn'''</span></span>
<span id="cb2-178">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> r_receiver:</span>
<span id="cb2-179">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only receiver can decode messages"</span>)</span>
<span id="cb2-180"></span>
<span id="cb2-181">        message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.urn.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>signal,random<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.random)</span>
<span id="cb2-182">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-183">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>message<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-184">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> message</span>
<span id="cb2-185"></span>
<span id="cb2-186">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-187">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' first we need to use the urn to decode the signals </span></span>
<span id="cb2-188"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            then need to fuse them to get the action '''</span></span>
<span id="cb2-189">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> r_receiver:</span>
<span id="cb2-190">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only receiver can set the action"</span>)</span>
<span id="cb2-191">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-192">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.messages:</span>
<span id="cb2-193">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode_message(signal))</span>
<span id="cb2-194">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuse_actions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions)</span>
<span id="cb2-195">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-196">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received signals: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>messages<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-197">              </span>
<span id="cb2-198">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,reward):</span>
<span id="cb2-199">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [r_receiver,r_sender]:</span>
<span id="cb2-200">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only sender and receiver can set rewards"</span>)</span>
<span id="cb2-201">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reward</span>
<span id="cb2-202">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-203">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-204">                </span>
<span id="cb2-205">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,correct_action):</span>
<span id="cb2-206">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> r_receiver:</span>
<span id="cb2-207">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Only receiver can calculate rewards"</span>)</span>
<span id="cb2-208">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> correct_action <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-209">        </span>
<span id="cb2-210"></span>
<span id="cb2-211"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SignalingGame(Model):</span>
<span id="cb2-212">  </span>
<span id="cb2-213">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: add support for </span></span>
<span id="cb2-214">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. bottle necks</span></span>
<span id="cb2-215">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. rename k to state_count</span></span>
<span id="cb2-216">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. state_per_sender = state_count/sender_count </span></span>
<span id="cb2-217">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. partitioning states by signals =&gt; state/sender_count</span></span>
<span id="cb2-218">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, recievers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,signal_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb2-219">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-220">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb2-221">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb2-222">        </span>
<span id="cb2-223">        </span>
<span id="cb2-224">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the states, signals, and actions</span></span>
<span id="cb2-225">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb2-226">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-227">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(signal_count)]</span>
<span id="cb2-228">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-229">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb2-230">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>actions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-231">        </span>
<span id="cb2-232">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g., 1 -&gt; 1, 2 -&gt; 2, ...</span></span>
<span id="cb2-233">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  [(state,signal) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals]</span>
<span id="cb2-234">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>states_signals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-235">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(signal,action) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions] </span>
<span id="cb2-236">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signals_actions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-237">        </span>
<span id="cb2-238">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Agents</span></span>
<span id="cb2-239"></span>
<span id="cb2-240">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-241">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>senders_count</span>
<span id="cb2-242">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.recievers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>recievers_count</span>
<span id="cb2-243"></span>
<span id="cb2-244">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Games each game has a nature, senders and receivers</span></span>
<span id="cb2-245">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-246">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create games        </span></span>
<span id="cb2-247">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(game_count):</span>
<span id="cb2-248">            game <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'senders'</span>: [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>: [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>}</span>
<span id="cb2-249">            </span>
<span id="cb2-250">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create nature agent</span></span>
<span id="cb2-251">            game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisAgent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_nature,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb2-252">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>])</span>
<span id="cb2-253">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-254">            </span>
<span id="cb2-255">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create sender agents</span></span>
<span id="cb2-256">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(senders_count):</span>
<span id="cb2-257">                sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisAgent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_sender,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb2-258">                game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'senders'</span>].append(sender)</span>
<span id="cb2-259">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(sender)</span>
<span id="cb2-260">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-261">                </span>
<span id="cb2-262">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create receiver agents</span></span>
<span id="cb2-263">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span> (recievers_count):</span>
<span id="cb2-264">                reciever <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisAgent(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, game<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,role <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_receiver,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb2-265">                game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>].append(reciever)</span>
<span id="cb2-266">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(reciever)</span>
<span id="cb2-267">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-268">                </span>
<span id="cb2-269">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games.append(game)</span>
<span id="cb2-270">        </span>
<span id="cb2-271">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-272">      </span>
<span id="cb2-273">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.schedule.agents:</span>
<span id="cb2-274">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset agent state before step</span></span>
<span id="cb2-275">            agent.step()</span>
<span id="cb2-276">        </span>
<span id="cb2-277">        </span>
<span id="cb2-278">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> game_counter,game <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games):</span>
<span id="cb2-279">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-280">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>step_counter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Game </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>game_counter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb2-281">                </span>
<span id="cb2-282">            nature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nature'</span>]</span>
<span id="cb2-283">            nature.gen_state()</span>
<span id="cb2-284">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nature.current_state</span>
<span id="cb2-285">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(state) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"state must be a string"</span></span>
<span id="cb2-286">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.states, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"state must be a valid state"</span></span>
<span id="cb2-287">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-288">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Nature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>agent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> set state </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-289">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sender <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'senders'</span>]:</span>
<span id="cb2-290">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> receiver <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>]:</span>
<span id="cb2-291">                    sender.send_signal(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state, receiver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>receiver)</span>
<span id="cb2-292">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-293">                      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sender<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sender<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-294">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> receiver <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>]:</span>
<span id="cb2-295">                receiver.set_action()</span>
<span id="cb2-296">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-297">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>receiver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>receiver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-298">                reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>receiver.calc_reward(state)</span>
<span id="cb2-299">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-300">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>receiver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>receiver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-301">            </span>
<span id="cb2-302">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itertools.chain(game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'senders'</span>],game[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receivers'</span>]):</span>
<span id="cb2-303">                agent.set_reward(reward)</span>
<span id="cb2-304">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb2-305">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>agent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  </span>
<span id="cb2-306">                    </span>
<span id="cb2-307"></span>
<span id="cb2-308">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,game <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.games):</span>
<span id="cb2-309">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'game </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>expected_rewards(game)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-310"></span>
<span id="cb2-311">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> expected_rewards(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,game):</span>
<span id="cb2-312">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb2-313"></span>
<span id="cb2-314"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running the model</span></span>
<span id="cb2-315">state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of states, signals, and actions</span></span>
<span id="cb2-316">steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-317">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SignalingGame(senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,recievers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state_count)</span>
<span id="cb2-318">model.step_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-319"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(steps):</span>
<span id="cb2-320">    model.step_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-321">    model.step()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>self.states=[0, 1]
self.signals=[0, 1, 2]
self.actions=[0, 1]
self.states_signals=[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]
self.signals_actions=[(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)]
LearningRule.__init__(Options: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)])
LearningRule.__init__(Options: [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
LearningRule.__init__(Options: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)])
LearningRule.__init__(Options: [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
--- Step 1 Game 0 ---
Nature 0 set state 0
Nature 5 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(0, 2)]
Sender 1 sends signal: [(0, 2)]
Sender 1 sends signal: [(0, 2)]
Sender 1 sends signal: [(0, 2)]
choose_option(filter=[(0, 2)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(1, 1)]
Receiver 2 received signals: [[(0, 2)]] and action: [(1, 1)]
Receiver 2 action: [(1, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 1 Game 1 ---
Nature 3 set state 1
Nature 2 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(1, 0)]
Sender 4 sends signal: [(1, 0)]
Sender 4 sends signal: [(1, 0)]
Sender 4 sends signal: [(1, 0)]
choose_option(filter=[(1, 0)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(2, 1)]
Receiver 5 received signals: [[(1, 0)]] and action: [(2, 1)]
Receiver 5 action: [(2, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 2 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
choose_option(filter=[(1, 0)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(0, 0)]
Receiver 2 received signals: [[(1, 0)]] and action: [(0, 0)]
Receiver 2 action: [(0, 0)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 2 Game 1 ---
Nature 3 set state 0
Nature 2 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(1, 1)]
Sender 4 sends signal: [(1, 1)]
Sender 4 sends signal: [(1, 1)]
Sender 4 sends signal: [(1, 1)]
choose_option(filter=[(1, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(0, 1)]
Receiver 5 received signals: [[(1, 1)]] and action: [(0, 1)]
Receiver 5 action: [(0, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 3 Game 0 ---
Nature 0 set state 0
Nature 5 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
choose_option(filter=[(1, 0)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(1, 1)]
Receiver 2 received signals: [[(1, 0)]] and action: [(1, 1)]
Receiver 2 action: [(1, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 3 Game 1 ---
Nature 3 set state 1
Nature 2 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(1, 2)]
Sender 4 sends signal: [(1, 2)]
Sender 4 sends signal: [(1, 2)]
Sender 4 sends signal: [(1, 2)]
choose_option(filter=[(1, 2)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(1, 1)]
Receiver 5 received signals: [[(1, 2)]] and action: [(1, 1)]
Receiver 5 action: [(1, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 4 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
choose_option(filter=[(1, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(0, 1)]
Receiver 2 received signals: [[(1, 1)]] and action: [(0, 1)]
Receiver 2 action: [(0, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 4 Game 1 ---
Nature 3 set state 1
Nature 2 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 0)]
Sender 4 sends signal: [(0, 0)]
Sender 4 sends signal: [(0, 0)]
Sender 4 sends signal: [(0, 0)]
choose_option(filter=[(0, 0)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(0, 1)]
Receiver 5 received signals: [[(0, 0)]] and action: [(0, 1)]
Receiver 5 action: [(0, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 5 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
choose_option(filter=[(1, 0)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(2, 1)]
Receiver 2 received signals: [[(1, 0)]] and action: [(2, 1)]
Receiver 2 action: [(2, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 5 Game 1 ---
Nature 3 set state 1
Nature 2 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 2)]
Sender 4 sends signal: [(0, 2)]
Sender 4 sends signal: [(0, 2)]
Sender 4 sends signal: [(0, 2)]
choose_option(filter=[(0, 2)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(0, 0)]
Receiver 5 received signals: [[(0, 2)]] and action: [(0, 0)]
Receiver 5 action: [(0, 0)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 6 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
Sender 1 sends signal: [(1, 0)]
choose_option(filter=[(1, 0)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(0, 1)]
Receiver 2 received signals: [[(1, 0)]] and action: [(0, 1)]
Receiver 2 action: [(0, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 6 Game 1 ---
Nature 3 set state 0
Nature 2 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
choose_option(filter=[(0, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(0, 1)]
Receiver 5 received signals: [[(0, 1)]] and action: [(0, 1)]
Receiver 5 action: [(0, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 7 Game 0 ---
Nature 0 set state 0
Nature 5 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(0, 1)]
Sender 1 sends signal: [(0, 1)]
Sender 1 sends signal: [(0, 1)]
Sender 1 sends signal: [(0, 1)]
choose_option(filter=[(0, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(1, 1)]
Receiver 2 received signals: [[(0, 1)]] and action: [(1, 1)]
Receiver 2 action: [(1, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 7 Game 1 ---
Nature 3 set state 0
Nature 2 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
choose_option(filter=[(0, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(1, 1)]
Receiver 5 received signals: [[(0, 1)]] and action: [(1, 1)]
Receiver 5 action: [(1, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 8 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
choose_option(filter=[(1, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(0, 1)]
Receiver 2 received signals: [[(1, 1)]] and action: [(0, 1)]
Receiver 2 action: [(0, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 8 Game 1 ---
Nature 3 set state 0
Nature 2 set state 0
choose_option(filter=0,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 2)]
Sender 4 sends signal: [(0, 2)]
Sender 4 sends signal: [(0, 2)]
Sender 4 sends signal: [(0, 2)]
choose_option(filter=[(0, 2)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(0, 0)]
Receiver 5 received signals: [[(0, 2)]] and action: [(0, 0)]
Receiver 5 action: [(0, 0)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 9 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 2)]
Sender 1 sends signal: [(1, 2)]
Sender 1 sends signal: [(1, 2)]
Sender 1 sends signal: [(1, 2)]
choose_option(filter=[(1, 2)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(1, 0)]
Receiver 2 received signals: [[(1, 2)]] and action: [(1, 0)]
Receiver 2 action: [(1, 0)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 9 Game 1 ---
Nature 3 set state 1
Nature 2 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
choose_option(filter=[(0, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(1, 1)]
Receiver 5 received signals: [[(0, 1)]] and action: [(1, 1)]
Receiver 5 action: [(1, 1)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25
--- Step 10 Game 0 ---
Nature 0 set state 1
Nature 5 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 1 choose_signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
Sender 1 sends signal: [(1, 1)]
choose_option(filter=[(1, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 2 received signal: [(0, 1)]
Receiver 2 received signals: [[(1, 1)]] and action: [(0, 1)]
Receiver 2 action: [(0, 1)]
Receiver 2 received reward: 0
Receiver 1 received reward: None
Sender 1 received reward: None
Receiver 2 received reward: None
Sender 2 received reward: None
--- Step 10 Game 1 ---
Nature 3 set state 1
Nature 2 set state 1
choose_option(filter=1,random=&lt;random.Random object at 0x59325df7b330&gt;)
Sender 4 choose_signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
Sender 4 sends signal: [(0, 1)]
choose_option(filter=[(0, 1)],random=&lt;random.Random object at 0x59325df7b330&gt;)
Receiver 5 received signal: [(1, 0)]
Receiver 5 received signals: [[(0, 1)]] and action: [(1, 0)]
Receiver 5 action: [(1, 0)]
Receiver 5 received reward: 0
Receiver 4 received reward: None
Sender 4 received reward: None
Receiver 5 received reward: None
Sender 5 received reward: None
game 0, self.expected_rewards(game)=0.25
game 1, self.expected_rewards(game)=0.25</code></pre>
</div>
</div>
<p>In this simulation the agents are not learning - they are accessing the predefined signals and actions in the model hence rewards are always 1.</p>
<p>Player in Lewis signaling games can reach three type of equilibria</p>
<ol type="1">
<li>Separating equilibrium in which receiver fully recovers the state from the signal and can take the appropriate action</li>
<li>Partial pooling equilibrium in which <em>synonyms</em> or <em>homophones</em> frustrate the receiver for always recovering the state.</li>
<li>Full pooling equilibrium in which all signals are the same and the agents are unable to communicate.</li>
</ol>
<p>A one word synonym for “desired qualities” derived from desire that used in academic literature is “desiderata”.</p>
<p>Skryms next considers bottle necks - which are cases where there are more signals than actions and vica versa.</p>
<ul>
<li>In the case of more signals than actions successful learning will result a partial polling equilibrium with some synonyms.</li>
<li>In the case of more actions than signals the best an agent can learn is a partial pooling equilibrium with homophones.</li>
</ul>
<p>Both synonyms and homophones have drawbacks however:</p>
<p>While synonyms increase the cognitive load and the number of signals that need to be learned they do not prevent the recovery of the state being communicated. Homophones require the receiver to select an interpretation at random leading to lower payoffs since the receiver unable to recover the state cannot select the correct action. If the number of signal is the same as the number of actions, the pigeon hole principle guarantees that for every synonym there must be a homophone.</p>
<p>If we consider that for recoverability we need action and signals to be fully correlated it is easy to see that each failure to correlate</p>
<p>action to signals results in a (partial) pooling solution. Thus there are far more partial pooling equilibria than separating equilibria. and it is thus no surprise that natural language is rife with homophones and synonyms.</p>
<p>In lieu of the fact that partial pooling equilibrium far out number the separating ones with and with out bottlenecks, setting up and later learning a separating signaling system with minimal homophones/synonyms is not trivial task. (If we also factor in cost/risk of miscommunication some homophones are clearly worse than others)</p>
<ul>
<li><p>Evolution for example may not be the best way for this.</p></li>
<li><p>While researchers have very basic algorithms to do so, in terms of convergence rate and sample efficiency.</p></li>
</ul>
<p>Although not considered it is easy to see that there are far more partial pooling</p>
<p>We can conclude proceed to discuss the desiderata for learning algorithms.</p>
<p>Note: Dropout Algorithm Introducing bottlenecks into neural networks tend to improve their ability to generalize by forcing them to avoid memorizing inputs and come up with more resiliant representations. This suggest that partial pooling equilibria may play a more significant role in structured/complex signaling systems.</p>
</section>
<section id="desiderata-for-learning-algorithms-of-signaling-systems" class="level2">
<h2 class="anchored" data-anchor-id="desiderata-for-learning-algorithms-of-signaling-systems">Desiderata for learning algorithms of signaling systems</h2>
<ol type="1">
<li>State recovery - we prefer the algorithm to learn a separating equilibrium and if avoid pooling equilibrium with homophones.</li>
<li>Convergence - we want the algorithm to quickly converge to the equilibrium.</li>
<li>Sample efficiency - we want the algorithm to learn after minimal exposure to stimuli.</li>
</ol>
<p>Some questions</p>
<ul>
<li><p>How different are the task of creating the signaling system from learning it?</p>
<ul>
<li><p>the main difference perhaps is that one party has a mapping and it is up to the second to learn it. they can’t find unused symbols and mach them to a new state.</p></li>
<li><p>there may be many speakers so making changes will be costly.</p></li>
</ul></li>
<li><p>Can switching roles of sender and receiver give better outcomes in learning ?</p>
<ul>
<li>this may change for different extensions</li>
</ul></li>
<li><p>If there are multiple agent learning can create or learn the signaling system better or faster</p>
<ul>
<li><p>what if they have groups with established signal systems</p></li>
<li><p>how can they find a new set of mapping with minimal permutation from their original</p></li>
</ul></li>
<li><p>If states used for reward are not random are there better schedules for learning are not random</p></li>
</ul>
<p>What if each has knowledge of a working signaling system already help adding more players seem to</p>
</section>
<section id="evolution-2" class="level1 page-columns page-full">
<h1>4 Evolution</h1>
<p>The three essential factors in Darwin’s account are</p>
<ol type="1">
<li>natural variation - mutation, gene flow via migration, genetic drift and recombination in sexual reproduction.</li>
<li>differential reproduction - <span class="citation" data-cites="Taylor1978ESS">(Taylor and Jonker 1978)</span> replicator dynamics</li>
<li>inheritance</li>
</ol>
<div class="no-row-height column-margin column-container"></div><section id="ess" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="ess">ESS</h3>
<p>In <span class="citation" data-cites="Smith1973LogicAnimalConflict">(Smith and Price 1973)</span> the authors introduced a novel solution concept - the ESS or Evolutionary stable strategy, improving on the notion of the Nash equilibrium by replacing agent level play dominance with statistical dominance of strategies.</p>
<div class="no-row-height column-margin column-container"></div></section>
<div id="ex-ess-hak-dove">
<section id="ess-motivating-example-hawk-dove-game" class="level2">
<h2 class="anchored" data-anchor-id="ess-motivating-example-hawk-dove-game">ESS Motivating Example Hawk Dove Game</h2>
<table class="caption-top table">
<caption>Hawk Dove Game</caption>
<thead>
<tr class="header">
<th></th>
<th>Hawk</th>
<th>Dove</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Hawk</strong></td>
<td>0</td>
<td>3</td>
</tr>
<tr class="even">
<td><strong>Dove</strong></td>
<td>1</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>This explains why hyper-aggressive Hawks type who can defeat more peaceful Doves type do not wipe them out. Hawks have an advantage if there are mostly doves. Once they are in a majority Hawk-Hawk interaction lead to serious injury and death. ESS is a frequency dependent equilibrium.</p>
</section>
</div>
<section id="ess-criteria" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ess-criteria">ESS Criteria</h2>
<p>In <span class="citation" data-cites="Smith1973LogicAnimalConflict">(Smith and Price 1973)</span> the authors introduce the following criteria in terms of payoffs for a strategy to be an ESS.</p>
<div class="no-row-height column-margin column-container"></div><p>A strategy, S, is evolutionary stable if for any other strategy, M, either:</p>
<ol type="1">
<li>Fitness (S played against S) &gt; Fitness (M played against S) or:</li>
<li>Fitnesses are equal against S, but Fitness(S against M) &gt; Fitness(M against M)</li>
</ol>
<p>Where under the first mutants are expelled quickly and under 2 less so.</p>
</section>
<section id="differential-reproduction---replicator-dynamics" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="differential-reproduction---replicator-dynamics">Differential Reproduction - Replicator dynamics</h2>
<p>Replicator dynamics is driven by Darwinian ﬁtness—expected number of progeny.</p>
<p>so <img src="https://latex.codecogs.com/png.latex?fitness%20%5Csim%20%5Cmathbb%20E(%7Cprogeny%7C)"> where on average you get what you expect. For strategy <img src="https://latex.codecogs.com/png.latex?S"> the population</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax_%7Bt%7D(S)%20=%20%5Cfrac%7Bx_%7Bt-1%7D(S)%20%5Ctimes%20fitness(S)%7D%7Bmean%5C_fitness%7D%0A"></p>
<p>and for continuous time<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;I think that we should consider a lewis hirarcy of games based on lewis games with<br>
a. logic<br>
b. conjuctive signals</p></div></div><p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bdx%7D%7Bdt%7D%20=%20x%20(fitness(S)%20-%20%7Bmean%5C_fitness%7D)%0A"></p>
<p>The main outcomes of this chapter are that for a two state/signal/action Lewis game</p>
<ol type="1">
<li>Multiple isomorphic signaling systems we could call languages will arise leading to a population of agents split equaly</li>
<li>In a population of agents whose fitness depends on use of the language the stable state is one in which just one of the language is used by the entire population. Other equilibria are unstable which leads to spontaneous breaking of the symmetry and a gradual drift of the population towards one of the stable states.</li>
</ol>
<p>Notes:</p>
<ol type="1">
<li>The analysis fails to consider spatial dynamics. It seems that a in a local pockets of language 1, agents with language 2 might have lower fitness.</li>
<li>There is a cost of switching and agents typicaly are not born with a fully formed language ability they need to learn a language and that has costs and requires access to signalers with the said language.</li>
<li>In reality <em>Pidgeons</em> and <em>Creoles</em> are often formed. This is a language that is a mix of two or more languages. This is a partial pooling equilibrium. The existence of creoles suggest that the population dynamics of language formation is more complex than the simple Lewis game.</li>
</ol>
</section>
<section id="langauge-intergration-problem" class="level2">
<h2 class="anchored" data-anchor-id="langauge-intergration-problem">Langauge intergration problem:</h2>
<section id="problem-definition" class="level3">
<h3 class="anchored" data-anchor-id="problem-definition"><strong>Problem Definition</strong></h3>
<p>Given a set of signaling systems <img src="https://latex.codecogs.com/png.latex?%7B%5Cpi_1,%5Cpi_2,%5Cldots,%5Cpi_%F0%9D%91%9B%7D">, find a permutation <img src="https://latex.codecogs.com/png.latex?%5Cpi_m"> such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi_m%20=%5Carg%20%5Cmin_%5Cpi%20%5Csum_%7B%F0%9D%91%96=1%7D%5E%F0%9D%91%9B%20d(%5Cpi,%5Cpi_i)%0A"> where d is the Cayley distance between permutations, i.e.&nbsp;the minimum number of transpositions required to transform one permutation into another.</p>
</section>
<section id="solution-approach" class="level3">
<h3 class="anchored" data-anchor-id="solution-approach"><strong>Solution Approach</strong></h3>
<p>Finding the exact median permutation is a computationally challenging task because the problem is NP-hard. However, there are heuristic and approximation methods to approach this problem. One common approach is to use a greedy algorithm that iteratively improves a candidate solution based on the distances to all permutations in the set.</p>
<p>Here is a simple heuristic approach to estimate a solution:</p>
<ol type="1">
<li><p><strong>Start with an Initial Guess</strong>: You can start with any permutation, such as 𝜋1π1​ or any permutation randomly chosen from the set.</p></li>
<li><p><strong>Iterative Improvement</strong>:</p>
<ul>
<li>For each element in the permutation, consider swapping it with every other element.</li>
<li>Calculate the new total distance after each possible swap.</li>
<li>If a swap results in a lower total distance, make the swap permanent.</li>
<li>Repeat this process until no improving swaps are found.</li>
</ul></li>
</ol>
<p>This approach doesn’t guarantee an optimal solution but can often produce a good approximation in a reasonable time frame.</p>
<p>Here’s a Python function that demonstrates this basic heuristic:</p>
<div id="76897fad" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cayley_distance(pi, sigma):</span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate the Cayley distance between two permutations."""</span></span>
<span id="cb4-5">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-6">    temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(pi)</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pi)):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> temp[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> sigma[i]:</span>
<span id="cb4-9">            swap_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp.index(sigma[i])</span>
<span id="cb4-10">            temp[i], temp[swap_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp[swap_index], temp[i]</span>
<span id="cb4-11">            count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> count</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> median_permutation(permutations):</span>
<span id="cb4-15">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(permutations[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming all permutations are of the same length</span></span>
<span id="cb4-16">    current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(permutations[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start with the first permutation as an initial guess</span></span>
<span id="cb4-17">    improving <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-18"></span>
<span id="cb4-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> improving:</span>
<span id="cb4-20">        improving <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-21">        best_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(cayley_distance(current, p) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> permutations)</span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itertools.combinations(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb4-23">            current[i], current[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current[j], current[i]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap elements</span></span>
<span id="cb4-24">            new_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(cayley_distance(current, p) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> permutations)</span>
<span id="cb4-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> new_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_distance:</span>
<span id="cb4-26">                best_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_distance</span>
<span id="cb4-27">                improving <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-29">                current[i], current[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current[j], current[i]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap back if no improvement</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> current</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb4-34">permutations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-35">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb4-36">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb4-37">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb4-38">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-39">]</span>
<span id="cb4-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median permutation:"</span>, median_permutation(permutations))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Median permutation: [1, 2, 3, 4]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_943220/3341496467.py:21: DeprecationWarning:

Calling np.sum(generator) is deprecated, and in the future will give a different result. Use np.sum(np.fromiter(generator)) or the python sum builtin instead.

/tmp/ipykernel_943220/3341496467.py:24: DeprecationWarning:

Calling np.sum(generator) is deprecated, and in the future will give a different result. Use np.sum(np.fromiter(generator)) or the python sum builtin instead.
</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="learning" class="level1">
<h1>Learning</h1>
<p>Two type of learning are considered.</p>
<ol type="1">
<li><p>Evolution learning using knowledge hard-coded into the genome of the agents. Learning happens though replicator dynamics incorporating randomization followed by natural selection. Also other biologically inspired ideas like mutation and use of a fitness function can come into play.</p>
<p>The down side of Evolution is that is takes many generation for many structures to emerge. (Richard Dawkings states that the evolution of different morphology of the eye are quick taking only 80 generation to evolve in a simulation from the most rudimentary light sensitive cell and elsewhere suggest that 8 generations are needed to see changes in this type of framework.</p></li>
<li><p>RL refers to the type of learning from experience by an organism during its lifetime.</p></li>
<li><p>Noam Chomsky and others Linguistics hypothesize that Language learning faculties are to a large extent passed through evolution and for this reason individuals can learn languages based on a rather minimal amount of stimulus. This has also be a reason why many in their field abandoned their work on solving linguistics and went on to research the mysteries of the human brain. I feel that to a large extent this book demonstrates that scientifically the notion of the brain requiring a specialized mechanism to evolve/learn complex language is an unnecessary assumption. (Of course it is possible that the brain has co-evolved together with language and that such mechanism do exist.)</p>
<ol type="1">
<li><p>in one sense the book starts with very simple systems of communication with just a lexicon.</p></li>
<li><p>The formation of more complex systems with syntax are treated in chapter 12 but these results here seem to satisfy a mathematician or a philosopher etc, without delving into different linguistic niceties that might satisfy a linguist.</p></li>
<li><p>However the Lewis game needs only a small tweak (the receiver getting multiple partial signals) to allow a signaling system with a grammar to emmerge via Roth-Erev RL. We can also make a categorical statement that this type of RL is a general purpose learning mechanism not a language specific one.</p></li>
</ol></li>
</ol>
<p>In agents we have learning that is based on evolution and requires subsequent generations of agents becoming fitter.</p>
<p>Here are two conceptual ideas to base RL on</p>
<dl>
<dt>Law of effect</dt>
<dd>
<p>Of several responses made to the same situation, those which are accompanied or closely followed by satisfaction to the animal will, other things being equal, be more ﬁrmly connected with the situation, so that, when it recurs, they will be more likely to recur. — Edward Thorndike, Animal Intelligence, 1911</p>
</dd>
<dt>Law of practice</dt>
<dd>
<p>Learning slows down as reinforcements accrue</p>
</dd>
</dl>
<section id="rotherev-rl-alg" class="level2">
<h2 class="anchored" data-anchor-id="rotherev-rl-alg">Roth–Erev RL alg:</h2>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
</ol>
<p>```python RE-RL from mesa import Agent, Model from mesa.time import StagedActivation import random import numpy as np</p>
<p>class LearningRule: def <strong>init</strong>(self, options, learning_rate=0.1): self.weights = {option: 1.0 for option in options} # Start with equal weights for all options self.learning_rate = learning_rate</p>
<pre><code>def update_weights(self, option, reward):
    # Update the weight of the chosen option by adding the reward scaled by the learning rate
    old_weight = self.weights[option]
    self.weights[option] += self.learning_rate * reward
    print(f"Updated weight for option {option}: {old_weight} -&gt; {self.weights[option]}")

def choose_option(self):
    # Select an option based on the weighted probabilities
    total = sum(self.weights.values())
    probabilities = [self.weights[opt] / total for opt in self.weights]
    return np.random.choice(list(self.weights.keys()), p=probabilities)</code></pre>
<p>class LewisAgent(Agent): def <strong>init</strong>(self, unique_id, model, learning_options): super().__init__(unique_id, model) self.message = None self.action = None self.reward = 0 self.learning_rule = LearningRule(learning_options, learning_rate=0.1) # Initialize learning with given options</p>
<pre><code>def set_reward(self):
    print(f"Agent {self.unique_id} received reward: {self.reward}")</code></pre>
<p>class Sender(LewisAgent): def send(self): state = self.model.get_state() self.message = self.learning_rule.choose_option() # Send a signal based on the learned weights print(f”Sender {self.unique_id} sends signal for state {state}: {self.message}“)</p>
<pre><code>def update_learning(self):
    self.learning_rule.update_weights(self.model.current_state, self.reward)  # Update weights based on the state and received reward</code></pre>
<p>class Receiver(LewisAgent): def receive(self): self.received_signals = [sender.message for sender in self.model.senders] if self.received_signals: self.action = self.learning_rule.choose_option() # Choose an action based on received signals and learned weights</p>
<pre><code>def calc_reward(self):
    correct_action = self.model.states_actions[self.model.current_state]
    self.reward = 1 if self.action == correct_action else 0
    print(f"Receiver {self.unique_id} calculated reward: {self.reward} for action {self.action}")

def update_learning(self):
    for signal in self.received_signals:
        self.learning_rule.update_weights(signal, self.reward)  # Update weights based on signals and rewards</code></pre>
<p>class SignalingGame(Model): def <strong>init</strong>(self, senders_count=1, receivers_count=1, state_count=3): super().__init__() self.k = k self.current_state = None</p>
<pre><code>    # Initialize the states, signals, and actions mapping
    self.states_signals = list(range(k))  # States are simply numbers
    self.signals_actions = list(chr(65 + i) for i in range(k))  # Signals are characters

    self.states_actions = {i: i for i in range(k)}  # Mapping states to correct actions

    self.senders = [Sender(i, self, self.signals_actions) for i in range(senders_count)]
    self.receivers = [Receiver(i + senders_count, self, self.signals_actions) for i in range(receivers_count)]
    
    self.schedule = StagedActivation(self, stage_list=['send', 'receive', 'calc_reward', 'set_reward', 'update_learning'])

def get_state(self):
    return random.choice(self.states_signals)

def step(self):
  
    self.current_state = self.get_state()
    print(f"New state of the world: {self.current_state}")
    self.schedule.step()</code></pre>
</section>
</section>
<section id="running-the-model" class="level1">
<h1>Running the model</h1>
<p>model = SignalingGame(senders_count=1, receivers_count=1, state_count=3) for i in range(10): print(f”— Step {i+1} —“) model.step()</p>
<pre><code>
## Bush–Mosteller RL

1.  If an act is chosen and a reward is gotten the probability is incremented by adding some fraction of the distance between the original probability and probability one

    $$
    pr_{new}(A)=(1-\alpha)pr_{old}(A) + a(1)
    $$

2.  Alternative action probabilities are decremented so that everything adds to one

## Goldilocks RL

We consider if there is a Goldilocks point in the RL exploration exploitation dilemma which has a good balance of the two.

-   If we stop learning too fast we are **too cold**

-   If we exploring too much we are **too hot**

-   At the limit is the Goldilocks RL point

**Q: is there Goldilocks RL Alg?**

-   Roth—Erev, Thompson sampling &amp; UCB don't get stuck

-   Epsilon greedy is too hot

-   Bush–Mosteller is too cold

## RL variants:

-   BM variants like dynamically adjusting aspiration levels

-   exponential response rule. The basic idea is to make probabilities proportional to the exponential of past reinforcements. [@Blume2002]

-   best response dynamics, aka Cournot dynamics

## Beyond the book:

-   \^\[citation needed \]\^ investigating RL for this task also suggest that Roth-Erev with forgetting leads to more efficient learning.
-   \^\[citation needed\]\^ Another paper suggest that a learning with a certain prior can be better than Roth-Erev learning.

Adding Learning

::: {#2b2f91d3 .cell execution_count=4}
``` {.python .cell-code}
from mesa import Agent, Model
from mesa.time import StagedActivation
import random

class LewisAgent(Agent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.message = None
        self.action= None

    def send(self):
      pass
    
    def recive(self):
      pass

    def calc_reward(self):
      pass
    
    def set_reward(self):
        self.reward = model.reward
        # Placeholder for learning logic
        print(f"Agent {self.unique_id} received reward: {self.reward}")
 
class Sender(LewisAgent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)

    def send(self):
        state = self.model.get_state()
        # Learning to map states to signals
        self.message = self.model.states_signals[state]
        print(f"Sender {self.unique_id} sends signal for state {state}: {self.message}")

class Receiver(LewisAgent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)

    def recive(self):
      self.received_signals=[]
      for sender in self.model.senders:
        self.received_signals.append(sender.message)
            # Learning to map signals to actions
      if len(self.received_signals)==1:
        self.action = self.model.signals_actions[self.received_signals[0]]
      else:
        self.action = self.model.signals_actions[self.received_signals[0]]
      

    def calc_reward(self):
      action = self.model.signals_actions[self.received_signals[0]]
      correct_action = self.model.states_actions[self.model.current_state]
      reward = 1 if action == correct_action else 0
      model.reward = reward


class SignalingGame(Model):
    def __init__(self, senders_count=1, recievers_count=1, state_count=3):
        
        super().__init__()
        self.senders_count=senders_count
        self.recievers_count=recievers_count
        self.num_agents = self.recievers_count+self.senders_count

        # e.g., 0 -&gt; A, 1 -&gt; B, ...
        self.states_signals = {i: chr(65 + i) for i in range(k)} 

        # e.g., A -&gt; 0, B -&gt; 1, ...
        self.signals_actions = {chr(65 + i): i for i in range(k)}
        
        # state 0 needs action 0, state 1 needs action 1, ...
        self.states_actions = {i: i for i in range(k)}  
        
        self.current_state = None

        # Create agents
        self.senders = []
        self.receivers=[]
        self.my_agents=[]
        self.uid=0
        for i in range(self.senders_count):
            sender = Sender(self.uid, self)
            self.senders.append(sender)
            self.my_agents.append(sender)
            self.uid +=1
        for j in range (self.recievers_count):
            reciever = Receiver(self.uid, self)
            self.receivers.append(reciever)
            self.my_agents.append(reciever)
            self.uid +=1

        self.schedule = StagedActivation(
          model=self,
          agents=self.my_agents, 
          stage_list = ['send','recive','calc_reward','set_reward']
        )
    
    def get_state(self):
        return self.current_state

    def step(self):
        self.current_state = random.choice(list(self.states_signals.keys()))
        print(f"New state of the world: {self.current_state}")
        self.schedule.step()

# Running the model
k = 3  # Number of states, signals, and actions
steps = 10
model = SignalingGame(senders_count=2,recievers_count=1,state_count=k)
for i in range(steps):
    print(f"--- Step {i+1} ---")
    model.step()</code></pre>
<div class="cell-output cell-output-stdout">
<pre><code>--- Step 1 ---
New state of the world: 1
Sender 0 sends signal for state 1: B
Sender 1 sends signal for state 1: B
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 2 ---
New state of the world: 2
Sender 0 sends signal for state 2: C
Sender 1 sends signal for state 2: C
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 3 ---
New state of the world: 2
Sender 0 sends signal for state 2: C
Sender 1 sends signal for state 2: C
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 4 ---
New state of the world: 2
Sender 0 sends signal for state 2: C
Sender 1 sends signal for state 2: C
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 5 ---
New state of the world: 1
Sender 0 sends signal for state 1: B
Sender 1 sends signal for state 1: B
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 6 ---
New state of the world: 2
Sender 0 sends signal for state 2: C
Sender 1 sends signal for state 2: C
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 7 ---
New state of the world: 2
Sender 0 sends signal for state 2: C
Sender 1 sends signal for state 2: C
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 8 ---
New state of the world: 2
Sender 0 sends signal for state 2: C
Sender 1 sends signal for state 2: C
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 9 ---
New state of the world: 0
Sender 0 sends signal for state 0: A
Sender 1 sends signal for state 0: A
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1
--- Step 10 ---
New state of the world: 1
Sender 0 sends signal for state 1: B
Sender 1 sends signal for state 1: B
Agent 0 received reward: 1
Agent 1 received reward: 1
Agent 2 received reward: 1</code></pre>
</div>
<p>:::</p>
</section>
<section id="networks-i-logic-and-information-processing" class="level1 page-columns page-full">
<h1>11. Networks I: Logic and Information Processing</h1>
<section id="logic" class="level2">
<h2 class="anchored" data-anchor-id="logic">Logic</h2>
</section>
<section id="information-processing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="information-processing">Information processing</h2>
<section id="inventing-the-code-game" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="inventing-the-code-game">Inventing the code Game</h3>
<p>The world has say four states {S1…S4}. In this extended Lewis game where an agent is a receiver of two messages, each with a partial specification the first is {s1||s2} or {s3||s4} and the second {s1||s3} or {s2||s4}. The agent needs to process the two messages it to get the full state specification and take the appropriate action in response for getting a reward !</p>
<p>The added problem here is that the messages one of two flags, and one of two other flags do not have an established system for the message so learning the content of the signals needs to evolve together with the inference.</p>
<p>The sender can be two agents or one agent with a complex message.</p>
<p>Jeffrey Barrett in Barrett 2007a, 2007b. showed that this can be learned with Roth Erev RL</p>
<p>this is more interesting if there are errors:</p>
<ul>
<li><p>is a 10% chance of senders making mistakes with only 3% errors by the receiver?! Skyrms explains this due to the inference being like a taking a vote in a Condorcet signaling system.</p></li>
<li><p>receiver errors are considered in <span class="citation" data-cites="Nowak1999">(Nowak and Krakauer 1999)</span> where the authors claim they lead to syntax formation.</p></li>
</ul>
<div class="no-row-height column-margin column-container"></div></section>
</section>
</section>
<section id="complex-signals-and-compositionality" class="level1 page-columns page-full">
<h1>12. Complex Signals and Compositionality</h1>
<dl>
<dt>CCSS</dt>
<dd>
<p>complex composeable signaling systems</p>
</dd>
<dd>

</dd>
</dl>
<ul>
<li><p>The use of complex signals is not unique to humans.</p></li>
<li><p>In <span class="citation" data-cites="Nowak1999">(Nowak and Krakauer 1999)</span> the authors make a case that complex signals can increase the ﬁdelity of information transmission, by preventing simple signals getting crowded together as the space of potential signals gets ﬁlled up. Also some complex signalsing systems should be simpler to learn. (<em>can we specify a maximaly learnable family?</em>) and process inforamtion</p></li>
<li><p>considered CCSS as conffering greater Darwinian fitness in contexts where <em>rich information processing is important.</em></p>
<ul>
<li>Q: <strong>Is there a metric for measuring the advantage and or the importance of such information processing needs?</strong></li>
</ul></li>
<li><p>In <span class="citation" data-cites="batali1998">(Batali 1998)</span> the author investigates the emergence of complex signals in populations of neural nets.</p></li>
<li><p>in <span class="citation" data-cites="Kirby2000">(Kirby 2002)</span> the author, extends the model in a small population of interacting artiﬁcial agents.</p></li>
<li><p>These two papers assume Structured meanings like &lt;John, loves, Mary&gt;. But I am more interested in the ability of evolving arbitrary structures like a sketch map of resources, a distribution of prices, a small bitmap etc.</p></li>
<li><p>Skryms takes a similar reductionist POV: finding how to evolve a complex signaling system with minimal departure from the Lewis signaling game and other models already covered….</p></li>
<li><p>It is suggested that the “Inventing the code Game” is a sufficient framework creating basic composeable messages. If the receiver considers a sequence of two partial signals as conjunction the and can integrated into one full message!</p>
<ul>
<li><p>Red &gt; Top</p></li>
<li><p>Green&gt; Bottom</p></li>
<li><p>Yellow&gt; Left</p></li>
<li><p>Blue &gt; Right</p></li>
</ul>
<p>to signal the state of &lt;bottom, left&gt; a sender can send &lt;green,yellow&gt; or &lt;yellow,green&gt; and the receiver can compose them.</p></li>
<li><p>But if it is also possible to evolve and learn order for signals a richer form of composeability become possible. Subject–predicate or operator–sentence.</p></li>
<li><p>Sensitivity to temporal order is something many organisms have already developed in responding to perceptual signals.</p></li>
<li><p>More generally, we can say that temporal pattern recognition is a fundamental mechanism for anticipating the future.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="ref-Nowak1999" class="csl-entry">
Nowak, Martin A., and David C. Krakauer. 1999. <span>“The Evolution of Language.”</span> <em>Proceedings of the National Academy of Sciences</em> 96 (14): 8028–33. <a href="https://doi.org/10.1073/pnas.96.14.8028">https://doi.org/10.1073/pnas.96.14.8028</a>.
</div><div id="ref-Kirby2000" class="csl-entry">
Kirby, Simon. 2002. <span>“<span>Natural Language From Artificial Life</span>.”</span> <em>Artificial Life</em> 8 (2): 185–215. <a href="https://doi.org/10.1162/106454602320184248">https://doi.org/10.1162/106454602320184248</a>.
</div></div><p>Skryms points out that temporal order is another mechanism that evolves and that they come together.</p>
<p>Unfortunately Skryms seems to get sidetracked once he point out about order and does not explain how order sensitivity eveloves in “Making the code game”.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StagedActivation</span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LewisAgent(Agent):</span>
<span id="cb14-6">  </span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb14-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb14-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb14-14">    </span>
<span id="cb14-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> recive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb14-17"></span>
<span id="cb14-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb14-20">    </span>
<span id="cb14-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.reward</span>
<span id="cb14-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Placeholder for learning logic</span></span>
<span id="cb14-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-25"> </span>
<span id="cb14-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sender(LewisAgent):</span>
<span id="cb14-27">  </span>
<span id="cb14-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb14-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb14-30"></span>
<span id="cb14-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-32">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.get_state()</span>
<span id="cb14-33">        </span>
<span id="cb14-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning to map states to signals</span></span>
<span id="cb14-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(state) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb14-36">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.states_signals[state]</span>
<span id="cb14-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb14-38">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb14-39">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb14-40">            message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {model.states_signals[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message.pop()]}</span>
<span id="cb14-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message.union(message)</span>
<span id="cb14-42">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal for state </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>message<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-43"></span>
<span id="cb14-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Receiver(LewisAgent):</span>
<span id="cb14-45">  </span>
<span id="cb14-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb14-47">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb14-48"></span>
<span id="cb14-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> recive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-50">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb14-51">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb14-52">      </span>
<span id="cb14-53">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sender <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.senders:</span>
<span id="cb14-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals.append(sender.message)</span>
<span id="cb14-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning to map signals to actions</span></span>
<span id="cb14-56">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>received_signals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-58">        </span>
<span id="cb14-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal_set <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals:</span>
<span id="cb14-60">          actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb14-61">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(signal_set)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb14-62">            action  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {model.signals_actions[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message.pop()]}</span>
<span id="cb14-63">            actions  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> actions.union(action)</span>
<span id="cb14-64">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action.intersection(actions)</span>
<span id="cb14-65">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Reciever </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> action : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-66"></span>
<span id="cb14-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-68">      action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action</span>
<span id="cb14-69">      correct_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.states_actions[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.current_state]</span>
<span id="cb14-70">      reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> correct_action <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-71">      model.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reward</span>
<span id="cb14-72">      </span>
<span id="cb14-73"></span>
<span id="cb14-74"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SignalingGame(Model):</span>
<span id="cb14-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, recievers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb14-76">        </span>
<span id="cb14-77">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb14-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>senders_count</span>
<span id="cb14-79">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.recievers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>recievers_count</span>
<span id="cb14-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self.num_agents = self.recievers_count+self.senders_count</span></span>
<span id="cb14-81"></span>
<span id="cb14-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb14-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb14-84">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(state_count)]</span>
<span id="cb14-85"></span>
<span id="cb14-86">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-87"></span>
<span id="cb14-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create agents</span></span>
<span id="cb14-89">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-90">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb14-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.my_agents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb14-92">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-93">        </span>
<span id="cb14-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders_count):</span>
<span id="cb14-95">            sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sender(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb14-96">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders.append(sender)</span>
<span id="cb14-97">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.my_agents.append(sender)</span>
<span id="cb14-98">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.recievers_count):</span>
<span id="cb14-100">            reciever <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Receiver(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb14-101">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers.append(reciever)</span>
<span id="cb14-102">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.my_agents.append(reciever)</span>
<span id="cb14-103">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-104"></span>
<span id="cb14-105">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StagedActivation(</span>
<span id="cb14-106">          model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb14-107">          agents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.my_agents, </span>
<span id="cb14-108">          stage_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'send'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recive'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calc_reward'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set_reward'</span>]</span>
<span id="cb14-109">        )</span>
<span id="cb14-110">    </span>
<span id="cb14-111">        </span>
<span id="cb14-112"></span>
<span id="cb14-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-114">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals.keys()))</span>
<span id="cb14-115">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals.keys()))}</span>
<span id="cb14-116">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"New state of the world: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-117">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.step()</span>
<span id="cb14-118"></span>
<span id="cb14-119">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-120">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb14-121">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state</span>
<span id="cb14-122">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb14-123">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state, random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals.keys()))}</span>
<span id="cb14-124"></span>
<span id="cb14-125"></span>
<span id="cb14-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running the model</span></span>
<span id="cb14-127">state_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of states, signals, and actions</span></span>
<span id="cb14-128">steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb14-129">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SignalingGame(senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,recievers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,state_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state_count)</span>
<span id="cb14-130"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(steps):</span>
<span id="cb14-131">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb14-132">    model.step()</span></code></pre></div>
<section id="some-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="some-thoughts">Some thoughts</h2>
<ol type="1">
<li><p>learning in the original Lewis language games is exponential in the size of the lexicon. It would seem that some complex signals systems should have orders of magnitude advantage in learning rates compared to the original variants. Lets consider a Lewis signaling system with 27 signals.<br>
The learning is <img src="https://latex.codecogs.com/png.latex?O(e%5E%7B27%7D)%5Cpropto5%5Ctimes10%5E%7B12%7D"></p></li>
<li><p>Under a conjunctive structure with three messages a lexicon of 9 messages would be required.<br>
The learning is <img src="https://latex.codecogs.com/png.latex?O(e%5E%7B9%7D)%5Cpropto%208.1%5Ctimes10%5E%7B3%7D"></p></li>
<li><p>Under Say we have a VSO complex signal with 3 signals per a positional POS category. This leads to 27 signal lexicon under the original lexicon. Using the complex system only 3 three signals need to be learned.<br>
So that learning is <img src="https://latex.codecogs.com/png.latex?O(e%5E%7B3%7D)%20%5Cpropto%2020"></p>
<p>If we factor learning time as part of the costs of signaling we should expect complex signaling systems to emerge quickly. Also if we consider learning as part of In this case partial pooling states are acceptable and even desirable each signal now has three meaning depending on its position.</p></li>
<li><p>In NLP we never see such a perfect utilization of a SS where all synthetically messages are semantically meaningful. On the other hand NLP allow nesting so that sequence like V(VSO)(VSO) corresponding to 3<sup>8</sup> messages and adding a sub-category modifier prefix (MVMSMO) leads to (3^6) signals 729 signals without</p></li>
<li><p>For a simulation - some predators can be introduced into the environment nearby agents will signal it presence. Receivers who take that appropriate action will survive. Those that do not may die. Agent have longevity and must learn the language. When agents die they are replaced by infants without a uniform signaling weights.</p></li>
<li><p>Another point is that seems obvious is that if we learn/evolve the lexicon with just one one new word at a time the task becomes trivial. We just need to learn one new state to signal and one new signal to action mapping. But learning just one is a one to one matching. If we have some sense of the salience of the signals we can just order them in that order and we keep increasing fitness…. till we reach some marginal rate of fitness where new signals do almost nothing for our survival.</p></li>
<li><p>If we can evolve a complex signaling system we can move to next steps like optimizing our lexicon and grammar for:</p>
<ol type="1">
<li>minimizing communications errors, (error detection and correction)</li>
<li>maximizing information transmission. (compression)</li>
<li>minimizing cost of acquisition. (acquisition)</li>
<li>the trade off between grammatic generalization and easily learnability v.s. making the system harder to learn but more efficient for communication.</li>
<li>how do we handle inference (for logic)</li>
<li>how do we take advantage of predictability for partial messages</li>
<li>what about a convention for grammar - useful for agents that need to exchange data in different formats efficently.</li>
<li>Costs of morphotactics - can we do all this in practive with human sound systems. Can we figure our metrics for human languages.</li>
<li>Given a (human) language tree can we posit a most pasimonius path for its evolution.</li>
</ol></li>
</ol>
</section>
</section>
<section id="signals-bibliography---some-annotations" class="level1 page-columns page-full">
<h1>Signals Bibliography - some annotations</h1>
<p>The following bibliographical entries are on General and Evolutionary Game Theory:</p>
<ul>
<li><span class="citation" data-cites="vonneumann1947">(Neumann and Morgenstern 1947)</span> - The first book on game theory.</li>
<li><span class="citation" data-cites="Weibull1997">(Weibull 1997)</span> - A book on evolutionary game theory.</li>
<li><span class="citation" data-cites="hofbauer1998evolutionary">(Hofbauer and Sigmund 1998)</span> - Covers the mathematical theory of evolutionary games focusing on the lokta volterra model and the replicator dynamics.</li>
<li><span class="citation" data-cites="Samuelson1998Evolutionary">(Samuelson 1998)</span> - Covers on evolutionary game theory in extensive forms.</li>
<li><span class="citation" data-cites="Nowak2006Evolutionary">(Nowak 2006)</span> - A book on evolutionary dynamics.</li>
<li><strong>Aumann, R. (1987) “Subjectivity and Correlation in Randomized Strategies.” Journal of Mathematical Economics 1: 67–96.</strong></li>
<li><strong>Aumann, R. (1987) “Correlated Equilibrium as an Expression of Bayesian Rationality.” Econometrica 55: 1–18.</strong></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="ref-vonneumann1947" class="csl-entry">
Neumann, J. von, and O. Morgenstern. 1947. <em>Theory of Games and Economic Behavior</em>. Princeton University Press.
</div><div id="ref-Weibull1997" class="csl-entry">
Weibull, Jörgen W. 1997. <em>Evolutionary Game Theory</em>. The MIT Press.
</div><div id="ref-hofbauer1998evolutionary" class="csl-entry">
Hofbauer, J., and K. Sigmund. 1998. <em>Evolutionary Games and Population Dynamics</em>. Cambridge University Press. <a href="https://books.google.co.il/books?id=Xu-H0ClCHN8C">https://books.google.co.il/books?id=Xu-H0ClCHN8C</a>.
</div><div id="ref-Samuelson1998Evolutionary" class="csl-entry">
Samuelson, Larry. 1998. <em>Evolutionary Games and Equilibrium Selection</em>. MIT Press.
</div><div id="ref-Nowak2006Evolutionary" class="csl-entry">
Nowak, Martin A. 2006. <em>Evolutionary Dynamics: Exploring the Equations of Life</em>. Belknap Press of Harvard University Press.
</div></div><p>THe following are on Roth Erev RL:</p>
<ul>
<li>Bush, R. and F. Mosteller (1955) Stochastic Models of Learning. John Wiley &amp; Sons: New York.</li>
<li>Erev, I. and E. Haruvy (2005) “On the Potential Uses and Current Limitations of Data-Driven Learning Models.” Journal of Mathematical Psychology 49: 357–371.</li>
<li>Erev, I. and A. Roth (1998) “Predicting How People Play Games: Reinforcement Learning in Experimental Games with Unique Mixed-Strategy Equilibria.” American Economic Review 88: 848–881.</li>
<li>Roth, A. and I. Erev (1995) “Learning in Extensive Form Games: Experimental Data and Simple Dynamical Models in the Intermediate Term.” Games and Economic Behavior 8: 164–212.</li>
<li>Herrnstein, R. J. (1961) “Relative and Absolute Strength of Response as a Function of Frequency of Reinforcement.” Journal of Experimental Analysis of Behavior 4: 267–272.</li>
<li>Herrnstein, R. J. (1970) “On the Law of Effect.” Journal of the Experimental Analysis of Behavior 13: 243–266.</li>
</ul>
<p>In <span class="citation" data-cites="Skyrms2010signals">(Skyrms 2010)</span> the author discusses how a Lewis signaling games can be viewed as a mechanism in which a rudimentary signaling system can give rise to a simple language.</p>
<div class="no-row-height column-margin column-container"><div id="ref-Skyrms2010signals" class="csl-entry">
Skyrms, Brian. 2010. <span>“<span class="nocase">14512 Complex Signals and Compositionality</span>.”</span> In <em><span class="nocase">Signals: Evolution, Learning, and Information</span></em>. Oxford University Press. <a href="https://doi.org/10.1093/acprof:oso/9780199580828.003.0013">https://doi.org/10.1093/acprof:oso/9780199580828.003.0013</a>.
</div></div><p>The languages arising from Lewis signaling games are limited.</p>
<p>The chapter on complex signals in terms tend to give rise to a</p>
<p>The bibliography</p>
<ul>
<li><p>Aldous, D. (1985) “Exchangeability and Related Topics.” In L’E´cole d’e´te´ de probabilite´s de Saint-Flour, XIII–1983 1–198. Berlin: Springer.</p></li>
<li><p>Argiento, R., R. Pemantle, B. Skyrms, and S. Volkov (2009) “Learning to Signal: Analysis of a Micro-Level <strong>Reinforcement Model</strong>.” Stochastic Processes and their Applications 119: 373–390.</p></li>
<li><p><del>Aristotle Historia Animalium Book IX. Aristotle Physics Book II.</del></p></li>
<li><p>Asher, N., I. Sher and M. Williams (2001) “Game Theoretical Foundations for Gricean Constraints.” In Proceedings of the Thirteenth Amsterdam Colloquium. Amsterdam: IILC.</p></li>
<li><p>Bala, V. and S. Goya (2000) “A Noncooperative Model of Network Formation.” Econometrica 68: 1181–1231.</p></li>
<li><p><span class="citation" data-cites="Barrett2006Numerical">(Barrett 2006)</span> <del>Barrett, J. A. (2006) “Numerical Simulations of the Lewis Signaling Game: Learning Strategies, Pooling Equilibria, and the Evolution of Grammar.” Working Paper MBS06–09. University of California, Irvine.</del></p></li>
<li><p><span class="citation" data-cites="Barrett2009Evolution">(Barrett 2009)</span> <del>Barrett, J. A. (2007a) “The Evolution of Coding in Signaling Games.” Theory and Decision. DOI: 10.1007/s11238–007–9064–0.</del></p></li>
<li><p><span class="citation" data-cites="Barrett2007Dynamic">(Barrett 2007)</span> <del>Barrett, J. A. (2007b) “Dynamic Partitioning and the Conventionality of Kinds.” Philosophy of Science 74: 527–546.</del></p></li>
<li><p>Barrett, J. A. and K. Zollman (2007) “The Role of Forgetting in the Evolution and Learning of Language.” preprint.</p></li>
<li><p><span class="citation" data-cites="batali1998">Batali (1998)</span> <del>Batali, J. (1998) “Computational Simulations of the Evolution of Grammar.” In Approaches to the Evolution of Language: Social and Cognitive Bases, ed.&nbsp;J. R. Hurford et al.&nbsp;Cambridge: Cambridge University Press.</del></p></li>
<li><p>Beggs, A. (2005) “On the Convergence of <strong>Reinforcement Learning</strong>.” Journal of Economic Theory 122: 1–36.</p></li>
<li><p>Benaim, M. (1999) “Dynamics of Stochastic Approximation Algorithms.” In Seminaire de Probabilites 33. Berlin: Springer Verlag.</p></li>
<li><p>Benaim, M., S. J. Shreiber, and P. Tarres (2004) “Generalized Urn Models of Evolutionary Processes.” Annals of Applied Probability 14: 1455–1478.</p></li>
<li><p>Bereby-Meyer, Y. and I. Erev (1998) “On Learning How to be a Successful Loser: A Comparison of Alternative Abstractions of Learning Processes in the Loss Domain.” Journal of Mathematical Psychology 42: 266–286.</p></li>
<li><p>Berg, R. M. van den (2008) Proclus’ Commentary on the Cratylus in Context. Leiden: Brill.</p></li>
<li><p>Bergstrom, T. (2002) “Evolution of Social Behavior: Individual and Group Selection Models.” Journal of Economic Perspectives 16: 231–238.</p></li>
<li><p>Bergstrom, C. T. and M. Lachmann (1998) “Signaling Among Relatives III. Talk is Cheap.” Proceedings of the National Academy of Sciences USA 95: 5200–5105.</p></li>
<li><p>Berleman, J. E., J. Scott, T. Chumley, and J. R. Kirby (2008) “Predataxis Behavior in Myxococcus Xanthus.” Proceedings of the National Academy of Sciences USA 105: 17127–17132.</p></li>
<li><p>Berninghaus, S., K.-M. Ehrhart, M. Ott, and B. Vogt (2007) “Evolution of Networks–an Experimental Analysis.” Journal of Evolutionary Economics 17: 317–347.</p></li>
<li><p>Bickerton, D. (1990) Language and Species. Chicago: University of Chicago Press.</p></li>
<li><p>Bjornerstedt, J. and J. Weibull (1995) “Nash Equilibrium and Evolution by Imitation.” In K. Arrow et al.&nbsp;(eds.), 155–71, The Rational Foundations of Economic Behavior. New York: Macmillan.</p></li>
<li><p>Bloch, F. and M. Jackson (2007) “The Formation of Networks with Transfers among Players.” Journal of Economic Theory 133: 83–110.</p></li>
<li><p>Bloch, F. and B. Dutta (2009) “Communication Networks with Endogenous Link Strength.” Games and Economic Behavior 66: 39–56.</p></li>
<li><p>Blume, A. (2000) “Coordination and Learning with a Partial Language.” Journal of Economic Theory 95: 1–36.</p></li>
<li><p>Blume, A., D. DeJong, Y.-G. Kim, and G. B. Sprinkle (1998) “Experimental Evidence on the Evolution of the Meaning of Messages in Sender-Receiver Games.” American Economic Review 88: 1323–1340.</p></li>
<li><p>Blume, A., D. DeJong, Y.-G. Kim, and G. B. Sprinkle (2001) “Evolution of Communication with Partial Common Interest.” Games and Economic Behavior 37: 79–120.</p></li>
<li><p><span class="citation" data-cites="Blume2002">(Blume et al. 2002)</span> <del>Blume, A., D. DeJong, G. Neumann, N. E. Savin (2002) “Learning and Communication in Sender-Receiver Games: An Econometric Investigation.” Journal of Applied Econometrics 17: 225–247.</del></p></li>
<li><p>Borgers, T. and R. Sarin (1997) “<strong>Learning through Reinforcement and the Replicator Dynamics</strong>.” Journal of Economic Theory 74: 235–265.</p></li>
<li><p>Borgers, T. and R. Sarin (2000) “Naive Reinforcement Learning with Endogenous Aspirations.” International Economic Review 41: 921–950.</p></li>
<li><p>Brandman, O. and T. Meyer (2008) “Feedback Loops Shape Cellular Signals in Space and Time.” Science 322: 390–395. Brentano, F. (1874) Psychology from an Empirical Standpoint. London: Routledge.</p></li>
<li><p>Brown, G. W. (1951) “Iterative Solutions of Games by Fictitious Play.” In Activity Analysis of Production and Allocation, ed.&nbsp;T. C. Koopmans. New York: Wiley.</p></li>
<li><p>Bshary, R., A. Hohner, K. Ait-el-Djoudi, and H. Fricke (2006) “Interspecific Communicative and Coordinated Hunting between Groupers and Giant Moray Eels in the Red Sea.” PLoS Biology 4:2393–2398 4:e431, DOI:10:1371/journal.pbio.0040431.</p></li>
<li><p>Callander, S. and C. R. Plott (2005) “Principles of Network Development and Evolution: An Experimental Study.” Journal of Public Economics 89: 1469–1495.</p></li>
<li><p>Camerer, C. and T-H. Ho (1999) “Experience Weighted Attraction Learning in Normal Form Games.” Econometrica 67: 827–874.</p></li>
<li><p>Campbell, G. (2003) Lucretius on Creation and Evolution. Oxford: Oxford University Press.</p></li>
<li><p>Charrier, I. and C. B. Sturdy (2005) “Call-Based Species Recognition in the Black-Capped Chickadees.” Behavioural Processes 70: 271–281.</p></li>
<li><p>Cheney, D. and R. Seyfarth (1990) How Monkeys See the World: Inside the Mind of Another Species. Chicago: University of Chicago Press.</p></li>
<li><p>Cross, J. G. (1973) “A Stochastic Learning Model of Economic Behavior.” Quarterly Journal of Economics 87: 239–266.</p></li>
<li><p>Crawford, V. and J. Sobel (1982) “Strategic Information Transmission.” Econometrica 50: 1431–1451.</p></li>
<li><p>Cubitt, R. and R. Sugden (2003) “Common Knowledge, Salience and Convention: A Philosophical Reconstruction of David Lewis’ Game Theory.” Economics and Philosophy 19:175–210.</p></li>
<li><p>Donaldson, M. C., M. Lachmann, and C. T. Bergstrom (2007) “The Evolution of Functionally Referential Meaning in a Structured World.” Journal of Theoretical Biology 246: 225–233.</p></li>
<li><p>Dretske, F. (1981) Knowledge and the Flow of Information. Cambridge: MIT Press.</p></li>
<li><p>Dugatkin, L. A. (1997) Cooperation Among Animals: An Evolutionary Perspective. Oxford: Oxford University Press.</p></li>
<li><p>Dyer, F. C. and T. D. Seeley (1991) “Dance Dialects and Foraging Range in three Asian Honey Bee Species.” Behavioral Ecology and Sociobiology 28: 227–233.</p></li>
<li><p>Edwards, W. (1961) “Probability Learning in 1000 Trials.” Journal of Experimental Psychology 62: 385–394.</p></li>
<li><p>Estes, W. K. (1950) “Toward a Statistical Theory of Learning.” Psychological Review 57: 94–107.</p></li>
<li><p>Evans, C. S., C. L. Evans and P. Marler (1994) “On the Meaning of Alarm Calls: Functional Reference in an Avian Vocal System.” Animal Behavior 73: 23–38.</p></li>
<li><p>Falk, A. and M. Kosfeld (2003) “It’s All About Connections: Evidence on Network Formation.” IEW Working Paper 146. University of Zurich.</p></li>
<li><p>Feltovich, N. (2000) “Reinforcement-Based vs.&nbsp;Belief-Based Learning Models in Experimental Asymmetric-Information Games.” Econometrica 68: 605–641.</p></li>
<li><p>Flache, A. and M. Macy (2002) “Stochastic Collusion and the Power Law of Learning.” Journal of Conflict Resolution 46: 629–653.</p></li>
<li><p>Floridi, L. (1997) “Skepticism, Animal Rationality, and the Fortune of Chrysippus’ Dog.” Archiv fu¨r Geschichte der Philosophie 79: 27–57.</p></li>
<li><p>Frede, D. and B. Inwood (2005) Language and Learning: Philosophy of Language in the Hellenistic Age. Cambridge: Cambridge University Press. Fudenberg,</p></li>
<li><p>D. and D. Levine (1998) A Theory of Learning in Games. Cambridge, MA: MIT Press.</p></li>
<li><p>Galeotti, A. and S. Goyal (2008) “The Law of the Few.” Working paper, University of Essex.</p></li>
<li><p>Galeotti, A., S. Goyal, and J. Kamphorst (2006) “Network Formation with Heterogeneous Players.” Games and Economic Behavior 54: 353–372.</p></li>
<li><p>Gazda, S., R. C. Connor, R. K. Edgar, and F. Cox (2005) “A Division of Labour with Role Specialization in Group-hunting Bottlenose Dolphins (Tursiops truncatus) off Cedar Key, Florida.” Proceedings of the Royal Society B 272: 135–140.</p></li>
<li><p>Gentner, T. Q., K. M. Fenn, D. Margoliash, and H. C. Nusbaum (2006) “Recursive Syntactic Pattern Learning by Songbirds.” Nature 440: 1204–1207.</p></li>
<li><p>Gettier, E. (1963) “Is Justified True Belief Knowledge?” Analysis 23:121–123.</p></li>
<li><p>Godfrey-Smith, P. (1989) “Misinformation.” Canadian Journal of Philosophy 19: 522–550.</p></li>
<li><p>Godfrey-Smith, P. (2000a) “On the Theoretical Role of Genetic Coding.” Philosophy of Science 67: 26–44.</p></li>
<li><p>Godfrey-Smith, P. (2000b) “Information, Arbitrariness and Selection: Comments on Maynard-Smith.” Philosophy of Science 67: 202–207.</p></li>
<li><p>Good, I. J. (1950) Probability and the Weighing of Evidence. London: Charles Griffin.</p></li>
<li><p>Good, I. J. (1983) Good Thinking: The Foundations of Probability and its Applications. Minneapolis: University of Minnesota Press.</p></li>
<li><p>Gould, J. L. (1975) “Honey Bee Recruitment: the Dance Language Controversy.” Science 189: 685–693.</p></li>
<li><p>Gould S. J., and N. Eldredge (1977) “Punctuated Equilibria: The Tempo and Mode of Evolution reconsidered.” Paleobiology 3: 115–151.</p></li>
<li><p>Goryachev, A. B., D. J. Toh, and T. Lee (2006) “Systems Analysis of a Quorum Sensing Network: Design Constraints Imposed by the Functional Requirements, Network Topology and Kinetic Constants.” BioSystems 83: 178–187.</p></li>
<li><p>Goyal, S. (2007) Connections: An Introduction to the Economics of Networks. Princeton: Princeton University Press.</p></li>
<li><p>Grice, H. P. (1957) “Meaning.” Philosophical Review 66: 377–388.</p></li>
<li><p>Grice, H. P. (1975) “Logic and Conversation.” In Syntax and Semantics, vol.&nbsp;3, ed.&nbsp;P. Cole and J. L. Morgan, 41–58. New York: Academic Press.</p></li>
<li><p>Grice, H. P. (1989) Studies in the Way of Words. Cambridge, MA: Harvard University Press.</p></li>
<li><p>Griffiths, P. E. (2001) “Genetic Information: A Metaphor in Search of a Theory.” Philosophy of Science 68: 394–412.</p></li>
<li><p>Grim, P., P. St.&nbsp;Denis, and T. Kokalis (2002) “Learning to Communicate: The Emergence of Signaling in Spatialized Arrays of Neural Nets.” Adaptive Behavior 10: 45–70.</p></li>
<li><p>Grim, P., T. Kokalis, A. Alai-Tafti, A., and N. Kilb (2000) “Evolution of Communication in Perfect and Imperfect Worlds.” World Futures: The Journal of General Evolution 56: 179–197.</p></li>
<li><p>Grim, P., T. Kokalis, A. Alai-Tafti, N. Kilb, and P. St.&nbsp;Denis (2004) “Making Meaning Happen.” Journal of Experimental and Theoretical Artificial Intelligence 16: 209–243.</p></li>
<li><p>Gyger, M., P. Marler, and R. Pickert (1987) “Semantics of an Avian Alarm Call System: The Male Domestic Fowl,</p></li>
<li><p>Gallus Domesticus.” Behavior 102: 15–20. 184</p></li>
<li><p>Hadeler, K. P. (1981) “Stable Polymorphisms in a Selection Model with Mutation.” SIAM Journal of Applied Mathematics 41: 1–7.</p></li>
<li><p>Hailman, J., M. Ficken, and R. Ficken (1985) “The ‘Chick-a-dee’ calls of Parus atricapillus.” Semiotica 56: 191–224.</p></li>
<li><p>Hamilton, W. D. (1963) “The Evolution of Altruistic Behavior.” American Naturalist 97: 354–356.</p></li>
<li><p>Hamilton, W. D. (1964) “The Genetical Evolution of Social Behavior I and II.” Journal of Theoretical Biology 7: 1–52.</p></li>
<li><p>Hamilton, W. D. (1967) “Extraordinary Sex Ratios.” Science 156: 477–488.</p></li>
<li><p>Hamilton, W. D. (1971) “Selection of Selfish and Altruistic Behavior in Some Extreme Models.” In Man and Beast, ed.&nbsp;J. F. Eisenberg and W. S. Dillon, 59–91. Washington, D.C.: Smithsonian Institution Press.</p></li>
<li><p>Hamilton, W. D. (1995) Narrow Roads of Gene Land. vol.&nbsp;1: Evolution of Social Behavior. New York: W. H. Freeman.</p></li>
<li><p>Harley, C. B. (1981) “Learning the <strong>Evolutionarily Stable Strategy</strong>.” Journal of Theoretical Biology 89: 611–633.</p></li>
<li><p>Harms, W. F. (2004) Information and Meaning in Evolutionary Processes. Cambridge: Cambridge University Press.</p></li>
<li><p>Hauert, C., S. De Monte, J. Hofbauer, and K. Sigmund (2002) “Volunteering as Red Queen Mechanism for Cooperation in Public Goods Games.” Science 296, 1129–1132.</p></li>
<li><p>Hauser, M. D. (1988) “How Infant Vervet Monkeys Learn to Recognize Starling Alarm Calls: The Role of Experience.” Behavior 105: 187–201.</p></li>
<li><p>Hauser, M. D. (1997) The Evolution of Communication. Cambridge, MA: MIT Press.</p></li>
<li><p>Hauser, M. D., N. Chomsky, and W. T. Fitch (2002) “The Faculty of Language: What is it, Who has it, and How did it Evolve.” Science 298: 1569–1579.</p></li>
<li><p>Hebb, D. (1949) The Organization of Behavior. New York: Wiley.</p></li>
<li><p>Herman, L. M., D. G. Richards, and J. P. Wolz (1984) “Comprehension of Sentences by Bottle-Nosed Dolphins.” Cognition 16: 129–219.</p></li>
<li><p>Ho, T. H., X. Wang, and C. Camerer (2008) “Individual differences in EWA Learning with Partial Payoff Information.” The Economic Journal 118: 37–59.</p></li>
<li><p>Hofbauer, J. (1985) “The Selection-Mutation Equation.” Journal of Mathematical Biology. 23: 41–53.</p></li>
<li><p>Hofbauer, J. and S. Huttegger (2008) “Feasibility of Communication in Binary Signaling Games.” Journal of Theoretical Biology 254: 843–849.</p></li>
<li><p>Hojman, D. A. and A. Szeidl (2008) “Core and Periphery in Networks.” Journal of Economic Theory. 139: 295–309.</p></li>
<li><p>Holland, J. (1975) Natural and Artificial Systems. Ann Arbor, Michigan: University of Michigan Press.</p></li>
<li><p>Holldobler, B. and E. O. Wilson (1990) The Ants. Cambridge, MA:</p></li>
<li><p>Belknap. Hoppe, F. M. (1984) “Polya-like Urns and the Ewens Sampling Formula.” Journal of Mathematical Biology 20: 91–94.</p></li>
<li><p>Hopkins, E. (2002) “Two Competing Models about How People Learn in Games.” Econometrica 70, 2141–2166.</p></li>
<li><p>Hopkins, E. and M. Posch (2005) “Attainability of Boundary Points under Reinforcement Learning.” Games and Economic Behavior 53: 110–125. Hume, D. (1739) A Treatise of Human Nature. London: John Noon.</p></li>
<li><p>Hurford, J. (1989) “Biological Evolution of the Saussurean Sign as a Component of the Language Acquisition Device.” Lingua 77: 187–222.</p></li>
<li><p>Huttegger, S. (2007a) “Evolution and the Explanation of Meaning.” Philosophy of Science 74: 1–27.</p></li>
<li><p>Huttegger, S. (2007b) “Evolutionary Explanations of Indicatives and Imperatives.” Erkenntnis 66: 409–436.</p></li>
<li><p>Huttegger, S. (2007c) “Robustness in Signaling Games.” Philosophy of Science 74: 839–847.</p></li>
<li><p>Huttegger, S. and B. Skyrms (2008) “Emergence of Information Transfer by Inductive Learning.” Studia Logica 89: 237–256.</p></li>
<li><p>Huttegger, S., B. Skyrms, R. Smead, and K. Zollman (2009) “Evolutionary Dynamics of Lewis Signaling Games: Signaling Systems vs.&nbsp;Partial Pooling.” Synthese. DOI: 10.1007/s11229–009–9477–0</p></li>
<li><p>Izquierdo, L., D. Izquierdo, N. Gotts, and J. G. Polhill (2007) “Transient and Asymptotic Dynamics of Reinforcement Learning in Games.” Games and Economic Behavior 61: 259–276. 186 SIGNALS: EVOLUTION, LEARNING, AND INFORMATION</p></li>
<li><p>Jackendoff, R. (2002) Foundations of Language. Oxford: Oxford University Press.</p></li>
<li><p>Jackson, M. (2008) Social and Economic Networks. Princeton: Princeton University Press.</p></li>
<li><p>Jackson, M. and A. Watts (2002) “On the Formation of Interaction Networks in Social Coordination Games.” Games and Economic Behavior 41: 265–291.</p></li>
<li><p>Kavanaugh, M. (1980) “Invasion of the Forest by an African Savannah Monkey: Behavioral Adaptations.” Behavior 73: 239–60. Kirby, S. (2000) “Syntax without Natural Selection: How Compositionality Emerges from Vocabulary in a Population of Learners.” In The Evolutionary Emergence of Language, ed.&nbsp;C. Knight, 303–323. Cambridge: Cambridge University Press.</p></li>
<li><p>Kirby, S. (2007) “The Evolution of Meaning-Space Structure through Iterated Learning.” In Emergence of Communication and Language, ed.&nbsp;C. Lyon et al., 253–268. Berlin: Springer Verlag.</p></li>
<li><p>Kirkup, B. C. and M. A. Riley (2004) “Antibiotic-Mediated Antagonism Leads to a Bacterial Game of Rock-Paper-Scissors in vivo.” Nature 428: 412–414.</p></li>
<li><p>Komarova, N. and P. Niyogi (2004) “Optimizing the Mutual Intelligibility of Linguistic Agents in a Shared World.” Artificial Intelligence 154: 1–42.</p></li>
<li><p><strong>Komarova, N., P. Niyogi, and M. Nowak (2001) “The Evolutionary Dynamics of Grammar Acquisition.” Journal of Theoretical Biology 209: 43–59.</strong></p></li>
<li><p>Kosfeld, M. (2004) “Economic Networks in the Laboratory.” Review of Network Economics 3: 20–41.</p></li>
<li><p>Kullback, S. and R. A. Leibler (1951) “On Information and Sufficiency.” Annals of Mathematical Statistics 22: 79–86.</p></li>
<li><p>Kullback, S. (1959) Information Theory and Statistics. New York: John Wiley.</p></li>
<li><p>Levi-Strauss, C. (1969) The Elementary Structures of Kinship. Boston: Beacon Press.</p></li>
<li><p>Lewis, D. K. (1969) Convention. Cambridge, MA: Harvard University Press.</p></li>
<li><p>Liggett, T. M. and S. Rolles (2004) “An Infinite Stochastic Model of Social Network Formation.” Stochastic Processes and their Applications 113: 65–80.</p></li>
<li><p>Lindley, D. (1956) “On a Measure of the Information Provided by an Experiment.” The Annals of Mathematical Statistics 27: 986–1005.</p></li>
<li><p>Luce, R. D. (1959) Individual Choice Behavior. John Wiley &amp; Sons: New York.</p></li>
<li><p>Macedonia, J. M. (1990) “What is Communicated in the Antipredator Calls of Lemurs: Evidence from Antipredator Call Playbacks to Ringtailed and Ruffed Lemurs.” Ethology 86: 177–190.</p></li>
<li><p>McKinnon, S. (1991) From a Shattered Sun. Madison: University of Wisconsin Press.</p></li>
<li><p>Macy, M. (1991) “Learning to Cooperate: Stochastic and Tacit Collusion in Financial Exchange.” American Journal of Sociology 97: 808–843.</p></li>
<li><p>Macy, M. and A. Flache (2002) “Learning Dynamics in Social Dilemmas.” Proceedings of the National Academy of Sciences of the USA 99: 7229– 7236.</p></li>
<li><p>Marden, J. P., H. P. Young, G. Arslan, and J. S. Shamma (2009) “Payoffbased dynamics for Multiplayer Weakly Acyclic Games.” SIAM Journal on Control and Optimization 48: 373–396. 188</p></li>
<li><p><span class="citation" data-cites="Smith1973LogicAnimalConflict">(Smith and Price 1973)</span> <del>Maynard Smith, J. and G. R. Price (1973) “The Logic of Animal Conflict.” Nature 246: 15–18.</del></p></li>
<li><p>Maynard Smith, J. and G. A. Parker (1976) “The Logic of Asymmetric Contests.” Animal Behaviour 24: 159–175.</p></li>
<li><p>Maynard Smith, J. (1982) Evolution and the Theory of Games. Cambridge: Cambridge University Press.</p></li>
<li><p>Maynard Smith, J. (2000) “The Concept of Information in Biology.” Philosophy of Science 67: 177–194.</p></li>
<li><p>Maynard Smith, J. and D. Harper (2003) Animal Signals. Oxford: Oxford University Press.</p></li>
<li><p>Mayor, J. (1898) “King James I On the Reasoning Faculty in Dogs.” The Classical Review 12: 93–96.</p></li>
<li><p>McGregor, P. (2005) Animal Communication Networks. Cambridge University Press: Cambridge.</p></li>
<li><p>Merin, A. (1999) “Information, Relevance, and Social Decisionmaking: Some Principles and Results of Decision-Theoretic Semantics.” In L. Moss, J. Ginzburg, M. de Rijke (eds.), 179–221, Logic, Language, and Computation, vol.&nbsp;2. Stanford: CSLI.</p></li>
<li><p>Miller, M. B. and B. Bassler (2001) “Quorum Sensing In Bacteria.” Annual Review of Microbiology 55: 165–199.</p></li>
<li><p>Millikan, R. G. (1984) Language, Thought and Other Biological Categories. Cambridge, MA: MIT Press.</p></li>
<li><p>Milo, R., S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. Chklovskii, and U. Alon (2002) “Network Motifs: Simple Building Blocks of Complex Networks.” Science 298: 824–827.</p></li>
<li><p><span class="citation" data-cites="doi:10.1073/pnas.96.14.8028">(<strong>doi:10.1073/pnas.96.14.8028?</strong>)</span> <del><strong>Nowak, M. A. and D. Krakauer (1999) “The Evolution of Language.” Proceedings of the National Academy of Sciences of the USA 96: 8028–8033.</strong></del></p></li>
<li><p>Nowak, M., J. Plotkin, and D. Krakauer (1999) “The Evolutionary Language Game.” Journal of Theoretical Biology 200: 147–162.</p></li>
<li><p>Nowak, M. and K. Sigmund (1993) “A Strategy of Win-stay, Lose-shift that Outperforms Tit-for-tat in the Prisoner’s Dilemma Game.” Nature 364: 56–58.</p></li>
<li><p>Oliphant, M. (1994) “The Dilemma of Saussurean Communication.” Biosystems 37: 31–38.</p></li>
<li><p>Othmer, H. G. and A. Stevens (1997) “Aggregation, Blow Up and Collapse: The ABC’s of Taxis in Reinforced Random Walks.” SIAM Journal on Applied Mathematics 57: 1044–1081.</p></li>
<li><p>Papineau, D. (1984) “Representation and Explanation.” Philosophy of Science 51: 550–72.</p></li>
<li><p>Papineau, D. (1987) Reality and Representation. Oxford: Blackwell.</p></li>
<li><p>Parikh, P. (2001) The Use of Language. Stanford: CSLI.</p></li>
<li><p>Pawlowitsch, C. (2008) “Why Evolution Does Not Always Lead to an Optimal Signaling System.” Games and Economic Behavior 63: 203–226.</p></li>
<li><p>Pemantle, R. (1990) “Nonconvergence to Unstable Points in Urn Models and Stochastic Approximations.” Annals of Probability 18: 698–712.</p></li>
<li><p>Pemantle, R. (2007) “A Survey of Random Processes with Reinforcement.” Probability Surveys 4: 1–79.</p></li>
<li><p>Pemantle, R. and B. Skyrms (2004a) “Network Formation by Reinforcement Learning: The Long and the Medium Run.” Mathematical Social Sciences 48: 315–327.</p></li>
<li><p>Pemantle, R. and B. Skyrms (2004b) “Time to Absorption in Discounted Reinforcement Models” Stochastic Processes and Their Applications 109: 1–12.</p></li>
<li><p>Pinker, S., and R. Jackendoff (2005) “The Faculty of Language: What’s Special About It?” Cognition 95: 201–236.</p></li>
<li><p>Quine, W. V. O. (1936) “Truth by Convention.” In Philosophical Essays for A. N. Whitehead, ed.&nbsp;O. H. Lee. 90–124.</p></li>
<li><p>Quine, W. V. O. (1969) “Epistemology Naturalized.” In Ontological Relativity and Other Essays. New York: Columbia University Press.</p></li>
<li><p>Rainey, H. J., K. Zuberbu¨hler, and P. J. B. Slater (2004) “Hornbills Can Distinguish between Primate Alarm Calls.” Proceedings of the Royal Society of London B 271: 755–759.</p></li>
<li><p>J. Riley, R. U. Greggers, A. D. Smith, D. R. Reynolds, and R. Menzel (2005) “The Flight Paths of Honeybees Recruited by the Waggle Dance.” Nature 435: 205–207.</p></li>
<li><p>Robbins, H. (1952) “Some Aspects of the Sequential Design of Experiments.” Bulletin of the American Mathematical Society 58: 527–535. 190</p></li>
<li><p>van Rooy, Robert. (2003) “Questioning to Resolve Decision Problems.” Linguistics and Philosophy 26:727–763.</p></li>
<li><p>Russell, B. (1921) The Analysis of Mind. (Lecture X) London: George Allen and Unwin.</p></li>
<li><p>Russell, B. (1948) Human Knowledge, Its Scope and Limits. New York: Simon and Schuster.</p></li>
<li><p>Salmon, T. C. (2001) “An Evaluation of Econometric Models of Adaptive Learning.” Econometrica 1597–1628.</p></li>
<li><p>Schlag, K. (1998) “Why Imitate and If So, How? A Bounded Rational Approach to Many Armed Bandits.” Journal of Economic Theory 78, 130–156.</p></li>
<li><p>Schreiber, Sebastian J. (2001) “Urn Models, Replicator Processes, and Random Genetic Drift”, SIAM Journal on Applied Mathematics, 61.6: 2148–2167.</p></li>
<li><p>Schultz, W. (2004) “Neural Coding of Basic Reward Terms of Animal Learning Theory, Game Theory, Microeconomics and Behavioural Ecology.” Current Opinion in Neurobiology 14:139–147.</p></li>
<li><p>Searcy, W. A. and S. Nowicki (2005) The Evolution of Animal Communication: Reliability and Deception in Signaling Systems. Princeton: Princeton University Press.</p></li>
<li><p><strong>Selten, R. and W. Massimo (2007) “The Emergence of Simple Languages in an Experimental Coordination Game.” Proceedings of the National Academy of Sciences of the USA 104: 7361–7366.</strong></p></li>
<li><p>Seyfarth, R. M. and D. L. Cheney (1990) “The Assessment by Vervet Monkeys of Their Own and Other Species’ Alarm Calls.” Animal Behavior 40: 754–764.</p></li>
<li><p><strong>Shannon, C. (1948) “A Mathematical Theory of Communication.” The Bell System Mathematical Journal 27: 379–423, 623–656.</strong></p></li>
<li><p><strong>Shannon, C. and W. Weaver (1949) The Mathematical Theory of Communication. Urbana: University of Illinois Press.</strong></p></li>
<li><p>Shreiber, S. (2001) “Urn Models, Replicator Processes and Random Genetic Drift.” SIAM Journal on Applied Mathematics 61: 2148–2167.</p></li>
<li><p>Sinervo, B. and C. M. Lively (1996) “The Rock-Paper-Scissors Game and the Evolution of Alternative Male Strategies.” Nature 380: 240–243.</p></li>
<li><p>Skyrms, B. (1996) Evolution of the Social Contract. Cambridge: Cambridge University Press. Skyrms, B. (1998) “Salience and Symmetry-Breaking in the Evolution of Convention.” Law and Philosophy 17: 411–418.</p></li>
<li><p>Skyrms, B. (1999) “Stability and Explanatory Significance of Some Simple Evolutionary Models.” Philosophy of Science 67: 94–113.</p></li>
<li><p>Skyrms, B. (2000) “Evolution of Inference.” In Dynamics of Human and Primate Societies, ed.&nbsp;Tim Kohler and George Gumerman, 77–88. New York: Oxford University Press.</p></li>
<li><p>Skyrms, B. (2004) The Stag Hunt and the Evolution of Social Structure. Cambridge: Cambridge University Press.</p></li>
<li><p>Skyrms, B. (2005) “Dynamics of Conformist Bias.” Monist 88: 260–269.</p></li>
<li><p>Skyrms, B. (2007) “Dynamic Networks and the Stag Hunt: Some Robustness Considerations.” Biological Theory 2: 7–9.</p></li>
<li><p>Skyrms, B. (2009) “Evolution of Signaling Systems with Multiple Senders and Receivers.” Philosophical Transactions of the Royal Society B doi:10.1098/rstb.2008.0258, 364: 771–779.</p></li>
<li><p>Skyrms, B. (2009) “Presidential Address: Signals.” Philosophy of Science 75:489–500.</p></li>
<li><p>Skyrms, B. and R. Pemantle (2000) “A Dynamic Model of Social Network Formation.” Proceedings of the National Academy of Sciences of the USA. 97: 9340–9346 192</p></li>
<li><p>Skyrms, B. and S. L. Zabell (forthcoming) “Inventing New Signals.”</p></li>
<li><p>Slobodchikoff, C. N., J. Kiriazis, C. Fischer, and E. Creef (1991) “Semantic Information Distinguishing Individual Predators in the Alarm Calls of Gunnison’s Prairie Dogs.” Animal Behaviour 42: 713–719.</p></li>
<li><p>Smith, A. (1983) [1761] Considerations Concerning the First Formation of Languages. Reprinted in Lectures on Rhetoric and Belles Lettres, ed.&nbsp;J. C. Bryce. Oxford: Oxford University Press.</p></li>
<li><p>Snowdon, C. T. (1990) “Language Capacities of Nonhuman Animals.” Yearbook of Physical Anthropology 33: 215–243.</p></li>
<li><p>Sorabji, R. (1993) Animal Minds and Human Morals: The Origins of the Western Debate. Ithaca: Cornell University Press.</p></li>
<li><p>Stander, P. E. (1990s) “Cooperative Hunting in Lions: The Role of the Individual.” Behavioral Ecology and Sociobiology 29: 445–454.</p></li>
<li><p>Stanford, P. K. (2007) Exceeding Our Grasp. Oxford: Oxford University Press.</p></li>
<li><p><span class="citation" data-cites="steels1997synthetic">Steels (1997)</span> <del>Steels, L. (1997) “The Synthetic Modeling of Language Origins.” Evolution of Communication 1: 1–35.</del></p></li>
<li><p><span class="citation" data-cites="steels1998origins">Steels (1998)</span> <del>Steels, L. (1998) “The Origins of Syntax in Visually Grounded Robotic Agents.” Artificial Intelligence 103: 133–156.</del></p></li>
<li><p><span class="citation" data-cites="steels2001LanguageGames">Steels (2001)</span> <del>Steels, L (2001) “Language games for autonomous robots”. IEEE Intelligent Systems, September-October 2001:17–22</del></p></li>
<li><p>Sterelny, K. (2000) “The ‘Genetic Program’ Program: A Commentary on Maynard-Smith on Information in Biology.” Philosophy of Science 67: 195–201.</p></li>
<li><p>Sterelny, K. (2003) Thought in a Hostile World: The Evolution of Human Cognition. Oxford: Blackwell.</p></li>
<li><p>Struhsaker, T. T. (1967) “Auditory Communication among Vervet Monkeys Cercopithecus aethiops.” In Social Communication among Primates, ed.&nbsp;S.A. Altmann, 281–324. Chicago: University of Chicago Press.</p></li>
<li><p>Sugden, R. (2005) The Economics of Rights, Co-operation and Welfare (Basingstoke: Macmillan).</p></li>
<li><p>Suppes, P. and R. Atkinson (1960) Markov Learning Models for Multiperson Interactions. Palo Alto, CA: Stanford University Press.</p></li>
<li><p>Taga, M. E. and B. L. Bassler (2003) “Chemical Communication Among Bacteria.” Proceedings of the National Academy of Sciences of the USA 100 Suppl. 2, 14549–14554.</p></li>
<li><p><span class="citation" data-cites="Taylor1978ESS">(Taylor and Jonker 1978)</span></p></li>
<li><p>Tempelton, C., E. Greene and K. Davis (2005) “Allometry of Alarm Calls: Black-Capped Chickadees Encode Information about Predator Size.” Science 308: 1934–1937.</p></li>
<li><p>Thorndike, E. L. (1911) Animal Intelligence. New York: Macmillan.</p></li>
<li><p>Thorndike, E. L. (1927) “The Law of Effect.” American Journal of Psychology 39: 212–222.</p></li>
<li><p><strong>Trapa, P. and M. Nowak (2000) “Nash Equilibria for an Evolutionary Language Game.” Journal of Mathematical Biology 41: 172–188.</strong></p></li>
<li><p>Vanderschraaf, P. (1998) “Knowledge, Equilibrium and Convention.” Erkenntnis 49: 337–369.</p></li>
<li><p><span class="citation" data-cites="Wagner2013Costly">(Wagner 2013)</span></p></li>
<li><p><strong>Wagner, E. (2009) “Communication and Structured Correlation.” Erkenntnis doi 10.1007/s10670–009–9157–y.</strong></p></li>
<li><p>Wa¨rneryd, K. (1993) “Cheap Talk, Coordination, and Evolutionary Stability.” Games and Economic Behavior 5: 532–546.</p></li>
<li><p>Watts, A. (2001) “A Dynamic Model of Network Formation.” Games and Economic Behavior 34: 331–341.</p></li>
<li><p>Weber, R. and C. Camerer (2003) “Cultural Conflict and Merger Failure: An Experimental Approach.” Management Science 49: 400–415.</p></li>
<li><p>Wei, L. and S. Durham (1978) “The Randomized Play-the-winner Rule in Medical Trials.” Journal of the American Statistical Association 73: 840–843.</p></li>
<li><p>Young, H. P. (2009) “Learning by Trial and Error.” Games and Economic Behavior 65: 626–643. 194</p></li>
<li><p>Zabell, S. L. (1992) “Predicting the Unpredictable.” Synthese 90: 205–232.</p></li>
<li><p>Zabell, S. L. (2005) Symmetry and Its Discontents: Essays in the History of Inductive Probability. Cambridge: Cambridge University Press.</p></li>
<li><p>Zeeman, E. C. (1980) “Population Dynamics from Game Theory.” In Global Theory of Dynamical Systems, Springer Lecture Notes on Mathematics 819.</p></li>
<li><p>Zollman, K. (2005) “Talking to Neighbors: The Evolution of Regional Meaning.” Philosophy of Science 72: 69–85</p></li>
<li><p>Zuidema, W. (2003) “Optimal Communication in a Noisy and Heterogeneous Environment.” In Proceedings Lecture Notes on Artificial Intelligence v. 2801 Berlin: Springer 553–563.</p></li>
</ul>


<div class="no-row-height column-margin column-container"><div id="ref-Barrett2006Numerical" class="csl-entry">
Barrett, Jeffrey A. 2006. <span>“Numerical Simulations of the Lewis Signaling Game: Learning Strategies, Pooling Equilibria, and the Evolution of Grammar.”</span> <em>Working Paper MBS06–09</em>.
</div><div id="ref-Barrett2009Evolution" class="csl-entry">
———. 2009. <span>“The Evolution of Coding in Signaling Games.”</span> <em>Theory and Decision</em> 67 (2): 223–37. <a href="https://doi.org/10.1007/s11238-007-9064-0">https://doi.org/10.1007/s11238-007-9064-0</a>.
</div><div id="ref-Barrett2007Dynamic" class="csl-entry">
———. 2007. <span>“Dynamic Partitioning and the Conventionality of Kinds.”</span> <em>Philosophy of Science</em> 74 (4): 527–46. <a href="https://doi.org/10.1086/524714">https://doi.org/10.1086/524714</a>.
</div><div id="ref-batali1998" class="csl-entry">
Batali, J. 1998. <span>“Computational Simulations of the Emergence of Grammar.”</span> In <em>Approaches to the Evolution of Language: Social and Cognitive Bases</em>, edited by J. Hurford, C. Knight, and M. Studdert-Kennedy, 405–26. Cambridge: Cambridge University Press.
</div><div id="ref-Blume2002" class="csl-entry">
Blume, Andreas, Douglas V. Dejong, George R. Neumann, and N. E. Savin. 2002. <span>“Learning and Communication in Sender-Receiver Games: An Econometric Investigation.”</span> <em>Journal of Applied Econometrics</em> 17 (3): 225–47. <a href="http://www.jstor.org/stable/4129228">http://www.jstor.org/stable/4129228</a>.
</div><div id="ref-Smith1973LogicAnimalConflict" class="csl-entry">
Smith, J. Maynard, and G. Randall Price. 1973. <span>“The Logic of Animal Conflict.”</span> <em>Nature</em> 246: 15–18. <a href="https://api.semanticscholar.org/CorpusID:4224989">https://api.semanticscholar.org/CorpusID:4224989</a>.
</div><div id="ref-steels1997synthetic" class="csl-entry">
Steels, Luc. 1997. <span>“The Synthetic Modeling of Language Origins.”</span> <em>Evolution of Communication Journal</em> 1 (October). <a href="https://doi.org/10.1075/eoc.1.1.02ste">https://doi.org/10.1075/eoc.1.1.02ste</a>.
</div><div id="ref-steels1998origins" class="csl-entry">
———. 1998. <span>“The Origins of Syntax in Visually Grounded Robotic Agents.”</span> <em>Artif. Intell.</em> 103 (1–2): 133–56. <a href="https://doi.org/10.1016/S0004-3702(98)00066-6">https://doi.org/10.1016/S0004-3702(98)00066-6</a>.
</div><div id="ref-steels2001LanguageGames" class="csl-entry">
———. 2001. <span>“Language Games for Autonomous Robots.”</span> <em>IEEE Intelligent Systems</em> 16 (5): 16–22. <a href="https://doi.org/10.1109/MIS.2001.956077">https://doi.org/10.1109/MIS.2001.956077</a>.
</div><div id="ref-Taylor1978ESS" class="csl-entry">
Taylor, Peter D., and Leo B. Jonker. 1978. <span>“Evolutionarily Stable Strategies and Game Dynamics.”</span> <em>Bellman Prize in Mathematical Biosciences</em> 40: 145–56. <a href="https://api.semanticscholar.org/CorpusID:15554796">https://api.semanticscholar.org/CorpusID:15554796</a>.
</div><div id="ref-Wagner2013Costly" class="csl-entry">
Wagner, Elliott O. 2013. <span>“The Dynamics of Costly Signaling.”</span> <em>Games</em> 4 (2): 163–81. <a href="https://doi.org/10.3390/g4020163">https://doi.org/10.3390/g4020163</a>.
</div></div>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Skryms {Signals} {Summary} and {Models}},
  date = {2024-05-01},
  url = {https://orenbochman.github.io//posts/2024/2024-05-01-Signals/signals-summary.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Skryms Signals Summary and Models.”</span>
May 1, 2024. <a href="https://orenbochman.github.io//posts/2024/2024-05-01-Signals/signals-summary.html">https://orenbochman.github.io//posts/2024/2024-05-01-Signals/signals-summary.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-Signals/signals-summary.html</guid>
  <pubDate>Tue, 30 Apr 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/quarto_tailwindcss/</link>
  <description><![CDATA[ undefined ]]></description>
  <category>ux</category>
  <category>experiments</category>
  <category>quarto</category>
  <category>tailwindcss</category>
  <guid>https://orenbochman.github.io/posts/2024/quarto_tailwindcss/</guid>
  <pubDate>Sat, 06 Apr 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-04-03-focus/2024-04-03-focus.html</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-04-03-focus/2024-04-03-focus.html</guid>
  <pubDate>Tue, 02 Apr 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>gradio local model</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html</link>
  <description><![CDATA[ 





<div id="32c1d262" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer, StoppingCriteria, StoppingCriteriaList, TextIteratorStreamer</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Thread</span>
<span id="cb1-5"></span>
<span id="cb1-6">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"togethercomputer/RedPajama-INCITE-Chat-3B-v1"</span>)</span>
<span id="cb1-7">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"togethercomputer/RedPajama-INCITE-Chat-3B-v1"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16)</span>
<span id="cb1-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda:0'</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> StopOnTokens(StoppingCriteria):</span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_ids: torch.LongTensor, scores: torch.FloatTensor, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb1-12">        stop_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> stop_id <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stop_ids:</span>
<span id="cb1-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> stop_id:</span>
<span id="cb1-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(message, history):</span>
<span id="cb1-19">    history_transformer_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [[message, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]]</span>
<span id="cb1-20">    stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StopOnTokens()</span>
<span id="cb1-21"></span>
<span id="cb1-22">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;human&gt;:"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;bot&gt;:"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb1-23">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> history_transformer_format])</span>
<span id="cb1-24"></span>
<span id="cb1-25">    model_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer([messages], return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb1-26">    streamer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextIteratorStreamer(tokenizer, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>, skip_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, skip_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-27">    generate_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb1-28">        model_inputs,</span>
<span id="cb1-29">        streamer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>streamer,</span>
<span id="cb1-30">        max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb1-31">        do_sample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-32">        top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>,</span>
<span id="cb1-33">        top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb1-34">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb1-35">        num_beams<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-36">        stopping_criteria<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>StoppingCriteriaList([stop])</span>
<span id="cb1-37">        )</span>
<span id="cb1-38">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.generate, kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generate_kwargs)</span>
<span id="cb1-39">    t.start()</span>
<span id="cb1-40"></span>
<span id="cb1-41">    partial_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> new_token <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> streamer:</span>
<span id="cb1-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> new_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;'</span>:</span>
<span id="cb1-44">            partial_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> new_token</span>
<span id="cb1-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> partial_message</span>
<span id="cb1-46"></span>
<span id="cb1-47">gr.ChatInterface(predict).launch()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Running on local URL:  http://127.0.0.1:7860

To create a public link, set `share=True` in `launch()`.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div><iframe src="http://127.0.0.1:7860/" width="100%" height="500" allow="autoplay; camera; microphone; clipboard-read; clipboard-write;" frameborder="0" allowfullscreen=""></iframe></div>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code></code></pre>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Gradio Local Model},
  date = {2024-03-31},
  url = {https://orenbochman.github.io//posts/2024/2024-03-31-gradio/gradio_local.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Gradio Local Model.”</span> March 31, 2024.
<a href="https://orenbochman.github.io//posts/2024/2024-03-31-gradio/gradio_local.html">https://orenbochman.github.io//posts/2024/2024-03-31-gradio/gradio_local.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html</guid>
  <pubDate>Sat, 30 Mar 2024 22:44:48 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-03-31-gradio/prompts.html</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-03-31-gradio/prompts.html</guid>
  <pubDate>Sat, 30 Mar 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-3-31-sugarscapes/sugarscapes.html</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-3-31-sugarscapes/sugarscapes.html</guid>
  <pubDate>Sat, 30 Mar 2024 21:00:00 GMT</pubDate>
</item>
<item>
  <title>OCR building blocks</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-02-28-ocr/28-02-2024-ocr.html</link>
  <description><![CDATA[ 





<section id="todo" class="level2">
<h2 class="anchored" data-anchor-id="todo">TODO:</h2>
<p>split into:</p>
<ol type="1">
<li>[] PDF blocks</li>
<li>[] Page gen blocks - where we generate input images with known text to recognize</li>
</ol>
<ul>
<li>capture different layouts</li>
<li>capture different language/scripts</li>
<li>capture different content</li>
<li>capture different languages</li>
<li>use RL and Generate &amp; Test to approximate some image (needs a loss)</li>
</ul>
<ol start="3" type="1">
<li>[] OCR</li>
<li>[] Font manifolds</li>
</ol>
<p>text image –&gt; preprocessing –&gt; segmentation –&gt; feature-extraction –&gt; recognition –&gt; postprocessing</p>
</section>
<section id="aquisition" class="level2">
<h2 class="anchored" data-anchor-id="aquisition">Aquisition</h2>
<ol type="1">
<li>render pages from pdf -&gt; ok for unsupervised learning.</li>
<li>generate from text -&gt; better for supervised learning.</li>
</ol>
<section id="remove-text-from-pdf" class="level3">
<h3 class="anchored" data-anchor-id="remove-text-from-pdf">remove text from pdf</h3>
<p>Sometimes we should discard the OCRd text in the pdf.</p>
<p>In this case we want a pdf that was scanned and we want the image we don’t want to extract the images as they may have been split into layers or and also intto chunks which is not very usefull for OCR.</p>
<pre class="{bash}"><code>gs -o no-more-texts.pdf -sDEVICE=pdfwrite -dFILTERTEXT ocr-doc.pdf</code></pre>
</section>
<section id="render-pdf-page-to-png" class="level3">
<h3 class="anchored" data-anchor-id="render-pdf-page-to-png">render pdf page to png</h3>
<p>we can skip the previous step is the text is ok! this generates 2 page</p>
<pre class="{bash}"><code>pdftocairo -png ./no-more-texts.pdf ./img/ -f 20 -l 22</code></pre>
<pre class="{bash}"><code>pdftocairo -png ./no-more-texts.pdf ./img/ -f 20 -l 22 -gray</code></pre>
<p>some extra flags to crop a box starting at pdftocairo -png ./no-more-texts.pdf ./img/ -f 20 -l 22 -gray -x X -y Y -W W -H H</p>
<p>we may then want to segement and extract regions from the page. when we segment we probably want to … use a sub rectage</p>
<div id="d148435a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fitz</span>
<span id="cb4-2"></span>
<span id="cb4-3">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fitz.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pdf_test.pdf'</span>)</span>
<span id="cb4-4">page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> doc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get first page</span></span>
<span id="cb4-5">rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fitz.Rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, page.rect.width)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define your rectangle here</span></span>
<span id="cb4-6">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> page.get_textbox(rect)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get text from rectangle</span></span>
<span id="cb4-7">clean_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>.join(text.split())</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(clean_text)</span></code></pre></div>
</div>
<p>A smart generator has the property of not repeating itself. Idealy we would like to generate a corpus that representitive of what we want to OCR without containing more data than needed. This could mean one thing for training and onther thing for testint. One idea to minimize the data set wrt a loss fucntion is using coresets. To use coresets we need to decide on a loss function. Since there are many steps in OCR we may need to combine many losses and this can This may make the coresets approch not viable.</p>
</section>
</section>
<section id="generation" class="level2">
<h2 class="anchored" data-anchor-id="generation">Generation</h2>
<ol type="1">
<li>convert text to image</li>
<li>segment scorer -</li>
</ol>
</section>
<section id="preprocessing" class="level2">
<h2 class="anchored" data-anchor-id="preprocessing">preprocessing</h2>
<p>skew correction</p>
<div id="9681d7eb" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> im</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.ndimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> interpolation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inter</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#input_file = sys.argv[1]</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#input_file = sys.argv[1]</span></span>
<span id="cb5-9">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> im.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(input_file)</span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to binary</span></span>
<span id="cb5-11">wd, ht <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.size</span>
<span id="cb5-12">pix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(img.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>).getdata(), np.uint8)</span>
<span id="cb5-13">bin_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (pix.reshape((ht, wd)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>)</span>
<span id="cb5-14">plt.imshow(bin_img, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb5-15">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary.png'</span>)</span>
<span id="cb5-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_score(arr, angle):</span>
<span id="cb5-17">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inter.rotate(arr, angle, reshape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-18">    hist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(data, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-19">    score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((hist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hist[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> hist, score</span>
<span id="cb5-21">delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-22">limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-23">angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>limit, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>delta, delta)</span>
<span id="cb5-24">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> angle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> angles:</span>
<span id="cb5-26">    hist, score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_score(bin_img, angle)</span>
<span id="cb5-27">    scores.append(score)</span>
<span id="cb5-28">best_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(scores)</span>
<span id="cb5-29">best_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles[scores.index(best_score)]</span>
<span id="cb5-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Best angle: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.formate(best_angle))</span>
<span id="cb5-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correct skew</span></span>
<span id="cb5-32">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inter.rotate(bin_img, best_angle, reshape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-33">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> im.fromarray((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uint8"</span>)).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb5-34">img.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skew_corrected.png'</span>)</span></code></pre></div>
</div>
<p>biniariation</p>
<ul>
<li>adaptive thresholding</li>
<li>otsu biniratation</li>
<li>local maximan and minima</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?c(i,j)%20=%20%5Cfrac%7BI_%7Bmax%7D-I_%7Bmin%7D%7D%7BI_%7Bmax%7D-I_%7Bmi%7D+%5Cepsilon%7D"></p>
<ul>
<li>noise removal</li>
</ul>
<div id="61f299e0" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2 </span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt </span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reading image from folder where it is stored </span></span>
<span id="cb6-5">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.imread(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bear.png'</span>) </span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># denoising of image saving it into dst image </span></span>
<span id="cb6-7">dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.fastNlMeansDenoisingColored(img, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) </span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting of source and destination image </span></span>
<span id="cb6-9">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>), plt.imshow(img) </span>
<span id="cb6-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>), plt.imshow(dst) </span>
<span id="cb6-11">plt.show()</span></code></pre></div>
</div>
<ul>
<li>thining and skeletonization</li>
</ul>
<p>sementation - line level - word level - character level</p>
<p>classification</p>
<p>identify the segment</p>
<p>post processing</p>
<p>spelling correction !?</p>
</section>
<section id="binarization" class="level2">
<h2 class="anchored" data-anchor-id="binarization">Binarization</h2>
<p>global</p>
<p>if (current)</p>
</section>
<section id="refernces" class="level2">
<h2 class="anchored" data-anchor-id="refernces">Refernces</h2>
<ul>
<li>https://towardsdatascience.com/pre-processing-in-ocr-fc231c6035a7</li>
<li>https://towardsdatascience.com/image-filters-in-python-26ee938e57d2</li>
<li>https://github.com/arthurflor23/text-segmentation</li>
<li>https://pdf.wondershare.com/pdf-knowledge/extract-images-from-pdf-linux.html</li>
<li>https://askubuntu.com/questions/150100/extracting-embedded-images-from-a-pdf</li>
<li>https://stackoverflow.com/questions/24322338/remove-all-text-from-pdf-file</li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {OCR Building Blocks},
  date = {2024-03-28},
  url = {https://orenbochman.github.io//posts/2024/2024-02-28-ocr/28-02-2024-ocr.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“OCR Building Blocks.”</span> March 28, 2024.
<a href="https://orenbochman.github.io//posts/2024/2024-02-28-ocr/28-02-2024-ocr.html">https://orenbochman.github.io//posts/2024/2024-02-28-ocr/28-02-2024-ocr.html</a>.
</div></div></section></div> ]]></description>
  <category>code</category>
  <category>buggy code</category>
  <category>TODO</category>
  <category>OCR</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-02-28-ocr/28-02-2024-ocr.html</guid>
  <pubDate>Wed, 27 Mar 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-03-26-march-brain-dump/</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-03-26-march-brain-dump/</guid>
  <pubDate>Mon, 25 Mar 2024 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
