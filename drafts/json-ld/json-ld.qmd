---
title: json-ld
subtitle: metadata format for linked data
categories: [information science]
---

I've been excited about JSON-LD, when it came out as it offered a much cleaner way to do SEO. However It dawned on me later that it is also a geat format to worked with linked data.

1. it uses a special `@id` property to assign a unique URL to each resource in a JSON-LD document, giving every data item its own URL.
1. it links data items together through the values of properties. For example, if you're describing a person, their "colleague" property can have another person's URL as its value, creating a web of interconnected data items.
1. JSON-LD uses the `@context` property to map the terms used in the document to URLs, conforming data items to common global, organisational and departmental schemas.

One of the best things about JSON-LD is how easy it is to work with. Developers already familiar with JSON syntax will love using it. And get this: JSON-LD is so popular that it's now embedded in almost half of all web pages. It's baffling why all organisations aren't using JSON-LD more widely to share data between their applications!

So, whether you're publishing Data Products, creating RESTful applications or improving your website's SEO, JSON-LD is the way to go! Give it a try and let me know your thoughts in the comments below.

```{python}

person = {
  "@context": "https://json-ld.org/contexts/person.jsonld", # <1>
  "@type": "https://schema.org/Person",                     # <2>
  "@id": "http://dbpedia.org/resource/John_Lennon",         # <3>
  "https://schema.org/name": "John Lennon",
  "born": "1940-10-09",
  "spouse": "http://dbpedia.org/resource/Cynthia_Lennon"    # <4>
}

```

1. the `@context` refrences your model
2. the `@type` is the type in your model
3. the `@id` is the yrl for this item
4. the url is how to reference external data say dbpedia.

# python

## Compacting 

```{python}
from pyld import jsonld
import json
doc = {
    "http://schema.org/name": "Manu Sporny",
    "http://schema.org/url": {"@id": "http://manu.sporny.org/"},
    "http://schema.org/image": {"@id": "http://manu.sporny.org/images/manu.png"},
    "@type": "https://schema.org/Person",
}
context = {
    "name": "http://schema.org/name",
    "homepage": {"@id": "http://schema.org/url", "@type": "@id"},
    "image": {"@id": "http://schema.org/image", "@type": "@id"}
}

# compact a document according to a particular context

# see: https://json-ld.org/spec/latest/json-ld/#compacted-document-form
compacted = jsonld.compact(doc, context)
print(json.dumps(compacted, indent=2))
```

```{python}

# compact using URLs
#jsonld.compact('http://example.org/doc', 'http://example.org/context')
```

## Expanding

```{python}
# expand a document, removing its context

# see: https://json-ld.org/spec/latest/json-ld/#expanded-document-form
expanded = jsonld.expand(compacted)
print(json.dumps(expanded, indent=2))
```

```{python}

# expand using URLs

# jsonld.expand('http://example.org/doc')
```

## Flattening

```{python}

# flatten a document

# see: https://json-ld.org/spec/latest/json-ld/#flattened-document-form
flattened = jsonld.flatten(doc)

# all deep-level trees flattened to the top-level
print(json.dumps(flattened, indent=2))
```

## Framing

```{python}
docf = {
  "@context": {
    "@vocab": "http://example.org/",
    "contains": {
      "@type": "@id"
    }
  },
  "@graph": [
    {
      "@id": "http://example.org/library",
      "@type": "Library",
      "location": "Athens",
      "contains": "http://example.org/library/the-republic"
    },
    {
      "@id": "http://example.org/library/the-republic",
      "@type": "Book",
      "creator": "Plato",
      "title": "The Republic",
      "contains": "http://example.org/library/the-republic#introduction"
    },
    {
      "@id": "http://example.org/library/the-republic#introduction",
      "@type": "Chapter",
      "description": "An introductory chapter on The Republic.",
      "title": "The Introduction"
    }
  ]
}

frame = {
  "@context": {
    "@vocab": "http://example.org/"
  },
  "location": "Athens",
  "contains": {
    "title": "The Republic",
    "contains": {
      "title": "The Introduction"
    }
  }
}

# frame a document

# see: https://json-ld.org/spec/latest/json-ld-framing/#introduction
framed = jsonld.frame(docf, frame)
print(json.dumps(framed, indent=2))

# document transformed into a particular tree structure per the given frame
```

## Normalization

```{python}

# normalize a document using the RDF Dataset Normalization Algorithm

# (URDNA2015), see: https://json-ld.github.io/normalization/spec/
normalized = jsonld.normalize(
    doc, {'algorithm': 'URDNA2015', 'format': 'application/n-quads'})

# normalized is a string that is a canonical representation of the document

# that can be used for hashing, comparison, etc.
print(json.dumps(normalized, indent=2))
```

# Resources 

1. [json-ld](https://json-ld.org/)
1. [schema.org](https://schema.org/)
1. [ProductOntology](http://www.productontology.org/) 
2. [GoodRelations](http://www.heppnetz.de/projects/goodrelations/)
3. [Wikidata](https://www.wikidata.org/wiki/Wikidata:Main_Page)
1. https://schemantra.com/
1. https://github.com/science-periodicals/jsonld-vis
1. https://github.com/shamilnabiyev/schema-visualizer
1. https://cloud.google.com/natural-language/