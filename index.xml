<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Oren Bochman&#39;s Blog</title>
<link>https://orenbochman.github.io/</link>
<atom:link href="https://orenbochman.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Personal website, portfolio and blog</description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Mon, 10 Mar 2025 01:19:58 GMT</lastBuildDate>
<item>
  <title>Scaling in financial prices 3</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/</link>
  <description><![CDATA[ 





<section id="scaling-in-financial-prices-iii.-cartoon-brownian-motions-in-multifractal-time" class="level1 page-columns page-full">
<h1>Scaling in financial prices: III. Cartoon Brownian Motions in Multifractal Time</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: III. Cartoon Brownian Motions in Multifractal Time” <span class="citation" data-cites="mandelbrot2001Scaling3">(Mandelbrot 2001)</span> Mandelbrot continus his exploration of fractal and multifractal geometry to model financial price fluctuations. It introduces “cartoon” functions – simplified, visually illustrative models – to capture key characteristics of financial prices, such as continuously varying volatility, discontinuities, and extreme price changes. These cartoons, parameterized within a “phase diagram,” offer intuitive representations of various existing models, including Mandelbrot’s own earlier work and the standard Brownian motion.</p>
<p>The core concept is Brownian motion in multifractal time (BMMT), a new model that accounts for the observed complexities in financial data better than previous approaches. The paper aims to provide a more accessible understanding of BMMT, emphasizing the limitations and strengths of the cartoon approximations while highlighting the importance of scaling invariance and the concept of trading time in capturing the dynamics of financial markets.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling3" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: III. Cartoon Brownian Motions in Multifractal Time.”</span> <em>Quantitative Finance</em> 1 (4): 427–40. <a href="https://doi.org/10.1080/713665836">https://doi.org/10.1080/713665836</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><section id="summary-of-the-third-paper" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-third-paper">Summary of the third paper</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<ul>
<li><strong>Inadequacy of traditional financial models</strong>: Classic models like the Brownian motion fail to capture the key features of financial price variations, including fluctuating volatility and large, discontinuous jumps.</li>
<li><strong>Fractal and multifractal geometry for financial modeling</strong>: Mandelbrot advocates for using fractal and multifractal models to better represent the complex and volatile nature of financial markets.</li>
<li><strong>Cartoon Brownian Motions in Multifractal Time (BMMT)</strong>: Mandelbrot presents BMMT, a new family of random processes, as a promising model for financial prices. BMMT builds upon the concepts of fractional Brownian motion and introduces the idea of “trading time.”</li>
<li><strong>Recursive interpolation to create cartoons</strong>: The paper focuses on creating simplified, visual representations of BMMT, termed “cartoons,” using recursive interpolation techniques. These cartoons help visualize and understand the complex behaviors of BMMT.</li>
<li><strong>Phase diagram for classifying price behaviors</strong>: A “phase diagram” is introduced to map the diverse behaviors generated by these cartoons based on two key parameters. Different regions in the phase diagram correspond to different types of price variations, including Fickian, unifractal, mesofractal, and multifractal.</li>
</ul>
</section>
<section id="most-important-ideasfacts" class="level3">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><strong>Limitations of standard Brownian motion</strong>: “Financial prices, such as those of securities, commodities, foreign exchange or interest rates, are largely unpredictable but one must evaluate the odds for or against some desired or feared outcomes, the most extreme being ‘ruin’. Those odds are essential to the scientist who seeks to understand the financial markets and other aspects of the economy. They must also be used as inputs for decisions concerning economic policy or institutional arrangements. To handle all those issues, the first step—but far from the last!—is to represent different prices’ variation by random processes that fit them well.” This quote highlights the need for a model that accurately reflects the inherent volatility of financial markets, which the Brownian motion fails to do.</li>
<li><strong>Recursive interpolation for financial modeling</strong>: “In the case of BMMT, the random walk has no direct counterpart. However, splendid cartoons in a very different style were developed and sketched in Mandelbrot (1997), chapter E6, and Mandelbrot (1999a), chapter N1. They are limits of discrete-parameter sequences of successive interpolations drawn on a continually refined temporal grid.” This explains the construction of simplified “cartoon” models using recursive interpolation, offering a visual and conceptual understanding of BMMT.</li>
<li><strong>The importance of the Hölder exponent (H)</strong>: “This replacement of ratios of infinitesimals by ratios of logarithms of infinitesimals is an essential innovation. It was not directed by trial and error. Neither did its early use in classical ‘fine’ mathematical analysis suggest that H and many variants thereof could become concretely meaningful, quite the contrary. H became important because of its intimate connection with certain invariances.” This passage emphasizes the significance of the Hölder exponent in capturing the scaling and self-affinity properties of financial data, which traditional methods like derivatives fail to address.</li>
<li><strong>Distinction between absence of correlation and statistical independence</strong>: “Mathematicians know that whiteness does not express statistical independence, only absence of correlation. But the temptation existed to view that distinction as mathematical nit-picking. The existence of such sharply non-Gaussian white noises proves that the hasty assimilation of spectral whiteness to independence was understandable but untenable. White spectral whiteness is highly significant for Gaussian processes, but otherwise is a weak characterization of reality.” This section debunks the misconception that uncorrelated data implies independence. Multifractal cartoons with uncorrelated increments can still exhibit significant structure and dependence.</li>
<li><strong>Introduction of “trading time” to capture varying market speed</strong>: “Less mathematically oriented observers describe the panels at the bottom of figure 1 (both the real data and forgeries) as corresponding to markets that proceed at different ‘speeds’ at different times. This description may be very attractive but remains purely qualitative until ‘speed’ and the process that controls the variation of speed are quantified.” This introduces the concept of “trading time” as a way to quantify the subjective experience of varying market speed, a key element of the BMMT model.</li>
</ol>
</section>
<section id="limitations-of-cartoon-models" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-cartoon-models">Limitations of Cartoon Models:</h3>
<ul>
<li><strong>Inability to fully predict power-law tails</strong>: The cartoons, being based on multinomial cascades, struggle to accurately represent the long-tailed distributions observed in real financial data.</li>
<li><strong>Coupling of H and multifractal time</strong>: Unlike their continuous-time counterparts, the cartoon models impose a dependence between the Hölder exponent (H) and the multifractal time.</li>
<li><strong>Singular perturbation in mesofractal cartoons</strong>: The specific construction of the mesofractal cartoons introduces an undesirable singular perturbation, highlighting a limitation of the three-interval symmetric generators.</li>
</ul>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What are Cartoon Brownian Motions and why are they used to model financial prices?</p>
<p>Cartoon Brownian Motions (CBMs) are simplified, recursively generated functions designed to mimic the complex behavior of financial prices. They are called “cartoons” because they intentionally emphasize and distort certain features of real market data while remaining computationally simple and easy to visualize. These cartoons offer an intuitive way to understand the more complex model of Brownian Motion in Multifractal Time (BMMT), which is a more accurate but mathematically challenging model.</p></li>
<li><p>What makes financial price data challenging to model, and how do CBMs address those challenges?</p>
<p>Financial price data exhibits several characteristics that defy traditional modeling approaches:</p>
<ul>
<li>Continually varying volatility: The magnitude of price fluctuations changes over time, exhibiting periods of high activity interspersed with periods of relative calm.</li>
<li>Discontinuity or concentration: Prices can jump abruptly, creating sharp spikes in price charts.</li>
<li>Non-normality: Many price changes fall far outside the expectations of the bell curve, signifying fat-tailed distributions.</li>
</ul>
<p>CBMs address these features by using a recursive interpolation scheme. A simple geometric shape, called the “generator,” is used to repeatedly refine a starting trend line, producing increasingly complex patterns that capture the roughness, variability, and discontinuity observed in financial markets.</p></li>
<li><p>What is the “phase diagram” and how does it relate to different types of CBMs?</p>
<p>The “phase diagram” is a two-dimensional map representing the space of possible CBM generators. Each point in this diagram corresponds to a unique generator shape, and different regions of the diagram give rise to distinct classes of CBMs:</p>
<ul>
<li>Fickian: This corresponds to the classic Brownian Motion, where volatility is constant.</li>
<li>Unifractal: These CBMs exhibit long-range dependence or persistence, meaning past price changes influence future ones.</li>
<li>Mesofractal: These CBMs incorporate discontinuous jumps in prices.</li>
<li>Multifractal: This most general class combines features of the previous types, capturing the full complexity of financial price behavior.</li>
</ul></li>
<li><p>What are the key parameters controlling CBM behavior, and how do they manifest in price charts?</p>
<p>CBMs are controlled by two main parameters:</p>
<ul>
<li>H (Hölder exponent): Determines the degree of roughness or smoothness of the price curve. Higher H values indicate smoother trends, while lower values indicate more jagged, volatile behavior.</li>
<li>Generator shape: Dictates the pattern of price fluctuations. Different shapes lead to varying degrees of volatility clustering, jumps, and long-term trends.</li>
</ul></li>
<li><p>What is “trading time” and how does it explain varying volatility in multifractal CBMs?</p>
<p>Trading time is a concept used to explain the non-uniform speed at which multifractal CBMs evolve. It contrasts with the regular “clock time” of physics. Multifractal CBMs move uniformly in their own subjective trading time, which can speed up or slow down relative to clock time. This variation in speed gives rise to the observed periods of high and low volatility in financial markets.</p></li>
<li><p>What are the limitations of using CBMs to model financial prices?</p>
<p>While offering valuable insights, CBMs are simplifications and possess certain limitations:</p>
<ul>
<li>Constrained tail behavior: Unlike real price data, CBMs based on simple generators do not exhibit the extreme power-law tails associated with rare but significant market events.</li>
<li>Interdependence of parameters: In some CBMs, the choice of H and the multifractal trading time are linked, restricting the model’s flexibility compared to continuous-time models.</li>
<li>Singular perturbations: Certain mesofractal CBMs exhibit a peculiar behavior where slight changes in parameters lead to drastic changes in price patterns, which may not accurately reflect real market dynamics.</li>
</ul></li>
<li><p>How do CBMs relate to other fractal models of financial prices?</p>
<p>CBMs serve as stepping stones to understand more complex continuous-time fractal models:</p>
<ul>
<li>Fractional Brownian Motion (FBM): Unifractal CBMs are simplified versions of FBM, which incorporates long-range dependence.</li>
<li>Lévy Stable Processes (LSP): Mesofractal CBMs relate to LSP, which features discontinuous jumps in prices.</li>
<li>Brownian Motion in Multifractal Time (BMMT): This sophisticated model, for which multifractal CBMs are cartoons, combines FBM with a multifractal trading time to capture the full complexity of financial price dynamics.</li>
</ul></li>
<li><p>What are the practical implications of using CBMs in finance?</p>
<p>CBMs, despite their limitations, offer a powerful tool for:</p>
<ul>
<li>Visualizing market complexity: They provide an intuitive way to understand and communicate the irregular and multi-scale nature of financial price behavior.</li>
<li>Testing hypotheses: Their computational simplicity allows for rapid exploration of various market scenarios and model parameter sensitivity.</li>
<li>Developing trading strategies: While not directly predictive, CBMs can inform the design of trading algorithms that are robust to varying volatility and extreme price movements.</li>
</ul></li>
</ol>
</section>
<section id="a-study-guide" class="level2">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of self-affinity and its relevance to financial market charts.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Self-affinity refers to the property of a geometric shape where its parts resemble the whole when scaled differently along different axes. Financial market charts exhibit self-affinity, meaning they appear similar when zoomed in or out, with time and price scales adjusted accordingly.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe the construction process of a Fickian cartoon function using recursive interpolation.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The construction starts with a linear “initiator.” A three-interval “generator” replaces the initiator, creating an oscillation. Each generator interval is then recursively replaced by a scaled and potentially reflected version of the generator, continuing indefinitely.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why is the “square-root rule” relevant in the context of Fickian diffusion and Brownian motion?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The “square-root rule” states that the standard deviation of a sum of independent random variables scales with the square root of their number. In Fickian diffusion and Brownian motion, this rule manifests as the displacement of a particle being proportional to the square root of time.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<p>Define unifractality and explain how it differs from the Fickian case in terms of the Hölder exponent.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Unifractality implies a single Hölder exponent (H) governs the scaling behavior of the function at all scales. While Fickian behavior is a specific case of unifractality with <img src="https://latex.codecogs.com/png.latex?H=1/2">, other values of H within <img src="https://latex.codecogs.com/png.latex?0%3CH%3C1"> lead to different types of unifractal behavior.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>Discuss the concept of persistence in unifractal cartoons and its implications for market behavior.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Persistence describes the tendency of a function to continue its current trend. In unifractal cartoons, H&gt;1/2 signifies positive persistence, implying trends are more likely to continue. H&lt;1/2 indicates anti-persistence, implying frequent trend reversals.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>How do mesofractal cartoons incorporate price discontinuity, and what is the role of the exponent α?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Mesofractal cartoons incorporate discontinuity by assigning a zero Hölder exponent (H2=0) to the middle interval of the generator. The exponent α (1/H̃) governs the distribution of jump sizes, with larger α indicating smaller and more frequent jumps.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the limitations of the Lévy stable exponent α exceeding 2.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>When α&gt;2 in L-stable processes, the sum of absolute values of jumps and moves diverges, leading to unbounded variation. Upon randomization, this divergence creates infinities that cannot be renormalized away, rendering the model mathematically inconsistent.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the condition for multifractality, and how does it differ from unifractality and mesofractality?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Multifractality occurs when the Hölder exponents (Hm) associated with different generator intervals are all non-zero and distinct. This implies a multiplicity of scaling behaviors across different time scales, contrasting with the single H of unifractality and the two exponents of mesofractality.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of “trading time” and its role in relating unifractal and multifractal cartoons.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Trading time” is a subjective time scale that maps a unifractal cartoon onto a multifractal one. It allows for varying “speeds” of price changes, accounting for the observed volatility clustering in financial markets.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe one limitation of multifractal cartoons compared to continuous-time multifractal models.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Multifractal cartoons generated from a three-interval symmetric generator constrain the choice of the unifractal oscillation and the multifractal time. They cannot be chosen independently, unlike continuous-time models where they can be independent random variables.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li>Compare and contrast the three fractal models of price variation proposed by Mandelbrot: the M 1963 model, the M 1965 model, and the M 1972/97 model. Discuss their strengths, weaknesses, and applicability to real financial data.</li>
<li>Explain the “baby theorem” and its significance in understanding multifractal cartoons. How does the concept of trading time contribute to this understanding?</li>
<li>Discuss the limitations of traditional “root-mean-square” volatility as a measure of price fluctuations in the context of multifractal models. What alternative measures of volatility are more appropriate, and why?</li>
<li>Critically evaluate the use of cartoons as representations of complex financial phenomena. Discuss their advantages, limitations, and the potential pitfalls of relying solely on cartoon models.</li>
<li>Elaborate on the concept of “spontaneous resonances” in financial markets and how multifractality might provide insights into understanding these resonances. How might this understanding contribute to improved economic policy and institutional arrangements?</li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<dl>
<dt>Self-affinity</dt>
<dd>
A property of a geometric shape where its parts resemble the whole when scaled differently along different axes.
</dd>
<dt>Recursive Interpolation</dt>
<dd>
A process of repeatedly subdividing and interpolating a function using a predefined “generator” shape.
</dd>
<dt>Fickian Diffusion</dt>
<dd>
A type of diffusion characterized by the square-root rule, where the displacement of a particle is proportional to the square root of time.
</dd>
<dt>Brownian Motion</dt>
<dd>
A random process exhibiting continuous, erratic movement, often used to model financial price changes.
</dd>
<dt>Hölder Exponent</dt>
<dd>
(H)A measure of the local scaling behavior of a function, quantifying its roughness or smoothness.
</dd>
<dt>Unifractality</dt>
<dd>
A property of a function where a single Hölder exponent governs its scaling behavior at all scales.
</dd>
<dt>Persistence</dt>
<dd>
The tendency of a function to continue its current trend. Positive persistence indicates trends are more likely to continue, while negative persistence (anti-persistence) implies frequent trend reversals.
</dd>
<dt>Mesofractality</dt>
<dd>
A property of a function exhibiting discontinuities with a specific scaling behavior governed by an exponent α.
</dd>
<dt>L-stable Process</dt>
<dd>
A type of random process with heavy-tailed distributions, characterized by the exponent α, which determines the tail behavior.
</dd>
<dt>Multifractality</dt>
<dd>
A property of a function exhibiting a range of Hölder exponents across different time scales.
</dd>
<dt>Volatility Clustering</dt>
<dd>
The tendency of large price fluctuations to be followed by other large fluctuations, and small fluctuations to be followed by small fluctuations.
</dd>
<dt>Trading Time</dt>
<dd>
A subjective time scale that accounts for the varying “speeds” of price changes in financial markets.
</dd>
<dt>Compound Function</dt>
<dd>
A function created by composing two or more functions, where the output of one function becomes the input of another.
</dd>
<dt>Subordination</dt>
<dd>
A specific type of compounding where the inner function is a random process with independent increments.
</dd>
<dt>Multinomial Cascade</dt>
<dd>
A specific mathematical construction used to generate multifractal measures with a limited range of possible outcomes.
</dd>
<dt>Lacunarity</dt>
<dd>
A measure of the distribution of gaps or holes in a fractal or multifractal structure.
</dd>
<dt>Singular Perturbation</dt>
<dd>
A mathematical concept where a small change in a parameter leads to a large and discontinuous change in the solution of a problem.
</dd>
<dt>Dimension Anomalies</dt>
<dd>
Deviations from the expected relationship between fractal dimension and other properties of a fractal, often arising from complex scaling behaviors.LocalizationThe concentration of a function’s values within a specific range or region.
</dd>
</dl>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 3},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Scaling in Financial Prices 3.”</span> March
10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:58 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Scaling in financial prices 4</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/</link>
  <description><![CDATA[ 





<section id="scaling-in-financial-prices-iv.-multifractal-concentration" class="level1 page-columns page-full">
<h1>Scaling in financial prices: IV. Multifractal concentration</h1>
<blockquote class="blockquote">
<p>“In the Brownian model, such a high level of concentration has a probability so minute that it should never happen. Unfortunately for the model, it happens every decade.”</p>
</blockquote>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: III. IV. Multifractal concentration” <span class="citation" data-cites="mandelbrot2001Scaling4">(Mandelbrot 2001)</span> Mandelbrot explores the concept of concentration in financial price variations, moving beyond the limitations of traditional Brownian motion models.</p>
<p>It introduces and contrasts three states of concentration: absent (as in Brownian motion), hard (as in the author’s earlier mesofractal model), and soft (the novel multifractal model).</p>
<p>Mandelbrot argues that the multifractal model, characterized by a tunable exponent D, offers a more realistic representation of financial data by capturing a “soft” concentration where a small proportion of days accounts for a significant portion of overall variance, unlike the unrealistic extremes of the other models. The paper uses mathematical analysis, simulations, and visual representations to illustrate the properties of multifractal concentration and its advantages over existing models. It highlights the importance of understanding concentration for accurately modeling and predicting financial market behavior.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling4" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: IV. Multifractal Concentration.”</span> <em>Quantitative Finance</em> 1 (6): 641–49. <a href="https://doi.org/10.1088/1469-7688/1/6/306">https://doi.org/10.1088/1469-7688/1/6/306</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><blockquote class="blockquote">
<p>“The multifractals provide a new ‘in-between’ scenario that is intermediate between the familiar scenarios exemplified above.” “Soft concentration can be ‘tuned’ to fall anywhere between the unacceptable extremes of absent or hard concentration.”</p>
</blockquote>
<section id="summary-of-the-third-paper" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-third-paper">Summary of the third paper</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<p>– <strong>Critique of the Brownian Model in Finance</strong>: The Brownian model, with its assumption of independent and normally distributed price changes, fails to account for the observed concentration of price variation in real financial markets. This model predicts “absent concentration”, where each day’s contribution to overall price change is negligible. - <strong>Introduction of Multifractal Concentration</strong>: Mandelbrot proposes an alternative model, the “multifractal model”, which incorporates long-range dependence and non-Gaussian distributions. This model predicts a “soft” form of concentration, where a significant portion of price variation is concentrated in a relatively small number of days, characterized by the fractal dimension D. - <strong>Comparison with Mesofractal Model</strong>: The earlier “mesofractal model” proposed by Mandelbrot in 1963 also addressed concentration but predicted a more extreme “hard” concentration, where a single day could account for a substantial portion of price change. This is deemed unrealistic in the long run.</p>
<blockquote class="blockquote">
<p>“Multifractal concentration consists in the fact that D &lt; 1.” “The multifractal model introduces a very different and new form of concentration that will be called ‘soft’, ‘relative’ or ‘multifractal’.”</p>
</blockquote>
</section>
<section id="most-important-ideasfacts" class="level3">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><strong>Empirical Evidence of Concentration</strong>: Mandelbrot highlights real-world examples demonstrating concentrated price variation. For instance, “Of the portfolio’s positive returns over the 1980s, fully 40% was earned during ten days, about 0.5% of the number of trading days in a decade.” Such extreme concentration is highly improbable under the Brownian model.</li>
<li><strong>Three States of Concentration</strong>: The paper distinguishes between “absent”, “hard”, and “soft” concentration. The Brownian model exemplifies absent concentration, the mesofractal model hard concentration, and the multifractal model soft concentration. Fractal Dimension D: The exponent D in the multifractal model quantifies the degree of concentration. As D increases from 0 to 1, concentration softens, approaching the Brownian case (D = 1) where concentration is absent.</li>
<li><strong>Role of Global Dependence</strong>: The multifractal model’s soft concentration stems from the strong long-range dependence in price changes, invalidating the standard theory of extreme values applicable to independent variables.</li>
<li><strong>Multifractal Trading Time</strong>: The multifractal model can be visualized as Brownian motion occurring in a “multifractal trading time”, where time intervals are stretched or compressed in a fractal manner, leading to periods of high and low volatility.</li>
<li><strong>Application of Variance</strong>: While variance is not an ideal measure of volatility in fractal models, the paper justifies its use for analyzing concentration due to its link with Brownian motion and ease of calculation.</li>
</ol>
</section>
<section id="limitations-of-cartoon-models" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-cartoon-models">Limitations of Cartoon Models:</h3>
<ul>
<li><strong>Inability to fully predict power-law tails</strong>: The cartoons, being based on multinomial cascades, struggle to accurately represent the long-tailed distributions observed in real financial data.</li>
<li><strong>Coupling of H and multifractal time</strong>: Unlike their continuous-time counterparts, the cartoon models impose a dependence between the Hölder exponent (H) and the multifractal time.</li>
<li><strong>Singular perturbation in mesofractal cartoons</strong>: The specific construction of the mesofractal cartoons introduces an undesirable singular perturbation, highlighting a limitation of the three-interval symmetric generators.</li>
</ul>
</section>
<section id="conclusions" class="level3">
<h3 class="anchored" data-anchor-id="conclusions">Conclusions</h3>
<p>Mandelbrot argues that the multifractal model, with its concept of soft concentration, provides a more realistic framework for understanding the complex dynamics of financial markets compared to the traditional Brownian model. The fractal dimension D offers a tunable parameter to capture varying degrees of concentration observed in different markets or time scales. The paper sets the stage for further exploration of multifractal concentration and its implications for risk management, portfolio optimization, and other financial applications.</p>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What is “concentration” in the context of financial price changes?</p>
<p>Concentration refers to the phenomenon where a significant proportion of the overall price change over a given period is attributed to a relatively small number of trading days. In other words, a few large price movements contribute disproportionately to the total variation.</p></li>
<li><p>How does concentration differ in the Brownian model, the mesofractal model, and the multifractal model?</p>
<ul>
<li>Brownian model: This model predicts “absent” concentration, meaning each day’s contribution to the overall price change is negligible.</li>
<li>Mesofractal model: This model exhibits “hard” concentration, where a few of the largest daily price changes account for a significant portion of the total change, regardless of the total number of trading days.</li>
<li>Multifractal model: This model proposes “soft” concentration. While individual large price changes are asymptotically negligible, a substantial proportion of the total change is concentrated in a number of days of the order of ND, where N is the total number of days and D is a fractal dimension (0 &lt; D &lt; 1).</li>
</ul></li>
<li><p>What causes concentration in these models?</p>
<ul>
<li>Brownian Model: No concentration exists because price changes are assumed to be IID - independent and identically distributed.</li>
<li>Mesofractal Model: Concentration arises from the heavy tails of the Lévy stable distributions used to model price changes. These heavy tails allow for a higher probability of extreme events.</li>
<li>Multifractal Model: Concentration stems from long-range dependence in the data. While individual large price changes are negligible, the clustering of smaller yet significant changes within specific periods contributes to the overall concentration.</li>
</ul></li>
<li><p>Why is the study of concentration important for understanding financial markets?</p>
<p>Concentration challenges the traditional assumption that daily price changes are negligible and highlights the importance of extreme events in shaping market dynamics. Understanding concentration helps in:</p>
<ul>
<li>Risk management: Accurately assessing the probability and impact of large price swings is crucial for managing risk in financial portfolios.</li>
<li>Volatility modeling: Traditional volatility measures based on variance might not adequately capture the risk associated with concentrated price changes.</li>
<li>Developing more realistic market models: Incorporating concentration into financial models leads to a more accurate representation of market behavior and better predictions.</li>
</ul></li>
<li><p>What is “multifractal trading time”?</p>
<p>Multifractal trading time is a concept used in the multifractal model to describe the non-linear relationship between clock time and the rate at which information flows and impacts price changes. It suggests that markets experience periods of intense activity (high information flow) interspersed with periods of relative calm, leading to an uneven distribution of price volatility over time.</p></li>
<li><p>How does the fractal dimension D affect the level of concentration in the multifractal model?</p>
<p>The fractal dimension D is a measure of the irregularity and clustering of price volatility in the multifractal model. A lower value of D indicates stronger concentration, meaning a larger proportion of the total price change is concentrated in a smaller fraction of trading days. Conversely, a higher D implies weaker concentration, closer to the Brownian model’s uniform distribution of volatility.</p></li>
<li><p>What are the limitations of using variance as a measure of volatility in the context of multifractal concentration?</p>
<p>Variance, which relies on the assumption of asymptotic negligibility of individual price changes, might not be an appropriate measure of volatility when dealing with multifractal concentration. This is because it can underestimate the risk associated with the clustering of significant price movements within specific periods. Alternative measures that account for the long-range dependence and heavy tails of the data might be needed.</p></li>
<li><p>What are the implications of multifractal concentration for practical applications in finance?</p>
<p>Multifractal concentration has significant implications for:</p>
<ul>
<li>Portfolio optimization: Diversification strategies might need to be adjusted to consider the potential impact of concentrated price changes on portfolio performance.</li>
<li>Option pricing: Models need to incorporate the non-uniform distribution of volatility over time to accurately price options.</li>
<li>Algorithmic trading: Trading algorithms should be designed to adapt to periods of high and low volatility clustering to avoid excessive losses or missed opportunities.</li>
</ul></li>
</ol>
</section>
<section id="a-study-guide" class="level2">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the fundamental difference in how the Brownian model and the mesofractal model view the contribution of daily price changes to overall variance?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The Brownian model posits that each daily price change contributes negligibly to the overall variance, leading to “absent” concentration. Conversely, the mesofractal model proposes that a small number of large price changes contribute significantly to the variance, resulting in “hard” concentration.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe “hard” concentration in the context of financial price changes.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Hard” concentration refers to the phenomenon where a significant proportion of the overall variance in financial price changes is attributed to a very small and fixed number of large price movements, regardless of the total number of days considered.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why is the traditional concept of an “outlier” potentially problematic when analyzing financial data?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The concept of an “outlier” implies that extreme events are extraneous to the system being studied. In finance, however, large price changes may be intrinsic to market dynamics and carry essential information, thus dismissing them as outliers could lead to an incomplete understanding of price behavior.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<p>What key characteristic distinguishes “soft” concentration from “hard” concentration?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Soft” concentration, unlike “hard” concentration, asserts that while the largest individual price changes might be negligible, a substantial portion of the overall variance can be attributed to a proportionally smaller number of days as the total number of days increases.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the role of the fractal dimension, D, in the concept of “soft” concentration.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The fractal dimension, D, in “soft” concentration, quantifies the rate at which the number of days contributing significantly to the variance increases with the total number of days (N). A D value between 0 and 1 indicates that the number of significant days increases as ND, allowing for a flexible range of concentration levels.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>How does the multifractal model challenge the standard theory of extreme values in probability theory?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The multifractal model, due to the strong dependence among price changes, invalidates the standard theory of extreme values, which assumes independence. A different theoretical framework, stemming from multifractal measures, is required to analyze extremes in this context.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is “trading time” in the context of the multifractal model?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Trading time” (θ(t)) in the multifractal model is a non-linear transformation of clock time (t). It represents a distorted time scale where the frequency of large price changes is amplified, leading to the observed bursts of volatility.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>Briefly describe the construction of the Bernoulli binomial measure, highlighting its key parameter.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The Bernoulli binomial measure is constructed recursively by dividing an interval into halves and assigning masses (m0 and m1 = 1-m0) to each half. This process is repeated for each subsequent half, resulting in a highly uneven distribution of mass across the interval. The key parameter, m0, determines the degree of this unevenness.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the significance of the coarse Hölder exponent, α(t), in understanding multifractal measures?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><strong>The coarse Hölder exponent, α(t), quantifies the local scaling behavior of a multifractal measure at a point t. It provides a measure of the singularity or concentration of the measure around that point. </strong></p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the relationship between the function f(α) and the concept of box dimension in fractal geometry.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The function f(α) maps the coarse Hölder exponent (α) to its corresponding fractal dimension. This function characterizes the multifractal spectrum, revealing the range of scaling exponents and their associated dimensions within the measure. The maximum value of f(α) typically represents the box dimension of the support of the measure, i.e., the set where the measure is concentrated.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li>Compare and contrast “absent,” “hard,” and “soft” concentration in the context of financial price changes. Discuss the strengths and weaknesses of each model in capturing the empirical realities of market fluctuations.</li>
<li>Explain how the concept of “trading time” helps the multifractal model capture the clustering and bursts of volatility observed in financial markets. Discuss the implications of this concept for risk management and portfolio allocation strategies.</li>
<li>Critically evaluate the use of variance as a measure of volatility in financial markets. Discuss how the insights from the multifractal model challenge the traditional reliance on variance and suggest alternative measures that might be more appropriate.</li>
<li>Discuss the conceptual shift from viewing extreme price movements as “outliers” to recognizing them as integral parts of market dynamics. How does the multifractal model facilitate this shift, and what are its implications for our understanding of financial risk?</li>
<li>Explain how the Bernoulli binomial measure serves as a simple yet powerful model for understanding the key features of multifractality. Discuss its limitations and potential extensions to more complex and realistic scenarios.</li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<dl>
<dt>Brownian Model</dt>
<dd>
A model of financial prices that assumes price changes are independent and identically distributed, following a normal distribution. This model results in “absent” concentration.
</dd>
<dt>Mesofractal Model</dt>
<dd>
A model of financial prices that utilizes Lévy stable distributions, leading to “hard” concentration, where a few large price changes dominate the overall variance.
</dd>
<dt>Multifractal Model</dt>
<dd>
A model of financial prices that incorporates scaling and long-range dependence, resulting in “soft” concentration, where a proportionally smaller number of days contribute significantly to the variance as the total number of days increases.
</dd>
<dt>Hard Concentration</dt>
<dd>
A form of concentration where a fixed and small number of large price changes account for a significant proportion of the overall variance.]
</dd>
<dt>Soft Concentration</dt>
<dd>
A form of concentration where the number of days contributing significantly to the variance increases as a power law of the total number of days, with the exponent being a fractal dimension between 0 and 1.
</dd>
<dt>Fractal Dimension (D)</dt>
<dd>
An exponent that characterizes the scaling behavior of a fractal object or process. In the context of multifractal concentration, it quantifies the rate at which the number of significant days increases with the total number of days.
</dd>
<dt>Trading Time (θ(t))</dt>
<dd>
A non-linear transformation of clock time used in the multifractal model to account for the clustering and bursts of volatility observed in financial markets.
</dd>
<dt>Coarse Hölder Exponent (α(t))</dt>
<dd>
A measure of the local scaling behavior of a multifractal measure at a point t, indicating the singularity or concentration of the measure around that point.
</dd>
<dt>f(α)</dt>
<dd>
A function that maps the coarse Hölder exponent to its corresponding fractal dimension, characterizing the multifractal spectrum of the measure.
</dd>
<dt>Box Dimension</dt>
<dd>
A type of fractal dimension that quantifies the scaling of the number of boxes needed to cover a set as the box size decreases. In the context of multifractals, it often corresponds to the dimension of the support of the measure.
</dd>
<dt>Outlier</dt>
<dd>
An observation that lies an abnormal distance from other values in a random sample. In finance, large price changes are often misclassified as outliers.
</dd>
</dl>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 4},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Scaling in Financial Prices 4.”</span> March
10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:58 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Sine function</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/shinylive/</link>
  <description><![CDATA[ 





<p>The plot below allows you to control parameters used in the sine function. Experiment with the <em>period</em>, <em>amplitude</em>, and <em>phase shift</em> to see how they affect the graph.</p>
<pre class="shinylive-python" data-engine="python"><code>#| '!! shinylive warning !!': |
#|   shinylive does not work in self-contained HTML documents.
#|   Please set `embed-resources: false` in your metadata.
#| standalone: true
#| components: [editor, viewer]
#| layout: horizontal
#| viewerHeight: 800
from shiny import App, render, ui
import numpy as np
import matplotlib.pyplot as plt

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("period", "Period", 0.5, 2, 1, step=0.5),
            ui.input_slider("amplitude", "Amplitude", 0, 2, 1, step=0.25),
            ui.input_slider("shift", "Phase shift", 0, 2, 0, step=0.1),
        ),
        ui.panel_main(
            ui.output_plot("plot"),
        ),
    ),
)


def server(input, output, session):
    @output
    @render.plot(alt="Sine function")
    def plot():
        t = np.arange(0.0, 4.0, 0.01)
        s = input.amplitude() * np.sin(
            (2 * np.pi / input.period()) * (t - input.shift() / 2)
        )
        fig, ax = plt.subplots()
        ax.set_ylim([-2, 2])
        ax.plot(t, s)
        ax.grid()


app = App(app_ui, server)
</code></pre>
<p>this code shows how to access the Shinylive app in from the apps folder using a helper function from the root dierctory.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Sine Function},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/shinylive/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Sine Function.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/shinylive/">https://orenbochman.github.io/posts/2024/shinylive/</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/shinylive/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:58 GMT</pubDate>
</item>
<item>
  <title>Bayesian Gaussian mixture model</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-mixture-model.html</link>
  <description><![CDATA[ 





<p>this is a chart from https://en.wikipedia.org/wiki/File:Bayesian-gaussian-mixture-vb.svg by https://en.wikipedia.org/wiki/User:Benwing</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tikz-mixture-model_files/figure-html/mixture-model-1.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Bayesian Gaussian mixture model"><img src="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-mixture-model_files/figure-html/mixture-model-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Bayesian Gaussian mixture model"></a></p>
</figure>
</div>
<figcaption>Bayesian Gaussian mixture model</figcaption>
</figure>
</div>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Bayesian {Gaussian} Mixture Model},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-mixture-model.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Bayesian Gaussian Mixture Model.”</span>
March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-mixture-model.html">https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-mixture-model.html</a>.
</div></div></section></div> ]]></description>
  <category>tikz</category>
  <category>Bayesian Statistics</category>
  <category>mixture models</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-mixture-model.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>Complete pooling</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-complete-pooling.html</link>
  <description><![CDATA[ 





<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tikz-complete-pooling_files/figure-html/complete-pooling-1.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Complete pooling"><img src="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-complete-pooling_files/figure-html/complete-pooling-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Complete pooling"></a></p>
</figure>
</div>
<figcaption>Complete pooling</figcaption>
</figure>
</div>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Complete Pooling},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-complete-pooling.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Complete Pooling.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-complete-pooling.html">https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-complete-pooling.html</a>.
</div></div></section></div> ]]></description>
  <category>tikz</category>
  <category>game theory</category>
  <category>signaling games</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-complete-pooling.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>Fine-tune llm for Style and Grammar advice.</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/readability.html</link>
  <description><![CDATA[ 





<section id="fine-tuning-llm-for-readability" class="level1">
<h1>Fine tuning LLM for Readability</h1>
<p>Question 1: LLM are amazing - can I fine tune a state of the art LLM like Lama 3.1 with what I consider to be very high quality writing from my private library content to create a writing assistant?</p>
<p>Can I do it in a way that is aware of the writer’s style and the text domain other high level features so that the prompt can be used to condition the output this way.</p>
<p>Can I test it on wikipedia articles and see if it can improve the readability of existing and new articles?</p>
<section id="learning-to-write-well" class="level2">
<h2 class="anchored" data-anchor-id="learning-to-write-well">Learning to write well</h2>
<p>learning to write from:</p>
<ul>
<li>“Best American Science Writing” series</li>
<li>Bast papers - sourced from leading conferences</li>
<li>Authors
<ul>
<li>Oliver Sacks,</li>
<li>Natalie Angier,</li>
<li>Alan Lightman,</li>
<li>Sylvia Nasar,</li>
<li>Matt Ridley
<ul>
<li>Genome</li>
<li>Red Queen</li>
<li>Viral</li>
</ul></li>
<li>Steven Pinker
<ul>
<li>How the Mind Works</li>
<li>The Blank Slate: The Modern Denial of Human Nature</li>
<li>The Language Instinct: How the Mind Creates Language</li>
<li>The Secret Life of Verbs</li>
<li>Words and Rules</li>
<li>Hotheads</li>
</ul></li>
<li>Richard Dawkins
<ul>
<li>Selfish gene</li>
<li></li>
</ul></li>
</ul></li>
<li>Great Explianers
<ul>
<li>Richard Feynman
<ul>
<li>lectures on physics</li>
<li>QED</li>
<li>The pleasure of finding things out</li>
<li>The character of physical law</li>
<li>Surely you’re joking</li>
<li>What do you care about what other people think</li>
<li>Six easy pieces</li>
</ul></li>
<li>Levitt and dunbar
<ul>
<li>Freakonomics</li>
</ul></li>
<li>Michel Foucout
<ul>
<li>Discipline and Punish</li>
<li>The Birth of the Clinic</li>
<li>The Order of Things</li>
<li>The Archaeology of Knowledge</li>
<li>Madness and Civilization<br>
</li>
</ul></li>
<li>Leonard Susskind
<ul>
<li>Theoretical Minimum</li>
</ul></li>
<li>Richard Hawkins</li>
<li>Jared Diamond
<ul>
<li>Guns, Germs, and Steel</li>
<li>Collapse: How Societies Choose to Fail or Succeed</li>
<li>The World Until Yesterday: What Can We Learn from Traditional Societies?</li>
<li>The Invisible Hands: Top Hedge Fund Traders on Bubbles, Crashes, and Real Money</li>
<li>etc</li>
</ul></li>
<li>C.S. Lewis
<ul>
<li>A Grief Observed</li>
<li>The Problem of Pain</li>
<li>The Screwtape Letters</li>
<li>The Great Divorce</li>
<li>Mere Christianity</li>
<li>A Preface to Paradise Lost</li>
</ul></li>
<li>Eric Metaxas
<ul>
<li>Martin Luther</li>
<li>Bonhoffer</li>
<li>Discussing Mere Chritianity</li>
</ul></li>
<li>Yuval Noah Harari
<ul>
<li>Sapiens - A brief history of mankind</li>
<li>Homo Deus</li>
<li>21 Lessons for the 21st Century Audiobook</li>
</ul></li>
<li>Primo Levi
<ul>
<li>The Periodic Kingdom</li>
</ul></li>
<li>Mcluhan Marshall
<ul>
<li>The Medium Is The Massage</li>
</ul></li>
<li>Empire of the Summer moon</li>
<li>Hidden Figures</li>
<li>Art of War</li>
<li>Book of five rings</li>
<li>Adam Smith</li>
<li>The pencil</li>
<li>Dan Ariely</li>
<li>Chris Anderson
<ul>
<li>The long tail</li>
</ul></li>
<li><h2 id="plato" class="anchored">Plato</h2></li>
<li><h2 id="aristotle" class="anchored">Aristotle</h2></li>
<li>Machiavelli
<ul>
<li>The prince</li>
</ul></li>
<li>James Surowiecki
<ul>
<li>The Wisdom of Crowds</li>
</ul></li>
<li>Robert A. Caro
<ul>
<li>The Power Broker: Robert Moses and the Fall of New York</li>
<li>Working</li>
<li>Master of the Senate</li>
</ul></li>
<li>Stephen Jay Gould</li>
<li>Ian Ayres
<ul>
<li>Super Crunchers -</li>
</ul></li>
<li>Giles Milton
<ul>
<li>Nathaniel’s Nutmeg</li>
<li>D-Day The Soldiers’ Story</li>
<li>When Hitler Took Cocaine and Lenin Lost His Brain</li>
<li>Fascinating Footnotes From History</li>
<li>Churchill’s Ministry of Ungentlemanly Warfare</li>
<li>Wolfram The Boy Who Went to War</li>
<li>The Extraordinary Story of Thomas Pellow and Islam’s One Million White Slaves</li>
<li>The Stalin Affair: The Impossible Alliance that Won the War</li>
<li>Samurai William: The Englishman Who Opened Japan</li>
<li>Edward Trencom’s Nose</li>
<li>Russian Roulette - A Deadly Game: How British Spies Thwarted Lenin’s Global Plot</li>
</ul></li>
</ul></li>
</ul>
<p>etc</p>
<p>the ideas here are :</p>
<ol type="1">
<li>the primary text</li>
<li>the wikipedia article on</li>
<li>summaries</li>
</ol>
<p>where we want to focus on the primary text but and also to highlight its structure</p>
<p>The primary text has lots of words but one top level structure a few chapter level structure many paragraph level structure</p>
<p>idealy we want to learn structures:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bparagraph%7D%20%5Cto%20%20%5Ccdots%20%5Cto%20%20%5Ctext%7Btop%20level%7D%0A"> and idealy we would like to learn to research</p>
<p>i.e.&nbsp;source the ‘facts’ from reliable sources which we cite inline.</p>
<p>teach an LLM to rewrite text with high fidelity yet increase thier readability.</p>
<p>high quaity data sets:</p>
<ol type="1">
<li>wikipedia v.s. higher quality e.g.&nbsp;britanica, or others</li>
</ol>
<ul>
<li>check this isn’t the best of wikipedia</li>
<li>check the citations (is there a significant overlap we are in the ballpark)</li>
</ul>
<ol start="2" type="1">
<li></li>
</ol>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Fine-Tune Llm for {Style} and {Grammar} Advice.},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/readability.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Fine-Tune Llm for Style and Grammar
Advice.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/readability.html">https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/readability.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/readability.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>LLM and the missing link</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/the-missing-link.html</link>
  <description><![CDATA[ 





<p>The missing link is my name for a set of agents that should be able to edit wikipedia or at least to significantly reduce the effort needed to contribute to wikipedia.</p>
<ul>
<li>Wikipedia has a number of task and challenges</li>
<li>Wikipedia also offers unique opportunities for learning not available elsewhere (edit histories, talk pages, etc.)</li>
</ul>
<p>tasks:</p>
<ol type="1">
<li>Wikification - use entropy maximize the entropy and mutual information of the wiki - i.e.&nbsp;choose links to other articles that are most likely to be clicked on rather than the the most most famous or like USA - which contributes no information to the reader.</li>
<li>inlining citations</li>
<li>adding missing references</li>
<li>adding missing sections across languages</li>
<li>Improving readability
<ul>
<li>most wikipedia articles are poorly written when compared with the best science writing in the world.</li>
</ul></li>
<li>Addressing biases and COI issues. [^we nay need to train the LLM on material that does not include wikipedia or to create a version that can separate wikipedia and non wikipedia material possibly using CLIP?]
<ul>
<li>with the advent of LLM we can now collect all the material in an articles Sources and use it to rewrite a more complete article and perhaps one with fewer biases.<sup>1</sup> Further more it is fairly easy to source additional material from the web and other sources and thus again allowing a second view of the the articles point of view.</li>
</ul></li>
<li>Addressing vandalism and spam - this can be learned across articles</li>
<li>Extracting wikidata from articles again this can be learned across many articles by mapping the article to the wikidata entries of the primary and secondary entities.</li>
<li>Replace low register terms with high register terms - with an eye to improving readability. One hopes that the higher register terms are more precise and less ambiguous.</li>
<li>Replace highly ambiguous terms with less ambiguous terms. The same perhaps for sentences.</li>
<li>Make use of other media - diagrams, maths, code, images, videos, maps and so on should be more than referenced in the text.</li>
</ol>


<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;LLM inherit and amplify biases from thier training material, so this aspect is an area of active research and may require some creativity</p></div></div>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {LLM and the Missing Link},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/the-missing-link.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“LLM and the Missing Link.”</span> March 10,
2025. <a href="https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/the-missing-link.html">https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/the-missing-link.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/the-missing-link.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>LLM the good the bad and the ugly</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/</link>
  <description><![CDATA[ 





<section id="language-models" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="language-models">Language Models</h2>
<p>Early when I saw the first text by gpt2 I was intrigued that some of the researchers that did not get access to the early model and had to re-create the model based on just the paper reported that that thier model had ‘probabilities’ of generating all those texts given the prompt.</p>
<p>This seems to be a rather <em>weak claim</em> - after all a million blindfolded monkeys banging on type writers would have some probability of generating those texts.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Chimpanzee_seated_at_typewriter.jpg/512px-Chimpanzee_seated_at_typewriter.jpg?20120413234640" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="One of a million IID monkeys at a typewriter   credit"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Chimpanzee_seated_at_typewriter.jpg/512px-Chimpanzee_seated_at_typewriter.jpg?20120413234640" class="img-fluid quarto-figure quarto-figure-left figure-img" width="250" alt="One of a million IID monkeys at a typewriter   credit"></a></p>
</figure>
</div>
<figcaption>One of a million <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">IID</a> monkeys at a typewriter <br> <a href="https://commons.wikimedia.org/wiki/File:Chimpanzee_seated_at_typewriter.jpg">credit</a></figcaption>
</figure>
</div>
</div></div><p>One point to make is that the monkeys might have a higher probability of generating the text then the researcher’s model - but that is a different story.</p>
<section id="the-origen-of-seq2seq-models" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-origen-of-seq2seq-models">The origen of seq2seq models</h3>
<p>If you learned the pre LLM language modeling you would be familiar with <a href="https://en.wikipedia.org/wiki/N-gram">N-grams</a> you would be better equipped to be critical of LLMs. [N-grams]<sup>1</sup> More generally skip grams allow to model n-grams with gaps i.e.&nbsp;there are some tokens that are not specified or skipped. Another generalization was the introduction of a N-grams n representing unknown tokens.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;is an ordered sequence of tokens. It could be words, characters, or unicode code point.</p></div></div><p>The N-grams abstraction allowed for development of probabilistic models that are the basis of LLMs. However these older models had one significant limitation - they could only model a fixed number of tokens. This is because the number of possible N-grams grows exponentially with the number of tokens.</p>
<p>Related v.s. Similar</p>
</section>
</section>
<section id="the-good" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-good">The good</h2>
<p>There are a few powerful ideas in this approach.</p>
<ol type="1">
<li>Capturing co-occurrence statistics.
<ul>
<li>The word ‘the’ is followed by a noun 50% of the time.</li>
<li>Collocations may have gaps and this is where</li>
<li>Skip grams generalize N-grams by allowing for gaps in the sequence.</li>
</ul></li>
<li>Learning from positive examples is the forte of classical language models. You can learn the regular parts of a language using such a probabilistic quite fast. Unfortunately most languages are far from regular.</li>
<li>Generalizing using <a href="https://en.wikipedia.org/wiki/Smoothing">smoothing</a> - When the frequency of N-grams for some words is low enough we don’t expect to see them in a corpus of some given size. You just can’t fit all the N-grams of a given size in a corpus of a given size. but we can use shorter N-grams to estimate the probability of longer N-grams. (And this is how language models can be used to generate text). We call this process smoothing as conceptually we are filling holes in the longer N-grams probability distribution by moving some of the mass from related N-grams - to look more like the distribution of formed by combining shorter N-grams.</li>
<li>Learning negative examples. With enough data we may be infer that the absence of certain trigrams in the distribution where the associated bigrams are common isn’t due to chance but due some excluding factor. They might be linguistic or perhaps censoring. Regardless to detect get to a certain confidence level say 95% we need to see lots of bigrams and no trigram. Note though that we may have some broken english or some clumsy constructions that are in our corpus - they tend to muddy the waters and render these negative examples particularly challenging to infer. In fact it is generally easier to learn more by increasing the size of the corpus and learning more from rarer positive examples and this is what LLM do. not just from the corpus but from the language. However just as children learning to generelize have to be taught that the plural of goose is geese and not gooses, learning from positive -</li>
</ol>
<p>The problems with ngrams is that once n gets big enough and the corpus doesnt scale with it ngrams learn to model the corpus rather than the language. This is because as the ngram gets longer around the central word eventuall the contexts is specific enough that there is only one matching next ngram to for the given context - so the next word is certain.</p>
<blockquote class="blockquote">
<p>The egg hit the wall and <strong>it</strong> broke.</p>
</blockquote>
<ul>
<li>It must be the case that the egg hit the wall and it broke right.</li>
<li>Unless we are in feudal japan where internal walls are made to a large extent from rice paper on a frames.<sup>2</sup></li>
<li>We could also be dealing with a decorative egg and a glass wall.</li>
<li>Or we could be dealing with a metaphorical egg and a metaphorical wall.</li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;some gifted Samorai would need to catch the egg after it broke the wall to avoid <code>they broke</code></p></div></div><p>If the first scenario is correct 99.999% of the time why do we need to consider the other scenarios? The answer is best considered as a black swan problem. If we only consider the most likely scenarios we will be unprepared for the unlikely ones which could be catastrophic.</p>
<p>This suggests perhaps that while LLM should be great for learning a lexicon, a grammar, and some common sense knowledge - three very challanging tasks they are inadquate for making infrences about the world where different types of precise reasoning is required.</p>
</section>
<section id="the-bad" class="level2">
<h2 class="anchored" data-anchor-id="the-bad">the bad</h2>
<ul>
<li>the black swan problem</li>
<li>tokenization</li>
</ul>
</section>
<section id="the-sad" class="level2">
<h2 class="anchored" data-anchor-id="the-sad">the sad</h2>
<ul>
<li>context windows</li>
</ul>
</section>
<section id="the-ugly---where-are-llms-no-good" class="level2">
<h2 class="anchored" data-anchor-id="the-ugly---where-are-llms-no-good">the ugly - Where are LLMs no good?</h2>
<p>Let’s consider an analogy from physics. Classical physics is great for predicting phenomena at macro scales but quantum mechanics is required for the micro scale.</p>
<p>Physicist like to think that quantum physics should converge to classical physics at the macro scale but this is not always the case. There are phenomena that are only explained by quantum mechanics. We may soon discover more phenomena like superconductivity, quantum computers and quantum cryptography manifsting in our macro world</p>
<p>Fooled by randomness….</p>
<p>In the case of LLM there is the effect of stochasticity which is built into the models. We don’t care about this aspect so long as the model gives us good replies. But all replies are inherently stochastic. While humans might express an utternce in many ways they should be able to agree on its meaning, the facts, the options, the reasoning and so on. Neural netowrks are universal function approximators and in the case of LLMs the are approximate the LM from above which are stochastic all the way down - there is no agreement excepts on the most basic probabilities. The nlp researcher can only say that an utterance is likely to be generated by the model - with some probability. Any counter claim also has some probability.The probabilities in these cases are far more dramaicaly affected by the utterance length, word choices, grammarticality, common sense knowledge then factuallity, structured knowledge</p>
<p>This is a problem because we are used to deterministic replies from humans. We are used to deterministic replies from classical language models. We are used to deterministic replies from classical AI systems.</p>
<ul>
<li>hellucinations
<ul>
<li>where there is sparse data or the data used in training isn’t representative of the query we cannot expect the model to perform well.</li>
<li>even where there is good data - if the queries are subtle enough the stochastic nature of the model will manifest.</li>
</ul></li>
<li>prompt engineering</li>
</ul>
</section>
<section id="the-ugly---through-the-hole-in-the-coin" class="level2">
<h2 class="anchored" data-anchor-id="the-ugly---through-the-hole-in-the-coin">the ugly - through the hole in the coin</h2>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {LLM the Good the Bad and the Ugly},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“LLM the Good the Bad and the Ugly.”</span>
March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/">https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>Misbehaviour of Markets and Scaling in financial prices 1-4</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./cover.webp" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="The Multifractal Landscape"><img src="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" class="img-fluid figure-img" data-float="left" width="400" alt="The Multifractal Landscape"></a></p>
<figcaption>The Multifractal Landscape</figcaption>
</figure>
</div><div id="ref-mandelbrot2010mis" class="csl-entry">
Mandelbrot, B. B., and R. L. Hudson. 2010. <em>The (Mis)behaviour of Markets: A Fractal View of Risk, Ruin and Reward</em>. Profile. <a href="https://books.google.co.il/books?id=zg91TAIs6bgC">https://books.google.co.il/books?id=zg91TAIs6bgC</a>.
</div></div><p>One of the most popular books for quants is “The (Mis)behaviour of Markets” <span class="citation" data-cites="mandelbrot2010mis">(Mandelbrot and Hudson 2010)</span>. This is more a popular science book than a technical tome with relatively less math and some fascinating figures. The book was his last book published in 2004 and is based on lots of research. As far as I can tell the most pertinent was a paper titled Scaling in financial markets that came out in four parts just three years before the book in 2001. The papers are:</p>
<ol type="1">
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part1/index.html">Scaling in financial prices: I. Tails and dependence</a></li>
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part2/index.html">Scaling in financial prices: II. Multifractals and the star equation</a></li>
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part3/index.html">Scaling in financial prices: III. Cartoon Brownian motions in multifractal time</a></li>
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part4/index.html">Scaling in financial prices: VI. Multifractal concentration</a></li>
<li><a href="part5/index.qmd">The (Mis)behaviour of Markets</a></li>
</ol>
<p>These are very interesting papers but like much of Mandelbrot’s work they are not easy to read. Mandelbrot was a maverick polymath whose work jumps from physicist to finance. The unifying themes are often his own innovations in fractal geometry. Mandelbrot tends to quote liberally from his earlier papers while ignoring the literature by his contemporaries. This not only annoyed many of his contemporaries, but makes these papers harder to follow. It basically Mandelbrot sets all the way down…. This is exacerbated by the fact that the papers are not easy to find and are behind paywalls or that the papers frequently avoid spelling out the models in detail like they are written for readers who are already familiar with the material.</p>
<p>I have read them and will try to summarize them in a way that is more accessible. I will also try to provide some context and background to the papers and provide a few lighthearted podcasts that discuss the papers and the book.</p>
<p>Also I was interested in reproducing some of the work from the book but instead I think I can make use of some code released by others. That came out in the last few year since I read the book. The point is that these ideas can be applied to time series modeling.</p>
<p>So what are multifractals? Although multifractals are rooted in probability, much of the related literature comes from the physics and mathematics arena. Here is one definition:</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>A multifractal system is a generalization of a fractal system in which a single exponent (the fractal dimension) is not enough to describe its dynamics; instead, a continuous spectrum of exponents (the so-called singularity spectrum) is needed. — <span class="citation" data-cites="harte2001multifractals">(Harte 2001)</span></p>
</blockquote><div class="no-row-height column-margin column-container"><div id="ref-harte2001multifractals" class="csl-entry">
Harte, D. 2001. <em>Multifractals: Theory and Applications</em>. CRC Press. <a href="https://www.routledge.com/Multifractals-Theory-and-Applications/Harte/p/book/9780367455200">https://www.routledge.com/Multifractals-Theory-and-Applications/Harte/p/book/9780367455200</a>.
</div></div></div>
<section id="the-development-of-the-multifractal-model-for-financial-prices" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-development-of-the-multifractal-model-for-financial-prices">The development of the multifractal model for financial prices</h2>
<div class="column-screen-right">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">timeline
    title The Multifractal Model Timeline
    1853: Augustin-Louis Cauchy introduces the base-free star equation
    1896: Vilfredo Pareto observes and analyzes power-law distributions in income &amp; wealth
    1900: Louis Bachelier proposes the first model of price variation using Brownian motion, essentially a "coin-tossing" model.
    1925: Paul Lévy expands upon Cauchy's work by providing a comprehensive solution to the star equation, including asymmetric distributions
    1960s: Benoit B. Mandelbrot challenges the adequacy of the Brownian motion model.
    1962: Benoit Mandelbrot early work on cotton prices
    1963: Eugene F. Fama publishes papers analyzing stock price variations
        : Mandelbrot's "M 1963" uses Lévy stable processes to handle long-tailed distributions in price changes.
    1965: Mandelbrot's "M 1965" model used fractional Brownian motions to handle long-range dependence in price fluctuations.
    1967: Mandelbrot and Taylor pioneer the concept of subordination in finance.
    1972: Mandelbrot's limit log-normal multifractals
    1974: Mandelbrot's multifractal star equation, 
    1997: Mandelbrot's "M1972/97 model," AKA BMMT &lt;br&gt; combines fractional Brownian motion &amp; multifractal time &lt;br&gt; captures both long-tailed distributions &amp; long-range dependence in financial price variations.
    2000: Jean Barral and Mandelbrot introduce Multifractal Products of Cylindrical Pulses (MPCP).
    2001: Mandelbrot's "cartoon" representations of BMMT &lt;br&gt; a simple recursive constructions to illustrate its key features. It places BMMT within the context of earlier models.

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</section>
<section id="cast-of-characters" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cast-of-characters">Cast of Characters:</h2>
<p>Multifractal models in financial markets were developed by a diverse cast of characters. Their research challenged conventional wisdom and revolutionized the way we understand the complex dynamics of asset price movements.</p>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/d/d1/Augustin_Louis_Cauchy_Litho_%28cropped%29.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Augustin-Louis Cauchy"><img src="https://upload.wikimedia.org/wikipedia/commons/d/d1/Augustin_Louis_Cauchy_Litho_%28cropped%29.jpg" class="img-fluid figure-img" width="400" alt="Augustin-Louis Cauchy"></a></p>
<figcaption>Augustin-Louis Cauchy</figcaption>
</figure>
</div></div><p>Augustin-Louis Cauchy (1789-1857): A French mathematician known for his significant contributions to analysis, number theory, and mathematical physics. In 1853, he introduced a functional equation (later termed the “star equation”) that implicitly linked scaling behavior to power-law distributions, paving the way for later advancements in multifractal modeling.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/a/a8/Paul_Pierre_Levy_1886-1971.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Paul Lévy"><img src="https://upload.wikimedia.org/wikipedia/commons/a/a8/Paul_Pierre_Levy_1886-1971.jpg" class="img-fluid figure-img" width="400" alt="Paul Lévy"></a></p>
<figcaption>Paul Lévy</figcaption>
</figure>
</div><div id="ref-lévy1925calcul" class="csl-entry">
Lévy, P. 1925. <em>Calcul Des Probabilit<span>é</span>s</em>. PCMI Collection. Gauthier-Villars. <a href="https://books.google.co.il/books?id=8_FLAAAAMAAJ">https://books.google.co.il/books?id=8_FLAAAAMAAJ</a>.
</div></div><p>Paul Lévy (1886-1971): A prominent French mathematician specializing in probability theory. In <span class="citation" data-cites="lévy1925calcul">(Lévy 1925)</span> he builds upon Cauchy’s work. Lévy provided a comprehensive solution to the star equation, including asymmetric distributions. He formalized the concept of stable distributions, which are essential in modeling financial prices and other phenomena exhibiting heavy tails.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/f/fd/Vilfredo_Pareto_1870s2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Vilfredo Pareto"><img src="https://upload.wikimedia.org/wikipedia/commons/f/fd/Vilfredo_Pareto_1870s2.jpg" class="img-fluid figure-img" width="400" alt="Vilfredo Pareto"></a></p>
<figcaption>Vilfredo Pareto</figcaption>
</figure>
</div><div id="ref-pareto1896cours" class="csl-entry">
Pareto, V. 1896. <em>Cours d’economie Politique Professe a l’universite de Lausanne</em>. v. 1. F. Rouge. <a href="https://books.google.co.il/books?id=KjnhnQAACAAJ">https://books.google.co.il/books?id=KjnhnQAACAAJ</a>.
</div></div><p>Vilfredo Pareto (1848-1923): An Italian engineer, sociologist, economist, and philosopher renowned for his observations on income distribution and his contributions to the development of microeconomics, see <span class="citation" data-cites="pareto1896cours">(Pareto 1896)</span>. He identified the Pareto distribution, a power-law function that accurately described the unequal distribution of wealth in society.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/e/e9/Benoit_Mandelbrot_mg_1804-d.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Benoit B. Mandelbrot"><img src="https://upload.wikimedia.org/wikipedia/commons/e/e9/Benoit_Mandelbrot_mg_1804-d.jpg" class="img-fluid figure-img" width="400" alt="Benoit B. Mandelbrot"></a></p>
<figcaption>Benoit B. Mandelbrot</figcaption>
</figure>
</div></div><p>Benoit B. Mandelbrot (1924-2010): A Polish-born French-American mathematician recognized as the father of fractal geometry. He revolutionized the understanding of financial markets by introducing fractal and multifractal models to capture their complex, non-Gaussian behavior. His work challenged the traditional reliance on Brownian motion and provided a new framework for risk assessment and portfolio management.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/b/b0/DIMG_7519_%2811253479133%29.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Eugene F. Fama"><img src="https://upload.wikimedia.org/wikipedia/commons/b/b0/DIMG_7519_%2811253479133%29.jpg" class="img-fluid figure-img" width="400" alt="Eugene F. Fama"></a></p>
<figcaption>Eugene F. Fama</figcaption>
</figure>
</div></div><p>Eugene F. Fama (1939-present): An American economist known for his empirical analysis of asset prices and his contributions to the efficient-market hypothesis. His research on stock price variations, including his test of Mandelbrot’s stable Paretian hypothesis, ignited discussions on the appropriate statistical models for financial markets.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/f/fd/Laurent_E._Calvet.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Laurent Calvet"><img src="https://upload.wikimedia.org/wikipedia/commons/f/fd/Laurent_E._Calvet.jpg" class="img-fluid figure-img" width="400" alt="Laurent Calvet"></a></p>
<figcaption>Laurent Calvet</figcaption>
</figure>
</div></div><p>Laurent Calvet: An economist who, along with Adlai Fisher, collaborated with Mandelbrot in the late 1990s to further develop and apply the multifractal model to financial data. Their work provided crucial empirical evidence and expanded the theoretical understanding of multifractal time subordination in financial markets.</p>
<hr>
<p>Adlai Fisher: An economist who partnered with Laurent Calvet and Benoit Mandelbrot to advance the application of multifractal models to financial data analysis. Their joint research focused on empirically validating the model and exploring its implications for risk management.</p>
<hr>
<p>Jean Barral: A French mathematician who collaborated with Mandelbrot in the late 1990s and early 2000s to develop the Multifractal Products of Cylindrical Pulses (MPCP). Their work generalized the multifractal framework by moving beyond b-adic cascades and introduced a more flexible model capable of capturing complex multiscaling behavior.</p>
<hr>
<p>Peter Clark: Author of a 1973 paper that explored a specific type of “subordinated” process for modeling price variation. Mandelbrot critiqued this work for its reliance on independent increments, which failed to capture the observed dependence in price data.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Misbehaviour of {Markets} and {Scaling} in Financial Prices
    1-4},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Misbehaviour of Markets and Scaling in
Financial Prices 1-4.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <category>Popular Science</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>NLP with RL</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/rl.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>supervised and unsupervised models are great for most NLP tasks, yet both approaches have their limitations. Supervised models require labeled data, which is usually in short supply, while unsupervised models often lack the precision needed for many applications.</p>
<ul>
<li>Large language models like GPT-3 can provide us with a way to genereate text on demand. They are weak when generating from sparse data (Hellucination) and can be biased.</li>
</ul>
<p>Perhaps RL which is able to learn from mistakes, as well as use supervised as well as unsupervised learning as representations can perhaps bridge the gaps that LLM cannot adress so well.</p>
<p>The main challanges in RL however are difficulty in Trasfer learning, or generalizing between similar and or related tasks. I believe that within the NLP domain transfer learning seems to be a bit easier than in other domains, as the representations learned from one task can be used in another task.</p>
<ul>
<li>NLP is a domain in which skills learned in one task may be transferrable into other task.</li>
<li>Multigoal learning can be used to solve this issue.</li>
<li>Meta learning can be used to learn from multiple tasks and generalize to new tasks.</li>
<li>Curriculum learning can be applied to:
<ul>
<li>identify weaknesses in the model</li>
<li>collect more samples to adress weakness</li>
<li>collect appropriate samples to correct for biases that emerge in the model.</li>
</ul></li>
<li>Evolving language from scratch using lewis siggins games and thier extentions can also be viewed as as from of Meta learning.</li>
<li>Can we define a abstract hamiltonian that can be used for energy/entropy based generation of text using the hamiltonian of the promprts/context
<ul>
<li><p>Can we define a minimalist grammar using this abstract formalism.</p></li>
<li><p>Can we define a resonant solution multiple hamiltonians that interact on differernt levels.</p></li>
<li><p>Can we make this something that is a good fit for multi-headed attention perhaps analagous to how the finit state machine morphology was simplified by understanding that the FSM can be represented as a regular expression and that the generations we bounded by the lexicon. In other words can we create a hamiltonian that introduced contraints on the generation of text using different heads of the transformer model and thereby places bounds on the computational complexity of the model?</p></li>
</ul></li>
</ul>
<p>Rewards for different task can be defined in different ways, and the reward function can be used to guide the model to learn the task. At the start the reward function seems to be the greatest unknown. I believe that this will be the most interesting part of the project and perhaps a driver for innovation.</p>
<ol type="1">
<li>Tasks and components</li>
</ol>
<ul>
<li>Creating a minimalist language model that allows for pretraining and fine tuning with small payloads of data generated by the RL agents.</li>
<li>Augmenting the LLM with sophisticated embeddings that are most amenable for transfer learning.</li>
<li></li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {NLP with {RL}},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/rl.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“NLP with RL.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/rl.html">https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/rl.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/rl.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>RL MindMap</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-03-25-rl-maps/</link>
  <description><![CDATA[ 





<div class="column-screen">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">mindmap
  root((RL))
    Main Concepts
        [MDP]
          Continuing Tasks
          Episodic Tasks
          Markov Property
        [Reward]
        [Action Values]
        [Policy]
            {{maps states to likelihood of actions}}
            Deterministic
              {{one action per state}}
            Stochastic 
              {{multiple actions per state}}
        Exploration 
        Exploitation
        [Policy Ealuation - Predication]
          {}
        Control
          {}
        Dynamic programming
            Synchronous
            Asynchronous
    Learning
        On Policy learning  
          {{Agents learn from their policy}}
        Off Policy learning
          {{Agents lean from another policy or Data}}
        Online
        Offline
        Optimistic initial values
    Math
        Bellman Equations    
            {{State-Value Function}}
            {{Action-Value Function}}
            {{State-Value Optimality Function}}
            {{Action-Value Optimality Function}}
        Policy Improvement Theorem
    Algorithms
      [Bandits]
        Epsilon greedy
        Thompson sampling
        Upper confidence bound
        Contextual
        Regret
          Follow the normalized leader
          Contractual regret
      Greedyfication
      [Policy Iteration]
      [Generalized Policy Iteration]
      [Value Iteration]
      Brute force search
      Monte Carlo
      Bootstrapping
      [Sample Based Methods]
          [Temporal Difference Learning]
          [SARSA]
          [Q-Learning]

      [Function Approximation Methods]
    Others
        Dyna 
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {RL {MindMap}},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-03-25-rl-maps/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“RL MindMap.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-03-25-rl-maps/">https://orenbochman.github.io/posts/2024/2024-03-25-rl-maps/</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-03-25-rl-maps/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>Roth Erev learning in Lewis signaling games</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html</link>
  <description><![CDATA[ 





<section id="learning-in-lewis-signaling-games" class="level2">
<h2 class="anchored" data-anchor-id="learning-in-lewis-signaling-games">Learning in Lewis signaling games</h2>
<p>I wish now to implement learning in the Lewis signaling game. In the book some reinforcement learning RL algorithms are presented in some detail and a few variations are mentioned. It worthwhile pointing out that the book statement of the algorithms is good enough to understand how the algorithms operate in general. However some of the details required to implement the algorithms were glossed over. As my one time collage Yuri Stool like to point out, “the devil is in the details.”</p>
<p>I ended up implementing the algorithms a number of times - once to get it to work, second time to develop my own algorithm as I gained new insights into the problems. A third time after reading more of the papers whihc suggested how more details on conducting experiments which led to a deeper understanding of enumerating and ranking the partial pooling equilibria. The point here is that natural language is mostly a separating equilibrium - most words are unambiguous but there are a significant subset of words that have multiple meaning and there are many synonyms. Mechanisms in the lexicon seem to eventually resolves some ambiguities while letting others persist indefinitely. So while the separating equilibria are of primary interests in reality users if signaling systems satisfice with a systems that is good enough. This are the much more common partial pooling variants with high degree of separation plus a context based disambiguation mechanism. I consider the erosion of English and Latin conjugation and declination after the classical period as a simpler contextual disambiguation mechanism dismantling a nearly perfect signaling subsystem with a rather degenerate one with high degree of partial pooling. A simulation might show how a few prepositions and auxilary verbs are more efficent to learn and process than fully inflected systems of case and verb ending (especially if modified by phonetics). But my guess is that this happened as more speakers had to master an use a core language, without access to resources for learning the classical forms. I guess the dark ages and a decline in literacy likely speed up the process.</p>
<p>Adding better analysis, estimating expected returns for a set of weights, tracking regret during learning. Considering different path to salience via differntial risks/costs for signals, and non uniform state distribution.</p>
<p>The big question seems to be:</p>
<p>What is a simple rl algorithm to evolve and disseminate a signaling system with certain added requirements like</p>
<ul>
<li><p>complex signals</p>
<ul>
<li><p>conjunctive signal aggregation</p></li>
<li><p>ordered signal aggregation via learning a grammar like SVO.</p></li>
<li><p>recursive signal aggregation replacing linear ordered with a partial order.</p></li>
</ul></li>
<li><p>resolving ambiguity by context</p></li>
<li><p>mechanism for correcting errors (vowel harmony, agreement)</p></li>
<li><p>simple growth of the lexicon (black bead leads to mutation in the urn model)</p></li>
<li><p>sufficient capacity,</p></li>
<li><p>minimal burden for processing (extending inference mechanism to reduce cognitive load, compress messages, erode unneeded structures)</p></li>
<li><p>minimal burden in learning (e.g.&nbsp;by generalization via regularity in morphology, and syntax)</p></li>
<li><p>high accuracy for transmission of messages</p></li>
<li><p>saliencey - a information theoretic measure of more efficient transition subset of states/messages pairs.</p></li>
</ul>
<p>Where the great unknown seems to be to find a minimal extension to the Lewis game in which all these might evlove.</p>
<p>Having stated the problem in detail lets me make the following two observations:</p>
<ol type="1">
<li><p>The aggregation rules for complex signaling should be made to arise by imposing costs on systems under which agents more frequently fail to make good inference with high probability of a partials message’s describing risky states for sender and or receiver.</p></li>
<li><p>A second cost to fitness is the role of mistakes in signaling and or receiving. (ie. adding an small chance for decoding similar sounding signals (homophones, short vs long sounds, hissed and hushed, round, front and back vouwels). This may lead to excluding simple signals from places they might be confused, is it (a,a) (a.a) or (aa,a), (a,_,a) are avoided if signal ‘a’ is excluded from the first positions (say verb class). here dot might be a short pause, comma a long pause, undescore an unmarked slot, and two aa no pause. (either two a or a long a.) if we prefix V with v S with s and P with C</p>
<p>we end up with a system that is much more robust. And we may have the added bonus that we can easily detect a tree formation based on multiple Vprefix in the sentence….</p>
<ol type="1">
<li>word grammar</li>
<li>sub word grammar - a complex morphology - highly regular yet differented complex signals</li>
<li>this could lead to redundancy based Error correction like subject verb agreement, noun adjective agreement or vowel harmony.</li>
<li>Concord - case agreement (nouns pronouns and adjective are in agreement)</li>
</ol></li>
<li><p>Ease of processing</p>
<ol type="1">
<li>agreement can also ease processing</li>
<li>assimilation and elision</li>
<li>limiting processing/disabihation context windows.</li>
<li>word order</li>
<li>however redundencies add overhead, making signals longer and may make learning much longer (this is when we students who generelize are wrong and then need to learn via negative examples.</li>
</ol></li>
<li><p>If many we have different complex signaling systems with minimal mistakes are possible one would prefer a system that is easier to learn. (Shorter lexicon, with lower chances of collision. Shorter grammar, fewer negtive examples, more room for expansion)</p></li>
</ol>
<section id="richard-herrnsteins-matching-law" class="level3">
<h3 class="anchored" data-anchor-id="richard-herrnsteins-matching-law">Richard Herrnstein’s Matching law</h3>
<ol type="1">
<li>we start with some initial weights, perhaps equal.</li>
<li>An act is chosen with probability proportional to its weight.</li>
<li>The payoff gained is added to the weight for the act that was chosen,</li>
<li>and the process repeats</li>
</ol>
</section>
<section id="roth-erev-learning-algorithm" class="level3">
<h3 class="anchored" data-anchor-id="roth-erev-learning-algorithm">Roth-Erev learning algorithm</h3>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
</ol>
</section>
<section id="bush-mosteller-learning" class="level3">
<h3 class="anchored" data-anchor-id="bush-mosteller-learning">Bush-Mosteller learning</h3>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
<li>if the reward is 0 the weight is multiplied by a forgetting factor.</li>
</ol>
</section>
<section id="roth-erev-learning-with-forgetting" class="level3">
<h3 class="anchored" data-anchor-id="roth-erev-learning-with-forgetting">Roth-Erev learning with forgetting:</h3>
<ol type="1">
<li>set starting weight for each option</li>
<li>weights evolve by addition of rewards gotten</li>
<li>probability of choosing an alternative is proportional to its weight.</li>
<li>if the reward is 0 the weight is multiplied by a forgetting factor.</li>
</ol>
</section>
<section id="arp-learning" class="level3">
<h3 class="anchored" data-anchor-id="arp-learning">ARP learning</h3>
</section>
<section id="bochman-8-rooks-rl" class="level3">
<h3 class="anchored" data-anchor-id="bochman-8-rooks-rl">Bochman 8-Rooks RL</h3>
<p>this is a special purpose rl algorithm for coordination problems where agents need to establish a convention like in the Lewis signaling game. The idea is that the matrix is similar to a placing 8 rooks on on a chess board with no two under attack. In this case once an option has been chosen we want to exclude all options that shares a row or a collumm. So we set to zero any weights which share the same prefix or suffix as a reward 1 option.</p>
<ol type="1">
<li>set starting weight for each option (state_signal) for the sender and (signal_action) for the receiver, perhaps to 1</li>
<li>weights evolve by</li>
</ol>
<ul>
<li>addition of rewards gotten for a correct choice and</li>
<li>zeroing of options with the same prefix or suffix to exclude them from the choice set.</li>
</ul>
<ol start="3" type="1">
<li>probability of choosing an alternative is proportional to its weight.</li>
</ol>
<div id="dc121222" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StagedActivation</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> abc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ABC, abstractmethod</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's define a lambda to take a list of options and intilize the weights uniformly </span></span>
<span id="cb1-9">uniform_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> options, w : {option: w <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> options}</span>
<span id="cb1-10">random_init  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> options, w : {option: random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> options}</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lets make LeaningRule an abstract class with all the methods that are common to all learning rules</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then we can subclass it to implement the specific learning rules</span></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LearningRule(ABC):</span>
<span id="cb1-15">  </span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LearningRule'</span>,init_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uniform_init):</span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-21">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'LearningRule.__init__(Options: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options</span>
<span id="cb1-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_weight(options,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start with one ball per option </span></span>
<span id="cb1-24">        </span>
<span id="cb1-25">        </span>
<span id="cb1-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_filtered_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-28">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'get_filtered_weights(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if filter is int convert to string</span></span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb1-31">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-32">        filter_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k.startswith(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)]</span>
<span id="cb1-33">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {opt: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[opt] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filter_keys}</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weights</span>
<span id="cb1-35">      </span>
<span id="cb1-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abstractmethod</span></span>
<span id="cb1-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-39">      </span>
<span id="cb1-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abstractmethod</span></span>
<span id="cb1-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-43">      </span>
<span id="cb1-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HerrnsteinRL(LearningRule):</span>
<span id="cb1-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                    The Urn model</span></span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     nature            sender                 reciever     reward</span></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                       </span></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    | (0) | --{0}--&gt;  | (0_a)  | --{a}--&gt; | (a_0) | --{0}--&gt;   1   </span></span>
<span id="cb1-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           | (0_b)  | --{b}    | (a_1) | --{1}--&gt;   0</span></span>
<span id="cb1-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           +--------+    | +--&gt;+-------+</span></span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |                         +-|-+  </span></span>
<span id="cb1-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    | (1) | --{1}--&gt;  | (1_a)  | --{a}+ +&gt;| (b_0) | --{1}--&gt;   1</span></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    |     |           | (1_b)  | --{b}---&gt;| (b_1) | --{0}--&gt;   0</span></span>
<span id="cb1-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    +-----+           +--------+          +-------+</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Herrnstein urn algorithm</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ------------------------</span></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    1. nature picks a state </span></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    2. sender  gets the state, chooses a signal by picking a ball in choose_option() from the stat'es urn</span></span>
<span id="cb1-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    3. reciver gets the action, chooses an actuion by picking a ball in choose_option()</span></span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    4. the balls in the urns are incremented if action == state</span></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    5. repeat</span></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb1-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Herrnstein matching law'</span>):</span>
<span id="cb1-69">      </span>
<span id="cb1-70">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-71"></span>
<span id="cb1-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-73">      </span>
<span id="cb1-74">        old_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]</span>
<span id="cb1-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward </span>
<span id="cb1-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-77">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-78">          </span>
<span id="cb1-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-80">      </span>
<span id="cb1-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb1-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        '''</span></span>
<span id="cb1-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subseting the weights by the filter simulates different urns per state or signal</span></span>
<span id="cb1-85">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-86"></span>
<span id="cb1-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate their probabilities then</span></span>
<span id="cb1-88">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"total weights is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span></span>
<span id="cb1-90">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then drawn an option from the filtered option using the probabilities</span></span>
<span id="cb1-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(weights.keys()), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probabilities)</span>
<span id="cb1-93"></span>
<span id="cb1-94"></span>
<span id="cb1-95"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RothErevRL(LearningRule):</span>
<span id="cb1-96"></span>
<span id="cb1-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Roth Erev RL'</span>):</span>
<span id="cb1-98">      </span>
<span id="cb1-99">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-100"></span>
<span id="cb1-101">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-102">        old_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]</span>
<span id="cb1-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-104">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward</span>
<span id="cb1-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-106">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-107"></span>
<span id="cb1-108">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we subset the weights by the filter, calculate their probabilities then</span></span>
<span id="cb1-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then drawn an option from the filtered option using the probabilities</span></span>
<span id="cb1-111">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-112">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-113">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(weights.keys()), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probabilities)</span>
<span id="cb1-115">  </span>
<span id="cb1-116"></span>
<span id="cb1-117"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RothErevForget_RL(LearningRule):</span>
<span id="cb1-118"></span>
<span id="cb1-119">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Roth Erev with forgetting'</span>):</span>
<span id="cb1-120">      </span>
<span id="cb1-121">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-122"></span>
<span id="cb1-123">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-124">        old_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]</span>
<span id="cb1-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-126">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward</span>
<span id="cb1-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-128">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate </span>
<span id="cb1-129">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-130">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Updated weight for option </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-131"></span>
<span id="cb1-132">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-133">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-134">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-135">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-136">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(weights.keys()), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probabilities)</span>
<span id="cb1-137">  </span>
<span id="cb1-138"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> EightRooksRL(LearningRule):</span>
<span id="cb1-139">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Eight Rooks RL'</span>):</span>
<span id="cb1-140">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>options, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb1-141"></span>
<span id="cb1-142"></span>
<span id="cb1-143">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, option, reward):</span>
<span id="cb1-144">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-145">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-146">        </span>
<span id="cb1-147">        old_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.copy()</span>
<span id="cb1-148">        </span>
<span id="cb1-149">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> test_option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options:</span>
<span id="cb1-150">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-151">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> test_option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> option:</span>
<span id="cb1-152">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increment the weight of the good option </span></span>
<span id="cb1-153">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[test_option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reward</span>
<span id="cb1-154">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> test_option.startswith(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prefix) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> test_option.endswith(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suffix) :</span>
<span id="cb1-155">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decrement all other options with same prefix  or suffix</span></span>
<span id="cb1-156">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if self.weights[test_option] &lt; 0.000001:</span></span>
<span id="cb1-157">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   self.weights[test_option] = 0.0</span></span>
<span id="cb1-158">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else:</span></span>
<span id="cb1-159">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[test_option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate </span>
<span id="cb1-160">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># elif test_option == option:</span></span>
<span id="cb1-161">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # decrement the weights of the bad option combo</span></span>
<span id="cb1-162">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   self.weights[option] *= self.learning_rate </span></span>
<span id="cb1-163"></span>
<span id="cb1-164">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-165">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb1-166">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> option <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.options:</span>
<span id="cb1-167">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> old_weights[option] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[option]:</span>
<span id="cb1-168">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>option<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: weight </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>old_weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weights[option]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-169">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(f"Updated weight {old_weights} -&gt; {self.weights}")</span></span>
<span id="cb1-170"></span>
<span id="cb1-171"></span>
<span id="cb1-172">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_option(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>):</span>
<span id="cb1-173">        weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_filtered_weights(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>)</span>
<span id="cb1-174">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(weights.values())</span>
<span id="cb1-175">        probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [weights[opt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights]</span>
<span id="cb1-176">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if there is a max weight return it otherwise return a random option from the max wights</span></span>
<span id="cb1-177">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([opt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> weights[opt]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(weights.values())]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-178">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(weights, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weights.get)</span>
<span id="cb1-179">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-180">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.choice([opt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> opt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> weights[opt]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(weights.values())])</span>
<span id="cb1-181"></span>
<span id="cb1-182"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LewisAgent(Agent):</span>
<span id="cb1-183">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model, learning_options, learning_rule, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-184">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb1-185">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-186">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-187">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-188">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rule</span>
<span id="cb1-189">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-190">        </span>
<span id="cb1-191">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-192">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-193">    </span>
<span id="cb1-194">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> receive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-195">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-196">    </span>
<span id="cb1-197">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-198">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-199"></span>
<span id="cb1-200">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-201">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.reward</span>
<span id="cb1-202">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-203">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Agent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> received reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-204">        </span>
<span id="cb1-205">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_learning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-206">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule.update_weights(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights based on signals and rewards        </span></span>
<span id="cb1-207"></span>
<span id="cb1-208"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sender(LewisAgent):</span>
<span id="cb1-209">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-210">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.get_state()</span>
<span id="cb1-211">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self.message = self.learning_rule.choose_option(filter=state)  # Send a signal based on the learned weights</span></span>
<span id="cb1-212">        </span>
<span id="cb1-213">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>state)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send a signal based on the learned weights</span></span>
<span id="cb1-214">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-215">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-216">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sends signal for state </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>message<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-217"></span>
<span id="cb1-218"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Receiver(LewisAgent):</span>
<span id="cb1-219">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> receive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-220">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sender.message <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sender <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.senders]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Receive signals from all senders</span></span>
<span id="cb1-221">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(f"Receiver {self.unique_id} receives signals: {self.received_signals}")</span></span>
<span id="cb1-222">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals:</span>
<span id="cb1-223">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.received_signals:</span>
<span id="cb1-224">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rule.choose_option(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>signal)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose an action based on received signals and learned weights</span></span>
<span id="cb1-225">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.option.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-226">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-227">                  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> receives signals: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>received_signals<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and chooses action: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-228"></span>
<span id="cb1-229"></span>
<span id="cb1-230">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-231">        correct_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.current_state</span>
<span id="cb1-232">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> correct_action <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-233">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-234">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> calculated reward: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> for action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-235"></span>
<span id="cb1-236"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SignalingGame(Model):</span>
<span id="cb1-237">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb1-238">                senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb1-239">                receivers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-240">                learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LearningRule,</span>
<span id="cb1-241">                learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb1-242">                verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-243">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-244">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb1-245">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k</span>
<span id="cb1-246">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-247">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate</span>
<span id="cb1-248"></span>
<span id="cb1-249">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the states, signals, and actions mapping</span></span>
<span id="cb1-250">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># States are simply numbers</span></span>
<span id="cb1-251">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Signals are characters</span></span>
<span id="cb1-252">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actions are simply numbers</span></span>
<span id="cb1-253"></span>
<span id="cb1-254">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a list of state_signal keys for the sender's weights</span></span>
<span id="cb1-255">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals]</span>
<span id="cb1-256">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a list of signal_action keys for the receiver's weights</span></span>
<span id="cb1-257">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions]</span>
<span id="cb1-258">        </span>
<span id="cb1-259">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Sender(i, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learning_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals_keys, </span>
<span id="cb1-260">                                  learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rule(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states_signals_keys, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb1-261">                              ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(senders_count)]</span>
<span id="cb1-262">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Receiver(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> senders_count, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learning_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions_keys, </span>
<span id="cb1-263">                                  learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rule(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signals_actions_keys, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose)</span>
<span id="cb1-264">                              ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(receivers_count)]</span>
<span id="cb1-265">        </span>
<span id="cb1-266">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StagedActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb1-267">          agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.senders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receivers, </span>
<span id="cb1-268">          stage_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'send'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receive'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calc_reward'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set_reward'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'update_learning'</span>])</span>
<span id="cb1-269"></span>
<span id="cb1-270">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-271">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.states)</span>
<span id="cb1-272"></span>
<span id="cb1-273">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-274">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_state()</span>
<span id="cb1-275">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose:</span>
<span id="cb1-276">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current state of the world: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-277">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.step()</span>
<span id="cb1-278"></span>
<span id="cb1-279"></span>
<span id="cb1-280"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to plot agent weights side by side</span></span>
<span id="cb1-281"></span>
<span id="cb1-282"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_weights(sender,reciver,title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Agent'</span>):</span>
<span id="cb1-283">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-284">    weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender.learning_rule.weights</span>
<span id="cb1-285">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].bar(weights.keys(), weights.values())</span>
<span id="cb1-286">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Options'</span>)</span>
<span id="cb1-287">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weights'</span>)</span>
<span id="cb1-288">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sender </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sender<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> weights: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-289">    </span>
<span id="cb1-290">    weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reciver.learning_rule.weights</span>
<span id="cb1-291">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].bar(weights.keys(), weights.values())</span>
<span id="cb1-292">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Options'</span>)</span>
<span id="cb1-293">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weights'</span>)</span>
<span id="cb1-294">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Receiver </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>reciver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> weights: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-295">    plt.show()</span>
<span id="cb1-296"></span>
<span id="cb1-297"></span>
<span id="cb1-298"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running the model</span></span>
<span id="cb1-299">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-300">verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-301"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> LR <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [HerrnsteinRL,</span>
<span id="cb1-302">           RothErevRL,</span>
<span id="cb1-303">           RothErevForget_RL,</span>
<span id="cb1-304">           EightRooksRL</span>
<span id="cb1-305">           ]:</span>
<span id="cb1-306">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>LR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb1-307">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> LR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> HerrnsteinRL:</span>
<span id="cb1-308">    learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb1-309">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-310">    learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span></span>
<span id="cb1-311">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SignalingGame(senders_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, receivers_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k, learning_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR,learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate,verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbose)</span>
<span id="cb1-312">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>):</span>
<span id="cb1-313">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose:</span>
<span id="cb1-314">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---"</span>)</span>
<span id="cb1-315">      model.step()</span>
<span id="cb1-316">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb1-317">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print the agent weights</span></span>
<span id="cb1-318">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print('Sender weights:',model.senders[0].learning_rule.weights)</span></span>
<span id="cb1-319">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot weights side by side</span></span>
<span id="cb1-320">  </span>
<span id="cb1-321">  plot_weights(model.senders[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],model.receivers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb1-322">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print('Receiver weights:',model.receivers[0].learning_rule.weights)</span></span>
<span id="cb1-323">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_weights(model.receivers[0],title=LR.__name__)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--- HerrnsteinRL ---
--- RothErevRL ---
--- RothErevForget_RL ---
--- EightRooksRL ---</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/oren/work/blog/env/lib/python3.10/site-packages/mesa/time.py:82: FutureWarning:

The AgentSet is experimental. It may be changed or removed in any and all future releases, including patch releases.
We would love to hear what you think about this new feature. If you have any thoughts, share them with us here: https://github.com/projectmesa/mesa/discussions/1919
</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-3.png" width="750" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-4.png" width="742" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-5.png" width="751" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-2-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-2-output-6.png" width="742" height="449" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>currently only the eight rooks learning rule is producing consistently good signaling systems. The other learning rules are not learning to signal correctly.</p>
<p>Please suggest how to fix this - according to the literature the Roth-Erev with forgetting learning rule should work well in this case.</p>
<p>TODO: implement Bush-Mosteller learning - as this is a match for population dynamics.</p>
<p>TODO: also implement population dynamics as it may not be clear that BM RL is a perfect fit for population dynamics under all lewis game conditions.</p>
<p>TODO: implement ARP learning.</p>
<p>TODO: implement epsilon-greedy, UCB and thompson sampling urn schemes, and Contextual bandits associative search (that’s our multiurn bandit)</p>
</section>
</section>
<section id="estimating-the-gittins-index-for-a-lewis-games." class="level2">
<h2 class="anchored" data-anchor-id="estimating-the-gittins-index-for-a-lewis-games.">Estimating the Gittins index for a Lewis games.</h2>
<div id="c03ee418" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ContextualBandit:</span>
<span id="cb4-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb4-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_states, n_actions))</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_gittins_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplified Gittins index computation</span></span>
<span id="cb4-17">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards[state, action]</span>
<span id="cb4-18">        total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts[state, action]</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counts)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count)</span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb4-22">        gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_gittins_index(state, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(gittins_indices)</span>
<span id="cb4-24"></span>
<span id="cb4-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb4-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb4-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb4-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb4-29">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb4-33"></span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb4-36">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-37">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-38">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb4-39"></span>
<span id="cb4-40">sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ContextualBandit(n_states, n_actions)</span>
<span id="cb4-41">receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ContextualBandit(n_actions, n_states)</span>
<span id="cb4-42">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb4-43"></span>
<span id="cb4-44">rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-45">regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-46">total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-47">total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-48">sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions)]</span>
<span id="cb4-49">receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states)]</span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate the learning process</span></span>
<span id="cb4-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb4-53">    state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb4-54">    sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb4-55">    receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb4-56">    </span>
<span id="cb4-57">    reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-58">    total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb4-59">    total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb4-60">    </span>
<span id="cb4-61">    rewards.append(total_reward)</span>
<span id="cb4-62">    regrets.append(total_regret)</span>
<span id="cb4-63">    </span>
<span id="cb4-64">    sender_bandit.update(state, sender_action, reward)</span>
<span id="cb4-65">    receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb4-66">    </span>
<span id="cb4-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb4-68">        sender_gittins_indices[action].append(sender_bandit.get_gittins_index(state, action))</span>
<span id="cb4-69">    </span>
<span id="cb4-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb4-71">        receiver_gittins_indices[state].append(receiver_bandit.get_gittins_index(sender_action, state))</span>
<span id="cb4-72"></span>
<span id="cb4-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print final policy</span></span>
<span id="cb4-74"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sender policy:"</span>)</span>
<span id="cb4-75"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb4-76">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sender_bandit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>select_action(state)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-77"></span>
<span id="cb4-78"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Receiver policy:"</span>)</span>
<span id="cb4-79"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb4-80">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>receiver_bandit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>select_action(action)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-81"></span>
<span id="cb4-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the total rewards and regrets over time</span></span>
<span id="cb4-83">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-84">plt.plot(rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards'</span>)</span>
<span id="cb4-85">plt.plot(regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Regret'</span>)</span>
<span id="cb4-86">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb4-87">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb4-88">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb4-89">plt.legend()</span>
<span id="cb4-90">plt.show()</span>
<span id="cb4-91"></span>
<span id="cb4-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gittins indices over time for the sender</span></span>
<span id="cb4-93">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-94"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb4-95">    plt.plot(sender_gittins_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sender Gittins Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb4-96">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb4-97">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb4-98">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sender Gittins Indices Over Time'</span>)</span>
<span id="cb4-99">plt.legend()</span>
<span id="cb4-100">plt.show()</span>
<span id="cb4-101"></span>
<span id="cb4-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gittins indices over time for the receiver</span></span>
<span id="cb4-103">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-104"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb4-105">    plt.plot(receiver_gittins_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Receiver Gittins Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb4-106">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb4-107">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb4-108">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Receiver Gittins Indices Over Time'</span>)</span>
<span id="cb4-109">plt.legend()</span>
<span id="cb4-110">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sender policy:
State 0: Action 4
State 1: Action 0
State 2: Action 2
State 3: Action 3
State 4: Action 1
Receiver policy:
Action 0: State 1
Action 1: State 4
Action 2: State 2
Action 3: State 3
Action 4: State 0</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-3-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-3-output-2.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-3-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-3-output-3.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-3-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-3-output-4.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="making-it-bayesian" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="making-it-bayesian">Making it Bayesian</h2>
<p>According to <span class="citation" data-cites="sutton2018reinforcement">(Sutton and Barto 2018)</span> Gitting’s index are usually associated with the Bayesian paradigm.</p>
<div class="no-row-height column-margin column-container"><div id="ref-sutton2018reinforcement" class="csl-entry">
Sutton, R. S., and A. G. Barto. 2018. <em>Reinforcement Learning, Second Edition: An Introduction</em>. Adaptive Computation and Machine Learning Series. MIT Press. <a href="http://incompleteideas.net/book/RLbook2020.pdf">http://incompleteideas.net/book/RLbook2020.pdf</a>.
</div></div><p>As such one should be able to we could use a Bayesian updating scheme to learn expected rewards based on success counts. Since we are tracking successes vs failures we can use beta-binomial conjugate distributions to keep track of successes, failures and their likelihood.</p>
<p>This most basic form is like so:</p>
<div id="tbl-panel" class="quarto-layout-panel anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-panel-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: sender &amp; receiver prior
</figcaption>
<div aria-describedby="tbl-panel-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="tbl-panel" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-sender-prior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-tbl figure">
<figcaption class="quarto-float-caption-top quarto-subfloat-caption quarto-subfloat-tbl" id="tbl-sender-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) sender <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-sender-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">State/Signal</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="tbl-panel" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-receiver-prior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-tbl figure">
<figcaption class="quarto-float-caption-top quarto-subfloat-caption quarto-subfloat-tbl" id="tbl-receiver-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) receiver <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-receiver-prior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">Signal/Action</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
</div>
</figure>
</div>
<p>Where we have a table of independent beta-binomial priors for each state/signal and signal/action pair.</p>
<p>After 5 failures we update the beta distribution for the sender and receiver as follows:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-sender-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: sender <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">State/Signal</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,2</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-receiver-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;3: receiver <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">Signal/Action</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>sender &amp; receiver posterior</p>
</div>
</div>
</div>
<p>Failures are outcomes of uncorrelated signal action pairs and are basically like adding noise to the distribution on the loss side. Failures here tend to have a confounding effect - they reduce the probabilities associated with reward signals. And the model is not aware of the order of rewards/failures recency.</p>
<p>Now lets update for 2 success as follows:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-sender-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;4: sender <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-sender-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 6%">
<col style="width: 36%">
<col style="width: 38%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">State/Signal</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">1,1</td>
<td style="text-align: left;"><span style="color: red">1</span>,2</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;"><span style="color: green">1</span>,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div id="tbl-receiver-posterior" class="striped hover quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;5: receiver <strong>alpha</strong>, <strong>beta</strong>
</figcaption>
<div aria-describedby="tbl-receiver-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="table-striped table-hover caption-top table">
<colgroup>
<col style="width: 19%">
<col style="width: 35%">
<col style="width: 38%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Signal/Action</th>
<th style="text-align: left;">0</th>
<th style="text-align: left;">1</th>
<th style="text-align: left;">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
<td style="text-align: left;">0,1</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: left;"><span style="color: red">1</span>,0</td>
<td style="text-align: left;">0,1</td>
<td style="text-align: left;">0,0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: left;">0,2</td>
<td style="text-align: left;"><span style="color: green">1</span>,0</td>
<td style="text-align: left;">0,0</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>sender &amp; receiver posterior</p>
</div>
</div>
</div>
<p>The Rewards are for <em>Corralated</em> <strong>signals/action</strong> pairs. However before learning progresses signal/action pairs are picked by chance. And so if different signal/action pairs are picked for the same state we will get a synonym and consequently will be missing a state/signal pair for one of the other states which will need to be shared (homonym).</p>
<p>Note that if we have a ties (between two signal/action pairs for a state then the next success or failure can be a spontaneous symmetry breaking event.</p>
<p>This will result in a a partial pooling equilibrium.</p>
<p>The Gittin’s index might help here by picking an options with the greatest expected return. If we set it up so it can recognize that a separating equilibria have the greatest expected return we should eventual learn these.</p>
<p>The problem is that micommunications (may confound the learning, until the pattern due to rewards are sufficiently reinforced.)</p>
<div id="a4bad961" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianContextualBandit:</span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb6-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb6-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb6-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb6-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb6-10"></span>
<span id="cb6-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb6-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb6-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_expected_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb6-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action])</span>
<span id="cb6-19"></span>
<span id="cb6-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_gittins_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb6-21">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action]</span>
<span id="cb6-22">        total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action]</span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_count)</span>
<span id="cb6-24"></span>
<span id="cb6-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb6-26">        gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_gittins_index(state, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb6-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(gittins_indices)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb6-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb6-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb6-33">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb6-37"></span>
<span id="cb6-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k):</span>
<span id="cb6-39">    all_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb6-40">    all_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb6-41">    all_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_actions, n_iterations))</span>
<span id="cb6-42">    all_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_states, n_iterations))</span>
<span id="cb6-43">    </span>
<span id="cb6-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb6-45">        sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_states, n_actions)</span>
<span id="cb6-46">        receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_actions, n_states)</span>
<span id="cb6-47">        </span>
<span id="cb6-48">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-49">        total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-50">        </span>
<span id="cb6-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb6-52">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb6-53">            sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb6-54">            receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb6-55">            </span>
<span id="cb6-56">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-57">            total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb6-58">            total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb6-59">            </span>
<span id="cb6-60">            all_rewards[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_reward</span>
<span id="cb6-61">            all_regrets[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_regret</span>
<span id="cb6-62">            </span>
<span id="cb6-63">            sender_bandit.update(state, sender_action, reward)</span>
<span id="cb6-64">            receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb6-65">            </span>
<span id="cb6-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb6-67">                all_sender_gittins_indices[i, action, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.get_gittins_index(state, action)</span>
<span id="cb6-68">            </span>
<span id="cb6-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb6-70">                all_receiver_gittins_indices[i, s, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.get_gittins_index(sender_action, s)</span>
<span id="cb6-71">    </span>
<span id="cb6-72">    mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_rewards, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-73">    mean_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_regrets, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-74">    mean_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_sender_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-75">    mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_receiver_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-76">    </span>
<span id="cb6-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices</span>
<span id="cb6-78"></span>
<span id="cb6-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb6-80">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-81">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-82">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb6-83">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb6-84">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of experiment runs</span></span>
<span id="cb6-85"></span>
<span id="cb6-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the experiment</span></span>
<span id="cb6-87">all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k)</span>
<span id="cb6-88"></span>
<span id="cb6-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean total rewards and regrets over time along with individual curves</span></span>
<span id="cb6-90">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-91"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb6-92">    plt.plot(all_rewards[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb6-93">plt.plot(mean_rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Rewards'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-94"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb6-95">    plt.plot(all_regrets[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb6-96">plt.plot(mean_regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Regret'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-97">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb6-98">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb6-99">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb6-100">plt.legend()</span>
<span id="cb6-101">plt.show()</span>
<span id="cb6-102"></span>
<span id="cb6-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the sender</span></span>
<span id="cb6-104">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-105"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb6-106">    plt.plot(mean_sender_gittins_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Sender Gittins Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb6-107">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb6-108">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb6-109">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Sender Gittins Indices Over Time'</span>)</span>
<span id="cb6-110">plt.legend()</span>
<span id="cb6-111">plt.show()</span>
<span id="cb6-112"></span>
<span id="cb6-113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the receiver</span></span>
<span id="cb6-114">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-115"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb6-116">    plt.plot(mean_receiver_gittins_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Receiver Gittins Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb6-117">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb6-118">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb6-119">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Receiver Gittins Indices Over Time'</span>)</span>
<span id="cb6-120">plt.legend()</span>
<span id="cb6-121">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-4-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-4-output-1.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-4-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-4-output-2.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-4-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-4-output-3.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Of course there is no reason to use independent probabilities for for learning.</p>
<p>The schemes described in the book condition state for the sender and on the signal for the receiver. I.E. a success for a signal/action pair implies:</p>
<ol type="1">
<li>a failure for the other state/signals options with the same states for the sender.</li>
<li>a failure for the other signal/action options with the same signal for the receiver.</li>
</ol>
<p>In my algorithm I went further and added the logic that a success for a signals/action pair also implies:</p>
<ol type="1">
<li>a failure for the other state/signals options with the same signal but different states for the sender.</li>
<li>a failure for the other signal/action options with the same action but different signals for the receiver.</li>
</ol>
<p>also implies that the signal wasn’t available for other states.</p>
<p>I’m not sure if there is a distribution that updates like that, though it isn’t that hard to implement either of the two schemes and they should work an extended beta distribution.</p>
</section>
<section id="derichlet-multinomial-variant" class="level2">
<h2 class="anchored" data-anchor-id="derichlet-multinomial-variant">Derichlet-Multinomial variant</h2>
<div id="725ab945" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BayesianContextualBandit:</span>
<span id="cb7-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb7-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb7-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb7-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb7-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_expected_reward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb7-15">        alpha_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state])</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> alpha_sum</span>
<span id="cb7-17"></span>
<span id="cb7-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_gittins_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action):</span>
<span id="cb7-19">        alpha_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state])</span>
<span id="cb7-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> alpha_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(alpha_sum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb7-23">        gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_gittins_index(state, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb7-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(gittins_indices)</span>
<span id="cb7-25"></span>
<span id="cb7-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb7-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb7-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb7-30">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb7-34"></span>
<span id="cb7-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k):</span>
<span id="cb7-36">    all_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb7-37">    all_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb7-38">    all_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_actions, n_iterations))</span>
<span id="cb7-39">    all_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_states, n_iterations))</span>
<span id="cb7-40">    </span>
<span id="cb7-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb7-42">        sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_states, n_actions)</span>
<span id="cb7-43">        receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BayesianContextualBandit(n_actions, n_states)</span>
<span id="cb7-44">        </span>
<span id="cb7-45">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-46">        total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-47">        </span>
<span id="cb7-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb7-49">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb7-50">            sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb7-51">            receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb7-52">            </span>
<span id="cb7-53">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-54">            total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb7-55">            total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb7-56">            </span>
<span id="cb7-57">            all_rewards[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_reward</span>
<span id="cb7-58">            all_regrets[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_regret</span>
<span id="cb7-59">            </span>
<span id="cb7-60">            sender_bandit.update(state, sender_action, reward)</span>
<span id="cb7-61">            receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb7-62">            </span>
<span id="cb7-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb7-64">                all_sender_gittins_indices[i, action, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.get_gittins_index(state, action)</span>
<span id="cb7-65">            </span>
<span id="cb7-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb7-67">                all_receiver_gittins_indices[i, s, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.get_gittins_index(sender_action, s)</span>
<span id="cb7-68">    </span>
<span id="cb7-69">    mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_rewards, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-70">    mean_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_regrets, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-71">    mean_sender_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_sender_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-72">    mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_receiver_gittins_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-73">    </span>
<span id="cb7-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices</span>
<span id="cb7-75"></span>
<span id="cb7-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb7-77">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-78">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-79">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb7-80">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb7-81">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of experiment runs</span></span>
<span id="cb7-82"></span>
<span id="cb7-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the experiment</span></span>
<span id="cb7-84">all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_gittins_indices, mean_receiver_gittins_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k)</span>
<span id="cb7-85"></span>
<span id="cb7-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean total rewards and regrets over time along with individual curves</span></span>
<span id="cb7-87">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-88"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb7-89">    plt.plot(all_rewards[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb7-90">plt.plot(mean_rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Rewards'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-91"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb7-92">    plt.plot(all_regrets[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb7-93">plt.plot(mean_regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Regret'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-94">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb7-95">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb7-96">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb7-97">plt.legend()</span>
<span id="cb7-98">plt.show()</span>
<span id="cb7-99"></span>
<span id="cb7-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the sender</span></span>
<span id="cb7-101">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb7-103">    plt.plot(mean_sender_gittins_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Sender Gittins Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb7-104">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb7-105">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb7-106">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Sender Gittins Indices Over Time'</span>)</span>
<span id="cb7-107">plt.legend()</span>
<span id="cb7-108">plt.show()</span>
<span id="cb7-109"></span>
<span id="cb7-110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Gittins indices over time for the receiver</span></span>
<span id="cb7-111">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-112"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb7-113">    plt.plot(mean_receiver_gittins_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Receiver Gittins Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb7-114">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb7-115">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gittins Index'</span>)</span>
<span id="cb7-116">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Receiver Gittins Indices Over Time'</span>)</span>
<span id="cb7-117">plt.legend()</span>
<span id="cb7-118">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-5-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-5-output-1.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-5-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-5-output-2.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-5-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-5-output-3.png" width="961" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="thompson-sampling" class="level2">
<h2 class="anchored" data-anchor-id="thompson-sampling">Thompson sampling</h2>
<div id="4be8ac16" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ThompsonSamplingContextualBandit:</span>
<span id="cb8-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_states, n_actions):</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_states</span>
<span id="cb8-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_actions</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb8-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((n_states, n_actions))</span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward):</span>
<span id="cb8-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb8-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-16"></span>
<span id="cb8-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb8-18">        samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.random.beta(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha[state, a], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta[state, a]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_actions)]</span>
<span id="cb8-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(samples)</span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_state(distribution, n_states):</span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>:</span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(n_states)</span>
<span id="cb8-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>:</span>
<span id="cb8-25">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.clip(state, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsupported distribution type"</span>)</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k):</span>
<span id="cb8-31">    all_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb8-32">    all_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_iterations))</span>
<span id="cb8-33">    all_sender_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_actions, n_iterations))</span>
<span id="cb8-34">    all_receiver_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((k, n_states, n_iterations))</span>
<span id="cb8-35">    </span>
<span id="cb8-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb8-37">        sender_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ThompsonSamplingContextualBandit(n_states, n_actions)</span>
<span id="cb8-38">        receiver_bandit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ThompsonSamplingContextualBandit(n_actions, n_states)</span>
<span id="cb8-39">        </span>
<span id="cb8-40">        total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-41">        total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-42">        </span>
<span id="cb8-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iterations):</span>
<span id="cb8-44">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_state(state_distribution, n_states)</span>
<span id="cb8-45">            sender_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sender_bandit.select_action(state)</span>
<span id="cb8-46">            receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> receiver_bandit.select_action(sender_action)</span>
<span id="cb8-47">            </span>
<span id="cb8-48">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> receiver_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> state <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-49">            total_reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> reward</span>
<span id="cb8-50">            total_regret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> reward</span>
<span id="cb8-51">            </span>
<span id="cb8-52">            all_rewards[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_reward</span>
<span id="cb8-53">            all_regrets[i, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_regret</span>
<span id="cb8-54">            </span>
<span id="cb8-55">            sender_bandit.update(state, sender_action, reward)</span>
<span id="cb8-56">            receiver_bandit.update(sender_action, receiver_action, reward)</span>
<span id="cb8-57">            </span>
<span id="cb8-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb8-59">                all_sender_ts_indices[i, action, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.beta(sender_bandit.alpha[state, action], sender_bandit.beta[state, action])</span>
<span id="cb8-60">            </span>
<span id="cb8-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb8-62">                all_receiver_ts_indices[i, s, t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.beta(receiver_bandit.alpha[sender_action, s], receiver_bandit.beta[sender_action, s])</span>
<span id="cb8-63">    </span>
<span id="cb8-64">    mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_rewards, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-65">    mean_regrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_regrets, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-66">    mean_sender_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_sender_ts_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-67">    mean_receiver_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(all_receiver_ts_indices, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-68">    </span>
<span id="cb8-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_ts_indices, mean_receiver_ts_indices</span>
<span id="cb8-70"></span>
<span id="cb8-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb8-72">n_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-73">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-74">n_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-75">state_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change to "normal" for normal distribution</span></span>
<span id="cb8-76">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of experiment runs</span></span>
<span id="cb8-77"></span>
<span id="cb8-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the experiment</span></span>
<span id="cb8-79">all_rewards, all_regrets, mean_rewards, mean_regrets, mean_sender_ts_indices, mean_receiver_ts_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_experiment(n_states, n_actions, n_iterations, state_distribution, k)</span>
<span id="cb8-80"></span>
<span id="cb8-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean total rewards and regrets over time along with individual curves</span></span>
<span id="cb8-82">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-83"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb8-84">    plt.plot(all_rewards[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb8-85">plt.plot(mean_rewards, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Rewards'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-86"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb8-87">    plt.plot(all_regrets[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb8-88">plt.plot(mean_regrets, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Total Regret'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-89">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb8-90">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards/Regret'</span>)</span>
<span id="cb8-91">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Rewards and Regret Over Time'</span>)</span>
<span id="cb8-92">plt.legend()</span>
<span id="cb8-93">plt.show()</span>
<span id="cb8-94"></span>
<span id="cb8-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Thompson Sampling indices over time for the sender</span></span>
<span id="cb8-96">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-97"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_actions):</span>
<span id="cb8-98">    plt.plot(mean_sender_ts_indices[action], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Sender TS Index (Action </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>action<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb8-99">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb8-100">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thompson Sampling Index'</span>)</span>
<span id="cb8-101">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Sender Thompson Sampling Indices Over Time'</span>)</span>
<span id="cb8-102">plt.legend()</span>
<span id="cb8-103">plt.show()</span>
<span id="cb8-104"></span>
<span id="cb8-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the mean Thompson Sampling indices over time for the receiver</span></span>
<span id="cb8-106">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-107"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_states):</span>
<span id="cb8-108">    plt.plot(mean_receiver_ts_indices[state], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean Receiver TS Index (State </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb8-109">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Step'</span>)</span>
<span id="cb8-110">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thompson Sampling Index'</span>)</span>
<span id="cb8-111">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Receiver Thompson Sampling Indices Over Time'</span>)</span>
<span id="cb8-112">plt.legend()</span>
<span id="cb8-113"></span>
<span id="cb8-114">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-6-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-6-output-1.png" width="965" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-6-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-6-output-2.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="re-rel_files/figure-html/cell-6-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel_files/figure-html/cell-6-output-3.png" width="969" height="523" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Roth {Erev} Learning in {Lewis} Signaling Games},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Roth Erev Learning in Lewis Signaling
Games.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html">https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-09-RE-RL/re-rel.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>Scaling in financial prices 1</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/</link>
  <description><![CDATA[ 





<section id="scaling-in-financial-prices-i.-tails-and-dependence" class="level1 page-columns page-full">
<h1>Scaling in financial prices: I. Tails and dependence</h1>
<blockquote class="blockquote page-columns page-full">
<div class="page-columns page-full"><p>“The ideal market completely disregards those spikes—but a realistic model cannot.” </p><div class="no-row-height column-margin column-container"><span class="margin-aside">Mandelbrot highlights the inadequacy of models ignoring extreme price movements, emphasizing the need for a framework that can accommodate them.</span></div></div>
</blockquote>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: I. Tails and dependence” <span class="citation" data-cites="mandelbrot2001Scaling1">(Mandelbrot 2001)</span> Mandelbrot surveys his research on modeling financial price fluctuations. Mandelbrot challenges the traditional Brownian motion model, arguing that financial data exhibits “fat tails” and long-range dependence, better captured by his multi-fractal model. He introduces the “star equation,” a mathematical framework expressing scaling invariance in financial prices. The paper presents graphical evidence supporting his claims and contrasts his models with traditional approaches, emphasizing the importance of considering both short-term and long-term data simultaneously. Finally, he discusses the implications for risk assessment and diversification strategies.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling1" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: I. Tails and Dependence.”</span> <em>Quantitative Finance</em> 1 (1): 113–23. <a href="https://doi.org/10.1080/713665539">https://doi.org/10.1080/713665539</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><section id="paper-summary" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="paper-summary">Paper Summary</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<ul>
<li><strong>Non-Gaussianity of financial price changes</strong>: Empirical evidence strongly suggests that price changes are not normally distributed, exhibiting “fat tails” with a higher frequency of extreme events than predicted by the standard Brownian motion model.</li>
<li><strong>Scaling and self-affinity</strong>: Financial price series exhibit similar patterns across different time scales, a concept mathematically described as self-affinity. This suggests the presence of underlying rules governing price variations across various time horizons.</li>
<li><strong>Limitations of traditional models</strong>: Models assuming independent and identically distributed price changes with finite variance, like the Brownian motion model, fail to capture the observed characteristics of financial data, particularly extreme price swings and volatility clustering.</li>
<li><strong>Multifractality as a potential solution</strong>: The concept of multifractality, which incorporates both long-range dependence and scale invariance, offers a promising framework for modeling financial price variations more realistically.</li>
</ul>
</section>
<section id="most-important-ideasfacts" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><p>Empirical evidence of power laws: Studies reveal power-law distributions for both the tail probabilities of price changes (exponent α) and long-range dependence (exponent 2H-2).</p>
<ul>
<li>Fat tails: Mandelbrot’s early work (1963) showed evidence of power-law tails in cotton prices, later confirmed by Fama (1965) for a broader range of securities. These findings challenged the Gaussian assumption of price changes.</li>
<li>Infinite dependence: The Hurst puzzle highlighted long-range dependence in price series, suggesting that price changes are not independent. Mandelbrot (1965) proposed a power law to describe this dependence.</li>
</ul></li>
<li><p><strong>Challenges to traditional scaling</strong>: Officer (1972) demonstrated deviations from scaling in financial data when applying the collapse test across different time increments, questioning the validity of models like Mandelbrot’s 1963 model based on Lévy stable distributions.</p></li>
<li><p><strong>States of Variability and Randomness</strong> - Mandelbrot introduced this concept to categorize randomness into mild (Gaussian-like), slow (requiring adjustments for short-term behavior), and wild (exhibiting persistent non-Gaussianity across time scales). He argued that financial markets belong to the “wild” category.</p></li>
<li><p><strong>Shortcomings of truncated power-law distributions</strong>: While some researchers have attempted to reconcile observed data with the Gaussian framework by truncating the tails of power-law distributions, this approach is criticized for being ad-hoc and destroying the scaling properties observed in financial markets.</p></li>
<li><p>The promise of multifractals: Mandelbrot proposed a model combining fractional Brownian motion and multifractal trading time to capture both long-range dependence and scale invariance in financial prices. This model has the potential to address the limitations of earlier models and provide a more accurate representation of financial market dynamics.</p></li>
</ol>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>“I disagree that non-stationarity is obvious and do my best to avoid it.” <sup>1</sup>{.aside}</p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This quote reflects Mandelbrot’s stance on the misleading emphasis on non-stationarity in financial data, advocating for the search for generalized forms of stationarity and corresponding models.</p></div></div></div>
<p>What are the key limitations of existing financial models?</p>
<ol type="1">
<li><p>Traditional models often assume that price changes are normally distributed, but empirical evidence suggests that this is not the case. [1] Financial prices tend to exhibit “fat tails,” meaning that extreme events are more common than a normal distribution would predict. [1, 2] This limitation is particularly important because models that fail to account for extreme price swings can be unreliable for risk management and other financial applications. [3]</p></li>
<li><p>Many financial models assume that price changes are independent and identically distributed, but this is also not supported by the data. [4, 5] Financial prices often exhibit long-range dependence, meaning that past price changes can influence future price changes. [5] Mandelbrot referred to this as the “Hurst puzzle.” [5]</p></li>
<li><p>Some researchers have tried to address these limitations by truncating the tails of power-law distributions, but this approach is problematic. [6] Truncating the tails can destroy the scaling properties observed in financial markets, leading to models that are not accurate. [6]</p></li>
<li><p>Mandelbrot argued that financial markets are “wildly variable” and that this variability cannot be ignored. [7] He suggested that models need to incorporate both long-range dependence and scale invariance to accurately capture financial market dynamics. [8]</p></li>
<li><p>Multifractal models offer a promising approach to address these limitations. [8-10] These models combine fractional Brownian motion and multifractal trading time to capture both long-range dependence and scale invariance in financial prices. [8] However, more research is needed to assess the effectiveness of multifractal models and to develop practical applications. [11, 12]</p></li>
</ol>
<blockquote class="blockquote page-columns page-full">
<div class="page-columns page-full"><p>“Financial reality is not mildly variable even on the scale of a century. All things considered, one must adjust to the fact that financial reality is wildly variable. It would be totally unmanageable, unless there is some underlying property of invariance.” </p><div class="no-row-height column-margin column-container"><span class="margin-aside">This quote underscores the persistent non-Gaussianity of financial data and the crucial need for finding an invariance principle to model this “wild” behavior.</span></div></div>
</blockquote>
</section>
<section id="next-steps" class="level3">
<h3 class="anchored" data-anchor-id="next-steps">Next Steps:</h3>
<ul>
<li>Further exploration of multifractal models: Delve deeper into the mathematical framework of multifractals and their application to financial markets.</li>
<li>Empirical testing of multifractal models: Conduct rigorous statistical analysis to assess the effectiveness of multifractal models in capturing the observed properties of financial data.</li>
<li>Developing practical applications: Explore the potential of multifractal models for risk management, portfolio optimization, and other practical applications in finance.</li>
</ul>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What is the main challenge in representing financial price variation through mathematical models?</p>
<p>The main challenge lies in capturing the complex and seemingly erratic behavior of financial prices over different time scales. Traditional models like Brownian motion struggle to accurately represent the large price fluctuations (“spikes”), periods of high volatility clustering, and long-term dependencies observed in real market data.</p></li>
<li><p>How does the concept of “scaling” address this challenge?</p>
<p>Scaling, in the context of financial markets, postulates that price patterns exhibit similar statistical properties across various time scales. This concept implies the existence of underlying rules governing price fluctuations, even if those rules may appear complex.</p></li>
<li><p>What are the limitations of traditional models like Brownian motion in capturing the behavior of financial prices?</p>
<p>Brownian motion assumes independent and normally distributed price changes. This assumption fails to account for the “fat tails” observed in actual price distributions, which indicate a higher probability of extreme events than predicted by a normal distribution. Additionally, Brownian motion does not address the clustering of volatility and long-range dependencies evident in real markets.</p></li>
<li><p>What is the significance of the “Officer effect”?</p>
<p>The Officer effect refers to empirical observations demonstrating that the simple scaling properties assumed in early models like Mandelbrot’s 1963 model do not hold consistently across different time increments for various financial assets. This finding highlighted the need for more sophisticated models to capture the complexities of market behavior.</p></li>
<li><p>What is meant by “states of variability and randomness” and how does this concept relate to financial modeling?</p>
<p>Mandelbrot proposed three states of variability and randomness: mild, slow, and wild. Mild randomness resembles the behavior of a gas, characterized by independent events and normal distributions, as exemplified by Brownian motion. Slow randomness, analogous to liquids, introduces some degree of dependence or “memory” in the system. Wild randomness, similar to solids, exhibits strong dependencies and large fluctuations, reflecting the reality of financial markets. Understanding these states is crucial for developing appropriate models and managing risk.</p></li>
<li><p>What are the key features of Mandelbrot’s multifractal model for asset returns?</p>
<p>Mandelbrot’s multifractal model combines fractional Brownian motion (FBM) and multifractal trading time (MTT). This compound process allows for long-range dependence and captures the observed volatility clustering and fat tails in price distributions. Unlike earlier models, the multifractal model acknowledges the inherent “wild” randomness of financial markets.</p></li>
<li><p>How does the multifractal model address the limitations of previous models and account for empirical observations like the Officer effect?</p>
<p>By incorporating both FBM and MTT, the multifractal model accounts for the long-term dependencies and varying volatility observed in financial time series. This approach allows for a more accurate representation of price fluctuations over a wide range of time scales, thereby addressing the shortcomings of previous models that relied on assumptions of independence and normal distributions.</p></li>
<li><p>What are the implications of the multifractal model for understanding and managing risk in financial markets?</p>
<p>The multifractal model highlights the presence of “wild” randomness in financial markets, implying that traditional risk management techniques based on normal distributions and independence assumptions may be inadequate. This model emphasizes the importance of considering the possibility of extreme events and the clustering of volatility when assessing and managing risk.</p></li>
</ol>
</section>
<section id="a-study-guide" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the key question regarding the power-law distribution of financial price changes, and how does it relate to the concepts of independent increments and the multifractal model?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The key question is whether the exponent α in the power-law distribution is restricted to α &lt; 2, which is the case for independent increments as in the Lévy-stable model. The multifractal model allows for dependent increments and α &gt; 2.</p>
</div>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container page-columns page-full"><div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="sc1_f1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Figure 1"><img src="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/sc1_f1.png" class="img-fluid figure-img" alt="Figure 1"></a></p>
<figcaption class="margin-caption">Figure 1</figcaption>
</figure>
</div></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>What is the visual challenge presented by Figure 1, and why is it misleading to conclude that Brownian motion adequately represents actual price data based on this figure?</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Figure 1, showing price levels, makes different models and real data visually indistinguishable. It’s misleading to conclude Brownian motion is adequate because it only shows overall trends and hides crucial details about price change behavior.</p>
</div>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container page-columns page-full"><div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="sc1_f2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure 2"><img src="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/sc1_f2.png" class="img-fluid figure-img" alt="Figure 2"></a></p>
<figcaption class="margin-caption">Figure 2</figcaption>
</figure>
</div></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>How does Figure 2 provide a clearer picture of price changes compared to Figure 1, and what key characteristics of real market data does it reveal?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Figure 2 plots daily price increments, highlighting significant differences between models and real data. It reveals key characteristics like spikes (large price changes), varying strip width (volatility) and spike clustering, absent in Brownian motion.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Why is the ideal market hypothesis inadequate in capturing the true nature of financial markets, particularly concerning extreme price changes?</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The ideal market hypothesis fails to account for extreme price changes (“spikes”), which are statistically improbable in a Gaussian framework but common in real markets. These events, though infrequent, contribute disproportionately to overall market behavior.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the author’s perspective on the relationship between short- and long-term price variations, and how does this differ from the conventional approach?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The author argues that price variations exhibit similar characteristics across different time scales, suggesting common underlying rules. This contrasts with the conventional view of separate models for different time horizons.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of self-affinity and its significance in representing market behavior.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Self-affinity is a scaling property where a shape’s parts are scaled versions of the whole, but with different scaling factors for different dimensions. In market charts, this reflects the similarity of patterns at different time scales, albeit with adjusted price scales.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe the three special cases of the compound process BH[θ(t)] and how they relate to earlier financial models.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The special cases are:</p>
<ol type="1">
<li>Bachelier model: H=1/2, θ(t)=t, resulting in standard Brownian motion;</li>
<li>M1965 model: H≠1/2, θ(t)=t, yielding fractional Brownian motion;</li>
<li>M1963 model: H=1/2, θ(t) is a stable subordinator, leading to a Lévy-stable process.</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the key difference between subordination and general compounding in the context of the FBM (MTT) model, and what advantage does general compounding offer?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Subordination uses only monotone, non-decreasing processes for θ(t), preserving independent increments. General compounding allows for dependent increments in θ(t), enabling the FBM(MTT) model to capture more complex and realistic price dynamics.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>How does the concept of ‘states of variability and randomness’ contribute to understanding the varying effectiveness of risk reduction through diversification?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Different ‘states of variability and randomness’ (mild, wild, slow) impact the effectiveness of risk reduction. Mild randomness allows for efficient averaging (e.g., diversification), while wild randomness, characterizing financial markets, can hinder or nullify this effect.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why does the author consider the search for transients towards Brownian motion a “thoroughly ill-conceived idea,” and what alternative approach does he propose?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The author argues that deviations from Brownian motion persist even at very large time scales, indicating that financial markets are inherently ‘wildly variable’.</p>
<p>Instead of searching for convergence to the Brownian, he proposes seeking invariant properties within this ‘wildness’, leading to the multifractal model.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li>Discuss the limitations of the traditional financial models based on Brownian motion and Gaussian distributions. How do these models fail to capture the empirical realities of financial markets, particularly in terms of extreme price changes and long-range dependence?</li>
<li>Explain the concept of scaling and its role in the development of Mandelbrot’s models of financial price variation. Compare and contrast the scaling properties of the M1963, M1965, and M1972/1997 models.</li>
<li>Elaborate on the concept of multifractal trading time (MTT) and its significance in the M1972/1997 model. How does incorporating MTT allow for a more realistic representation of market volatility and price fluctuations?</li>
<li>Analyze the implications of the “Officer effect” for financial modeling. How did this empirical observation challenge the prevailing assumptions about scaling and lead to the development of more sophisticated approaches?</li>
<li>Discuss the concept of “states of variability and randomness” and its relevance to understanding risk and diversification in financial markets. How do the characteristics of “wild randomness” in financial data affect the effectiveness of traditional risk management techniques?</li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<dl>
<dt>Power-law distribution</dt>
<dd>
A probability distribution where the tail probabilities decay as a power of the variable. In financial markets, this refers to the distribution of price changes.
</dd>
<dt>Independent increments</dt>
<dd>
A property of stochastic processes where increments over non-overlapping time intervals are statistically independent.
</dd>
<dt>Multifractal model</dt>
<dd>
A model of asset returns that incorporates both long-range dependence and fat tails in the distribution of price changes.
</dd>
<dt>Brownian motion</dt>
<dd>
A continuous-time stochastic process where increments are independent and normally distributed. Volatility: A measure of the dispersion of price changes over time.
</dd>
<dt>Self-affinity</dt>
<dd>
A scaling property where parts of a shape are scaled versions of the whole, but with different scaling factors for different dimensions.
</dd>
<dt>Fractional Brownian motion (FBM)</dt>
<dd>
A generalization of Brownian motion that allows for long-range dependence.
</dd>
<dt>Multifractal trading time (MTT)</dt>
<dd>
A non-linear transformation of clock time that accounts for the changing volatility in financial markets.
</dd>
<dt>Subordination</dt>
<dd>
A method of constructing a new stochastic process by replacing the time variable of an existing process with a new, independent process.
</dd>
<dt>General compounding</dt>
<dd>
A more general method of combining two stochastic processes, allowing for dependence between the processes.
</dd>
<dt>States of variability and randomness</dt>
<dd>
A categorization of randomness into mild, wild, and slow, reflecting the degree of structure and variability.
</dd>
<dt>Officer effect</dt>
<dd>
Empirical observation that the scaling properties of financial price changes vary with the time increment used to measure the changes.
</dd>
<dt>Critical moment exponent</dt>
<dd>
A parameter α that determines the highest moment of a distribution that is finite.
</dd>
</dl>



</section>
</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 1},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Scaling in Financial Prices 1.”</span> March
10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <category>Popular Science</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part1/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Scaling in financial prices 2</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/</link>
  <description><![CDATA[ 





<section id="scaling-in-financial-prices-ii.-multifractals-and-the-star-equation" class="level1 page-columns page-full">
<h1>Scaling in financial prices: II. Multifractals and the star equation</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: II. Multifractals and the star equation” <span class="citation" data-cites="mandelbrot2001Scaling2">(Mandelbrot 2001)</span> Mandelbrot continus his exploration of financial price scaling. He focuses on refining and extending the mathematical model of Cauchy’s “star equation,” which describes the distribution of financial prices. The paper progresses from Cauchy’s original equation, limited to power-law distributions with an exponent α less than 2, to Mandelbrot’s multifractal generalization, allowing for <img src="https://latex.codecogs.com/png.latex?1%20%3C%20%CE%B1%20%3C%20%E2%88%9E">. This extension incorporates multifractal dependence, moving beyond the assumption of independence inherent in Cauchy’s model. The paper concludes by presenting a new model, Multifractal Products of Cylindrical Pulses (MPCP), offering a more realistic and flexible approach to modeling financial price fluctuations, and supporting the observation that financial data exhibit multifractal behavior.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling2" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: II. Multifractals and the Star Equation.”</span> <em>Quantitative Finance</em> 1 (1): 124–30. <a href="https://doi.org/10.1080/713665540">https://doi.org/10.1080/713665540</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><section id="summary-of-the-second-paper" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-second-paper">Summary of the second paper</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<p>This paper reviews the evolution of Mandelbrot’s model for understanding financial price fluctuations, transitioning from his early work in 1963 based on stable distributions with independent increments to the more recent multifractal model with dependent increments.</p>
</section>
<section id="most-important-ideasfacts" class="level3">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><strong>Limitations of the Gaussian Model and Stable Distributions</strong>: Early models based on the Gaussian distribution (and later, stable distributions with <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202">) fail to capture the observed high variability in financial data. Specifically, the restriction of <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202"> for stable distributions cannot explain empirical findings of power-law distributions with exponents greater than 2.</li>
</ol>
<blockquote class="blockquote">
<p>“Many writers concluded that, whenever data yield <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202">, scaling is inadequate and should be abandoned. My alternative proposal is to foresake independence and generalize scaling into multiscaling.”</p>
</blockquote>
<ol start="2" type="1">
<li><strong>Introduction of Multifractality</strong>: Mandelbrot proposes the multifractal model as a solution to the limitations of previous models. This model incorporates dependent increments and can generate power-law distributions with exponents <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202">, aligning with empirical observations.</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bn=1%7D%5E%7Bb%7D%20W_n%20X_n%20%5Cequiv%20%5Cwidetilde%7BW%7D(W_1,%20W_2,%20%5Cldots,%20W_b)%20X%0A"></p>
<p>where ≡ denotes identity in distribution</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvarphi%5En(s)=%20%5Cvarphi%5B%5Cwidetilde%7BW%7D(n)s%5D%0A"></p>
<ol start="3" type="1">
<li><p><strong>The Star Equation</strong>: Both the Gaussian and the multifractal model can be represented by a “star equation,” a functional equation that describes the self-similarity and scaling properties of the underlying process. The key difference lies in the nature of the weights in the equation:</p>
<ul>
<li>Gaussian: Non-random weights, leading to <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202">.</li>
<li>Multifractal: Random weights, allowing for <img src="https://latex.codecogs.com/png.latex?1%20%3C%20%CE%B1%20%3C%20%E2%88%9E">.</li>
</ul></li>
<li><p><strong>Cascades and the Multifractal Star Equation</strong>: The concept of multiplicative cascades provides a concrete mechanism for generating multifractal measures. Within this framework, the “canonical” cascade, characterized by independent random weights, emerges as the most relevant for financial modeling.</p></li>
</ol>
<blockquote class="blockquote">
<p>“The canonical cascade can be rationalized by assuming that investigating a financial time series by itself amounts to extracting a linear cross section from that full system. As section 6 will elaborate, multiplication by a weight is meant to model the effects of a cause.”</p>
</blockquote>
<ol start="5" type="1">
<li><strong>Beyond Cascades: MPCP (Multifractal Products of Cylindrical Pulses)</strong>: Mandelbrot argues that the restriction to b-adic grids in cascade models is artificial. He introduces the MPCP model, where cylindrical pulses are distributed randomly, further generalizing the multifractal framework and reinforcing the prevalence of <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D%20%3C%20%E2%88%9E"> (leading to power-law distributions with <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%201">).</li>
</ol>
<blockquote class="blockquote">
<p>“The sequence from ‘microcanonical’ to ‘canonical’ and on to MPCP, teaches several lessons. As the processes’ randomness becomes increasingly unconstrained, <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D%20%3C%20%E2%88%9E"> becomes an increasingly general rule with increasingly special exceptions.”</p>
</blockquote>
<ol start="6" type="1">
<li><p><strong>Empirical Validation</strong>: Mandelbrot references empirical studies (Calvet and Fisher 2001, Mandelbrot, Calvet, and Fisher 1997) demonstrating the good fit of the multifractal model to financial data, particularly highlighting the multifractal nature of the Deutschmark/US Dollar exchange rate.</p></li>
<li><p><strong>Conclusion</strong>: While acknowledging that the multifractal model is not definitive, Mandelbrot advocates for its potential in capturing the complexity and high variability observed in financial markets, offering a more realistic assessment of risk compared to traditional Brownian motion-based models. He also suggests that the concepts developed in finance, like the distinction between mild, slow, and wild randomness, could be valuable in other scientific domains.</p></li>
</ol>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What is the “star equation” and why is it important in the context of financial models?</p>
<p>The star equation is a functional equation that describes how the distribution of a random variable changes when it is summed or multiplied by random weights. It plays a crucial role in understanding scaling properties in various phenomena, including financial price fluctuations. The solutions to the star equation can help us understand how asset returns are distributed, especially when those returns exhibit fat tails.</p></li>
<li><p>How does the Gaussian distribution relate to the star equation?</p>
<p>The Gaussian distribution is a solution to the star equation when the weights are non-random and independent. This implies that the sum of independent Gaussian random variables with non-random weights will also follow a Gaussian distribution. However, this solution only works when a key parameter, often labeled as <img src="https://latex.codecogs.com/png.latex?%CE%B1">, is less than 2.</p></li>
<li><p>Why is the limitation of <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202"> in traditional financial models a problem?</p>
<p>The restriction <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202"> implies that price changes can only be modeled with distributions that have finite variance. However, empirical data from financial markets often show that price changes have fat tails, implying infinite variance and a higher probability of extreme events than predicted by a Gaussian distribution. This makes traditional models inadequate for accurately capturing market risks.</p></li>
<li><p>How do multifractals address the limitations of traditional models based on the Gaussian distribution?</p>
<p>Multifractals introduce random weights into the star equation, generalizing it to account for the complex dependencies and scaling properties observed in financial data. This generalization allows for solutions with <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202">, capturing the fat tails and intermittent bursts of volatility characteristic of financial time series.</p></li>
<li><p>What is the key difference between “uniscaling” and “multiscaling” behavior?</p>
<ul>
<li><p>Uniscaling processes, like standard Brownian motion, exhibit the same scaling behavior across all time scales. Their statistical properties are self-similar, meaning they look the same when viewed at different zoom levels.</p></li>
<li><p>Multiscaling processes, like financial time series, exhibit different scaling behaviors at different time scales. Their statistical properties are more complex and cannot be described by a single scaling exponent.</p></li>
</ul></li>
<li><p>What is <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"> and why is it significant in multifractal models?</p>
<p><img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"> is a critical exponent that emerges in multifractal models when the function τ(q), which describes the scaling of moments of the distribution, becomes negative for values of q greater than <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D">. This signifies a power law behavior in the distribution with an exponent related to <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D">. The existence of a finite <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"> indicates that the distribution has fat tails and infinite moments, consistent with the empirical observations of financial returns.</p></li>
<li><p>How does the concept of “cylindrical pulses” contribute to the development of multifractal models?</p>
<p>“Cylindrical pulses” offer a way to move beyond the limitations of traditional cascade models. By randomly distributing these pulses across various scales, the models can capture the intermittent and clustered nature of volatility in financial markets. This approach leads to a more flexible and realistic framework for modeling multifractal behavior.</p></li>
<li><p>What are the practical implications of using multifractal models in finance?</p>
<p>Multifractal models provide a more accurate representation of financial risks compared to traditional models. This can lead to better risk management strategies, more realistic pricing of financial instruments, and improved portfolio optimization techniques that account for the possibility of extreme market events.</p></li>
</ol>
</section>
<section id="a-study-guide" class="level2">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the fundamental limitation of Cauchy’s star equation in relation to the scaling exponent α?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Cauchy’s star equation, when combined with the assumption of independence, restricts the scaling exponent α to be less than 2. This limitation arises from the fact that the Fourier transform of the characteristic function for <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202"> fails to be a valid probability density.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why did Mandelbrot propose moving beyond the Gaussian framework and introduce multifractals in financial modeling?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Mandelbrot introduced multifractals to address the limitations of the Gaussian framework, specifically the restriction of <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202">, which is often contradicted by empirical observations of financial data exhibiting higher scaling exponents. Multifractals allow for dependence and a broader range of scaling behaviors.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of ‘base-bound’ vs.&nbsp;‘base-free’ in the context of the star equation.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>A ‘base-bound’ star equation holds only for a specific base b, while a ‘base-free’ equation holds irrespective of the chosen base. The latter is preferable due to its greater generality, but the former is often easier to generalize in the context of multifractals.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the key difference between the microcanonical and canonical multiplicative cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Microcanonical cascades strictly conserve mass at each stage, ensuring that the total mass remains constant. Canonical cascades, however, only conserve mass on average, allowing for greater flexibility and randomness in the distribution of mass within the cascade.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why is the quantity Ω (measure of the interval [0, 1]) significant in the context of multifractal cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Ω represents the total measure of the interval [0, 1] after the cascade process. It is significant because it can exhibit a power-law distribution with a critical exponent qcrit, indicating the presence of multifractality. The distribution of Ω provides insights into the scaling properties of the measure generated by the cascade.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>What condition leads to the existence of a finite critical exponent qcrit in multifractal cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The existence of a finite qcrit arises when the function τ(q) crosses zero for a value of q greater than 1. This condition implies that the moments of Ω become infinite for q &gt; qcrit, leading to a power-law distribution. This phenomenon is more likely in canonical cascades where the weights are not strictly bound.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>How does the concept of ‘cylindrical pulses’ help in extending the multifractal model beyond b-adic cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The special cases are:</p>
<p>Cylindrical pulses offer a way to generalize multifractal models beyond the limitations of b-adic grids. By representing the multiplicative weights as pulses randomly distributed across the interval, the model becomes less restrictive and allows for more realistic scenarios where the number of influencing factors varies across different scales.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the significance of the function <img src="https://latex.codecogs.com/png.latex?%CF%84(q)"> in characterizing multifractal measures?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>τ(q) is a key function in multifractal theory as it encapsulates the scaling properties of the measure. It relates the moments of the measure to the size of the intervals. The behavior of τ(q), particularly whether it becomes negative for certain values of q, determines the existence and value of the critical exponent qcrit.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why does Mandelbrot argue that the generic situation for financial time series is likely to be characterized by <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D%20%3C%20%E2%88%9E">?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Mandelbrot argues that financial time series are likely to exhibit qcrit &lt; ∞ because they represent a cross-section of a much larger and complex economic system. The lack of strict conservation of influences within this system makes the canonical cascade model with independent weights a more appropriate representation, leading to the possibility of qcrit &lt; ∞.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>What advantage does the multifractal model offer over the Brownian motion model in financial modeling?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The multifractal model, particularly when incorporating fractional Brownian motion in multifractal time, provides a more realistic representation of financial market behavior compared to the Brownian motion model. It captures the observed long tails, volatility clustering, and scaling properties of price changes, leading to a better assessment of portfolio risks.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li><p>Compare and contrast Cauchy’s star equation and the multifractal star equation. Discuss their underlying assumptions, solutions, and implications for modeling financial data.</p></li>
<li><p>Explain the concept of multifractality in detail. Discuss the different types of multiplicative cascades and their role in generating multifractal measures. Provide examples of how multifractality manifests in financial time series.</p></li>
<li><p>Analyze the significance of the critical exponent qcrit in multifractal models. Explain how the value of qcrit affects the distribution of the measure and its moments. Discuss the conditions under which qcrit is finite and its implications for understanding the behavior of financial markets</p></li>
<li><p>Discuss the limitations of b-adic cascade models and explain how the concept of cylindrical pulses helps in overcoming those limitations. Describe the Multifractal Product of Cylindrical Pulses (MPCP) process and its key properties. Explain how MPCP allows for a wider range of multifractal behavior compared to traditional cascade models.</p></li>
<li><p>Evaluate the strengths and weaknesses of using multifractal models to represent financial markets. Compare and contrast the multifractal approach with other alternative models. Discuss the empirical evidence supporting the use of multifractals in finance and the potential benefits they offer for risk management and portfolio optimization.</p></li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<p>Scaling: A property of objects or processes where their statistical properties remain invariant under changes of scale.</p>
<dl>
<dt>Multifractal</dt>
<dd>
A generalization of fractals that exhibit different scaling properties at different scales.
</dd>
<dt>Star Equation</dt>
<dd>
A functional equation that relates the distribution of a random variable to the sum of scaled and weighted copies of itself.
</dd>
<dt>Cauchy’s Star Equation</dt>
<dd>
A base-free star equation that admits stable distributions with scaling exponents α between 0 and 2.
</dd>
<dt>Multifractal Star Equation</dt>
<dd>
A generalized star equation that incorporates random weights and allows for scaling exponents α greater than 2.
</dd>
<dt>Multiplicative Cascade</dt>
<dd>
A process that generates a multifractal measure by successively subdividing an interval and assigning random weights to each subinterval.
</dd>
<dt>Microcanonical Cascade</dt>
<dd>
A type of multiplicative cascade that strictly conserves mass at each stage.
</dd>
<dt>Canonical Cascade</dt>
<dd>
A type of multiplicative cascade that conserves mass on average, allowing for greater flexibility and randomness in the distribution of mass.
</dd>
<dt>Cylindrical Pulse</dt>
<dd>
A function that is constant except in a specific interval, representing a localized multiplicative weight in a multifractal model.
</dd>
<dt>MPCP</dt>
<dd>
Multifractal Product of Cylindrical Pulses, a generalization of cascade models that uses randomly distributed cylindrical pulses to generate multifractal measures with less restrictive scaling properties.
</dd>
<dt>τ(q)</dt>
<dd>
The scaling exponent function that relates the moments of a multifractal measure to the size of the intervals. Its behavior determines the existence and value of the critical exponent
</dd>
<dt><img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"></dt>
<dd>
The critical exponent that characterizes the power-law distribution of a multifractal measure. It indicates the point at which the moments of the measure become infinite.
</dd>
<dt>Fractional Brownian Motion</dt>
<dd>
A generalization of Brownian motion that incorporates long-range dependence, leading to a wider range of scaling behaviors and a more realistic representation of certain natural phenomena, including financial markets.
</dd>
</dl>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 2},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Scaling in Financial Prices 2.”</span> March
10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <category>Popular Science</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>ad hoc complex signaling systems</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-signals/complex-signals.html</link>
  <description><![CDATA[ 





<p>Rather them consider how complex signaling systems evolve from a lewis signaling game plus some modifications it might be worth while to better understand some complex signaling systems.</p>
<p>Essentially One would equip the agents with a set of complex signals and see if they can acquire more powerful signaling system to communicate more effectively.</p>
<p>This should allow us to quantify:</p>
<ol type="1">
<li>the expressivity of different features of complex signaling systems.</li>
<li>the complexities of learning</li>
<li>the complexities of avoiding deception…</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is compositionality in signaling systems?
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Given a rudimentary signaling system how can we use it to construct and learn a more complex signaling systems?</li>
<li>Once we have this two step process we can then consider the complex signaling system as a single unit and see if it can be learned directly ?</li>
<li>After we have done it a few times we can we generalize the process to signaling systems with desiderata similar to natural languages?</li>
<li>Can we specialize signaling systems to operate with specific RL tasks</li>
<li>Can we use signaling systems as a symbolic abstraction of the environment and thus transfer learning from one environment to another?</li>
</ol>
</div>
</div>
<section id="logical-aggregation" class="level2">
<h2 class="anchored" data-anchor-id="logical-aggregation">Logical Aggregation</h2>
</section>
<section id="operators" class="level2">
<h2 class="anchored" data-anchor-id="operators">operators</h2>
</section>
<section id="learning-to-negate" class="level2">
<h2 class="anchored" data-anchor-id="learning-to-negate">Learning to negate:</h2>
<p>I suppose there are many ways to learn to negate. Let’s consider two</p>
<ul>
<li>in English. We use the word ‘Not’.</li>
<li>in logic we use the symbol <img src="https://latex.codecogs.com/png.latex?%5Cneg">.</li>
<li>in python we use the keyword ‘not’</li>
<li>in hungarian we use the word ‘nem’</li>
</ul>
<p>Not in all three cases a unitary operator that takes a single argument and returns the opposite of that argument.</p>
<p>We can use it to map the next signal to some other unique signal. This is how a unitary prefix operator works. For us though not means something more than some other signal it means all the other options. Not red means all the other colors, not cat means all the other animals. So the semantics we would like to capture requires that there are categories of signals and that the negation operator maps to the rest of the category. This is a handful. Also note that the categories may be defined as partial pooling equilibria.</p>
<p>let’s imagine that a group of Marmoset monkeys need to signal predators. The state space describes the predators are based on a product of the following features:</p>
<p>temporal : imminent, near, medium, distant type: cat, snake, pirana, eagle direction_theta: 0 1 2 3 position_phi: 0 1 2 3 number: 1, 2, 3, more</p>
<p>yes they use solid coordinates to describe to location of the predators.</p>
<p>this gives us 4^4 = 256 states.</p>
<p>that’s a lot of signals. but a complex signaling system could be able to communicate about all of them.</p>
<p>If the monkeys use a template with 4 parts to communicate about the predators then they can use just four signals.</p>
<p>also the 4 signals share common semantics of increasing values. for the animals the threat level might be used to name them …</p>
<ul>
<li><p>states <img src="https://latex.codecogs.com/png.latex?St_0:St_%7B2M%7D"></p></li>
<li><p>lew_primitives = <img src="https://latex.codecogs.com/png.latex?Sig_0:Sig_%7B2N%7D"> indicating 0…n and nor 0 … not n.</p></li>
<li><p>neg_primitives = <img src="https://latex.codecogs.com/png.latex?NOT,%20sig_0:sig_%7BN%7D"></p></li>
<li><p>prefix coding negation = &lt;NOT, neg_primitives&gt; = Sig_{n+N}</p></li>
<li><p>suffix coding negation = &lt;neg_primitives, NOT&gt;</p></li>
<li><p>prefix protocol</p></li>
<li><p>In this case we don’t have a clear benefit of suffix and prefix. but later we will see how prefix coding is a fit for the desiderata of complex signaling systems.</p></li>
<li><p>let’s consider a 2 state with negation.</p></li>
<li><p>in the lewis game we have 2 signals 0 and 1.</p></li>
<li><p>in the negation_system,</p></li>
<li><p>The semantics of negation (its meaning) can be defined as we are use to i.e.&nbsp;no 1 mean 0 and no 0 means 1. But in this case we don’t get any benefit from the negation, we just get a system with longer signals. we can interpret it as a trick we learn to double the number of symbols we can use.</p></li>
</ul>
<p>now consider a 4 symbol system with negation.</p>
<ul>
<li>A conjunctive signaling system</li>
<li>A disjunctive signaling system</li>
<li>A signaling system with conjunctions and disjunctions</li>
<li>Signaling with Run-length encoding</li>
<li>Signaling with Prefix-codes</li>
</ul>
</section>
<section id="morphology" class="level2">
<h2 class="anchored" data-anchor-id="morphology">Morphology</h2>
<ul>
<li>A signaling system with a morphological template</li>
</ul>
</section>
<section id="synatax" class="level2">
<h2 class="anchored" data-anchor-id="synatax">Synatax</h2>
<ul>
<li>A signaling system with a syntactic template</li>
<li>Signaling system with a multiple templates</li>
<li>Signaling system with a multiple templates</li>
</ul>
</section>
<section id="sequence-aggregation" class="level2">
<h2 class="anchored" data-anchor-id="sequence-aggregation">Sequence Aggregation</h2>
<ul>
<li>A Sequential signaling system with n signals</li>
<li>A matrix signaling system</li>
<li>Template signaling system</li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Ad Hoc Complex Signaling Systems},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-05-01-signals/complex-signals.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Ad Hoc Complex Signaling Systems.”</span>
March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-05-01-signals/complex-signals.html">https://orenbochman.github.io/posts/2024/2024-05-01-signals/complex-signals.html</a>.
</div></div></section></div> ]]></description>
  <category>signaling games</category>
  <category>complex signaling systems</category>
  <category>compositionality</category>
  <category>communication protocols</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-signals/complex-signals.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>deduction evaluation</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/deduction.html</link>
  <description><![CDATA[ 





<p>goal create a deduction data-set for evaluating reasoning capabilities of a man and machine.</p>
<p>tasks:</p>
<ol type="1">
<li>learning graph based representation of arguments from a text</li>
<li>generating a text version of such a graph</li>
<li>identig roles of relations in the graph such as</li>
</ol>
<ul>
<li><p>subject, predicate, copula, quantity, quality, distribution, figure, mood, opposition, conversion</p></li>
<li><p>common sense knowledge, counterfactuals, hypotheticals, conditionals, causality, modality, necessity, possibility, probability, uncertainty, vagueness, ambiguity, contradiction, paradox, tautology, fallacy, sophism, enthymeme, analogy, dilemma, aporia, syllogism, enthymeme, paradox, proposition, argument, inference, deduction, induction, abduction.</p></li>
<li><p>term, proposition, argument, inference, fallacy, tautology, contradiction, paradox, syllogism, enthymeme, sophism, paradox, aporia, dilemma, analogy, deduction, induction, abduction aporias, finding dilemmas</p></li>
<li><p>removing the ambiguity from a text by constructing a graph then rewriting the text to be more precise.</p></li>
<li><p>graph of categories (perhaps drawn from wikidata, or extracted from a text by an LLM)</p></li>
<li><p>statements can be formed genereated from the graph using LLM (large language model)</p></li>
<li><p>we might prefer to genereate statements these using unification with spacy operating on the graph</p></li>
<li><p>use the square of opposition to formulate statements and inferences from the graph</p></li>
<li><p>generate graded deductions based on sylogisms</p>
<ul>
<li>tautologies</li>
<li>falaices with type of fallacy</li>
<li>inferences with type of inference</li>
</ul></li>
<li><p>each sylogism will need a template with designated parts of speech for each term in the sylogism</p></li>
<li><p>the arguments should be composable so that</p></li>
</ul>
<blockquote class="blockquote">
<p>All men are mortal. Socrates is a man. Therefore, Socrates is mortal.[2]</p>
</blockquote>
<p>P belongs to S P is predicated of S P is said of S</p>
<p>There are four different types of categorical sentences: universal affirmative (A), universal negative (E), particular affirmative (I) and particular negative (O).</p>
<p>A - A belongs to every B E - A belongs to no B I - A belongs to some B O - A does not belong to some B</p>
<p>a = belongs to every e = belongs to no i = belongs to some o = does not belong to some</p>
<p>Categorical sentences may then be abbreviated as follows:</p>
<p>AaB = A belongs to every B (Every B is A) AeB = A belongs to no B (No B is A) AiB = A belongs to some B (Some B is A) AoB = A does not belong to some B (Some B is not A)</p>
<p>the ten terms or parts of speech in a categorical sentence, drawn from the Organon are :</p>
<ol type="1">
<li>Subject</li>
<li>Predicate</li>
<li>Copula</li>
<li>Quantity</li>
<li>Quality</li>
<li>Distribution</li>
<li>Figure</li>
<li>Mood</li>
<li>Opposition</li>
<li>Conversion</li>
</ol>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Deduction Evaluation},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/deduction.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Deduction Evaluation.”</span> March 10,
2025. <a href="https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/deduction.html">https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/deduction.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-09-30-LLMs/deduction.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>emergent communications</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-01-signals/shanon-game.html</link>
  <description><![CDATA[ 





<p>it seems that we might want to look at the emergent communications by considering 1. a Lewis signaling games to model coordination tasks for a basic communication system 2. a Shannon game to model the communication of information between agents in which the learn a shared communication protocol potentially using error detection and correction and corection. 3. a Chomsky game to model development of a shared grammar for complex signals.</p>
<section id="shannon-game" class="level2">
<h2 class="anchored" data-anchor-id="shannon-game">Shannon Game</h2>
<p>Shanon games are about emergence of randomized communication protocols. A randomised communication protocol is a probability distribution over the set of possible deterministic communication protocols.</p>
<p>We can model any deterministic communication protocol as a pair of decision rees, one for the sender and one for the receiver. The sender’s decision tree maps each possible message to a signal, and the receiver’s decision tree maps each possible signal to a message.</p>
<p>messages that the sender can send. The sender samples a message from this distribution and sends it to the receiver. The receiver then uses a decoding function to map the received message back to the original signal. The goal of the game is for the sender and receiver to coordinate on a communication protocol that maximizes their payoff, which is typically based on the accuracy of message transmission and reception. It is a protocol that uses randomness to encode and decode messages. This randomness can be used to introduce redundancy in the message, which can help in error detection and correction.</p>
<div id="f4dc8e19" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CommunicationAgent:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_strategies):</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_strategies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_strategies</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((num_strategies, num_strategies))</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.discount_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb1-10">    </span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> choose_strategy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.random.rand() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon:</span>
<span id="cb1-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_strategies)</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-16">    </span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_q_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sender_strategy, receiver_strategy, reward):</span>
<span id="cb1-18">        max_future_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[receiver_strategy])</span>
<span id="cb1-19">        current_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[sender_strategy, receiver_strategy]</span>
<span id="cb1-20">        new_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.discount_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> max_future_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> current_q)</span>
<span id="cb1-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[sender_strategy, receiver_strategy] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_q</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulation parameters</span></span>
<span id="cb1-24">num_strategies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-25">num_iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize agents</span></span>
<span id="cb1-28">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommunicationAgent(num_strategies)</span>
<span id="cb1-29">bob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommunicationAgent(num_strategies)</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iterations):</span>
<span id="cb1-32">    sender_strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.choose_strategy()</span>
<span id="cb1-33">    receiver_strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bob.choose_strategy()</span>
<span id="cb1-34">    </span>
<span id="cb1-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate message transmission and reception with noise</span></span>
<span id="cb1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is a placeholder for actual encoding/decoding logic</span></span>
<span id="cb1-37">    success <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume 80% chance of success</span></span>
<span id="cb1-38">    </span>
<span id="cb1-39">    reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> success <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-40">    alice.update_q_values(sender_strategy, receiver_strategy, reward)</span>
<span id="cb1-41">    bob.update_q_values(receiver_strategy, sender_strategy, reward)</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice's Q-Table:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alice.q_table)</span>
<span id="cb1-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob's Q-Table:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, bob.q_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Alice's Q-Table:
 [[ 1.1870612   0.          0.          0.1         0.        ]
 [ 1.56945522  1.54181517  0.97338873  0.82764688  1.00508109]
 [ 0.63863811 -0.02636762  0.          0.19736455  0.1607126 ]
 [ 0.56019999  0.          0.          0.          0.        ]
 [ 0.80594973  0.25923685  0.14809569  0.          0.        ]]
Bob's Q-Table:
 [[ 1.50847687  1.20172521  0.6687741   0.64135768  0.55690049]
 [ 0.          0.7344698  -0.0829      0.          0.15625959]
 [ 0.          0.94187947  0.          0.          0.15028825]
 [ 0.15690016  0.91314851  0.22940322  0.          0.        ]
 [ 0.          0.89534698  0.14117867  0.          0.        ]]</code></pre>
</div>
</div>
<p>This example illustrates a basic game-theoretic approach where the sender and receiver iteratively learn better strategies for encoding and decoding messages over a noisy channel. The reinforcement learning framework allows both parties to adapt and improve their protocols, enhancing the reliability of communication over time. This model can be extended and refined to include more sophisticated encoding/decoding techniques and more complex noise models.</p>
<div id="538b0ef5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Model</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomActivation</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mesa.datacollection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataCollector</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hamming_distance(a, b):</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sender(Agent):</span>
<span id="cb3-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb3-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random_protocol()</span>
<span id="cb3-13">    </span>
<span id="cb3-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> random_protocol(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a random protocol for encoding</span></span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> msg: msg  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity for simplicity</span></span>
<span id="cb3-17">    </span>
<span id="cb3-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-19">        message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.message_length)</span>
<span id="cb3-20">        encoded_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol(message)</span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.sent_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_message</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Receiver(Agent):</span>
<span id="cb3-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, unique_id, model):</span>
<span id="cb3-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(unique_id, model)</span>
<span id="cb3-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.random_protocol()</span>
<span id="cb3-27">    </span>
<span id="cb3-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> random_protocol(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a random protocol for decoding</span></span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> msg: msg  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity for simplicity</span></span>
<span id="cb3-31">    </span>
<span id="cb3-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-33">        noisy_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.sent_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> np.random.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.error_rate, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.message_length)</span>
<span id="cb3-34">        recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.protocol(noisy_message)</span>
<span id="cb3-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recovered_message</span>
<span id="cb3-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.evaluate_performance()</span>
<span id="cb3-37">    </span>
<span id="cb3-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> evaluate_performance(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-39">        original_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.original_message</span>
<span id="cb3-40">        recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.recovered_message</span>
<span id="cb3-41">        distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hamming_distance(original_message, recovered_message)</span>
<span id="cb3-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.recovery_payoff(distance)</span>
<span id="cb3-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.length_payoff(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(recovered_message))</span>
<span id="cb3-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.early_recovery_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.current_step)</span>
<span id="cb3-45">    </span>
<span id="cb3-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NoisyChannelModel(Model):</span>
<span id="cb3-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, error_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, max_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb3-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> message_length</span>
<span id="cb3-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.error_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error_rate</span>
<span id="cb3-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_steps</span>
<span id="cb3-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-54">        </span>
<span id="cb3-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomActivation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-56">        </span>
<span id="cb3-57">        sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sender(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-58">        receiver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Receiver(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(sender)</span>
<span id="cb3-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.add(receiver)</span>
<span id="cb3-61">        </span>
<span id="cb3-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.original_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message_length)</span>
<span id="cb3-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sent_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.recovered_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-65">        </span>
<span id="cb3-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datacollector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCollector(</span>
<span id="cb3-67">            model_reporters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payoff"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"payoff"</span>}</span>
<span id="cb3-68">        )</span>
<span id="cb3-69">    </span>
<span id="cb3-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> recovery_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, distance):</span>
<span id="cb3-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> distance</span>
<span id="cb3-72">    </span>
<span id="cb3-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> length_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, length):</span>
<span id="cb3-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> length</span>
<span id="cb3-75">    </span>
<span id="cb3-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> early_recovery_payoff(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, step):</span>
<span id="cb3-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> step) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps</span>
<span id="cb3-78">    </span>
<span id="cb3-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedule.step()</span>
<span id="cb3-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datacollector.collect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_steps:</span>
<span id="cb3-84">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-85"></span>
<span id="cb3-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of running the model</span></span>
<span id="cb3-87">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NoisyChannelModel()</span>
<span id="cb3-88"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> model.running:</span>
<span id="cb3-89">    model.step()</span>
<span id="cb3-90"></span>
<span id="cb3-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve results</span></span>
<span id="cb3-92">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.datacollector.get_model_vars_dataframe()</span>
<span id="cb3-93"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    Payoff
0     1.39
1     2.97
2     4.54
3     6.10
4     7.55
..     ...
95  105.44
96  106.07
97  106.89
98  107.40
99  107.90

[100 rows x 1 columns]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/oren/.local/lib/python3.10/site-packages/mesa/time.py:82: FutureWarning:

The AgentSet is experimental. It may be changed or removed in any and all future releases, including patch releases.
We would love to hear what you think about this new feature. If you have any thoughts, share them with us here: https://github.com/projectmesa/mesa/discussions/1919
</code></pre>
</div>
</div>
<p>so this is a variant that uses a noisy channel model to simulate the transmission of messages between a sender and receiver. The agents have protocols for encoding and decoding messages, and the model tracks the performance of the communication system based on the accuracy of message recovery, message length, and early recovery. This example demonstrates how to model and analyze the performance of communication systems in the presence of noise and other challenges.</p>
<p>What we don’t have is a way to pick different protocols or to improve them over time.</p>
<p>I would break this down into a few steps: 1. identify the environmental factors that would encourage the agents to evolve diverse and efficient transmission protocols. a. noisy channels b. limited bandwidth c.&nbsp;limited computational resources d.&nbsp;time constraints e. risks of predation.</p>
<ol start="2" type="1">
<li>allow agents randomly generate candidate protocols and evaluate their performance.</li>
</ol>
<p>def random_protocol(): # Define a random protocol for encoding/decoding return lambda msg: np.random.randint(0, 2, len(msg))</p>
</section>
<section id="which-would-be-used-as-follows" class="level1">
<h1>which would be used as follows</h1>
<p>class Sender(Agent): def <strong>init</strong>(self, unique_id, model): super().__init__(unique_id, model) self.protocol = random_protocol()</p>
<pre><code>def step(self):
    message = np.random.randint(0, 2, self.model.message_length)
    encoded_message = self.protocol(message)
    self.model.sent_message = encoded_message</code></pre>
<p>This could be done by introducing reinforcement learning techniques to allow the agents to adapt and learn better encoding/decoding strategies based on feedback from the environment. This would enable the agents to optimize their protocols for improved communication performance in noisy channels.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Emergent Complex Communications Protocols},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-05-01-signals/shanon-game.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Emergent Complex Communications
Protocols.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-05-01-signals/shanon-game.html">https://orenbochman.github.io/posts/2024/2024-05-01-signals/shanon-game.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-01-signals/shanon-game.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>gradio local model</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html</link>
  <description><![CDATA[ 





<div id="32c1d262" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer, StoppingCriteria, StoppingCriteriaList, TextIteratorStreamer</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Thread</span>
<span id="cb1-5"></span>
<span id="cb1-6">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"togethercomputer/RedPajama-INCITE-Chat-3B-v1"</span>)</span>
<span id="cb1-7">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"togethercomputer/RedPajama-INCITE-Chat-3B-v1"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16)</span>
<span id="cb1-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda:0'</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> StopOnTokens(StoppingCriteria):</span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_ids: torch.LongTensor, scores: torch.FloatTensor, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb1-12">        stop_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> stop_id <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stop_ids:</span>
<span id="cb1-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> stop_id:</span>
<span id="cb1-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(message, history):</span>
<span id="cb1-19">    history_transformer_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [[message, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]]</span>
<span id="cb1-20">    stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StopOnTokens()</span>
<span id="cb1-21"></span>
<span id="cb1-22">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;human&gt;:"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;bot&gt;:"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb1-23">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> history_transformer_format])</span>
<span id="cb1-24"></span>
<span id="cb1-25">    model_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer([messages], return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb1-26">    streamer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextIteratorStreamer(tokenizer, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>, skip_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, skip_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-27">    generate_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb1-28">        model_inputs,</span>
<span id="cb1-29">        streamer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>streamer,</span>
<span id="cb1-30">        max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb1-31">        do_sample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-32">        top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>,</span>
<span id="cb1-33">        top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb1-34">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb1-35">        num_beams<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-36">        stopping_criteria<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>StoppingCriteriaList([stop])</span>
<span id="cb1-37">        )</span>
<span id="cb1-38">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.generate, kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generate_kwargs)</span>
<span id="cb1-39">    t.start()</span>
<span id="cb1-40"></span>
<span id="cb1-41">    partial_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> new_token <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> streamer:</span>
<span id="cb1-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> new_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;'</span>:</span>
<span id="cb1-44">            partial_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> new_token</span>
<span id="cb1-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> partial_message</span>
<span id="cb1-46"></span>
<span id="cb1-47">gr.ChatInterface(predict).launch()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Running on local URL:  http://127.0.0.1:7860

To create a public link, set `share=True` in `launch()`.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div><iframe src="http://127.0.0.1:7860/" width="100%" height="500" allow="autoplay; camera; microphone; clipboard-read; clipboard-write;" frameborder="0" allowfullscreen=""></iframe></div>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code></code></pre>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Gradio Local Model},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Gradio Local Model.”</span> March 10, 2025.
<a href="https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html">https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-03-31-gradio/gradio_local.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>lewis game</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games.html</link>
  <description><![CDATA[ 





<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tikz-lewis-signaling-games_files/figure-html/complete-pooling-1.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Extensive form 3 x 3 Lewis signaling game"><img src="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games_files/figure-html/complete-pooling-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Extensive form 3 x 3 Lewis signaling game"></a></p>
</figure>
</div>
<figcaption>Extensive form 3 x 3 Lewis signaling game</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tikz-lewis-signaling-games_files/figure-html/tree-lewis-game-1.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Extensive form 2x2 Lewis signaling game"><img src="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games_files/figure-html/tree-lewis-game-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Extensive form 2x2 Lewis signaling game"></a></p>
</figure>
</div>
<figcaption>Extensive form 2x2 Lewis signaling game</figcaption>
</figure>
</div>
</div>
</div>
<p>Here the two information sets linking s_1 instances and s_2 instances indicate that the receiver cannot distinguish between the two states.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tikz-lewis-signaling-games_files/figure-html/tree-lewis-game-take2-1.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Extensive form 2x2 Lewis signaling game"><img src="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games_files/figure-html/tree-lewis-game-take2-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Extensive form 2x2 Lewis signaling game"></a></p>
</figure>
</div>
<figcaption>Extensive form 2x2 Lewis signaling game</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tikz-lewis-signaling-games_files/figure-html/tree-lewis-game-3by3-1.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Extensive form 3x3 Lewis signaling game"><img src="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games_files/figure-html/tree-lewis-game-3by3-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Extensive form 3x3 Lewis signaling game"></a></p>
</figure>
</div>
<figcaption>Extensive form 3x3 Lewis signaling game</figcaption>
</figure>
</div>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Lewis Game},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Lewis Game.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games.html">https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games.html</a>.
</div></div></section></div> ]]></description>
  <category>tikz</category>
  <category>game theory</category>
  <category>signaling games</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-05-02-signaling-games-tikz/tikz-lewis-signaling-games.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
<item>
  <title>logic puzzles</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-06-11/logic puzzles.html</link>
  <description><![CDATA[ 





<p>Solve this logic puzzle step by step:</p>
<p>A man was looking at a portrait. Someone asked him, “Whose picture are you looking at?” He replied: “Brothers and sisters have I none, but this man’s father is my father’s son.” Whose picture was the man looking at?</p>
<p>A man was looking at a portrait. Someone asked him, “Whose picture are you looking at?” He replied: “Brothers and sisters have I none, but this man’s son is my father’s son.” Whose picture was the man looking at?</p>
<p>three dozen grey socks and 36 pink socks are lying in a drawer in a dark room. What is the minimum number of socks I must take out of the drawer which will guarantee that I have at least two socks of the same color?</p>
<p>A certain snail takes an hour and a half to crawl clockwise around a certain racetrack, yet when he crawls counter­ clockwise around that same racetrack it takes him only ninety minutes. Why this discrepancy?</p>
<p>If an airplane crashes right on the border of the United States and Canada, in which country would you bury the survivors?</p>
<p>A certain street contains 200 buildings. A sign-maker is called to number the houses from 7 to 207. He has to order numerals to do the job. Without using pencil and paper, can you figure out in your head how many 9’ s he will need?</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Logic Puzzles},
  date = {2025-03-10},
  url = {https://orenbochman.github.io/posts/2024/2024-06-11/logic puzzles.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Logic Puzzles.”</span> March 10, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-06-11/logic puzzles.html">https://orenbochman.github.io/posts/2024/2024-06-11/logic
puzzles.html</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2024/2024-06-11/logic puzzles.html</guid>
  <pubDate>Mon, 10 Mar 2025 01:19:57 GMT</pubDate>
</item>
</channel>
</rss>
