<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Oren Bochman&#39;s Blog</title>
<link>https://orenbochman.github.io/</link>
<atom:link href="https://orenbochman.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Personal website, portfolio and blog</description>
<generator>quarto-1.7.33</generator>
<lastBuildDate>Thu, 25 Sep 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Vibe coding GPT5 Edition</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-09-26-vibe-coding/</link>
  <description><![CDATA[ 






<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../../../images/banner_wallnuts.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="will the the brains of GPT-5 will drive you nuts?"><img src="https://orenbochman.github.io/images/banner_wallnuts.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="600" alt="will the the brains of GPT-5 will drive you nuts?"></a></p>
</figure>
</div>
<figcaption>will the the brains of GPT-5 will drive you nuts?</figcaption>
</figure>
</div>
<p>A few days back, a friend discussed on FB his attempt at a mathematical puzzle and the outcomes of using a commercial LLM and a self-hosted LLM to solve it, and he then raised a couple of questions as to why the LLM was able to get the result so much faster and better than he could.</p>
<p>My response was too long and is best published here.</p>
<section id="why-are-the-llms-so-good-at-coding-and-reasoning-about-code" class="level2">
<h2 class="anchored" data-anchor-id="why-are-the-llms-so-good-at-coding-and-reasoning-about-code">Why are the LLMs so good at coding and reasoning about code?</h2>
<ol type="1">
<li>LLMs are trained on lots of code and problems. More so to boost their overall reasoning benchmarks. Some LLMs may have seen a substantial percentage of all code written in history.</li>
<li>The deeper reasons for this are that <mark>code is much easier to do next token prediction than natural language</mark>. Intuitively, the number of <strong>legit next token</strong> by class is minimal. Additionally, the number of variables that need to be kept in context is usually tiny for most algorithms, even if complete programs have many variables. Even so, the full number of free variables in a regular program is many orders of magnitude smaller than the words in a natural language text of similar length.</li>
<li>Also, there are some areas where LLMs are not so good at coding. When a library or API undergoes breaking changes, it becomes asymptotically more likely that the LLM will make mistakes.</li>
<li>LLMs are generalists, and there is substantial knowledge on making LLMs that are much better specialists. If you use LLMs through APIs, you may have seen how many coding specialists are out there already.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
overthinking bugs
</div>
</div>
<div class="callout-body-container callout-body">
<p>Reinforcement Learning (RL) is one area where a language model can utilize a tool to learn in a closed-loop environment, ensuring its code compiles, passes tests, is well-documented, and adheres to a set of conventions.</p>
<p>So, I won’t be surprised to see this area continue to improve over time. However, for now, if relevant, requesting a single page of code with no APIs can yield fantastic results.</p>
</div>
</div>
</section>
<section id="vibe-coding-and-tough-problems" class="level2">
<h2 class="anchored" data-anchor-id="vibe-coding-and-tough-problems">Vibe coding and Tough problems</h2>
<p>Around the time <img src="https://latex.codecogs.com/png.latex?GPT_5"> was launched. More recently, I’ve made an effort to solve a large number of graduate-level questions from graduate or PhD-level textbooks in statistics, price theory, and RL. These were recommended in the five specializations I took (NLP, RL, Bayesian statistics, Kalman filters, and Microeconomics), as well as in some real-world data science problems from my work that require these skills. Anyhow, <img src="https://latex.codecogs.com/png.latex?GPT_5"> can <del>solve</del> <em>supply answers that are not obviously wrong</em> for many of these problems where its predecessors failed dismally.</p>
<p>In fact, my early strategy for vibe coding, combined with improvements in memory across sessions, suggests that repeated failures on complex problems, followed by simpler cases, often elicit an MVP solution for the full problem.</p>
<p>For example, <img src="https://latex.codecogs.com/png.latex?GPT_5"> failed to provide LaTeX derivations of advanced Bayesian statistics with Rationals summarized in under five words on the right-hand side. However, after a week of failures, it began to offer derivations on its own. Unexpectedly, each step has an explanation. Thorny quantities that the professor didn’t name in the code or the course are being given their correct technical terms. I don’t know how this happens, but I think it can recall the few sessions where I pasted the derivations I had stitched together and cleaned up, plus the code sessions I bug-fixed,</p>
<p>To get back on point, both <img src="https://latex.codecogs.com/png.latex?GPT_%7B3:4%7D"> were able to reason much better in code, YAML, and now in Markdown than in natural languages. <img src="https://latex.codecogs.com/png.latex?GPT_5"> still has tokenizer issues, but if I implement some workarounds in the prompt, the time savings can be dramatic.</p>
</section>
<section id="new-old-prompting-strategies" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="new-old-prompting-strategies">New &amp; Old prompting strategies</h2>
<section id="peeking-at-the-sources" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="peeking-at-the-sources">Peeking at the Sources</h3>
<p>Growing ire with <img src="https://latex.codecogs.com/png.latex?GPT_3"> pridilications for BS and my background with Wikipedia led me to add to my preferences a request for reputable sources for any significant claim. I also requested that it provide the consensus view to mitigate its tendency, as seen in <img src="https://latex.codecogs.com/png.latex?GPT_3:4">, to pander to its users at the expense of factual correctness.</p>
<p>This was largely ignored at the time, but later on, <img src="https://latex.codecogs.com/png.latex?GPT_3:4"> would undermine my credibility by furnishing its replies with fake sources that included time-wasting or potentially malicious URLs<sup>1</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;I do believe it picked this habit from Wikipedia-based spammers</p></div></div><p>At some point, I started to hear about the consensus view from sources X, Y, and Z; then <img src="https://latex.codecogs.com/png.latex?GPT_5"> began to provide excellent sources in a sidebar. Looking at these, though, many are totally irrelevant. Asking suggests that <img src="https://latex.codecogs.com/png.latex?GPT_5"> didn’t consult the sources except perhaps the top three sources.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Overthinking reputable sources
</div>
</div>
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>What is happening here? What it is ain’t exactly clear…</p>
</blockquote>
<p>I have thought about and even designed systems that store and utilize sources. There are many possible solutions, but one idea I had is citation embeddings. Create special tokens that embed the citation in the text (within each context window).</p>
<p>Learning about citations is an emergent ability for language models, but this is usually superficial. Particularly if we consider that Wikidata has several million citations on record as linked data, and the web likely has many more.</p>
<p>What makes search engines work well is an inverse index. AFAIK, LLMs are not trying to mimic this feature, but they are definitely trying to improve information retrieval across the deep network</p>
<p>It appears that <img src="https://latex.codecogs.com/png.latex?GPT_5"> can respond to the request in my prompt regarding consensus views, as it keeps referencing an older textbook I never read. Is this for real? Like everything else with LLMs, it is hard to say. But the sources may contain URLs that have been accessed via training or search. Either way, <span class="marked">we should verify</span><sup>2</sup>, that it actually knows where the full text of the books we are discussing is available online. Or that there is an earlier, more accessible copy on one of the author’s web pages.</p>
<p>One last point, I gave notebook LM my website URL as a source, and it became a top source. This quelled my blind trust in the sources once again.</p>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;evey time you verify you delay LLM related brain rot</p></div></div></section>
<section id="reasoning-summary" class="level3">
<h3 class="anchored" data-anchor-id="reasoning-summary">Reasoning summary</h3>
<ol type="1">
<li>Almost all of my prompts lead to long reasoning chains. I started peeking at these messages. I was skeptical of these, as in many cases, these were made-up outputs with mostly coincidental relation to the actual chat session.</li>
<li>I don’t really know at this point if there is any better relevance to these notes or not. In the back of my mind, I suspect that this is primarily a trick to slow down queries or to make users wait for a much slower GPU allocation.<br>
</li>
<li>What is clear from reading just a few plans:
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?GPT_5"> consistently claims it can’t access the pages I give it (but only in the plan in the chat session, this failure is not mentioned, leading to a <em>zero support hallucination</em>. The reasoning summary can bridge the gap before wasting time on iterating on a hallucination.</li>
<li><img src="https://latex.codecogs.com/png.latex?GPT_5"> states its assumptions about my prompt. These are often not what I had in mind in two ways. Correcting a misconception or adding a missing fact is good practice - one of the advantages of a <img src="https://latex.codecogs.com/png.latex?GPT_?"> is to get you to train to think more precisely.</li>
<li>Frequently, the plan expands my initial prompt with ambitious sub-goals to do more than requested (e.g., <em>provide extra metrics I had to look up</em>), but in practice, the actual response doesn’t enact any of these planned extras or even much of the request. (This is evidence that the plans are fake or that they don’t really correlate with how the LLM is actually reasoning.)</li>
</ol></li>
</ol>
</section>
<section id="becoming-a-master-of-your-own-domain-and-reading-between-the-lines" class="level3">
<h3 class="anchored" data-anchor-id="becoming-a-master-of-your-own-domain-and-reading-between-the-lines">Becoming a master of your own domain and reading between the lines</h3>
<blockquote class="blockquote">
<p>‘Teutch who directed the intricacies of a private infinity’– Rhialto the Marvelous by Jack Vance</p>
</blockquote>
<p><img src="https://latex.codecogs.com/png.latex?GPT_%7B%5B3:5%5D%7D"> often hints that you know you are making mistakes. But it also has few, if any, qualms in humoring you if you insist you are correct. Ignore these hints, and you will quickly become the master of your own infinity. I.E., you will interact with the <img src="https://latex.codecogs.com/png.latex?GPT_?"> in a domain of knowledge that is essentially your own creation, and after you do a reality check, you will have to go back to the point where <img src="https://latex.codecogs.com/png.latex?GPT_?"> suggested it knew better and start over from there.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Since you made it this far, here are some conclusions.</p>
<p>We need to be even more skeptical of GPT outputs than before. Research is conclusive that as you feel smarter by asking GPT about black holes and Crypto, <mark>you are actually getting dumber</mark>. Try to engage more in conversations with actual intelligent people as much as you do with the GPT.</p>
<p><mark>Language models were invented to correct spelling mistakes. We scaled them up and found they could do many things, but anything else they do that isn’t correcting typos is suspect.</mark></p>
<p>Ultimately, GPT can either waste your time or boost your productivity, and the choice is yours. I’ve provided you with some tips here, but you’d be best served by considering them as such, rather than wasting time with <img src="https://latex.codecogs.com/png.latex?GPT_5"> .</p>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Vibe Coding {GPT5} {Edition}},
  date = {2025-09-25},
  url = {https://orenbochman.github.io/posts/2025/2025-09-26-vibe-coding/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Vibe Coding GPT5 Edition.”</span> September
25, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-09-26-vibe-coding/">https://orenbochman.github.io/posts/2025/2025-09-26-vibe-coding/</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2025/2025-09-26-vibe-coding/</guid>
  <pubDate>Thu, 25 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Langtalks Resources # 43</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-04-03-langtalks/</link>
  <description><![CDATA[ 






<ul>
<li>#43 - Building with GenAI-powered tools | <a href="https://www.linkedin.com/in/idan-benaun-824a0759">Idan Benaun</a>
<ul>
<li>Podcast with lots of tools, lots of crap to dig into.</li>
<li>Forms:
<ul>
<li><a href="typeform.com">typeform</a></li>
<li><a href="https://kaliforms.com/">KaliFroms</a> - “90% of type form for 50% less”</li>
</ul></li>
<li>No code:
<ul>
<li><a href="zapier.com">zapier</a> - no code API integrator</li>
<li><a href="https://www.wix.com/builder/no-code">wix</a> - site builder</li>
<li><a href="https://www.framer.com/">framer</a> - Just publish it with Framer</li>
<li><a href="https://webcode.tools/">webcode</a> - The best code generators for developers</li>
<li><a href="https://www.make.com">make</a> Outgrowing Zapier? Advance with Make</li>
<li><a href="https://lovable.dev">lovable</a> Idea to app in seconds.</li>
<li><a href="https://bolt.new/">bolt</a> What do you want to build?</li>
<li><a href="https://www.cursor.com/">cursor</a> - The AI Code Editor</li>
<li><a href="https://codeium.com/windsurf">windsurf</a> Built to keep you in flow state</li>
<li><a href="https://v0.dev/">v0</a> ?? components for what</li>
</ul></li>
<li>repos
<ul>
<li><a href="https://github.com/AntonOsika/gpt-engineer">gpt engineer</a> now wrapped in v0</li>
</ul></li>
<li><a href="https://github.com/PatrickJS/awesome-cursorrules">.cursorrules</a>
<ul>
<li>O1 ??</li>
<li>Rules ??</li>
</ul></li>
<li>tips (indie hacking)
<ul>
<li>small bits</li>
<li>advertising your work
<ul>
<li>tictoc/reddit/twitter</li>
</ul></li>
</ul></li>
<li>Persona/avatar for social platforms
<ul>
<li><a href="https://fal.ai/">fal</a> - Generative media platform for developers.</li>
<li><a href="https://www.heygen.com/">heygen</a> - AI Video Generator</li>
<li><a href="https://www.revid.ai/">revid</a> create videos with your avatar</li>
</ul></li>
<li>Seo
<ul>
<li><a href="http://seobot.ai">seo</a></li>
</ul></li>
<li>Customer support
<ul>
<li><a href="http://chatbase.co">chatbase</a> - AI Agents for magical customer experiences</li>
</ul></li>
<li>My Take away
<ul>
<li>while AI disrupts everything in sight this is the age of opportunities for enterpanurship.</li>
<li>one quick way to make a business is to find a service and make a cheaper variant with just the top features.</li>
<li>Drilling deeper
<ul>
<li>Less features easier to maintain with AI</li>
<li>Cheaper to run</li>
<li>Easier to automate via an API</li>
</ul></li>
</ul></li>
</ul></li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Langtalks {Resources} \# 43},
  date = {2025-04-03},
  url = {https://orenbochman.github.io/posts/2025/2025-04-03-langtalks/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Langtalks Resources # 43.”</span> April 3,
2025. <a href="https://orenbochman.github.io/posts/2025/2025-04-03-langtalks/">https://orenbochman.github.io/posts/2025/2025-04-03-langtalks/</a>.
</div></div></section></div> ]]></description>
  <category>generative AI</category>
  <category>podcasts</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-04-03-langtalks/</guid>
  <pubDate>Thu, 03 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Base line Morphology Model</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-04-02-a-morphology/</link>
  <description><![CDATA[ 






<p>So in this note I’d like to create a vanilla implementation of a morphology and syntax that might be used as a inductive bias for the emergent language.</p>
<section id="morphology" class="level2">
<h2 class="anchored" data-anchor-id="morphology">Morphology</h2>
<p>Let’s:</p>
<ol type="1">
<li><label><input type="checkbox" checked="">code a regular morphology for the emergent language.</label></li>
<li><label><input type="checkbox">look at using it as a part of the inductive bias for the emergent language.</label></li>
<li><label><input type="checkbox" checked="">add inputs:</label>
<ul>
<li>part of speech
<ul>
<li>open</li>
<li>closed</li>
</ul></li>
<li>nouns</li>
<li>cases</li>
<li>tenses</li>
<li>aspects</li>
<li>moods</li>
</ul></li>
<li><label><input type="checkbox" checked="">export for use with [egg] ?</label></li>
<li><label><input type="checkbox">an algorithm for an agent to associate the morphology with the states (for senders perhaps) what is the minimal steps to identify the morphology to the states. (a form of grounding)</label></li>
</ol>
<section id="a-baseline-generative-model-for-morphology" class="level3">
<h3 class="anchored" data-anchor-id="a-baseline-generative-model-for-morphology">A baseline generative model for morphology</h3>
<div id="be3e5a73" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start with a simple morphology and then add more complexity.</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: check we don't over flow the phoneme space</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> base_morphology:</span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb1-13">                    vowels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, </span>
<span id="cb1-14">                    consonants<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-15">                    parts_of_speech_closed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-16">                    parts_of_speech_open<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-17">                    declensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, </span>
<span id="cb1-18">                    nouns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-19">                    ):</span>
<span id="cb1-20"></span>
<span id="cb1-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the phonemes</span></span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> vowels:</span>
<span id="cb1-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vowels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'u'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aa'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ii'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'oo'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ai'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'au'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ei'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ou'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ia'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ua'</span>]</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vowels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vowels</span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> consonants:</span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.consonants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dzh'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hw'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ny'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'j'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kw'</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ld'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nd'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ng'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ngw'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nqu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nqt'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'q'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rd'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tsh'</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'v'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'z'</span>]</span>
<span id="cb1-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.consonants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> consonants</span>
<span id="cb1-30"></span>
<span id="cb1-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the parts of speech</span></span>
<span id="cb1-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> parts_of_speech_closed:</span>
<span id="cb1-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_closed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pronoun'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'article'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preposition'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conjunction'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'numeral'</span>]</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-35">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_closed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parts_of_speech_closed</span>
<span id="cb1-36">        </span>
<span id="cb1-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> parts_of_speech_open:</span>
<span id="cb1-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_open <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'noun'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'verb'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjective'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adverb'</span>]</span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-40">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_open <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parts_of_speech_open</span>
<span id="cb1-41"></span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> declensions:</span>
<span id="cb1-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.declensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-44">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nominative'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subject</span></span>
<span id="cb1-45">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accusative'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># direct object</span></span>
<span id="cb1-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dative'</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indirect object</span></span>
<span id="cb1-47">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instrumental'</span>,<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with, by means of</span></span>
<span id="cb1-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'causal'</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for, for the purpose of</span></span>
<span id="cb1-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'translative'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into</span></span>
<span id="cb1-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'terminative'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as far as, up to</span></span>
<span id="cb1-51">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'essive'</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as </span></span>
<span id="cb1-52">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inessive'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in</span></span>
<span id="cb1-53">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'superessive'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on  </span></span>
<span id="cb1-54">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adessive'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by, at</span></span>
<span id="cb1-55">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'illative'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into</span></span>
<span id="cb1-56">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sublative'</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># onto</span></span>
<span id="cb1-57">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'allative'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to</span></span>
<span id="cb1-58">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elative'</span>,     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out of</span></span>
<span id="cb1-59">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'delative'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># off, about</span></span>
<span id="cb1-60">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ablative'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from, away from</span></span>
<span id="cb1-61">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genitive'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of, 's </span></span>
<span id="cb1-62">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'locative'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># location</span></span>
<span id="cb1-63">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vocative'</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># object being addressed </span></span>
<span id="cb1-64">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'partitive'</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># partialness</span></span>
<span id="cb1-65">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abessive'</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without</span></span>
<span id="cb1-66">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comitative'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with</span></span>
<span id="cb1-67">            ]</span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-69">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.declensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> declensions</span>
<span id="cb1-70"></span>
<span id="cb1-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the nouns</span></span>
<span id="cb1-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> nouns:</span>
<span id="cb1-73">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'monkey'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'falcon'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'puma'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conda'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tilapia'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kiwi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coconut'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pear'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'river'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mountain'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ocean'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lake'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearing'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valley'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'one'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'two'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'many'</span>,]</span>
<span id="cb1-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-75">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nouns</span>
<span id="cb1-76">        </span>
<span id="cb1-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_parts_of_speech_dict()</span>
<span id="cb1-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_dec_dict()</span>
<span id="cb1-79">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_noun_dict()</span>
<span id="cb1-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_plurals_dict()</span>
<span id="cb1-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_inf_markers_dict()</span>
<span id="cb1-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_tense_dict()</span>
<span id="cb1-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_mood_dict()</span>
<span id="cb1-84">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_aspect_dict()</span>
<span id="cb1-85"></span>
<span id="cb1-86">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_rnd_phone(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):   </span>
<span id="cb1-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a random phoneme</span></span>
<span id="cb1-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.consonants) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vowels)</span>
<span id="cb1-89"></span>
<span id="cb1-90">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_num_phoneme(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,consonant, vowel):</span>
<span id="cb1-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick a consonants cons from consonants</span></span>
<span id="cb1-92">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.consonants[consonant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.consonants)]</span>
<span id="cb1-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick a vowel from vowels</span></span>
<span id="cb1-94">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vowels[vowel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vowels)]</span>
<span id="cb1-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> v </span>
<span id="cb1-96"></span>
<span id="cb1-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_rnd_stem(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb1-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a random word with k phonemes</span></span>
<span id="cb1-99">        word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb1-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb1-101">            word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_rnd_phone()</span>
<span id="cb1-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> word </span>
<span id="cb1-103"></span>
<span id="cb1-104">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_parts_of_speech_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary of parts of speech        </span></span>
<span id="cb1-106">        pos_markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_open)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-107">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {pos_markers[i]:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_open[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parts_of_speech_open))}</span>
<span id="cb1-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># currently the closed pos are ignored</span></span>
<span id="cb1-109"></span>
<span id="cb1-110">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The criterion for an ending to be a case (according to today's generative linguistic grammars of Hungarian) is that a word with that ending can be a compulsory argument of a verb. This difference is usually unimportant for average learners of the language.</span></span>
<span id="cb1-111"></span>
<span id="cb1-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_dec_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary of declensions        </span></span>
<span id="cb1-114">        markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.declensions)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-115">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.declenations_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {markers[i]:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.declensions[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.declensions))}</span>
<span id="cb1-116"></span>
<span id="cb1-117">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_plurals_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary for plurals affixes</span></span>
<span id="cb1-119">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> make a parameter</span></span>
<span id="cb1-120">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'singular'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plural'</span>]    </span>
<span id="cb1-121">        markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numbers)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-122">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.plu_markers_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {markers[i]:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numbers[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numbers))}</span>
<span id="cb1-123"></span>
<span id="cb1-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_inf_markers_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-125">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary for plurals affixes</span></span>
<span id="cb1-126">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> make a parameter</span></span>
<span id="cb1-127">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inflections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1ps'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2ps'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3ps'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1pp'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2pp'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3pp'</span>] </span>
<span id="cb1-128">        markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inflections)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-129">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inf_markers_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {markers[i] : <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inflections[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inflections))}</span>
<span id="cb1-130"></span>
<span id="cb1-131">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_tense_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-132">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary for tenses affixes</span></span>
<span id="cb1-133">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> make a parameter</span></span>
<span id="cb1-134">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tenses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'past'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'present'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'future'</span>]</span>
<span id="cb1-135">        markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tenses)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-136">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tense_markers_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {markers[i] : <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tenses[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tenses))}</span>
<span id="cb1-137"></span>
<span id="cb1-138">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_mood_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-139">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary for tenses affixes</span></span>
<span id="cb1-140">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> make a parameter</span></span>
<span id="cb1-141">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.moods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indicative'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subjunctive'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imperative'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conditional'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optative'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jussive'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interrogative'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exclamatory'</span>]</span>
<span id="cb1-142">        markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.moods)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-143">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mood_markers_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {markers[i] : <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.moods[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.moods))}</span>
<span id="cb1-144"></span>
<span id="cb1-145">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_aspect_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-146">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dictionary for tenses affixes</span></span>
<span id="cb1-147">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> make a parameter</span></span>
<span id="cb1-148">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.aspects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perfective'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imperfective'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'progressive'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'habitual'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'frequentative'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iterative'</span>]        </span>
<span id="cb1-149">        markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_num_phoneme(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.aspects)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-150">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.aspects_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {markers[i] : <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.aspects[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.aspects))}</span>
<span id="cb1-151"></span>
<span id="cb1-152"></span>
<span id="cb1-153">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_noun_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-154"></span>
<span id="cb1-155">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'monkey'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'falcon'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'puma'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conda'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tilapia'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kiwi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coconut'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pear'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'river'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mountain'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ocean'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lake'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearing'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valley'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'one'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'two'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'many'</span>,]</span>
<span id="cb1-156"></span>
<span id="cb1-157">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 1. generate a stem for each noun</span></span>
<span id="cb1-158">        stems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generate_rnd_stem(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns))]</span>
<span id="cb1-159"></span>
<span id="cb1-160">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 2. a dictionary of nouns</span></span>
<span id="cb1-161"></span>
<span id="cb1-162">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {stems[i]:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nouns))}</span>
<span id="cb1-163"></span>
<span id="cb1-164"></span>
<span id="cb1-165">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_lexicon(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-166"></span>
<span id="cb1-167">        lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb1-168"></span>
<span id="cb1-169">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> stem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (nouns_dict):</span>
<span id="cb1-170">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">lemma: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nouns_dict[stem]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-171">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pos <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pos_dict: </span>
<span id="cb1-172">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(pos)</span></span>
<span id="cb1-173">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pos_dict[pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'noun'</span>: </span>
<span id="cb1-174">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> declension <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> declenations_dict: </span>
<span id="cb1-175">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> plural <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> plu_markers_dict: </span>
<span id="cb1-176">                            lexeme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pos<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>declension<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>plural<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-177">                            features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nouns_dict[stem]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pos_dict[pos]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>declenations_dict[declension]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>plu_markers_dict[plural]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-178">                            lexicon[lexeme] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features</span>
<span id="cb1-179">                            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lexeme<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-180">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> pos_dict[pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'verb'</span>:</span>
<span id="cb1-181">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mood <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mood_markers_dict:</span>
<span id="cb1-182">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tense <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tense_markers_dict:</span>
<span id="cb1-183">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inflection <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inf_markers_dict:</span>
<span id="cb1-184">                                lexeme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pos<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>mood<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>tense<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>inflection<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-185">                                features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nouns_dict[stem]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pos_dict[pos]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mood_markers_dict[mood]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tense_markers_dict[tense]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>inf_markers_dict[inflection]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-186">                                lexicon[lexeme] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features</span>
<span id="cb1-187">                                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lexeme<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-188">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-189">                    lexeme<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pos<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-190">                    features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nouns_dict[stem]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pos_dict[pos]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-191">                    lexicon[lexeme] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features</span>
<span id="cb1-192">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lexeme<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-193">        </span>
<span id="cb1-194">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> export_lemmas(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,lexicon,filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lexicon.csv'</span>):</span>
<span id="cb1-195">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># export the lexicon to a csv file</span></span>
<span id="cb1-196">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-197">            writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(f)</span>
<span id="cb1-198">            writer.writerow([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lemma'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'features'</span>])</span>
<span id="cb1-199">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lemma, features <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lexicon.items():</span>
<span id="cb1-200">                writer.writerow([lemma, features])       </span>
<span id="cb1-201"></span>
<span id="cb1-202">base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_morphology(</span>
<span id="cb1-203">    vowels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'u'</span>,],</span>
<span id="cb1-204">    consonants<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'j'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'q'</span>],</span>
<span id="cb1-205">    parts_of_speech_closed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pronoun'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'article'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preposition'</span>],</span>
<span id="cb1-206">    parts_of_speech_open<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'noun'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'verb'</span>],</span>
<span id="cb1-207">    declensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nominative'</span>],</span>
<span id="cb1-208">    nouns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'monkey'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'falcon'</span>],</span>
<span id="cb1-209">)</span>
<span id="cb1-210"></span>
<span id="cb1-211"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>generate_rnd_phone()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-212"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>generate_num_phoneme(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-213"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>generate_rnd_stem(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-214"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pos_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-215"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>declenations_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-216"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nouns_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-217"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>plu_markers_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-218"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>inf_markers_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-219"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tense_markers_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-220"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mood_markers_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-221"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>aspects_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-222"></span>
<span id="cb1-223"></span>
<span id="cb1-224"></span>
<span id="cb1-225"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#export_lemmas(lexicon)</span></span>
<span id="cb1-226"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f = open('dict.csv','wb')</span></span>
<span id="cb1-227"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w = csv.DictWriter(f,mydict.keys())</span></span>
<span id="cb1-228"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w.writerow(mydict)</span></span>
<span id="cb1-229"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f.close()</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>base.generate_rnd_phone()='da'
fi
mikadu
base.pos_dict={'': 'noun', 'ba': 'verb'}
base.declenations_dict={'': 'nominative'}
base.nouns_dict={'gokici': 'monkey', 'hacoba': 'falcon', 'gagama': 'puma', 'diqefo': 'conda', 'cujepa': 'tilapia', 'behihi': 'banana', 'cocaqi': 'kiwi', 'hopunu': 'coconut', 'nuqima': 'pear', 'kifida': 'river', 'fopuji': 'mountain', 'fojodu': 'ocean', 'kucuja': 'lake', 'lubulu': 'forest', 'qihide': 'clearing', 'bugaja': 'valley', 'bumimi': 'one', 'kofige': 'two', 'nuneka': 'many'}
base.plu_markers_dict={'': 'singular', 'ba': 'plural'}
base.inf_markers_dict={'': '1ps', 'ba': '2ps', 'ca': '3ps', 'da': '1pp', 'fa': '2pp', 'ga': '3pp'}
base.tense_markers_dict={'': 'past', 'ba': 'present', 'ca': 'future'}
base.mood_markers_dict={'': 'indicative', 'ba': 'subjunctive', 'ca': 'imperative', 'da': 'conditional', 'fa': 'optative', 'ga': 'jussive', 'ha': 'interrogative', 'ja': 'exclamatory'}
base.aspects_dict={'': 'perfective', 'ba': 'imperfective', 'ca': 'progressive', 'da': 'habitual', 'fa': 'frequentative', 'ga': 'iterative'}</code></pre>
</div>
</div>
</section>
</section>
<section id="syntax" class="level2">
<h2 class="anchored" data-anchor-id="syntax">Syntax</h2>
<p>a fixed template syntax to go with the morphology that can be generalized to a rule based grammar.</p>
<p>children start with one word sentence then learn two sentences and then three word sentences and so on.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Base Line {Morphology} {Model}},
  date = {2025-04-02},
  url = {https://orenbochman.github.io/posts/2025/2025-04-02-a-morphology/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Base Line Morphology Model.”</span> April 2,
2025. <a href="https://orenbochman.github.io/posts/2025/2025-04-02-a-morphology/">https://orenbochman.github.io/posts/2025/2025-04-02-a-morphology/</a>.
</div></div></section></div> ]]></description>
  <category>code</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-04-02-a-morphology/</guid>
  <pubDate>Wed, 02 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Research Questions</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-04-02-research-questions/</link>
  <description><![CDATA[ 






<p>Talking with some people today at BIU I get to realize that</p>
<ol type="1">
<li>I have made lots of progress recently but I have not been able to articulate it well.</li>
<li>It’s not clear what direction I am going with my research as there are a number of related questions I am trying to answer</li>
<li>My research questions are not clear enough</li>
<li>A number of them are such that it’s unlikely that anyone will be able to say “I am an expert in this area”. This is an issue if I want to write this up as a thesis or a paper with someone else as an advisor or co-author.</li>
</ol>
<p>So let’s try to clarify them a bit more.</p>
<section id="research-questions" class="level2">
<h2 class="anchored" data-anchor-id="research-questions">Research Questions</h2>
<ol start="0" type="1">
<li><p>How can agents use a language to facilitate transfer learning across curriculums of multi-agent environment.</p></li>
<li><p>What are some (efficient) ways for a language to emerge in a MGP with a number of interacting agents?</p>
<ul>
<li><a href="../../../posts/2025/2025-01-05-bifurcating-paths-to-signaling/index.html">working paper on scenarios</a></li>
</ul></li>
<li><p>What are the desirable properties of such emergent languages?</p>
<ul>
<li><a href="../../../posts/2025/2025-01-14-Desiderata-for-Emergent-Languages/index.html">working paper with a desiderata</a></li>
</ul></li>
<li><p>Given that a language can emerge by spontaneous symmetry breaking, how can an agent plan a better language for such a collective? If the over arching concern is learnability, is there a clear way to measure the learnability of a language and to</p></li>
<li><p>Paradigms for language emergence ?</p>
<ul>
<li><p>Can we consider the language emergence as independent of the other agents other behavior?</p>
<ul>
<li>If we so wish what assumptions must we make?</li>
<li>e.g.&nbsp;if we have MGP i.e.&nbsp;a MARL environment and with Lewis a asymmetrical viewed state, send/receive actions and a cooperative reward signal for the receiver who decodes the state correctly, then wouldn’t the agents with an exploration strategy eventually learn a signaling system even if the greedy actions is to zero sum action?</li>
</ul></li>
<li><p>is this a game theoretic question ?</p></li>
<li><p>should we treat language emergence as <code>Lewis</code> step in an extended form game where payoffs and strategies are intimately entangled?</p></li>
<li><p>should we treat language emergence as an iterated sequence of games where in each step decision is made independently of the previous step?</p></li>
</ul></li>
<li><p>If we consider wide classes of complex lewis signaling games can we characterize types of equilibria that are more likely to emerge. If some equilibria more stable or stronger attractors than others</p></li>
<li><p>Grounding:</p>
<ul>
<li>The goals of the grounding is specific if not rather broad. But should be considered as an MVP, i.e.&nbsp;the top goals are to be realized first the others as future work.
<ol type="1">
<li>map a GPL general purpose language encompassing many different MDPs and the experiences gained within them onto the current mdp using a subset of the GPL that is isomorphic to the current DSL.</li>
</ol></li>
<li>The grounding is a set of symbols that can be used to communicate about the state of the world and the actions of the agent. The DSL or Domain Specific Language is a set of symbols and an aggregation rule that can for agent to communicate and some additional symbols that can let the agent communicate about its models with an LLM or some other agents. The LLM here might be a gateway to a RAG system with access to its past experiences, dynamic models, values, policies, options, general value functions, etc.<br>
</li>
<li>There seems to be a rather trivial way to do grounding for an MDP/MGP for each action in the MDP/MGP we can assign a unique verb symbol for each state in the MDP/MGP we can assign a unique noun symbol</li>
<li>To handle case where state is structured e.g.&nbsp;in two parts we can use a noun phrase with two nouns e.g.&nbsp;<code>cat and dog</code></li>
<li>We thus need a set of primitive symbols to capture the state + a syntax to combine them into a phrase.</li>
<li>This would allow us to describe even an image as a list of pixels….</li>
</ul></li>
</ol>
</section>
<section id="some-other-questions" class="level2">
<h2 class="anchored" data-anchor-id="some-other-questions">Some other questions</h2>
<ol type="1">
<li>how much of a natural language vs synthetic language is overhead ? what are good metrics for this?</li>
<li>is this still true when resources are as severely restricted as in the case of a human agent?</li>
</ol>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Research {Questions}},
  date = {2025-04-02},
  url = {https://orenbochman.github.io/posts/2025/2025-04-02-research-questions/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Research Questions.”</span> April 2, 2025.
<a href="https://orenbochman.github.io/posts/2025/2025-04-02-research-questions/">https://orenbochman.github.io/posts/2025/2025-04-02-research-questions/</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2025/2025-04-02-research-questions/</guid>
  <pubDate>Wed, 02 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The roles of Partial pooling and mixed strategies in the Lewis signaling game</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-03-11-partial-pooling/</link>
  <description><![CDATA[ 






<p>Today I posit a couple of questions on the Lewis signaling game.</p>
<ol type="1">
<li>Are there useful<sup>1</sup> interpretation of some equilibria in the Lewis signaling game that are not fully separable equilibria?</li>
<li>Are some partial pooling equilibria more useful than others?</li>
<li>Might agents prefer to employ partial pooling strategies over fully separable equilibria?</li>
<li>Might agents want to employ mixed strategies?</li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;for signaling agents</p></div></div><p>These questions lead to an understanding of a mechanism that explains</p>
<ol type="1">
<li>How symmetry breaking may lead to a sub-optimal languages in terms of overall fitness.</li>
<li>How semantic categories may be encoded compactly</li>
<li>How distributional semantics arise in natural languages</li>
<li>A mechanism demonstrating use of unmarked and marked items in different classes<sup>2</sup></li>
<li>Partial pooling also explains another aspect of natural languages. Natural languages have low degree of ambiguity in the long tail but do tend to have ambiguity in the highest frequency words. This seems to fit with a the same mechanism at work but operating in a more contextual pattern. I.e. if we talked about [category-prefix, disambiguate-suffix] we can also consider that once a suffix becomes a morpheme it’s signal can be re-purposed as [prefix-sense, context] and more generally [morpheme-sense, context]. High frequency words tend to be short and reusing them increases compression, of the language.</li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;this kind of pattern once it develops in multiple categories may easily recognised from a few examples and become on of the cues used for creating rules for a grammar morphology/syntax.</p></div></div><section id="partial-pooling" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="partial-pooling">Partial Pooling</h2>
<p>let’s imagine we have this signaling system</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb1-3"></span>
<span id="cb1-4">lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb1-5"></span>
<span id="cb1-6">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'falcon'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 00'</span></span>
<span id="cb1-7">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hawk'</span>]    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 01'</span></span>
<span id="cb1-8">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eagle'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 10'</span></span>
<span id="cb1-9">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'panther'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 00'</span></span>
<span id="cb1-10">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leopard'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 01'</span></span>
<span id="cb1-11">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jaguar'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 11'</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># converting the lexicon to a table</span></span>
<span id="cb1-14">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[k, v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lexicon.items()]</span>
<span id="cb1-15"></span>
<span id="cb1-16"></span>
<span id="cb1-17">Markdown(tabulate(</span>
<span id="cb1-18">  table, </span>
<span id="cb1-19">  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pre-Linguistic- Object"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal"</span>]</span>
<span id="cb1-20">))</span></code></pre></div>
<div id="tbl-predators" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="2">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-predators-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: predators and their signals for tribe 1
</figcaption>
<div aria-describedby="tbl-predators-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="1">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Pre-Linguistic- Object</th>
<th style="text-align: left;">signal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">falcon</td>
<td style="text-align: left;">000 00</td>
</tr>
<tr class="even">
<td style="text-align: left;">hawk</td>
<td style="text-align: left;">000 01</td>
</tr>
<tr class="odd">
<td style="text-align: left;">eagle</td>
<td style="text-align: left;">000 10</td>
</tr>
<tr class="even">
<td style="text-align: left;">panther</td>
<td style="text-align: left;">111 00</td>
</tr>
<tr class="odd">
<td style="text-align: left;">leopard</td>
<td style="text-align: left;">111 01</td>
</tr>
<tr class="even">
<td style="text-align: left;">jaguar</td>
<td style="text-align: left;">111 11</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
<p>A spider monkey, the response for a raptor might be dealt with by descending from the top of trees to the second or third level of the canopy. A feline might be dealt with by moving to the top of the tree.</p>
<p>Clearly though there is little time to waste. So the monkey should be moving with aleracticy as soon as it hears either ‘0’ or ‘1’.</p>
<p>But ‘0’ and ‘1’ are not signals they are artifacts of the lexicon. Or are they?</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb2-2"></span>
<span id="cb2-3">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raptor'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 '</span></span>
<span id="cb2-4">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hawk'</span>]    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 '</span></span>
<span id="cb2-5">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eagle'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 '</span></span>
<span id="cb2-6">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raptor'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 '</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feline'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb2-9">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'panther'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb2-10">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leopard'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb2-11">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jaguar'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># converting the lexicon to a table</span></span>
<span id="cb2-14">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[k, v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lexicon.items()]</span>
<span id="cb2-15"></span>
<span id="cb2-16">Markdown(tabulate(</span>
<span id="cb2-17">  table, </span>
<span id="cb2-18">  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pre-Linguistic- Object"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal"</span>]</span>
<span id="cb2-19">))</span></code></pre></div>
<div id="tbl-predators-categories" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="3">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-predators-categories-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: predators categories and their signals
</figcaption>
<div aria-describedby="tbl-predators-categories-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="2">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Pre-Linguistic- Object</th>
<th style="text-align: right;">signal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">raptor</td>
<td style="text-align: right;">000</td>
</tr>
<tr class="even">
<td style="text-align: left;">hawk</td>
<td style="text-align: right;">000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">eagle</td>
<td style="text-align: right;">000</td>
</tr>
<tr class="even">
<td style="text-align: left;">feline</td>
<td style="text-align: right;">111</td>
</tr>
<tr class="odd">
<td style="text-align: left;">panther</td>
<td style="text-align: right;">111</td>
</tr>
<tr class="even">
<td style="text-align: left;">leopard</td>
<td style="text-align: right;">111</td>
</tr>
<tr class="odd">
<td style="text-align: left;">jaguar</td>
<td style="text-align: right;">111</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
<p>This is only a partial pooling equilibrium. It doesn’t allow the monkeys to distinguish between the different types of raptors or felines.</p>
<p>We care about it because it can serve the monkeys as a starting point for more complex signaling systems like the one above that are compatible with the semantics captured in this one - that there are two groups with two urgent actions. The has an implicit prefix that is compatible with the semantics of the category. The prefix arises in part from choice of using prefix codes inspired by Huffman codes <span class="citation" data-cites="Huffman1952Method">(Huffman 1952)</span></p>
<div class="no-row-height column-margin column-container"><div id="ref-Huffman1952Method" class="csl-entry">
Huffman, David A. 1952. <span>“A Method for the Construction of Minimum-Redundancy Codes.”</span> <em>Proceedings of the IRE</em> 40 (9): 1098–1101. <a href="https://doi.org/10.1109/JRPROC.1952.273898">https://doi.org/10.1109/JRPROC.1952.273898</a>.
</div></div><p>If all the monkeys care about is the up down response the partial pooling equilibrium is all they need to learn. If they have benefits at distinguishing between the different types of predators, when they are at a distance, they would need to learn a more complex signaling system.</p>
<p>But when threat is imminent, the partial pooling equilibrium is what they should be using both as sender and as receiver.</p>
<p>Also it is conceivable that a number of signaling systems compatible with Table&nbsp;2 might arise by further spontaneous symmetry breaking once this equilibrium is established. with Table&nbsp;1 being one such option.</p>
<p>Now in most research on simple signaling system we often emphasize how signaling systems can arise via spontaneous symmetry breaking. Suppose the monkey learn the following signaling system.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb3-3"></span>
<span id="cb3-4">lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-5"></span>
<span id="cb3-6">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'falcon'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 00'</span></span>
<span id="cb3-7">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hawk'</span>]    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 00'</span></span>
<span id="cb3-8">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eagle'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 10'</span></span>
<span id="cb3-9">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leopard'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 01'</span></span>
<span id="cb3-10">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'panther'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 01'</span></span>
<span id="cb3-11">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jaguar'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 11'</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># converting the lexicon to a table</span></span>
<span id="cb3-14">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[k, v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lexicon.items()]</span>
<span id="cb3-15"></span>
<span id="cb3-16"></span>
<span id="cb3-17">Markdown(tabulate(</span>
<span id="cb3-18">  table, </span>
<span id="cb3-19">  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pre-Linguistic- Object"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal"</span>]</span>
<span id="cb3-20">))</span></code></pre></div>
<div id="tbl-predators-incompatible" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="4">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-predators-incompatible-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;3: predators and their signals for tribe 2
</figcaption>
<div aria-describedby="tbl-predators-incompatible-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="3">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Pre-Linguistic- Object</th>
<th style="text-align: left;">signal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">falcon</td>
<td style="text-align: left;">000 00</td>
</tr>
<tr class="even">
<td style="text-align: left;">hawk</td>
<td style="text-align: left;">111 00</td>
</tr>
<tr class="odd">
<td style="text-align: left;">eagle</td>
<td style="text-align: left;">000 10</td>
</tr>
<tr class="even">
<td style="text-align: left;">leopard</td>
<td style="text-align: left;">111 01</td>
</tr>
<tr class="odd">
<td style="text-align: left;">panther</td>
<td style="text-align: left;">000 01</td>
</tr>
<tr class="even">
<td style="text-align: left;">jaguar</td>
<td style="text-align: left;">111 11</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
<p>Here hawk and panther have been swapped. This system is no longer compatible with the structure of the partial pooling equilibrium. The prefix ‘0’, ‘1’ no longer map to the category. Now instead of being able to respond after 1 letter, the tribe need to listen five times before responding.</p>
<p>The spider monkeys in this case might exhibit reduced fitness as a group as they have to hear the full signal before they can respond. If the two tribes lived in adjacent groves the predators would quickly notice that this second group is much slower to respond to threat and preferentially target its members.</p>
<p>This can also lead to a break in communication. If the monkeys ignore anything after the first letter they will be correct 2/3 of the time. This would be acceptable if the delays leads to casualties due to predation more than 1/3 of the time.</p>
<p>Another way out might be to use a mixed strategy. If they could alternate between two systems they can get the benefits of both.</p>
<p>Here we might think of some mixture between Table&nbsp;3 and Table&nbsp;1. The problem here is that in game theory we generally consider such a strategy as 20% of one and 80% of the other and some randomizer picking between the two. But what we want is to allow the choice to be deterministic. The problem is there is no way for the receivers to tell which system is being used even if the sender know.</p>
<p>So the senders may notice the problem and since they are required to send long signals they are exposed to greater threats. They may take steps to remedy the shortcomings of the signaling systems. We could analyze this further in terms of a costly signal where cost for predators is a function of length and or number of ‘loud’ letters.</p>
<p>Leaving aside the formal question we can see that on the path to learning a full signaling system agents may pass though many states in which they do not have a full signaling system and may be only equipped with partial pooling equilibria.</p>
<p>Another view might be as follows:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb4-3"></span>
<span id="cb4-4">lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-5"></span>
<span id="cb4-6">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'falcon'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000'</span></span>
<span id="cb4-7">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jaguar'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># converting the lexicon to a table</span></span>
<span id="cb4-11">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[k, v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lexicon.items()]</span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14">Markdown(tabulate(</span>
<span id="cb4-15">  table, </span>
<span id="cb4-16">  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pre-Linguistic- Object"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal"</span>]</span>
<span id="cb4-17">))</span></code></pre></div>
<div id="tbl-predators-partial" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="5">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-predators-partial-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;4: predators and their signals 3
</figcaption>
<div aria-describedby="tbl-predators-partial-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="4">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Pre-Linguistic- Object</th>
<th style="text-align: right;">signal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">falcon</td>
<td style="text-align: right;">000</td>
</tr>
<tr class="even">
<td style="text-align: left;">jaguar</td>
<td style="text-align: right;">111</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
<p>So how can we tell if a signaling system if better than another that arises the from a different spontaneous symmetry breaking?</p>
<p>We need to test it for compatability with such a partial pooling equilibria. If we use these two codes as categories we can constrain new signals to conform to the hierarchy by using these codes as prefixes. Note that we could compose these in ways that would be much harder than with fully fleshed hieracies</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb5-3"></span>
<span id="cb5-4">lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-5">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raptor'</span>]    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000'</span></span>
<span id="cb5-6">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fruit'</span>]     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'001'</span></span>
<span id="cb5-7">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logic'</span>]     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'010'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># suffix for not and or </span></span>
<span id="cb5-8">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'verbs'</span>]     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'011'</span></span>
<span id="cb5-9">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'space'</span>]     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'100'</span></span>
<span id="cb5-10">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hierarchy'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'101'</span></span>
<span id="cb5-11">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grammar'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'110'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sufixes for grammarical words</span></span>
<span id="cb5-12">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feline'</span>]    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># converting the lexicon to a table</span></span>
<span id="cb5-15">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[k, v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lexicon.items()]</span>
<span id="cb5-16"></span>
<span id="cb5-17"></span>
<span id="cb5-18">Markdown(tabulate(</span>
<span id="cb5-19">  table, </span>
<span id="cb5-20">  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pre-Linguistic- Object"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal"</span>]</span>
<span id="cb5-21">))</span></code></pre></div>
<div id="tbl-predators-partial-composition" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="6">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-predators-partial-composition-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;5: partial equilibria for many hierarcies
</figcaption>
<div aria-describedby="tbl-predators-partial-composition-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="5">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Pre-Linguistic- Object</th>
<th style="text-align: right;">signal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">raptor</td>
<td style="text-align: right;">000</td>
</tr>
<tr class="even">
<td style="text-align: left;">fruit</td>
<td style="text-align: right;">001</td>
</tr>
<tr class="odd">
<td style="text-align: left;">logic</td>
<td style="text-align: right;">010</td>
</tr>
<tr class="even">
<td style="text-align: left;">verbs</td>
<td style="text-align: right;">011</td>
</tr>
<tr class="odd">
<td style="text-align: left;">space</td>
<td style="text-align: right;">100</td>
</tr>
<tr class="even">
<td style="text-align: left;">hierarchy</td>
<td style="text-align: right;">101</td>
</tr>
<tr class="odd">
<td style="text-align: left;">grammar</td>
<td style="text-align: right;">110</td>
</tr>
<tr class="even">
<td style="text-align: left;">feline</td>
<td style="text-align: right;">111</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
<p>This suggest a new insight into complex signaling systems.</p>
<p>Hierarchies can learned early, perhaps based on the most common representative. This may be due to inductive bias of senders. IT might happen due to planning. Otherwise these structures would need to be learned by evolving/refining inferior systems. What is certain that using spontaneous symetry breaking is unlikely to be copatible with such systems. And that even if it is not possible to plan these in advance a good algorithem would revise the signaling system to be compatible with each detected hierarcies and the recivers would need a protocol letting them know that a known state/signals pairs are being reassigned.</p>
</section>
<section id="markedness" class="level2">
<h2 class="anchored" data-anchor-id="markedness">Markedness</h2>
<p>Members of a class in a hierarchy are assigned unique suffices for the codes to follow the unmarked form which is assigned to the most common representative and used as a prefix. This is pattern is called markedness.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb6-3"></span>
<span id="cb6-4">lexicon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb6-5"></span>
<span id="cb6-6">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raptor/falcon'</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000'</span></span>
<span id="cb6-7">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hawk'</span>]    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 0'</span></span>
<span id="cb6-8">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eagle'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000 1'</span></span>
<span id="cb6-9">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feline/panther'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111'</span></span>
<span id="cb6-10">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leopard'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 0'</span></span>
<span id="cb6-11">lexicon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jaguar'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'111 1'</span></span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># converting the lexicon to a table</span></span>
<span id="cb6-14">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[k, v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lexicon.items()]</span>
<span id="cb6-15"></span>
<span id="cb6-16"></span>
<span id="cb6-17">Markdown(tabulate(</span>
<span id="cb6-18">  table, </span>
<span id="cb6-19">  headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pre-Linguistic- Object"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal"</span>]</span>
<span id="cb6-20">))</span></code></pre></div>
<div id="tbl-predators-markedness" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="7">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-predators-markedness-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;6: predators their categories with markedness
</figcaption>
<div aria-describedby="tbl-predators-markedness-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="6">
<table class="do-not-create-environment cell caption-top table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Pre-Linguistic- Object</th>
<th style="text-align: left;">signal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">raptor/falcon</td>
<td style="text-align: left;">000</td>
</tr>
<tr class="even">
<td style="text-align: left;">hawk</td>
<td style="text-align: left;">000 0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">eagle</td>
<td style="text-align: left;">000 1</td>
</tr>
<tr class="even">
<td style="text-align: left;">feline/panther</td>
<td style="text-align: left;">111</td>
</tr>
<tr class="odd">
<td style="text-align: left;">leopard</td>
<td style="text-align: left;">111 0</td>
</tr>
<tr class="even">
<td style="text-align: left;">jaguar</td>
<td style="text-align: left;">111 1</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
<p>Note: that we could have used single digits prefix making these codes even shorter. I originally envisioned that there are also categories for forging etc and so the predators prefix might be longer than if the signaling systems was exclusively for these 6 terms.</p>
<p>This pattern can arise from the way Huffman codes are constructed given suitable frequencies. However it might become ritualized into a rule. On the other hand if the tribe moves off to a new grove they might find that the new predators are not well represented by the suffixes and that falcons are now rare. The category might be kept and the falcon reassigned to a new signal with a longer suffix. This could happen with felines too resulting in a system like Table&nbsp;1. And we can interpret the prefix as a bound morpheme and the suffixes as a free morpheme.</p>
</section>
<section id="distributional-semantics" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="distributional-semantics">Distributional Semantics</h2>
<p>What we demonstrated is how we rearranged unrelated signals into a categories. Using a template: [category-prefix, designation-suffix]. This split the semantics over multiple symbols, but the full semantics require multiple symbols to appear in proximity to each other. This is the basis of distributional semantics because now the probabilities of semantics in the languages are defined by joint distribution of the prefix and suffix. And if there are many birds of note they may get their own prefix by further splitting raptor into [00,0] and putting non raptor birds into [001,designation-suffix]</p>
<p>This is clearly not the only way distributional semantics arises, but likely all the other mechanism are small variants and a future investigation should reveal that these may well have partial pooling equilibria as a basis<sup>3</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Perhaps even a topological basis in the</p></div></div><p>Morphology can be setup using an ordered sequence of inflectional prefixes followed by a stem-suffix. verbs and nouns might even share some of these. verb := [pos, number, person, gender, etc, stem].</p>
<p>Tense, Aspect and mood, modality might be be lexical as above or it might be grammatical e.g.&nbsp;the form [verb,aux] rather than verb := [pos, number, person, aux, mood, etc, stem]. if their usage is less frequent then other inflections or if the verb was established before these were introduced. In a future article I plan to consider this in greater detail using a hierarchial Bayesian models from cognitive psychology.</p>
<p>Another way semantics might become distributed is due to agreement. i.e.&nbsp;[X,number,gender, Z ] [number,gender,A] here we attach number to A to indicate their semantics are somewhat correlated and thus not quite independent. This requires a tricky mechanism.</p>
<p>And more generally we can use templates like [prefix-sense, context] and even [context, morpheme, context] to create the highly ambiguous syntactical structures we often see in natural languages.</p>
<p>This more general form may make more sense to receivers who see many rules and seek to streamline them further to the bare essentials by discarding information where it may be inferred from the joint distribution.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Languages are works in progress today’s signaling system is just a partial pooling equilibrium for tommorow’s signaling system.</p>
<p>This will become clearer once we formalize morphology and grammar in terms of function approximations. Function approximation means we will want to fit semantics for certain states better than others. Falcon nest v.s. Raptor!!!</p>
<p>Morphology approximations will allow us to add for each new (suffix) a large but finite co-set of predictable semantics.</p>
<p>Grammar approximations when recursive will allow us to combine the morphological form into infinite varieties.</p>
<p>Even so we may missing some signals for as yet unseen states. We may be able to use our approximation (prefixes and categories) or we may need to be more specific by adding some new suffixes. We will also have signals in reserve for which we have potential semantics but no states assigned.</p>
</section>
<section id="further-work-and-brain-dump" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="further-work-and-brain-dump">Further Work and Brain dump</h2>
<p>As time is short here are a bunch of points for further exploration</p>
<ol type="1">
<li><strong>The partial pooling equilibrium correspond to subsets of Bayesian senders.</strong></li>
<li>we show a category but we mean full hierarchies of categories. These are a preorder and thus imply a topological structure on the state space. This is the <a href="https://en.wikipedia.org/wiki/Alexandrov_topology">Alexandrov Topology</a> (Topology from a Preorder)</li>
<li>we can learn hierarchies of categories by learning an representative. But learning a representative for each category is also the basis of a clarifier. A classifier is also a type of decision we want to carry out on states to determine the action we should take. In this sense we are talking about a process for rough to fine specification of semantics.</li>
<li>Each hierarchy of categories represents a <strong>semantic symmetry</strong>. Members share a rough semantic meaning but differ in the fine details.</li>
<li>We might also repurpose this idea for other symmetries like morphology and phonology.</li>
<li>If each category is imbued with a prefix we end up with many prefixes corresponding to atoms of discourse. If there are not too many we might build words from these prefixes.</li>
<li>As there is an increased fitness for languages with prefix and at least certain hierarchies of categories we can see that this may be a desiderata for the evolution of signaling systems. More so we might want an RL algorithm to step between a lattice of such partial pooling equilibria rather then learning by spontaneous symmetry breaking.</li>
<li>This is planning of hierarchies of categories. However in reality we inherit the hierarchies from the state space of from the prelinguistic objects.</li>
<li>Another form of using mixed strategies is code switching - where we switch between partial pooling equilibria - each learned for a specific sender. At certain points such a code switching receiver might become promoted to a sender and use the information in the partial pooling equilibria to infer/plan a full language from the different languages it ha learned. This is a form of transfer learning. The result might be a pidgin or a creole depending if the receiver uses a lexicon or a linear function approximate which is a generalization of a lexicon!</li>
<li>In Natural Languages we do not see semantic categories encoded systematically as systems of prefixes or suffixes. Why not ? <sup>4</sup> <sup>5</sup> In fact they are only encoded in a very limited fashion using a suffix like great, greater, greatest. Numbers do tend to have a base 10 encoding but not as clean as a prefix code. Languages do have many hierarchies encoded into thesauri and wordnets. I think that at some level (e.g.&nbsp;semantic roles labeling) and phrase structure hierarchies can shape languages evolution.</li>
<li>Why is this type of hierarchies absent from the lexicon of natural Languages?</li>
<li>The quest for a perfectly regular interlingua might be shaped by an algorithm that learn to encode thesauri like hierarchies down into the phonetic stratum and via algorithms that jump between partial pooling equilibria. <sup>6</sup></li>
<li>Another point I did not raise is that there are lots more partial equilibria than fully separating equilibria. This suggest that it should be easy for a language ‘planner’ to find nearly compatible partial pooling equilibria with an existing language. By switching around the incompatibilities the language can then gain a new categorical prefix and be easier to learn as well as require less processing going forward.</li>
</ol>


<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;might requires a planning with high algorithmic complexity?</p></div><div id="fn5"><p><sup>5</sup>&nbsp;without such planning, would necessitate frequent revisions of the semantics of large parts of the lexicon as frequency changes?</p></div><div id="fn6"><p><sup>6</sup>&nbsp;A language with rich yet fully pooling morphology and a thesaurus-like-lexicon</p></div></div>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {The Roles of {Partial} Pooling and Mixed Strategies in the
    {Lewis} Signaling Game},
  date = {2025-03-11},
  url = {https://orenbochman.github.io/posts/2025/2025-03-11-partial-pooling/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“The Roles of Partial Pooling and Mixed
Strategies in the Lewis Signaling Game.”</span> March 11, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-03-11-partial-pooling/">https://orenbochman.github.io/posts/2025/2025-03-11-partial-pooling/</a>.
</div></div></section></div> ]]></description>
  <category>emergent languages</category>
  <category>lewis signaling game</category>
  <category>game theory</category>
  <category>complex signaling system</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-03-11-partial-pooling/</guid>
  <pubDate>Tue, 11 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Emergent Languages</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-14-Desiderata-for-Emergent-Languages/</link>
  <description><![CDATA[ 






<div class="page-columns page-full"><blockquote class="blockquote">
<p>[coordinate decision making], this is a difficult problem, because:<br> Firstly, most coordination problems cannot be solved in polynomial time.<br> Secondly, it’s difficult because as we decentralized our systems we need to know who, what, and when we want to communicate, right? <br> And thirdly, it’s difficult because it’s not at all clear what strategy we want to follow when things don’t actually work as expected <br> – <span class="citation" data-cites="RoboticsToday_2021">(Today 2021)</span> Amanda Prorok</p>
</blockquote><div class="no-row-height column-margin column-container"><div id="ref-RoboticsToday_2021" class="csl-entry">
Today, Robotics. 2021. <span>“Learning to Communicate in Multi-Agent Systems.”</span> <em>Https://Www.youtube.com/@RoboticsTodaySeminar</em>. <a href="https://www.youtube.com/watch?v=J9Olp6YqQhw&amp;ab_channel=RoboticsToday">https://www.youtube.com/watch?v=J9Olp6YqQhw&amp;ab_channel=RoboticsToday</a>.
</div></div></div>
<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This working paper aims to <strong>collect and develop</strong> desiderata for emergent languages. Inspired by the reductionist approach taken by <span class="citation" data-cites="Skyrms2010signals">(Skyrms 2010)</span>, my investigations of emergent languages began with minimal extensions to the Lewis Signaling Game.</p>
<div class="no-row-height column-margin column-container"></div><p>In a a companion working paper, “<a href="../2025-01-05-Many-paths-to-signaling/index.qmd">The Many Path To A Signaling System</a>” I investigate different setting under which emergent languages can arise. These two papers help cement my intuitions on how one may develop agents with the ability to learn emergent languages with such desirable properties. I am putting this draft out to aid other researchers in the field of emergent languages as well as to solicit feedback on the desiderata I have compiled.</p>
<!--
The Lewis game  is not understood very well when we extend it to complex signals.

Thus my desiderata for emergent languages remains minimal and shaped in part by my intuition of the simple and complex variants. 
-->
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Simulacra projects for Low resource Languages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Since writing the first draft I also took an online course on Multi-Lingual NLP.</p>
<p>In the course the instructors suggest that if there is no data for the language we can use a related language to bootstrap the process and if that is not available they suggest using Turkish. One issue raised is that having one such language can lead to overfitting to that language. Some NLP models can be fit on multiple languages allowing them to fit to the structure of the languages rather than one specific language.</p>
<p>One of my main takeaways from that course is that we may be able to evolve a variety of emergent languages that are approximations of Low Resource Languages. This may be possible by imbuing them with properties drawn from sources like <a href="https://wals.info/">WALS</a> the World Atlas of Language Structures, c.f <span class="citation" data-cites="wals">(Dryer and Haspelmath 2013)</span>. Such emergent languages may then be useful as a priors for building model for transfer learning between high resource languages and the low resource ones. They may be used with prototype of NLP models to assist collection of actual data most efficiently from speakers of these languages.</p>
</div>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-wals" class="csl-entry">
Dryer, Matthew S., and Martin Haspelmath, eds. 2013. <em>WALS Online (V2020.4)</em>. Data set. Zenodo. <a href="https://doi.org/10.5281/zenodo.13950591">https://doi.org/10.5281/zenodo.13950591</a>.
</div></div><div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR: A desiderata For Emergent Languages
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Emergent Languages in a Nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Emergent Languages in a Nutshell"></a></p>
<figcaption>Emergent Languages in a Nutshell</figcaption>
</figure>
</div>
<p>This is a list of properties that I and others have suggested for emergent languages.</p>
</div>
</div>
<p><span class="citation" data-cites="Skyrms2010signals">(Skyrms 2010)</span> and <span class="citation" data-cites="NIPS2016_c7635bfd">(Foerster et al. 2016)</span> have shown that we can also add a lot of structure to the signaling system.</p>
<div class="no-row-height column-margin column-container"><div id="ref-Skyrms2010signals" class="csl-entry">
Skyrms, Brian. 2010. <span>“<span class="nocase">14512 Complex Signals and Compositionality</span>.”</span> In <em><span class="nocase">Signals: Evolution, Learning, and Information</span></em>. Oxford University Press. <a href="https://doi.org/10.1093/acprof:oso/9780199580828.003.0013">https://doi.org/10.1093/acprof:oso/9780199580828.003.0013</a>.
</div><div id="ref-NIPS2016_c7635bfd" class="csl-entry">
Foerster, Jakob, Ioannis Alexandros Assael, Nando de Freitas, and Shimon Whiteson. 2016. <span>“Learning to Communicate with Deep Multi-Agent Reinforcement Learning.”</span> In <em>Advances in Neural Information Processing Systems</em>, edited by D. Lee, M. Sugiyama, U. Luxburg, I. Guyon, and R. Garnett. Vol. 29. Curran Associates, Inc. <a href="https://proceedings.neurips.cc/paper_files/paper/2016/file/c7635bfd99248a2cdef8249ef7bfbef4-Paper.pdf">https://proceedings.neurips.cc/paper_files/paper/2016/file/c7635bfd99248a2cdef8249ef7bfbef4-Paper.pdf</a>.
</div></div><p>In his book he considers, learning to reason, learning to form efficient communication networks, learning to use better communication protocols. Others have considers inducting communication protocols from a meta protocol. <span class="citation" data-cites="NIPS2016_c7635bfd">(Foerster et al. 2016)</span> And this has been coupled with the idea of learning to represent the structure of the state space.</p>
<p>I think that <strong>the coordination problem is the easy part</strong> and I have devoted some time to solve it in a number of settings. I think that the next challenge is to learn a reductionist concept for signal aggregation. Something that allows bags of words, ordered sequences and recursive structures to be learned in much the same way. I think this we have not been asking the right questions to find it yet since aggregation is a hard problem. However I think that at this point a starting point exists and the next problem is to learn the structure of the state space. I think that here we can apply some existing algorithms that may be a good fit for Lewis signaling games but it is quite important because the structure of the state space is what will determine the optimality of the language to a particular domain. A second facet is that we should think of a minimal state space that captures the essence of the real world. This should be a model that we can consider sufficiently powerful for real world agents. But in terms of the emergent signaling system I don’t think it will be qualitative or quantitatively all that different from other systems other than this it could act as a good <a href="">interlingua</a> for transferring between natural languages as well as between tasks in RL. This is therefore the holy grail of emergent languages at this point.</p>
<!-- move these in to NLP section for each desiderata 
::: {.callout-warning}

## Natural Languages 

Most of the desiderata for emergent languages are sourced from natural languages. However when we look at natural languages we see that the desiderata are not a feature of such languages but rather an idealization. More alarming is that these are not provided with a base line metric from different languages as a baseline. 

A second point is that natural language is not optimal in any of these desiderata and this is a point well worth remembering. 


- Natural languages are not easy to learn. 
- Natural languages combine regularity with much irregularity and this happens at all levels of the language from phonology, orthography through morphology and also syntax.
- Students, particularly children, are prone to misgeneralize and need to be corrected with the right forms. 
Instead of learning one base form of a word in most languages you have to learn a number of additional forms.
- Natural languages contain numerous homophones (different words tha sound the same) and homonyms (single words with multiple senses).
- Written languages often require punctuation to make the semantics precise. (The spoken version may often be subject to misinterpretation.)
- Natural languages contain lots of redundancy that is not particularly useful for better communication and makes them hard to learn.
- Natural languages are rife with ambiguity and though one can make a case that we can disambiguate them from context. This is true when we want to communicate. It is not true when people want to dissemble - listen to any politician or lawyer on the spot and you will discover that they are using a lot of words but to say very little. this is not the case, it is just the way we parse them. Given a number of parse tree of an ambiguous sentence we are told we can usually pick the right one. However there are more sentences in the language that have many many valid parse trees then just one or two. 

:::


::: {.callout-warning}

## Metrics

1. Ideally item in the desiderata should come with some metric that can be used to formalize it and to rank different signaling systems.
1. Also it would be nice if there were examples.

:::

-->
</section>
<section id="the-desiderata" class="level2">
<h2 class="anchored" data-anchor-id="the-desiderata">The Desiderata</h2>
<p>So the desiderata for emergent languages are</p>
<p>Important:</p>
</section>
<section id="learnability-easy-to-learn" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="learnability-easy-to-learn">Learnability – Easy to learn</h2>
<p>Despite its importance, learnability may be overlooked in research on emergent languages. While some settings may not prioritize ease of learning, in lifelong learning environments or multi-generational agent interactions, learnability becomes a crucial factor. Many other desiderata either enhance or hinder learnability</p>
<blockquote class="blockquote">
<p>My experience with the Lewis signaling game is that it is easy to learn and that Natural Languages are not. The difficulty seems to be in finding the right structure for the state space so that the signaling systems generalize well, allowing learners to pick up the language from a few examples and start to communicate effectively with a limited proficiency. At a deeper level if the language arises though a mechanism of spontaneous symmetry breaking, i.e.&nbsp;random choices then will have long term impact on the emergent languages that will increasingly be harder to undo.</p>
</blockquote>
<section id="insights-from-natural-languages" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="insights-from-natural-languages">Insights from Natural Languages</h3>
<p>Children typically begin learning to talk in stages:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 34%">
<col style="width: 51%">
</colgroup>
<thead>
<tr class="header">
<th>Age</th>
<th>Approximate Vocabulary Size</th>
<th>Language Milestones</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0-6 months</td>
<td>rudimentary signaling</td>
<td>Crying, cooing, babbling</td>
</tr>
<tr class="even">
<td>12 months</td>
<td>~1-5 words</td>
<td>Babbling becomes more complex, First words emerge (e.g., “mama,” “dada”)</td>
</tr>
<tr class="odd">
<td>18 months</td>
<td>~50 words</td>
<td>Vocabulary expands, simple word combinations begin</td>
</tr>
<tr class="even">
<td>24 months</td>
<td>~200-300 words</td>
<td>Two-word phrases, expanding vocabulary</td>
</tr>
<tr class="odd">
<td>30 months</td>
<td>~400-600 words</td>
<td>Three-word sentences, basic grammar structures appear, more verbs/adjectives</td>
</tr>
<tr class="even">
<td>36 months</td>
<td>~1,000 words</td>
<td>Complex sentences, basic grammar</td>
</tr>
<tr class="odd">
<td>4 years</td>
<td>~1,500-2,000 words</td>
<td>Storytelling, past/future tense</td>
</tr>
<tr class="even">
<td>5 years</td>
<td>~2,500-3,000 words</td>
<td>Longer conversations, complex grammar</td>
</tr>
<tr class="odd">
<td>6 years</td>
<td>~5,000+ words</td>
<td>Adult-like speech patterns emerging</td>
</tr>
</tbody>
</table>
<p>Language development varies by individual, but most children can hold simple conversations by age 3 and have a well-developed vocabulary by age 5.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Natural Languages</strong></th>
<th><strong>Emergent Languages</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>proceeds in stages</td>
<td>has one stage</td>
</tr>
<tr class="even">
<td>takes about 5 years</td>
<td>takes o(n^2/2) steps</td>
</tr>
<tr class="odd">
<td>in 5 years 5000 words</td>
<td>2,500,000 time steps<sup>1</sup></td>
</tr>
<tr class="even">
<td>Notoriously difficult to learn</td>
<td>Easy to learn<img src="https://latex.codecogs.com/png.latex?O(N%5E2/2)"> <sup>2</sup></td>
</tr>
<tr class="odd">
<td>learning in stages</td>
<td>learning in one stage</td>
</tr>
<tr class="even">
<td>learning is a lifelong process</td>
<td>learning is a one time process</td>
</tr>
<tr class="odd">
<td>learning is a social process</td>
<td>learning is one on one</td>
</tr>
</tbody>
</table>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;4.7 years at 1 step per minute</p></div><div id="fn2"><p><sup>2</sup>&nbsp;perhaps not so easy as N increases to millions and there are a a small chance of errors per symbol</p></div></div><div class="line-block">Natural languages are notoriously difficult to learn.| On the other hand emergent languages can be learned in the worst case as quickly as in <img src="https://latex.codecogs.com/png.latex?O(N%5E2/2)">, that is if one neutralizes the stochasticity of the process by requiring that nature prioritize unlearned states before all the learned ones at any given time.|</div>
<p>It doesn’t seem to be much easier to learn a second language once you have already learned the first. However research treats first language acquisition as a different process to second, etc. language acquisition.</p>
<p>In terms of the Lewis signaling game the first language acquisition maps the signals to states, a second language maps the signals to the first language. However in the game the players also engage in the inventing of the language for the first time simultaneously with learning about the state of the world.</p>
<p>The exception seems to be that children master one by the time they are 5 years old. Over time they will improve their proficiency and may learn additional languages. Students of a language may require many examples to learn. Having a dictionary is of limited help. <sup>3</sup> There isn’t an objective metric for tracking how difficult it is to learn a particular language. There is plenty of anecdotal evidence that some languages are easier to learn, as well as some languages are harder for native speakers of a second language. There are many challenges along the way.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;for lewis signaling games where agents learn a lexicon this is is all an agent needs to learn the signaling system.</p></div></div><p>Part of <a href="https://en.wikipedia.org/wiki/Nature_versus_nurture">Nature v.s. Nurture debate</a> is to what degree is the language instinct hard coded into us. c.f. Pinker’s books the blank slate and the language instinct. It</p>
<p>I often get hung up on why are natural languages (AKA man’s greatest invention) are such a challenge to learn and what this might mean for my investigation into emergence of language.</p>
<p>Hypothesis: Complex signaling that fulfill enough desiderata may suffer from reduced learnability. I think that the core desiderata might actually allow for languages with graded burden of learnability.</p>
<p>Questions: Howe can we evaluate the learnability of a signaling system? What are the metrics that we can use to evaluate the learnability of a signaling system?</p>
<section id="metrics-for-learnability" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="metrics-for-learnability">Metrics for Learnability</h4>
<section id="todo" class="level5 callout-info" data-collapse="true">
<h5 class="anchored" data-anchor-id="todo">TODO:</h5>
<p>I’m uncertain if other have studied learnability in the context of emergent languages. So there is an open challenge in defining good metrics that can guide progress in this area.</p>
<ol type="1">
<li><label><input type="checkbox">research this in the litrature.</label></li>
</ol>
</section>
<p>In RL we do however have metrics that are associated with learning. These are: 1. The number of examples needed to learn a task. 2. The generalization of the learned task. 3. The stability of the learned task.</p>
<ol type="1">
<li><p>Evidence that agents have learned the signaling systems is that they can communicate effectively. This is measures in terms of expected success rate. During learning this may take a long time to converge to 1.0.</p></li>
<li><p>In the tabular setting <img src="https://latex.codecogs.com/png.latex?n%5E2/s"> seems to be the worst case for agents engaged purely with learning a signaling system.</p></li>
<li><p>The best case is O(n) - i.e.&nbsp;if the receiver could see the state it would still need to see The faster the agent reach 1.0 the better they</p></li>
<li><p>The most obvious metric is the success rate for the agents in carrying out communications. However this by itself is not enough. In the original game the best case path to learning generally requires at least n^2/2 tries and the algorithms used do not usually need to generalize. In the complex signaling systems we might have infinite or prohibitively large state spaces and even for finite one potentially unbounded number of signals.</p></li>
<li><p>A second idea is how many examples are needed to be seen before agent get a good grasp of the language.</p></li>
</ol>
<ul>
<li><p>In <span class="citation" data-cites="goldsmith-2001-unsupervised">(Goldsmith 2001)</span> the author considered the induction of morphology using Minimal description length MDL - the number of bits needed to describe the signaling system is what agents need to coordinate between them to learn a shared communication system. In Goldsmith’s work he considered a corpus and then compared it to to the a corpus compressed + the binary of an encoder built from templates and a frequency lexicon. Goldsmith showed that by learning a morphology it was possible to compressed corpus + the binary of the encoder into less then the original corpur. his is a good metric for the learnability of a signaling system. In the case of emergent languages</p></li>
<li><p>I should make a review of this great paper but the gist is that there is a lexicon and a morphology based on a set of templates that are used to generate the words. <sup>4</sup></p></li>
<li><p>We like to consider two cases: <sup>5</sup></p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="ref-goldsmith-2001-unsupervised" class="csl-entry">
Goldsmith, John. 2001. <span>“Unsupervised Learning of the Morphology of a Natural Language.”</span> Edited by Julia Hirschberg. <em>Computational Linguistics</em> 27 (2): 153–98. <a href="https://doi.org/10.1162/089120101750300490">https://doi.org/10.1162/089120101750300490</a>.
</div><div id="fn4"><p><sup>4</sup>&nbsp;As it overgenerates, it might be necessary to store a bit-list of which lexicon items can be used with which templates. though I don’t actually recall this being the case as the might be an infinite number.</p></div><div id="fn5"><p><sup>5</sup>&nbsp;I have already written an article on some different ways that signaling systems can be arise.</p></div></div><ol type="1">
<li>there is a sender/teacher with a good signaling system and a receiver/student learning it.</li>
<li>there is no sender/teacher and the agents have to construct such a signaling system from scratch.</li>
</ol>
<p>the above notion if MDL is a good metric for the first case but not the second. In the second case we need to consider the complexity of the state space as well as the algorithmic complexity arriving at a common communication system. The cost of coordination of an MDL is subsumed by the cost due to complexity of constructing optimal signaling system that faithfully represent the structure of the state space.</p>
<p>Another two points:</p>
<ul>
<li>Learning a partial system should give agents better benefits than not.</li>
<li>Learning as a group should be easier and quicker than learning individually.</li>
<li>e.g.&nbsp;Learning of rules (grammar/morphology) should amplify the learning and generalization of the speaker wrt the structure of the state space.</li>
</ul>
<p>RL based metrics for learnability are:</p>
<ol type="1">
<li>cumulative reward <img src="https://latex.codecogs.com/png.latex?G_T"> if normalized becomes the average reward per time step or expected success rate.</li>
<li>Sample efficiency</li>
<li>convergence rate - how long till policy stabilizes or stops improving</li>
<li>regret - Measures how much reward is lost due to suboptimal actions compared to an optimal policy. Defined as <img src="https://latex.codecogs.com/png.latex?R_t%20=%20G%5E*-G_t"> where <img src="https://latex.codecogs.com/png.latex?G%5E*"> is the optimal cumulative reward</li>
<li>entropy of the policy- Measures randomness in action selection</li>
<li>policy stability</li>
<li>success rate/ task completion rate</li>
<li>generalization</li>
<li>exploration vs exploitation ballance</li>
</ol>
<p>For hierarchical RL additional metrics may include subtask efficiency, hierarchical consistency, and intrinsic reward utilization to assess the learning of macro-actions and task decomposition.</p>
</section>
<section id="golds-theorem" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="golds-theorem">Gold’s Theorem</h4>
<p>One of the main points in the paper is Gold’s Theorem, c.f.<span class="citation" data-cites="gold1967language">(Gold 1967)</span> concerning the impossibility of learning an unrestricted set of languages. The authors also discuss the necessity of innate expectations in language acquisition, arguing that the human brain’s learning algorithm can learn existing human languages but not all computable languages.</p>
<div class="no-row-height column-margin column-container"><div id="ref-gold1967language" class="csl-entry">
Gold, E Mark. 1967. <span>“Language Identification in the Limit.”</span> <em>Information and Control</em> 10 (5): 447–74.
</div></div><blockquote class="blockquote">
<p>Gold’s theorem formally states there exists no algorithm that can learn a set of ‘super-finite’ languages. Such a set includes all finite languages and at least one infinite language. Intuitively, if the learner infers that the target language is an infinite language, whereas the actual target language is a finite language that is contained in the infinite language, then the learner will not encounter any contradicting evidence, and will never converge onto the correct language. This result holds in greatest possible generality: ‘algorithm’ here includes any function from text to language.</p>
</blockquote>
</section>
<section id="the-paradox-of-language-acquisition." class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="the-paradox-of-language-acquisition.">The paradox of language acquisition.</h4>
<p>The authors describe Chomsky’s concept of “poverty of the stimulus” and the proposed solution of “universal grammar” (UG) as a restricted set of candidate grammars. They explain the controversy surrounding the notion of an innate UG and highlight the role of learning theory in demonstrating its logical necessity.</p>
<p>If memory serves me correctly, in <span class="citation" data-cites="bod2003probabilistic">(Bod, Hay, and Jannedy 2003)</span>, the authors argue that the <code>poverty of the stimulus</code> is not a problem for language acquisition. They show that if Grammars are defined using probabilistic rules then the poverty of the stimulus is not a problem. This is because the child can learn the language by observing the world and the language spoken by the adults. T think that they make a case against the necessity for an innate UG.</p>
<div class="no-row-height column-margin column-container"><div id="ref-bod2003probabilistic" class="csl-entry">
Bod, R., J. Hay, and S. Jannedy. 2003. <em>Probabilistic Linguistics</em>. A Bradford Book. MIT Press. <a href="https://books.google.co.il/books?id=Ac5bgYVk8kwC">https://books.google.co.il/books?id=Ac5bgYVk8kwC</a>.
</div></div><p>I have not thought everything through but I believe that Gold Theorem may not be a show stopper for learning grammars in MARL.</p>
<ul>
<li>One reason is that saliency and other factors may restrict the sets of all possible languages that may be learned to just one.</li>
<li>A second is that spontaneous symmetry breaking can also reduce the number of possible languages to just one.</li>
<li>I cannot however say this is a general refutation of Gold’s Theorem, I think that it depends of the choice of State space and it’s implicit structure and how that might be captured in terms of a signaling system.</li>
<li>If</li>
<li>Another is that One reasons is my view that bayesian agents can learn to update thier beliefs about the relevant equilibria.</li>
</ul>
<p>This is another point they make that I wanted to bear upon. In the book probabilistic linguistic the authors if agents can learn an approximation of a language then they can learn the language. This is a point that I have made in my own work.</p>
</section>
</section>
<section id="references" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="references">References</h3>
<p>In the beautiful review paper <span class="citation" data-cites="Nowak2002ComputationalAE">(Martin A. Nowak, Komarova, and Niyogi 2002)</span>, the authors discuss Learnability. This shows that this at least in the evolutionary context this has been considered</p>
<div class="no-row-height column-margin column-container"><div id="ref-Nowak2002ComputationalAE" class="csl-entry">
Nowak, Martin A., Natalia L. Komarova, and Partha Niyogi. 2002. <span>“Computational and Evolutionary Aspects of Language.”</span> <em>Nature</em> 417 (6889): 611–17. <a href="https://api.semanticscholar.org/CorpusID:4323969">https://api.semanticscholar.org/CorpusID:4323969</a>.
</div></div><p>I also drew the following sources for this section:</p>
<p><span class="citation" data-cites="bloom2013one">(Bloom 2013)</span>, <span class="citation" data-cites="fenson2000variability">(Fenson 2000)</span>, <span class="citation" data-cites="hoff2009language">(Hoff 2009)</span>, <span class="citation" data-cites="hart1995meaningful">(Hart and Risley 1995)</span></p>
<div class="no-row-height column-margin column-container"><div id="ref-bloom2013one" class="csl-entry">
Bloom, L. 2013. <em>One Word at a Time: The Use of Single Word Utterances Before Syntax</em>. Janua Linguarum. Series Minor. De Gruyter. <a href="https://books.google.co.il/books?id=4bTnBQAAQBAJ">https://books.google.co.il/books?id=4bTnBQAAQBAJ</a>.
</div><div id="ref-fenson2000variability" class="csl-entry">
Fenson, L. 2000. <em>Variability in Early Communicative Development</em>. Monographs of the Society for Research in Child Development. Wiley. <a href="https://books.google.co.il/books?id=9N0cZ24IzIUC">https://books.google.co.il/books?id=9N0cZ24IzIUC</a>.
</div><div id="ref-hoff2009language" class="csl-entry">
Hoff, Erika. 2009. <em>Language Development</em>. 5th ed. Cengage Learning.
</div><div id="ref-hart1995meaningful" class="csl-entry">
Hart, B., and T. R. Risley. 1995. <em>Meaningful Differences in the Everyday Experience of Young American Children</em>. P.H. Brookes. <a href="https://books.google.co.il/books?id=I2pHAAAAMAAJ">https://books.google.co.il/books?id=I2pHAAAAMAAJ</a>.
</div></div></section>
<section id="optimal-for-communication" class="level3">
<h3 class="anchored" data-anchor-id="optimal-for-communication">Optimal for Communication</h3>
<p>Agents should achieve a high success rate in communication. To better understand signaling and complex signaling systems such as those that emerge out of MARL agent interaction it is necessitate to think in terms of a information-theoretic formulation of the problem. The Lewis signaling game is very simple and lacks any assistance in this regard. However</p>
<p>Agents should be able to communicate with a high success rate. (This is a doorway to information theoretic formulations)</p>
<p>Emergent Communications should have an expected success rate of almost 1.</p>
<p>Many systems with with expected success rate less then are acceptable however we can tend to see agents reach close to 1.</p>
<p>For optimal communication across a noisy channel we need to consider the following:</p>
<p>Prefix codes are optimal for communication. A prefix code is a type of code system (typically a variable-length code) distinguished by its possession of the “prefix property”, which requires that there is no whole code word in the system that is a prefix (initial segment) of any other code word in the system. Adaptive ones like the <a href="https://en.wikipedia.org/wiki/Adaptive_Huffman_coding">Vitter algorithm</a> appear to be candidates that play well with many of the other desiderata like: - brevity (prefix codes as source coding) - resilience to errors (channel coding) and adding error detection and correction codes to the message. - easy to decode (minimal decoding complexity) - able to adapt to new states and changes in the distribution of states. - distributional semantics. - compositionality. - zipfian distributions.</p>
<p>Another more powerful code is arithmatic coding, however this is not practical for a number of reasons.</p>
</section>
</section>
<section id="resilience---to-errors" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="resilience---to-errors">Resilience - to Errors</h2>
<p>The work of … suggests that</p>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>Signaling systems should be resilient to errors. Errors can be introduced in a number of ways: - Noise in the channel. - Errors in the encoding or decoding process. - Complete and Partial pooling of equilibria.</p>
<p>As we inject errors into the signaling system we should see a number of features from natural languages emerge.</p>
</section>
<section id="insights-from-natural-language" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="insights-from-natural-language">Insights from Natural Language</h3>
<p>Natural language have a number of features that make them resilient to errors:</p>
<ul>
<li>Redundancy.</li>
<li>Distributional semantics.</li>
<li>Agreement.</li>
<li>Vowel harmony.</li>
</ul>
<p>An likely other I am not aware of.</p>
<p>IN <span class="citation" data-cites="nowak1999evolution">(Martin A. Nowak and Krakauer 1999)</span> the authors suggests that the evolution of language is driven by the need to be able to communicate effectively in the presence of errors. They demonstrate that the number of vowels and consonants might increase to a goldilocks zone but beyond a certain threshold the the number of errors will increase making a larger phologoical inventory less likely to evolve.</p>
<div class="no-row-height column-margin column-container"><div id="ref-nowak1999evolution" class="csl-entry">
Nowak, Martin A, and David C Krakauer. 1999. <span>“The Evolution of Language.”</span> <em>Proceedings of the National Academy of Sciences</em> 96 (14): 8028–33.
</div></div></section>
<section id="metrics" class="level3">
<h3 class="anchored" data-anchor-id="metrics">Metrics</h3>
<p>This property may be measured by the number of errors that can be introduced into the signaling system before it expected success rate drops below a certain threshold.</p>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<p>This is based on …</p>
</section>
</section>
<section id="decodeability---easy-to-decode" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="decodeability---easy-to-decode">Decodeability - Easy to decode</h2>
<section id="overview-1" class="level3">
<h3 class="anchored" data-anchor-id="overview-1">Overview</h3>
<p>Complex signaling systems should be easy to decode. This is a property of prefix codes. Huffman coding has this property.</p>
<p>It is worthwhile considering huffman coding as a working model for the evolution of signaling systems.</p>
<p>[] Todo: insert reference to unwritten article and code on n-arry huffman coding of syllable based signaling systems. <!-- from [here](https://chatgpt.com/share/67cda437-0220-8002-a2f7-a1afef80c9a7)
--></p>
</section>
<section id="insights-from-natural-language-1" class="level3">
<h3 class="anchored" data-anchor-id="insights-from-natural-language-1">Insights from Natural Language</h3>
<p>Are natural languages easy to decode? Parsing natural language is a difficult task is challenging for machines but not so much for humans.</p>
</section>
<section id="metrics-1" class="level3">
<h3 class="anchored" data-anchor-id="metrics-1">Metrics</h3>
<p>Ease of decoding is likely an information theoretic property and should have metrics that are associated with the complexity of the decoding process.</p>
</section>
<section id="resources-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="resources-1">Resources</h3>
<p>This is based on <span class="citation" data-cites="MacKay2003">(MacKay 2003 ch.&nbsp;5 p.91-6)</span></p>
<div class="no-row-height column-margin column-container"><div id="ref-MacKay2003" class="csl-entry">
MacKay, David J. C. 2003. <em>Information Theory, Inference, and Learning Algorithms</em>. Copyright Cambridge University Press.
</div></div></section>
</section>
<section id="salient-wrt.-the-distribution-of-states" class="level2">
<h2 class="anchored" data-anchor-id="salient-wrt.-the-distribution-of-states">Salient wrt. the distribution of states</h2>
<p>Salience means that some equilibria are better than others in terms of some practical concern that affect the fitness of the signaling agents.</p>
<p>e.g.&nbsp;a log-normal or exponential distribution or any distribution other than the uniform distribution of states will have a different optimal signaling system, particularly under (adaptive) prefix coding.</p>
<p>e.g.&nbsp;is signals have differential costs this will create a parallel mechanism which I consider to be a form of salience. More specifically, if agents use a binary systems with high and low frequency signals. And the low frequency signals are harder for predators to detect then the agents should reduce the number of high frequency signals for predators signaling. On the other hand using a long sequence of low frequency signals will require longer signals and thus also increases the risk of being predation during the signaling process.</p>
<p>This suggest that out of the numerous signaling systems that can arise from the Lewis signaling game some will be more efficient and this may well translate directly into greater fitness for the agents.</p>
<p>However we might as well be clear that for larger state spaces the signals further down the long tail play a less important role in the fitness of agents and therefore one a signaling system or even a partial pooling equilibria is found that captures sufficient quantiles of the state distribution, may confer similar fitness benefits.</p>
<p>And so it seems that while saliency places an order on all possible signaling equilibria it may have to compete with less salient equilibria that are much easier to learn and use. H</p>
<p>However I think that learnability demands much more on the structure of the state space in terms of prelinguistic objects while saliency is more about the distribution of states. So that if we try to disregard most pathological cases and consider state spaces resembling reality we might expect that the most salient signaling system will also be very learnable.</p>
<p>e.g.&nbsp;is syllables have energy/clarity costs or then the otherwise symmetrical equilibria will now have an order and there is a notion of the most salient signaling system.</p>
<p>Salience is not the same but may also encompass the notions of</p>
<ul>
<li>risk minimizing wrt risks associated with signaling - particularly in the case of risks affecting agent’s fitness!</li>
<li>minimize costs/overhead associated with signaling (in rl there should be a cost associated with each marginal bit that the they send across the channel)</li>
<li>Minimizing signal length - This may be the reason why the most common states are the shortest signals - using the unmarked case as the default. This is a form of source coding. (Perhaps this items is more fundamental then risk and salience) It may also be the reason why we have vowel harmony in some languages and why there are other types of redundant agreement in different languages.</li>
<li>A theorem: if a (natural) language arising via evolution has a redundancy that may be removed without loss of information or via context then it will be compressed and eroded or eliminated given time. Thus such features are that exist and are stable are will have a measurable benefits in terms of communication.</li>
</ul>
<section id="diminishing-significance-of-salience" class="level3">
<h3 class="anchored" data-anchor-id="diminishing-significance-of-salience">Diminishing significance of salience</h3>
<p>A final thought on salience. We considered a couple of examples like riskiness of predators and their frequency of occurrence. However many other factors may arise that contribute to salience and they may be due to cross-cutting concerns and create a pareto frontier of equilibria. These may be too complex for the agents to process or to plan for.</p>
<p>Once a language is established in a large enough a population it would become impractical to coordinate all speakers to a equilibria with a greater salience.</p>
<p>salience will be ignored when: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BCost%20of%20new-coordination%20in%20the%20population%7D%20%3E%20%5Ctext%7BBenefits%20of%20salience%7D%0A"></p>
<p>This is a form of the principle of least effort. But I doubt we can formalize this in a way that is useful as coordination costs are algorithmic while fitness an emergent property of fitness and depends on the different aspects for salience. These cost are generally incompatible units and thus a challenge to reconcile.</p>
</section>
</section>
<section id="the-signaling-system-should-be-able-to-generalize-to-new-states" class="level2">
<h2 class="anchored" data-anchor-id="the-signaling-system-should-be-able-to-generalize-to-new-states">The signaling system should be able to generalize to new states</h2>
<p>In its simplest for generalization is due to</p>
<ol type="1">
<li>having reusable templates for recurring patterns</li>
<li>having predictable semantics from those templates</li>
</ol>
<p>i.e.&nbsp;if sender just picks all the 6 syllables sequences from a set of 10 symbols. Then are a million possible signals and assigns them arbitrarily to a meaning there is no generalization. Learning would require <img src="https://latex.codecogs.com/png.latex?10%5E12/2"> steps.</p>
<p><span id="eq-six-syllables-template"><img src="https://latex.codecogs.com/png.latex?%0A%3C%5Ctext%7Bs-noun%7D%20,%20%5Ctext%7Bdeclension%7D%20%3E%20%3C%5Ctext%7Bverb%7D%20,%20%5Ctext%7Bconjugation%7D%3E%20%3C%5Ctext%7Bo-noun%7D%20,%20%5Ctext%7Bdeclension%7D%20%3E%20%5Cqquad%20%5Ctext%7Bthree%20word%20template%7D%0A%5Ctag%7B1%7D"></span></p>
<p>The above template might be used for SVO language with the same six syllables. This three word template is about the level mastered by a 3 year old.</p>
<p>There agent need to learn 10 subject and 10 subject declensions, 10 verbs and 10 verb conjugations. And 10 objects and 10 object declensions. This is a total of 60 basic symbols that require 1800 steps to learn. But these give rise to a system that is highly predictable. More so if the same noun and declension is used for the subject and object where the learning is only 800 steps.</p>
<p>Three year olds typically have a larger vocabulary than 10 nouns and 10 verbs. But the point is that once this system is established the agent can expand the vocabulary of nouns and verbs without having to learn the declensions and conjugations again and can use to generate vast amount of new sentences with little effort in terms of learning.</p>
<section id="contextual-semantics-and-generalization" class="level3">
<h3 class="anchored" data-anchor-id="contextual-semantics-and-generalization">Contextual semantics and generalization</h3>
<p>Now I want to point out that while this generlises nicely we have a finite number of words and sentences from this system. This is essentially a tabular lexicon. Also we do not consider the use of context. i.e.&nbsp;</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%3Caa-ba%3E%20%3Cka-da%3E%20%3Cba-ra%3E%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%3Caa-ba%3E%20%3Cda-ra%3E%20%3Cba-ra%3E%0A"></p>
<p>the nouns in the first sentence are assumed to mean the same things as the nouns in the second sentence.</p>
<p>If the verbs were such that this semantics was incompatible, then we might assign different meanings to one or both nouns. This would however require more learning steps.</p>
<p>Note: that in this case <img src="https://latex.codecogs.com/png.latex?%3Caa-ba%3E"> has two meanings <img src="https://latex.codecogs.com/png.latex?%3Caa-ba/1%3E"> <img src="https://latex.codecogs.com/png.latex?%3Caa-ba/2%3E"> and we need to pick the correct one using the verb. Thus there is a tradeoff between the number of meanings and the number of learning steps and the use of context for semantic disambiguation.</p>
<p>So the problem isn’t so much in terms of the learning but it is in terms of making sure we don’t create collisions between the different semantics. <img src="https://latex.codecogs.com/png.latex?%0A%3Caa-ba/1%3E%20%3Cka-da%3E%20%3Cba-ra%3E%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%3Caa-ba/2%3E%20%3Cka-da%3E%20%3Cba-ra%3E%0A"></p>
<p>We have to be sure there aren’t some combination like the above that both make sense as we would not be able to tell which one was meant. I.e. we end with a partial pooling equilibrium.</p>
<p>An easier path to learning perhaps is to add more one word syllable nouns and verbs. Nowak and Krakauer (1999) suggest though that after some point increasing the inventory of sounds leads to more errors in communication.</p>
<p>At this point it might be easier to allow a second syllable to the noun slot. Again we run into some problems, we reused the same syllable for the noun and declension, so we can’t be certain if a triplet is a long noun with a declension or a short noun with a declension and a verb. Again we might be able to figure this out from the context but can we be sure there isn’t a collision.</p>
<p>On way to dix this is to use a stress marker on the last sound of a verb or noun. This would be the penultimate sylable of the inflected form.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%3Caa'-ba%3E%20%3Cka-da%3E%20%3Cba-ra%3E%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%3Caa-ba'-ka%3E%20%3Cda-ba'-ra%3E%20%3Cba'-ra%3E%0A"></p>
<p>This allows us to have open categories of nouns and verbs.</p>
<p>Another way to move forward is to have more templates that further increase semantics in a predictable ways.</p>
<p>For example we might add adjective and adverbs.</p>
<p>We can add up to 10 grammatical gender to a noun and assign each to some semantic category. This can allow us to use more verbs in a more predictable way.</p>
<p>For verbs we can enhance our 10 primative verbs with 10 coverbs to and have 100 derived verbs. Some might mark aspect and mood and become attached to the conjugation.</p>
<p>So we have tabular systems</p>
<p><span id="eq-nine-word-template"><img src="https://latex.codecogs.com/png.latex?%0A%3C%5Ctext%7Bgender%7D,%20%5Ctext%7Bs-noun'%7D,%20%5Ctext%7Bdeclension%7D%20%3E%20%3C%5Ctext%7Bverb'%7D%20,%20%5Ctext%7Bconjugation%7D,%20%5Ctext%7Bco-verb%7D%3E%20%3C%20%5Ctext%7Bgender%7D,%20%5Ctext%7Bo-noun%7D,%20%5Ctext%7Bdeclension%7D%20%3E%20%5Cqquad%20%5Ctext%7Btemplate%20with%20gender%20and%20coverbs%7D%0A%5Ctag%7B2%7D"></span></p>
<p><span id="eq-nine-word-template-2"><img src="https://latex.codecogs.com/png.latex?%0A%3C%5Ctext%7Badj%7D,%20%5Ctext%7Bs-noun'%7D,%20%5Ctext%7Bdeclension%7D%20%3E%20%3C%5Ctext%7Bverb'%7D%20,%20%5Ctext%7Bconjugation%7D,%20%5Ctext%7Badverb%7D%20%3E%20%3C%20%5Ctext%7Badjective%7D,%20%5Ctext%7Bo-noun%7D,%20%5Ctext%7Bdeclension%7D%20%3E%20%5Cqquad%20%5Ctext%7Btemplate%20with%20adverbs%20and%20adjectives%7D%0A%5Ctag%7B3%7D"></span></p>
<p>Ok so we have a system that is highly predictable, extendable and yet easy to learn. If the gender, co-verb, adjective and adverb are unstressed the agent should be able to make sense of the multiple templates with minimal collisions and we might even use a prefix to indicate the template being used.</p>
<p>An easier method might be to break the big templates into smaller ones. However this will be covered in the next section as it would complicate things in a way that might be unnecessary.</p>
</section>
</section>
<section id="hierarchical-structures" class="level2">
<h2 class="anchored" data-anchor-id="hierarchical-structures">Hierarchical structures</h2>
<p>Hierarchical structures arise naturally out of rule based systems. Rules lead to trees structures - which are ubiquitous in language.</p>
<p>Now we already laid the ground work for this in the previous section. We created many tables using a few templates. If we replace the templates with rules we are one step away from a grammar.</p>
<p>What we are missing is a recursive rule. A recursive rule allows us to create a structure that is no longer infinite.</p>
<p>A recursive rule is one that can be applied to itself. This is a very powerful concept. It allows us to create structures that are infinitely deep by repeating the same rule over and over again.</p>
<p>Another way to think about this is that a rule is recursive if it a;lows to replace a symbol with a copy of itself. Alternatively it might be replaced by a parent of itself.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS%20%5Crightarrow%20aSb%0A"> {#eq-simple recursive}</p>
</section>
<section id="an-example-or-recursive-rules-with-noun-phrases." class="level2">
<h2 class="anchored" data-anchor-id="an-example-or-recursive-rules-with-noun-phrases.">an example or recursive rules with noun phrases.</h2>
<p>$$ <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AS%20&amp;%5Crightarrow%20NP%20VP%20%5C%5C%0ANP%20&amp;%5Crightarrow%20(Det)%20N%20%7C%20%20%20%20%5C%5C%0AVP%20&amp;%5Crightarrow%20V%20(NP)%20(PP)%0A%5Cend%7Balign*%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AS%20&amp;%5Crightarrow%20a%7Cb%20%5C%5C%0Aa%20&amp;%5Crightarrow%20bb%20%5C%5C%0Ab%20&amp;%5Crightarrow%20aa%0A%5Cend%7Balign*%7D%0A"></p>
<p>I think this is an integral part of generalization and of learnability. I think that this is a grammar that can generate nested structures like nested clauses, nested phrases, or nested dependency trees.</p>
<p>A Recursive grammar seems more compact than one that is not recursive. It is also more expressive. Recursive rules are more learnable in the sense that learning one rule leads to possibly infinite number of sentences.</p>
<p>Another property is that the recursive grammar should be well formed (syntax) and avoid generating ungrammatical sentences (semantics) This may be complicated and I’d rather avoid hashing the details at this time. If necessary this item be broken down.</p>
<p>This is nice to have because a grammar with non recursive rules is less expressive. We might run into problems for expressive basic recursive structures like numbers.</p>
<ul>
<li>every time an agents learns another part of the system it should have. My solution here leans on using group actions to structure the state space. Either one big one group action like for hebrew or a number of smaller ones like for english.</li>
</ul>
<p>I’m not sure if this should be included. Generalization implies two or three things</p>
<ol type="1">
<li><p>replacing tabular lexicons with linear function approximators</p></li>
<li><p>compositionality over multiple analogies.</p></li>
<li><p>Recursive grammar. This is one needs to be promoted or at least combined with learnability. Generalization means beinng able to learn base forms and generelizing to derived forms autoamtical. It also means being able to compose signals. IT also being able to capture hierarchies and other structures in the state space.</p></li>
<li><p>Morphology</p>
<ul>
<li>inflections-
<ul>
<li>verb - conjugations
<ul>
<li>Tense and Aspect and Mood systems</li>
</ul></li>
<li>nouns - declensions</li>
</ul></li>
<li>derivations to other parts of speech</li>
<li>paradigms for each (e.g.&nbsp;posseives in English)</li>
</ul></li>
<li><p>Relations</p>
<ul>
<li>Sematic Roles</li>
<li>Coverbs and Complements extend the verbs to cover many related concepts</li>
</ul></li>
<li><p>Syntax for Logical and set theory as a basis for</p>
<ul>
<li>Conjunctions and Disjunctions,</li>
<li>First order/Contrafactual logic Quantifiers</li>
<li>Subordination and Coordination</li>
</ul></li>
<li><p>Spatio-temporal events</p>
<ul>
<li>Adverbs and Prepositions</li>
<li>Adjectives and Adverbs</li>
</ul></li>
</ol>
</section>
<section id="distributional-semantics" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="distributional-semantics">Distributional Semantics</h2>
<p>This central property does not arise in many signaling systems. However distributional semantics is a property of natural languages. It is the good part of entanglement and disentanglement. It makes it easier to understand things by thier context<sup>6</sup> &amp; Distributed Representations</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;a word is characterized by the company it keeps</p></div></div><ul>
<li>Signaling systems should be alignable with 2000 discourse atoms c.f. <span class="citation" data-cites="arora2018linearalgebraicstructureword">(Arora et al. 2018)</span>, or a subset if they come from a much simpler state structure.</li>
<li>In fact a major point to research on emergent languages get to see if they manifest distributional semantics. I hypothesize that this will happen if the the state space is has a semantic basis - i.e.&nbsp;the state space is a vector space with dimensions that are semantically orthogonal. I now revised the above strong requirements to the following but perhaps they are even equivalent.</li>
<li>prefix codes with compositionality.</li>
<li>prefix codes learned with loss analogies.</li>
</ul>
<div class="no-row-height column-margin column-container"><div id="ref-arora2018linearalgebraicstructureword" class="csl-entry">
Arora, Sanjeev, Yuanzhi Li, Yingyu Liang, Tengyu Ma, and Andrej Risteski. 2018. <span>“Linear Algebraic Structure of Word Senses, with Applications to Polysemy.”</span> <a href="https://arxiv.org/abs/1601.03764">https://arxiv.org/abs/1601.03764</a>.
</div></div></section>
<section id="domain-specific-language-dsl-and-general-purpose-language-gpl" class="level2">
<h2 class="anchored" data-anchor-id="domain-specific-language-dsl-and-general-purpose-language-gpl">Domain Specific Language (DSL) and General Purpose Language (GPL)</h2>
<p>The languages that tend to emerge in one MDP would tend to be domain specific. However if agents experiences span multiple MDPs, their language may become more general purpose.</p>
<p>The DSL should encompass the states and action spaces of a particular MDP.</p>
<p>The GPL should have prelingistic objects that can be mapped to and from the states and action spaces of the MDPs.</p>
<section id="theories-of-mind-and-grounding" class="level3">
<h3 class="anchored" data-anchor-id="theories-of-mind-and-grounding">Theories of Mind and Grounding</h3>
<p>The agents need a DSL to think strategically about its own actions in terms of the actions of others agents. This is the domain of game theory. However the linguistic abstraction for this can be considered a theory of mind. The theory of mind is in some sense a mapping between the GPL and a specific DSL. It allows the agent to think in more general terms about the MDP it is in.</p>
<p>The process of creating such a mapping in sometimes called grounding. It is a process of identifying states, actions, rewards and higher order abstractions of a DSL for an MDP into a GPL.</p>
<p>For example even if the agent has learned some Options and Generalized Value Functions (GVFs) in previous MDPs, these may not be directly applicable to the current MDP. But if the agent has a theory of mind, it may be able to map the options and GVFs to the current MDP using its DSL. Its fairly clear that a option might transfer more readily while a GVF might require learning from scratch. However many concepts from Chess and Go and Black Jack might be directly applicable to other games or they may be need to be relearned in the new MDP. However a theory of mind should allow the agent to create hypotheses about such options and GVFs from the first game. It problem might be to identify what GVF best embodies ideas like the center or tempo and pawn structure in chess and or the concept of a bluff in poker and so on.</p>
</section>
<section id="inductive-bias-and-theories-of-mind" class="level3">
<h3 class="anchored" data-anchor-id="inductive-bias-and-theories-of-mind">Inductive Bias and Theories of Mind</h3>
<p>To empower the agents to create a DSL with the GPL in a few shot fashion it would need to test many hypotheses and establish policies and or value functions for the current MDP but based on the DSL of the previous MDP.</p>
<p>These hypotheses might be derived using a bayesian approach to preexisting inductive biases. Simple models would seem to first first. More complex models would better at explain as more experience is gained. A hierarchical approach might allow it to assemble more complex models from pieces of existing models. This is one advantage of a bayesian approach.</p>
<p>Mapping the GSL and DSL</p>
<p>Pehaps also to operate in terms of temporal abstractions like options and generalized value functions that may be less obvious in the current MDP.</p>
<p>The mapping may be viewed as embedding the agents theory of mind and the process for this is grounding.</p>
<p>One way for an agents to quickly learn more general purpose language is to perhaps equip them with priors that embody and inductive bias towards the general purpose language. I.e. if they have access to priors that embody different theories of mind they can use baysian occums razor to pick the one most compatible with thier experience so far.</p>
<p>This should let them find a GPL that is compatible with the current DSL for the MDP they are in. If they have access to temporal abstractions like options, they might repurpose then once they use the theory of mind to assign a symbolic mapping to the options’s preconditions and post conditions in terms of the current language.</p>
</section>
<section id="inductive-bias-and-theories-of-mind-1" class="level3">
<h3 class="anchored" data-anchor-id="inductive-bias-and-theories-of-mind-1">Inductive Bias and Theories of Mind</h3>
<p>The general purpose language encompasses the DSLs of specific mdps.</p>
<p>some ideas of what a general purpose language should have that may not be in a DSL:</p>
<p>A signaling system A Domain specific language</p>
<ul>
<li><p>arithmetic or at least a number systems</p></li>
<li><p>basic relations e.g.&nbsp;equality, and order relations.</p></li>
<li><p>physics or at least spacio-temporal events</p></li>
<li><p>semantic hierarchies aka thesauri</p></li>
<li><p>first order logic + modal + contrafactual logic or at least propositional logic</p></li>
<li><p>set theory</p></li>
<li><p>basic notions from probability.</p></li>
<li><p>its worth noting that set theory or logic might be all we need to get the rest, but we are not building mathematics but a language that needs to communicate.</p></li>
</ul>
<!--

## Nice to have:

{{ < include _070_faithful.qmd >}}

{{ < include _090_compositionality.qmd >}}

{{ < include _100_disentanglement.qmd >}}

{{ < include _110_entanglement.qmd >}}

{{ < include _120_stability.qmd >}}

{{ < include _130_zipfian.qmd >}}
-->
</section>
</section>
<section id="compositionality---is-state-has-structure-the-languages-it-should-be-preservedmirrored-by-the-language" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="compositionality---is-state-has-structure-the-languages-it-should-be-preservedmirrored-by-the-language">9. compositionality - is state has structure the languages it should be preserved/mirrored by the language</h2>
<p>significant increase in what it can express and understand. I lean towards adding a topology to captures semantic hierarchies. The different signaling system are associated with a lattice of topological groups with the complete pooling equilibrium at the top and the unstructured separating equilibrium. In between are partial pooling equilibria and the various structured separating equilibria. For compositionality we want to pick certain structured pooling equilibria over the structured separating ones.</p>
<section id="disentanglement" class="level3">
<h3 class="anchored" data-anchor-id="disentanglement">10. Disentanglement</h3>
<ul>
<li>we like most morphmes to have unique semantics and not require context to disambiguate them. This places too much of a congnitive burden on speakers and requires learning by learners.</li>
</ul>
</section>
<section id="entanglement" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="entanglement">11. Entanglement</h3>
<ul>
<li><p>the language should be able to encode multiple concepts in a single signal when binding moephems etc is clearly more efficent (we never use parts in isolation)</p></li>
<li><p>when language encode two or more semantics in a single signal. e.g.&nbsp;‘They’ encodes (third) person and plural (number) as one signal. This is a pronoun but it is not inflected and is not made of two bound morphemes, it is a single morpheme.</p></li>
</ul>
<p>I want to come up with a information theoretic notions behind driving Entanglement and Disentanglement. 1. I think they are based on the mutual information between the signals and the states and relative entropy. 2. THe number of sub-states in the structure is high it best encoded as a group action i.e.&nbsp;a rule 3. If the sub-states are a few it is best encoded as a dictionary 4. If like a pronoun a complex signal is high frequency and high entropy there is a greater fitness to compress them into a single signal. And we might want to reduce errors by intentionally boosting the [phonemic contrast]<sup>7</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;explain!?</p></div></div><p>In reality natural languages are not optimal in any of these desiderata. They are the result of a long evolutionary process that has been shaped by many factors. However I think that the desiderata are a good starting point for designing a language that is optimal for a particular task.</p>
</section>
</section>
<section id="stability-of-regularity-and-irregularity-resilience-to-errors-and-to-evolution" class="level2">
<h2 class="anchored" data-anchor-id="stability-of-regularity-and-irregularity-resilience-to-errors-and-to-evolution">12. stability of regularity and irregularity (resilience to errors and to evolution)</h2>
<p>consider that a language that generates entangled structures to compress and reduce mistakes for something like its pronouns these should be stable over and not replaced by a more regular system that is less efficient…. i.e.&nbsp;the loss for having such a pronouns should be less then a the gain from having a more regular system.</p>
<p>Morpho-syntax should be stable over time and be composable with the abstract morphology structure of the state space.</p>
<p>Languages change over time but not the core structure of the language. This is a form of stability.</p>
</section>
<section id="zipfian-distributions" class="level2">
<h2 class="anchored" data-anchor-id="zipfian-distributions">13. Zipfian distributions</h2>
</section>
<section id="an-evolving-desiderata-of-emergent-languages" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="an-evolving-desiderata-of-emergent-languages">An evolving desiderata of Emergent Languages</h2>
<ol type="1">
<li><p>mappings between states and signals</p>
<ol type="1">
<li>morpho-syntax mappings preserve partial states (Homomorphism of normal subgroups)</li>
<li>mappings preserve semantic topologies (if a is close to b then f(a) should be close to f(b))<br>
</li>
</ol></li>
<li><p>Stability</p>
<ol type="1">
<li>Regularity is stable (mappings used in syntax and morphology are stable over time)</li>
<li>Irregularity is stable (mappings used in irregular verbs and nouns are also stable over time) In english we maintain many irregular borrowings from other languages and thus preserve thier regularity - making such exceptions easier to learn too.</li>
</ol></li>
<li><p>Compositionality</p></li>
<li><p>Brevity (source coding)</p></li>
<li><p>Self correcting (channel coding to detect errors and correction them through redundancies like agreement, vowel harmony, etc.)</p></li>
<li><p>Learnability - how many things need to be coordinated; the complexity of the structures, the <a href="https://en.wikipedia.org/wiki/Hoeffding%27s_inequality">Hoffding bound</a> on rates of learning distribution when there are errors. The <a href="https://en.wikipedia.org/wiki/Bonferroni_correction">Bonferroni correction</a> for multiple learners.<sup>8</sup></p></li>
<li><p>Stable irregularities</p></li>
<li><p>Zipfian distributions - the most common signals should be the shortest and the least common the longest. This is a form of source coding and would arrise naturally from huffman coding, except that this isn’t practical for several reasons. It could also arise out of laziness in the sender</p></li>
<li><p>Faithfulness</p></li>
<li><p>Distributional stability</p></li>
<li><p>Decidebility - easy to disambiguate ambiguous signals from thier context</p></li>
<li><p>Expressivity - the ability to express a wide range of concepts</p></li>
<li><p>Generalization - learning the language is possible from just a few signal state pairs.</p></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;multiple learners has similar logic as a multiple hypothesis testing problem, for each learner postulating different signaling system with each failure or success in a Lewis game. More so when learners get to observe each other’s actions and rewards.</p></div></div><p>Some metrics</p>
<ol type="1">
<li>Compositionality
<ol type="1">
<li>Topographic similarity</li>
<li></li>
</ol></li>
<li>Source coding
<ol type="1">
<li>Compression ratio</li>
<li>Entropy</li>
<li>Mutual information</li>
</ol></li>
<li>Error detection and correction
<ol type="1">
<li>Error rate</li>
<li>Hamming distance</li>
</ol></li>
<li>Learnability
<ol type="1">
<li>Number of examples to learn a new word</li>
<li>Number of examples to learn a new rule</li>
</ol></li>
</ol>
<p>Another random thought or two:</p>
<!--

## Compositionality in Lewis signaling games

So here is a sketch idea for an algorithm for learning a compositional language in a lewis game.


We need a language designer. This is can be the sender, the receiver or implicit. Without loss of generality we can assume that the sender is the language designer.

THe language designer needs 
1. to a 'semantic' metric to decide when two state are close or distant.
2. a  way to deconstruct states into atomic orthogonal/independent parts. I am thinking of normal subgroups.

Note that we can define the metric on the parts and aggregate them to get the metric on the whole. This is a form of compositionality.

More abstractly we can just say that the state is an algebraic topological group. 

So the language designer can use a template with n part (on for each of the subgroups) Ideal ordered with by the decreasing size to prefix code the sub-states. If they there are duplicate sizes this will yield multiple equilibria to be selected via spontaneous symmetry breaking.

The designer now can allocate the states to one of the points in the topology. By picking the system with lowest overall distances we get a regular compositional language. 

Since there are many ways to do this the designer needs to coordinate with the receiver. 
However since there is greater regularity they only need to coordinate a minimal set with each atomic  sub-astate appearing once.


## Is deep RL needed for language emergence? 

Regarding deep learning - I think that the best work in deep learning is done by researcher who have a clear view of the problem and use the DNN to approximate the function they cannot extend or scale beyond thier simple model. In the case of Emergent Languages people have built kits and adapted other architectures to that is overkill instead of focusing on the real problem at hand. 

So I think that most of the work in that space if flawed even if some the results are interesting. 

I don't know yet but I think that in may ways the complex signaling systems are not so different from simple ones. 

So far I also do not see the need for deep RL in this space. It seems to be mudding the waters rather then clarifying the problem. It clear thar RNNs and and newer seq2seq models are possible solutions but it seems that in most cases little effort is made to understand the problem mathematically and find the simplest solutions. I think that once we do this we should have both an elementary model of complex signaling. I currently think this may be a form of linear function approximation from RL. However I do not discount later use of deep learning models to learn non-linear variants. It is worth noting that by moving from a linear function approximation to a non-linear ones one expects to lose much and it is unclear that we gain anything at all since languages are discrete.

 and possible function approximation

-->
</section>
<section id="language-that-can-evolve-under-changing-conditions-without-losing-the-core-structure" class="level2">
<h2 class="anchored" data-anchor-id="language-that-can-evolve-under-changing-conditions-without-losing-the-core-structure">Language that can evolve under changing conditions without losing the core structure</h2>
<ul>
<li><p>this is being open to extension and to change.</p></li>
<li><p>I have already demonstrated above how a language can use a simple template yet be still be open to extension using open categories of nouns and verbs by applying a stress pattern to the final syllable.</p></li>
<li><p>I am thinking about a stronger form of this property akin to what might be used by agents that undergoes metamorphosis and now perceives a new MDP with different states and actions. There may be a need to adapt the language and memories for the states of the world in terms of the old language. If the agent is now color blind it may benefit in the short run from a language that lacks colors. If however it regains it sight it would be better if these words were not lost.</p></li>
</ul>
<p>So we might want to preserve the old semantics using new terms. This suggest that we may want to have a general purpose language but only use a small easy to learn subset of it to get going.</p>
</section>
<section id="desiderata-from-the-simulacra-project" class="level1">
<h1>Desiderata from the Simulacra Project</h1>
<section id="vowel-harmony" class="level2">
<h2 class="anchored" data-anchor-id="vowel-harmony">Vowel Harmony</h2>
<!--TODO: 
- [ ] move to Simulacra Project 
- [ ] reference in communication section
-->
<p>If agents backprogogate with topographic similarity in mind and the basic signals (phonemes) are endowed with a similarity they may end up with systems with vowel harmony and alternation of consonants to capture sets normal subgroups with greater similarity.</p>
<p>if these regular configuration also lead to better channel coding the benefits should persist.</p>
</section>
<section id="vo-and-ov-via-symmetry-breaking-etc" class="level2">
<h2 class="anchored" data-anchor-id="vo-and-ov-via-symmetry-breaking-etc">VO and OV via symmetry breaking etc</h2>
<!--TODO: 

- [ ] move to the Simulacra Project.
- [ ] reference in pertinent sections.

-->
<p>If we use Huffman coding like process to organize the order of the morphological and syntactical elements (effectively making the fixing the on average most surprising partial signals before the next on average most surprising ones) we should have emergent languages that are rather similar and fairly easy to learn</p>
<p>Like Turkish and Japanese. However there is at the start the question of how to apply aggregations. If action is first we get V O languages if it is second we get OV languages. I think that V carries more entropy in Predation and Resource gathering games so that VO should be more prevalent. However once this decision is made most practical algorithms will not be able to reverse it.</p>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Emergent {Languages}},
  date = {2025-01-14},
  url = {https://orenbochman.github.io/posts/2025/2025-01-14-Desiderata-for-Emergent-Languages/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Emergent Languages.”</span> January 14,
2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-14-Desiderata-for-Emergent-Languages/">https://orenbochman.github.io/posts/2025/2025-01-14-Desiderata-for-Emergent-Languages/</a>.
</div></div></section></div> ]]></description>
  <category>emergent languages</category>
  <category>reinforcement learning</category>
  <category>information theory</category>
  <category>linguistics</category>
  <category>complex signaling system</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-14-Desiderata-for-Emergent-Languages/</guid>
  <pubDate>Tue, 14 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Planning in the Complex Lewis Game</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-03-09-planning-in-complex-lewis-game/</link>
  <description><![CDATA[ 






<p>Today I want to consider a couple of weak assumption about planning in the Complex Lewis game. Yet before I do I ought to revisit the basic form of the Lewis Signaling game and the referential version of the game^ and the complex version of the game, and how these are formalized in Game Theory and in Reinforcement Learning. This is perhaps an onerous detour but it might be useful to help make progress that the weak assumptions I want to consider.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The referential Lewis Game
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the referential game the sender has un unrestricted lexicon. The receiver gets to picks from a restricted set of states. Since it can remember them learning can proceed much faster. if there are 4 options the trial adds clues about 4 slots in the state/signal matrix but it also excludes all the other signals for that states.</p>
<p>When I went over the referential Lewis game I was able to realize a fascinating distinction between this version and the original formulation which is described in greater detail in the <a href="../2025-03-09-referential-lewis-game/index.html">next research note</a>. What it suggests is that by restricting the options of the receiver to a subset of the states the game becomes much easier to solve. The details are less important but I can say it changes from <img src="https://latex.codecogs.com/png.latex?O(N%5E2)"> to <img src="https://latex.codecogs.com/png.latex?O(N)"> in terms of the number of trials required to solve the game and the memory requirements are also reduced.</p>
<p>On the other hand as described below the complex version which seems to be equivalent to the basic formulation with the restriction of the symbols can be exactly as hard as the basic formulation or much harder problem depending on the senders choice of either a contiguous and thus finite set of signals or a sparse in what can be potentially infinite set of signals.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tables v.s. Rules - Motivating function approximation
</div>
</div>
<div class="callout-body-container callout-body">
<p>I learned about the formal definition of a functions in a course on set theory by <a href="https://en.wikipedia.org/wiki/Yaacov_Choueka">Yaacov Choueka</a> who headed the <a href="https://www.responsa.org.il/">Bar Ilan Responsa Project</a> and played a leadership role in the <a href="https://www.ravmilim.co.il/naerr.asp">Rav-Milim project</a> which was is run by <a href="https://melingo.com/">Melingo</a> for which I worked for. Now one of the many insight I gained in that course is that a function which I alway thought of a a rule is nothing more then a table of values. There are some columns for the inputs and one column for the output. (Perhaps more if it is a multi-valued function). Another fascinating point made in this class and echoes later throughout many mathematics courses is that even absent a rule we can posit that a choice function exists that maps the inputs to the outputs. This seems to be a basic and unassailable assumption in mathematics called the axiom of choice and I even read a couple of fascinating books Titled Equivalents of the Axiom of Choice, I &amp; II, c.f. <span class="citation" data-cites="rubin1963equivalents">(Rubin and Rubin 1963)</span>, and <span class="citation" data-cites="rubin1985equivalents">(Rubin and Rubin 1985)</span> which demonstrate that this notion of a choice function is actually quite pervasive in mathematics and often less intuitive then the axiom of choice itself. Also it is used in the proof of the existence of many mathematical objects that are not easily constructed. One example that comes to mind is the existence of an equilibrium in the Lewis signaling game with some arbitrary structure!</p>
<p>Now the point of this nostalgic digression is that although in my mind for many years the distinction between the table (albeit with a continua of entries) and a rule had been erased. When I learned a about RL a fine distinction was made which made me realize that the two are not one and the same. After learning about tabular methods we are told that the problem with a table is that it does not generalize. What you learn about an entry any number of <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?f(x)"> does not help you predict the value of any other <img src="https://latex.codecogs.com/png.latex?x">. Because the choice function can spit out any pair of <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?f(x)"> it wants. But if we use a rule e.g.&nbsp;a linear function approximator or a Neural Net then the parameter learn a rule, perhaps also the importance of the different inputs and can generalize to new inputs. And there is also a very neat result - linear function approximation cant be used to represent any table, though at the cost of having a potentially one parameter for each input in the table. (E.g. I didn’t say it wan’t a trivial result).</p>
<p>Now I told this little story because as I survey the literature I see that many authors like I did fail to make this simple distinction, they are discussing experiments in Tabular setting but then talking about results concerning rules.</p>
<p>In terms of RL these are distinct algorithms. Function approximators require features and parameters. Tabular methods do not. So while discussion about rules in the context of Lewis signaling games may be interesting they cannot be complete when omit the features and algorithms that can learn such rules and it seems that no less significant is the importance function used to evaluate the loss on different examples. It also follows that the features are drawn directly from the pre-linguistic objects that we associate with the states!</p>
<p>So to sum up: [RL agents don’t say that agents learn rules in the Lewis signaling game. While rules and generalization are very powerful elements in language modeling, they don’t typically arise from the Lewis signaling game. None of the algorithms in the book signals are suitable to learn rules - they are generally tabular algorithms. So without suitable structures being explicitly included in the state space as appropriate prelinguistic objects, features and algorithms we may be at a loss as to explain how agents learn such rules.</p>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-rubin1985equivalents" class="csl-entry">
———. 1985. <em>Equivalents of the Axiom of Choice, II</em>. Studies in Logic and the Foundations of Mathematics. North Holland. <a href="https://books.google.co.il/books?id=LSsbBU9FesQC">https://books.google.co.il/books?id=LSsbBU9FesQC</a>.
</div></div><div class="no-row-height column-margin column-container"><div id="ref-rubin1963equivalents" class="csl-entry">
Rubin, H., and J. E. Rubin. 1963. <em>Equivalents of the Axiom of Choice</em>. Studies in Logic and the Foundations of Mathematics. North-Holland Publishing Company. <a href="https://books.google.co.il/books?id=pToedF7dZ7sC">https://books.google.co.il/books?id=pToedF7dZ7sC</a>.
</div></div><p>Also now that this is clarified it seems quite interesting to fill in the details about how we may acquire such features and develop an algorithm.</p>
<p>To avoid confusion lets state these assumptions up front.</p>
<p>Before we consider how a sophisticated language evolves in the complex signaling system might evolve that is like a language we should consider the trivial case. By this I mean how can the agents overcome the limitation of having a large set of states <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BS%7D=%5C%7Bs_i%5C%7D"> and a much smaller set of signals <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D=%5C%7Bl_i%5C%7D">. Clearly, they will need to send sequences of signals or they will be stuck in a partial pooling equilibria and with a very low success rate, corresponding to the number of signals divided by the number of states. We can reference this language as <img src="https://latex.codecogs.com/png.latex?L%5E*">. where the star symbol is the Kleene star and indicates that the language is a set of strings of signals.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Trivial Complex Signaling Systems
</div>
</div>
<div class="callout-body-container callout-body">
<p>The trivial formulation and its as follows:</p>
<ol type="1">
<li>The Sender enumerates the states. <img src="https://latex.codecogs.com/png.latex?1,%5Cldots,%7CS%7C">. As there are <img src="https://latex.codecogs.com/png.latex?%7CS%7C!"> ways to enumerate the states. This enumeration may seem like a choice that sender can defer to when each state appears but the Lords of Entropy will not allow this - he must decide ahead of time on a strategy and that means a signal for each state must be chosen.<br>
In the bayesian view The enumeration is predetermined by Nature. We might further imagine that the sender is assigned a lexicon of states to signals, but perhaps there is just a barcode reader that scans a state and returns a number.</li>
<li>The sender converts the enumeration to base in <img src="https://latex.codecogs.com/png.latex?%5B2,%5Cldots,%7CL%7C%5D">, we could assume he picks the largest.</li>
<li>The sender transliterates each digit to a signal in L* by converting each digit to a signal in the alphabet <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D">. He again as a L! ways to do this but again the Gods of entropy, require that he must pick them ahead of time. In the bayesian view he might be provided by a decoder ring to do this… ex-ante. But if he subscribes to the frequentest orthodoxy he might toss aside the decoder and pick the mapping at random the first time he transliterates each digit.</li>
<li>He then sends the resulting sequence to the receiver.</li>
<li>In the bayesian view the receiver has a pile of decoder rings and state-enumeration lexicons all he needs is to figure out the type the sender is using and so he can choose the ones that reverse the original process. Or if he subscribes to the frequentest orthodoxy he can just try states by trial and error and keep tabs of what he has tried and what the sender has sent.</li>
</ol>
<p>To sum this up the sender is assigned a type from S!*L! possible types. He encodes the states using base L enumeration and sends it to the receiver.</p>
<p>The receiver can use any algorithm it used in the simple Lewis game.</p>
<p>Note: if we make the assumption that the agents can both count and share the digits. Then we can also assume that the sender will have picker the first <img src="https://latex.codecogs.com/png.latex?%7CS%7C"> numbers in base <img src="https://latex.codecogs.com/png.latex?%7CL%7C">. Under this assumption the receiver can test each <img src="https://latex.codecogs.com/png.latex?%7CS%7C%5E2"> possible options, string out any signals,state combo that has already been eliminated, giving a total of <img src="https://latex.codecogs.com/png.latex?%7CS%7C(%7CS%7C-1)/2"> tests in the worst case… which is exactly the same as the simple lewis game.</p>
</div>
</div>
<p>The trivial game is tabular in nature - the encoding is a table assigned by nature. The decoding is by necessity the inverse table as they must compose to the identity.</p>
<p>Now I get to ask and answer what I never asked my teachers: “Why bother with this trivial case?”</p>
<ol type="1">
<li>Because it is the simplest case and it is a good starting point to consider the more complex cases.</li>
<li>Also the RL agent generally smuggle without a some solution no matter how bad before they can learn to find the optimal policy. In other words the trivial solution is the greater half of the battle.</li>
<li>Moving forward in RL is usually based on making steps with minimal improvements. I already have many ideas on making minimal improvement based on ideas listed in the article on the <a href="../../2025/2025-01-14-Desiderata-For-Emergent-Languages/index.qmd">desiderata of emergent communication</a></li>
</ol>
<p>We can now think about adapting this problem to existing tabular RL methods or for developing new ones.</p>
<p>Naturally we may wonder if the agents can do better than the trivial solution? Can we do any better without adding more structure to the state space?</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Non-trivial Complex Signaling Systems - Noisy channel
</div>
</div>
<div class="callout-body-container callout-body">
<p>If the channel is perfect, the sender might want to use the first contiguous N numbers. But if there is a noisy channel it could do better by pick the first N numbers that are each at a (hamming) distance of K from each other. This would alow the receiver to recover messages with k errors.</p>
<p>This suggest that the receiver cannot assume the sender is using the first <img src="https://latex.codecogs.com/png.latex?%7CS%7C_%7B%7CL%7C%7D"> numbers. In this case it cannot even be sure that there are <img src="https://latex.codecogs.com/png.latex?%7CS%7C"> signals as they can be corrupted to many more signals.</p>
<p>What should the reciever do in this case ? If it can figure out the (hamming) distance between codes it can use that to recover the original message. But it also needs to figure out what the correct message means.</p>
<p>So adding an error correction might help agents in the long term but it might increase the search space for the receiver by a orders of magnitude</p>
<p>So this is a challenge. For a large state space this will be a show stopper. However if the agent is learning functions rather then tables it might be ok. This is because it could learn the function on a small state space and then use this to generalize to the larger state space. This combines function approximation with curriculum learning. We may revisit this scenario later on.</p>
</div>
</div>
<ul>
<li>If there is a inherent structure in the states, the sender might select an encoding <img src="https://latex.codecogs.com/png.latex?e(s)"> should preserve this structure. For example if S has a group structure the sender might use an encoding that is a group homomorphism. If there is are partial orders in the states the sender might use an encoding that if monotonic with respect to the partial order.
<ul>
<li>We may call a minimal set of states as a base lexicon if knowledge of the base lexicon and the encoding function is sufficient to recover the rest of the lexicon automatically. In terms of linguistics we might call these the parts of the lexicon that is not in the base as the derived lexicon as it contains inflections, declensions, and derivations of the base forms.</li>
<li>In such a case though the sender might not want to pick the first N numbers but might want to pick a different set of numbers that are more suited to the structure of the states! The receiver who decodes some example might use analogies to infer additional states and eventually learn the decoder and the base lexicon.</li>
<li>If the receiver is like a child it may see many analogies and learn the decoder. If the receiver is less bright it could still learn the decoder the hard way (i.e.&nbsp;by trial and error over the full lexicon)</li>
</ul></li>
</ul>
<p>In the Lewis signaling game, the sender and receiver have to coordinate their actions to maximize their reward. The sender has to choose a signal that will help the receiver identify the correct state. The receiver has to interpret the signal and choose the correct state. This requires planning and coordination between the two agents.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Bayesian view of the Lewis game
</div>
</div>
<div class="callout-body-container callout-body">
<p>What do the agents know pre-ante?</p>
<ol type="1">
<li>do they know the full state space?</li>
<li>do they know the distribution of states?</li>
<li>do they know all possible signaling systems?</li>
<li>do they know the other possible equilibria?</li>
</ol>
<p>The receiver in game theory needs a strategy and in that strategy is a response to all possible actions by the sender. If there are sufficient rounds the receiver has a strategy for solving the full coordination problem before the game starts.</p>
<p>If there are N states and signals, there are N! ways to map the states to signals we can consider that these are the different possible lexicons. While the sender might pick a signal at random for each new state, in terms of game theory she too must have a strategy, i.e.&nbsp;a choice of signal for each contingent state. And we can follow the convention of Bayesian games and that this choice is made before the game starts by nature picking a type for the sender from the N! possible types. We may also assume that nature has picked a vector of states to be presented to the sender and receiver but this is not necessary as once the strategies are pre-determined we can use bayesian game theory to work out the actions of the agents that will lead to the equilibria with the highest payoffs. Since this is a bayesian game the solution concept is a bayesian Nash equilibrium.</p>
<p>Each time the sender solves on of the senders signals she can eliminate all the incompatible types until only one type remains and the receiver has inferred the mapping that decodes the sender’s signals for all but one state and thus knows the senders type.</p>
<p>In reality this changes very little in terms of the game, it’s just a more precise way of thinking about the game in terms of what Game theory formalism requires.</p>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Reinforcement Learning view of the Lewis game
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that when we think about the same game in reinforcement learning we may not require the agents to decide on a full strategy before the game starts. In RL settings they are in a PMDP a partially observed Markov Decision Process.</p>
</div>
</div>
<p>We could consider these as different lexicons. In a bayesian settings we might go further and consider that there are N! senders each with a different lexicon and that the receiver must infer type of sender rather than the the correct signal for the current state.</p>
<p>The state space can be simple or structured and anything in between. If the state space is simple the sender will use the original Lewis game to create a lexicon. If the state space is structured the sender and receiver may do better - particularly if the number of simple signals is smaller than the number of states and sequences of signals must be used.</p>
<p>If the state space is a list of binary fields then the sender can use a fixed template of length n and two signals encoding on or off. If the Planning in the Lewis game is a complex problem</p>
<p>It seems a daunting task to plan the whole language when presented with say the first state or perhaps a million states. We can assume from the game theoretic nature of the Lewis Game that the sender and receivers know the full states space even if not the distribution of states. I say this because how could the receiver know from what options to respond to the sender if it did not know the full state space.</p>
<p>In the referential game the receiver only seed a few states and must infer the right one from the signal. In this case we may relax the previous assumption and say that the sender and receiver may have a partial view of the state space.</p>
<p>More so what if the sender must start without even being exposed to the full state space or it</p>
<ol type="1">
<li>morphology</li>
</ol>
<section id="analogies" class="level2">
<h2 class="anchored" data-anchor-id="analogies">Analogies</h2>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Planning in the {Complex} {Lewis} {Game}},
  date = {2025-01-14},
  url = {https://orenbochman.github.io/posts/2025/2025-03-09-planning-in-complex-lewis-game/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Planning in the Complex Lewis Game.”</span>
January 14, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-03-09-planning-in-complex-lewis-game/">https://orenbochman.github.io/posts/2025/2025-03-09-planning-in-complex-lewis-game/</a>.
</div></div></section></div> ]]></description>
  <category>compositionality</category>
  <category>emergent languages</category>
  <category>reinforcement learning</category>
  <category>transfer learning</category>
  <category>information theory</category>
  <category>linguistics</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-03-09-planning-in-complex-lewis-game/</guid>
  <pubDate>Tue, 14 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>The Referential Lewis Signaling Game</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-03-09-referential-lewis-game/</link>
  <description><![CDATA[ 






<p>When I read a few papers using the referential Lewis signaling game I thought, this should be much faster for complex signaling games I use in my research. But when I got to thinking about coding a Bayesian agent with belief propagation I realized that the referential game is actually not a little easier but essentially trivial to solve even if coding the belief propagation algorithm is not.</p>
<p>Now that I wrote this up I realize I can code a much simpler algorithm without belief propagation that will solve the referential game in (sub)-linear time complexity.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
</div>
<div class="callout-body-container callout-body">
<p>In many experiments that RL agents are use the Referential Lewis signaling game, rather than the simple Lewis signaling game (AKA the Lewis Reconstruction Game). <mark>But a powerful RL agent can and should learn to exploit this difference and solve the coordination problem in sub-linear time complexity</mark> . I therefore recommend that researchers avoid the methodological trap of using the referential Lewis signaling game as a stand in for the simple Lewis signaling game!</p>
</div>
</div>
<p>In the referential Lewis signaling game, the sender has to choose a signal that will help the receiver identify the correct state. The receiver has to interpret the signal and choose the correct state. This requires planning and coordination between the two agents.</p>
<p>The main difference between the referential Lewis signaling game and the simple Lewis signaling game is that in the referential game, the receiver picks from a restricted set of states, rather than the full set of states. For researchers used to supervised learning this seems like a small change - the task looks like the familiar k-way classification task. This seems fine particularly as modern RL agents have neural networks that are built using pretrained classifiers like Clip or Cnns that are trained on ImageNet.</p>
<p>Using a pretrained model can let agent completely avoid the coordination problem inherent in the Lewis signaling game and is not the focus of this post. One the other hand the referential Lewis signaling game is also problematic and in a way that RL agents should learn to exploit rather quickly.</p>
<p>Lets consider the basic lewis game with 100 states and 100 signals.</p>
<p>In the first round the receiver has a 1/100 chance of decoding the signal correctly. It seed <img src="https://latex.codecogs.com/png.latex?E_1"> Say it picks <img src="https://latex.codecogs.com/png.latex?S_1"> Now If the state has changed the receiver sees a new signal <img src="https://latex.codecogs.com/png.latex?E_2">. If it picks a signal at random it has again a 1/100 chance of decoding the signal correctly again. Though if it picks <img src="https://latex.codecogs.com/png.latex?S_1"> again it has a 1/99 chance of decoding the signal correctly, because for it has excluded <img src="https://latex.codecogs.com/png.latex?S_1"> for <img src="https://latex.codecogs.com/png.latex?E_1">. As the state keeps changing the sender should keep sticking to the same signal as each mistake the receiver makes gives it more information about the meaning of the signal. Boring and slow after 50 round on average the receiver will have decoded the first signal and got its first payoff. It now start from scratch with the second signal and 1/99 chance of decoding it. We can estimate the complexity of the game as <img src="https://latex.codecogs.com/png.latex?O(N%5E2)"></p>
<p>Now consider the referential game with 100 states and 100 signals and a challenge set of k=4 states.</p>
<ol type="1">
<li>In the first round it sees <img src="https://latex.codecogs.com/png.latex?e_1"> the receiver has options <img src="https://latex.codecogs.com/png.latex?%7Bs_1,%20s_2%20,s_3%20,s_4%7D"> It has a 1/4 chance of decoding the signal correctly. Again it picks <img src="https://latex.codecogs.com/png.latex?S_1"> and looses out. But now it knows</li>
<li>the next time it sees <img src="https://latex.codecogs.com/png.latex?e_1"> it should pick one of the other three states it has seen before. If all three appear it has a 1/3 chance of decoding the signal correctly by ignoring the state it has not seen before.</li>
<li>Is the K states are a random sample of the 100 states there is a very small chance that the receiver will see the any of <img src="https://latex.codecogs.com/png.latex?%7Bs_1,%20s_2%20,s_3%20,s_4%7D"> again for <img src="https://latex.codecogs.com/png.latex?e_1"> unless it is the correct state! Lets calculate its likelihood if the next such round is the next round.
<ol type="1">
<li>The worst case of sees all three candidates <img src="https://latex.codecogs.com/png.latex?%7Bx,%20s_2%20,s_3%20,s_4%7D"> with 3/4 chance of decoding the signal correctly. There are 100-3=97 it can get such a combination.</li>
<li>next worst case of sees a combination with two unknown candidates <img src="https://latex.codecogs.com/png.latex?%7Bx,%20y%20,s_3%20,s_4%7D"> with 1/2 chance of decoding the signal correctly. There are (99-3)<em>(99-4) </em> 3 such a combinations.</li>
<li>next worst case of sees a combination with one unknown candidates <img src="https://latex.codecogs.com/png.latex?%7Bx,%20y%20,z%20,s_4%7D"> with 1/1 chance of decoding the signal correctly. There are (99-3)<em>(99-4)</em>(99-5)*3 ways it can get such a combination.</li>
<li>to sum up it has <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B(99-3)*(99-4)*(99-5)*3%20+%20(99-3)*(99-4)/2%20+%2097*3/4%20%7D%7B(99-3)*(99-4)*(99-5)*3%20+%20(99-3)*(99-4)%20+%2097%7D%20=%20.998"> chances of decoding the signal correctly on the next such round. So for the referential game the receiver has a 1/4 chance of decoding the signal correctly in the first round and a 1/998 chance of decoding the signal correctly in the second round for <img src="https://latex.codecogs.com/png.latex?e_1"> We can estimate the complexity of the game as <img src="https://latex.codecogs.com/png.latex?O(N)"></li>
</ol></li>
</ol>
<p>So by restricting the the options to the receiver the referential game is reduced from square to linear complexity. This is a huge difference also in the worst case the agent need to store N*K-1 states to solve the referential game this way. And in practice it can be solved even faster since after going through every state once the receiver has solved 1/K of the states and can eliminate those from the states it has in it’s buffer.</p>
<p>If you are working with RL agents and more so if you are using deep RL avoid the methodological trap of using the referential Lewis signaling game as a stand in for the simple Lewis signaling game as you are using Deep RL or Dynamic Programming to solve an O(N) coordination problem rather which is overkill and not a particularly impressive result.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {The {Referential} {Lewis} {Signaling} {Game}},
  date = {2025-01-14},
  url = {https://orenbochman.github.io/posts/2025/2025-03-09-referential-lewis-game/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“The Referential Lewis Signaling
Game.”</span> January 14, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-03-09-referential-lewis-game/">https://orenbochman.github.io/posts/2025/2025-03-09-referential-lewis-game/</a>.
</div></div></section></div> ]]></description>
  <category>reinforcement learning</category>
  <category>complex signaling system</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-03-09-referential-lewis-game/</guid>
  <pubDate>Tue, 14 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>A garden of forking paths</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/</link>
  <description><![CDATA[ 






<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
rethinking 💭 sequences
</div>
</div>
<div class="callout-body-container callout-body">
<p>I’ve been thinking how to visualize learning the complex lewis games.</p>
<p>For states based on 0-1 sequences we can visualize the state space as a binary tree. Another way is the garden of forking paths.</p>
</div>
</div>
<p>The following code comes from Richard McElreath whose developed it for his book Statistical Rethinking. Hw used this code to to visualize the garden of forking paths. This is a very beautiful metaphor for explaining how Bayesian statistical models are built. The we build the garden by making independent picks from a random variable. The livlihood of some event. (e.g.&nbsp;at least three heads out of five.) are the paths that lead to such outcomes. And the probability is estimated by normalizing by the total number of possible paths.</p>
<p>The garden of forking paths is a way to visualize the state space of a sequence of binary choices. The code below is a modified version of the original code to allow for coloring of the paths. The code is written in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rethinking)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: cmdstanr</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>This is cmdstanr version 0.8.1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>- CmdStan path: /home/oren/.cmdstan/cmdstan-2.34.1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>- CmdStan version: 2.34.1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable cmdstanr_no_ver_check=TRUE.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: posterior</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>This is posterior version 1.6.0</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'posterior'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    mad, sd, var</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    %in%, match</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: parallel</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>rethinking (Version 2.42)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'rethinking'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:stats':

    rstudent</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">polar2screen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>( dist, origin, theta ) {</span>
<span id="cb17-2">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## takes dist, angle and origin and returns x and y of destination point</span></span>
<span id="cb17-3">  vx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(theta) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dist;</span>
<span id="cb17-4">  vy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(theta) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dist;</span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( origin[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>vx , origin[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>vy );</span>
<span id="cb17-6">}</span>
<span id="cb17-7"></span>
<span id="cb17-8">screen2polar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>( origin, dest ) {</span>
<span id="cb17-9">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## takes two points and returns distance and angle, from origin to dest</span></span>
<span id="cb17-10">  vx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dest[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> origin[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb17-11">  vy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dest[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> origin[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>];</span>
<span id="cb17-12">  dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>( vx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> vy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vy );</span>
<span id="cb17-13">  theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(vy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dist );</span>
<span id="cb17-14">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## correct for quadrant</span></span>
<span id="cb17-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>( vx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> vy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ) theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theta; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lower-left</span></span>
<span id="cb17-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>( vx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> vy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ) theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> theta; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upper-left</span></span>
<span id="cb17-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>( vx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> vy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ) theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> theta; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lower-right</span></span>
<span id="cb17-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>( vx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> vy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ) theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pi;</span>
<span id="cb17-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>( vx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> vy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ) theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>; </span>
<span id="cb17-20">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## return angle and dist</span></span>
<span id="cb17-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( theta, dist );</span>
<span id="cb17-22">}</span>
<span id="cb17-23"></span>
<span id="cb17-24">point.polar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dist,theta,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">origin=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),...) {</span>
<span id="cb17-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># angle theta is in radians</span></span>
<span id="cb17-26">    pt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar2screen</span>(dist,origin,theta)</span>
<span id="cb17-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>( pt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] , pt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] , ... )</span>
<span id="cb17-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>( pt )</span>
<span id="cb17-29">}</span>
<span id="cb17-30"></span>
<span id="cb17-31">line.polar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dist,theta,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">origin=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),...) {</span>
<span id="cb17-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dist should be vector of length 2 with start and end points</span></span>
<span id="cb17-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theta is angle</span></span>
<span id="cb17-34">    pt1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar2screen</span>(dist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],origin,theta)</span>
<span id="cb17-35">    pt2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar2screen</span>(dist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],origin,theta)</span>
<span id="cb17-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(pt1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],pt2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(pt1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],pt2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) , ... )</span>
<span id="cb17-37">}</span>
<span id="cb17-38"></span>
<span id="cb17-39">line.short <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x,y,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">short=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,...) {</span>
<span id="cb17-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shortens the line segment, but retains angle and placement</span></span>
<span id="cb17-41">    pt1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb17-42">    pt2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb17-43">    theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">screen2polar</span>( pt1 , pt2 )[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb17-44">    dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">screen2polar</span>( pt1 , pt2 )[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb17-45">    q1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar2screen</span>( short , pt1 , theta )</span>
<span id="cb17-46">    q2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar2screen</span>( dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>short , pt1 , theta )</span>
<span id="cb17-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(q1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],q2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) , <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(q1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],q2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) , ... )</span>
<span id="cb17-48">}</span>
<span id="cb17-49"></span>
<span id="cb17-50">wedge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dist,start,end,pt,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,alpha,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,...) {</span>
<span id="cb17-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start: start angle of wedge</span></span>
<span id="cb17-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end: end angle of wedge</span></span>
<span id="cb17-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pt: vector of point bg colors</span></span>
<span id="cb17-54">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(pt)</span>
<span id="cb17-55">    points.save <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span>n,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x,y columns</span></span>
<span id="cb17-56">    span <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start)</span>
<span id="cb17-57">    span2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> span<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hedge)</span>
<span id="cb17-58">    origin <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hedge</span>
<span id="cb17-59">    gap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> span2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb17-60">    theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> origin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-61">    border <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(pt))</span>
<span id="cb17-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(alpha) ) {</span>
<span id="cb17-63">        pt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(pt) , <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col.alpha</span>(pt[i],alpha[i]) )</span>
<span id="cb17-64">        border <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(pt) , <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col.alpha</span>(border[i],alpha[i]) )</span>
<span id="cb17-65">    }</span>
<span id="cb17-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ( i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n ) {</span>
<span id="cb17-67">        points.save[i,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">point.polar</span>( dist , theta , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span>lwd , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg=</span>pt[i] , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span>border[i] , ... )</span>
<span id="cb17-68">        theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> theta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gap</span>
<span id="cb17-69">    }</span>
<span id="cb17-70">    points.save</span>
<span id="cb17-71">}</span>
<span id="cb17-72"></span>
<span id="cb17-73"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">#######</span></span>
<span id="cb17-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># garden draws paths using recursion</span></span>
<span id="cb17-75"></span>
<span id="cb17-76">garden <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>( arc , possibilities , data , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha.fade =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge1=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newplot=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.origin=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , adj.cex , adj.lwd , ring_dist , ... ) {</span>
<span id="cb17-77">    </span>
<span id="cb17-78">    poss.cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>( possibilities<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , rangi2 , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span> )</span>
<span id="cb17-79">    </span>
<span id="cb17-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(adj.cex) ) adj.cex<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(data))</span>
<span id="cb17-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(adj.lwd) ) adj.lwd<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(data))</span>
<span id="cb17-82">    </span>
<span id="cb17-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( newplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> ) {</span>
<span id="cb17-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># empty plot</span></span>
<span id="cb17-85">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mgp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tck =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb17-86">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>( <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bty=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xaxt=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yaxt=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> )</span>
<span id="cb17-87">    }</span>
<span id="cb17-88">    </span>
<span id="cb17-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( plot.origin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> ) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">point.polar</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> )</span>
<span id="cb17-90">    </span>
<span id="cb17-91">    N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(data)</span>
<span id="cb17-92">    n_poss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(possibilities)</span>
<span id="cb17-93">    </span>
<span id="cb17-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw rings</span></span>
<span id="cb17-95">    </span>
<span id="cb17-96">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute distance out for each ring</span></span>
<span id="cb17-97">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use golden ratio 1.618 for each successive ring</span></span>
<span id="cb17-98">    goldrat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.618</span></span>
<span id="cb17-99">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(ring_dist) ) {</span>
<span id="cb17-100">        ring_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,N)</span>
<span id="cb17-101">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb17-102">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ( i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N ) ring_dist[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ring_dist[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>goldrat</span>
<span id="cb17-103">        ring_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ring_dist <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ring_dist)</span>
<span id="cb17-104">        ring_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(ring_dist)</span>
<span id="cb17-105">    }</span>
<span id="cb17-106">    </span>
<span id="cb17-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(alpha.fade)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> ) alpha.fade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(alpha.fade,N)</span>
<span id="cb17-108">    </span>
<span id="cb17-109">    draw_wedge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(r,hit_prior,arc2,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge1=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,lines_to) {</span>
<span id="cb17-110">    </span>
<span id="cb17-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is each path clear?</span></span>
<span id="cb17-112">        hit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hit_prior <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>( possibilities<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>data[r] , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> )</span>
<span id="cb17-113">        </span>
<span id="cb17-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transparency for blocked paths</span></span>
<span id="cb17-115">        alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>( hit , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , alpha.fade[r] )</span>
<span id="cb17-116">        </span>
<span id="cb17-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw wedge</span></span>
<span id="cb17-118">        hedge_use <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>( r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , hedge1 , hedge )</span>
<span id="cb17-119">        pts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wedge</span>( ring_dist[r] , arc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] , arc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] , poss.cols , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge=</span>hedge_use , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span>alpha , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex=</span>cex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>adj.cex[r] , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span>lwd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>adj.lwd[r] )</span>
<span id="cb17-120">        </span>
<span id="cb17-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> r ) {</span>
<span id="cb17-122">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw next layer</span></span>
<span id="cb17-123">            span <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>( arc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> arc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_poss</span>
<span id="cb17-124">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ( j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_poss ) {</span>
<span id="cb17-125">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each possibility, draw the next wedge</span></span>
<span id="cb17-126">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursion handles deeper wedges</span></span>
<span id="cb17-127">                new_arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( arc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>span<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>) , arc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>span<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j )</span>
<span id="cb17-128">                pts2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_wedge</span>(r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,hit[j],new_arc,hedge,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lines_to=</span>pts[j,])</span>
<span id="cb17-129">            }<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#j</span></span>
<span id="cb17-130">        }<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># N&gt;r</span></span>
<span id="cb17-131">        </span>
<span id="cb17-132">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw lines back to parent point</span></span>
<span id="cb17-133">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(lines_to) ) {</span>
<span id="cb17-134">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ( k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_poss ) {</span>
<span id="cb17-135">                alpha_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>( hit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , alpha.fade[r] )</span>
<span id="cb17-136">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line.short</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lines_to[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],pts[k,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) , <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lines_to[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],pts[k,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span>lwd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>adj.lwd[r] , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">short=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col.alpha</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,alpha_l[k]) )</span>
<span id="cb17-137">            }</span>
<span id="cb17-138">        } <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lines_to</span></span>
<span id="cb17-139">        </span>
<span id="cb17-140">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pts)</span>
<span id="cb17-141">        </span>
<span id="cb17-142">    }</span>
<span id="cb17-143">    </span>
<span id="cb17-144">    pts1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_wedge</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc=</span>arc,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge=</span>hedge,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lines_to=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb17-145">    </span>
<span id="cb17-146">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(pts1)</span>
<span id="cb17-147">    </span>
<span id="cb17-148">}</span>
<span id="cb17-149"></span>
<span id="cb17-150"></span>
<span id="cb17-151"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb17-152"></span>
<span id="cb17-153">goldrat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.618</span></span>
<span id="cb17-154">ring_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb17-155"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ( i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ) ring_dist[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ring_dist[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>goldrat</span>
<span id="cb17-156">ring_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ring_dist <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ring_dist)</span>
<span id="cb17-157">ring_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(ring_dist)</span>
<span id="cb17-158"></span>
<span id="cb17-159">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-160"></span>
<span id="cb17-161">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , pi )</span>
<span id="cb17-162"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb17-163">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb17-164">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb17-165">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb17-166">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb17-167">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ring_dist=</span>ring_dist,</span>
<span id="cb17-168">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha.fade=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span></span>
<span id="cb17-169">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-1-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">####</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compare {1,0,0,0}, {1,1,0,0} and {1,1,1,0}</span></span>
<span id="cb18-3"></span>
<span id="cb18-4">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-5"></span>
<span id="cb18-6">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , pi )</span>
<span id="cb18-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb18-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb18-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb18-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb18-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb18-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ring_dist=</span>ring_dist,</span>
<span id="cb18-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha.fade=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span></span>
<span id="cb18-14">)</span>
<span id="cb18-15"></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">####</span></span>
<span id="cb18-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second plot</span></span>
<span id="cb18-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compare {1,0,0,0} to {1,1,1,0}</span></span>
<span id="cb18-20"></span>
<span id="cb18-21">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-22"></span>
<span id="cb18-23">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>pi )</span>
<span id="cb18-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb18-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb18-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb18-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb18-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb18-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.cex=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb18-30">)</span>
<span id="cb18-31"></span>
<span id="cb18-32">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( arc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] , arc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pi )</span>
<span id="cb18-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb18-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb18-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb18-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb18-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb18-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newplot=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb18-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.cex=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb18-40">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-1-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/index_files/figure-html/unnamed-chunk-1-2.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">####</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># third plot</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># three options: {1,0,0,0}, {1,1,0,0}, {1,1,1,0}</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-6">ac <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb19-7"></span>
<span id="cb19-8">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi )</span>
<span id="cb19-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb19-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb19-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb19-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb19-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb19-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.cex=</span>ac</span>
<span id="cb19-15">)</span>
<span id="cb19-16"></span>
<span id="cb19-17">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( arc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] , arc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi )</span>
<span id="cb19-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb19-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb19-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb19-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb19-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb19-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newplot=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb19-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.cex=</span>ac</span>
<span id="cb19-25">)</span>
<span id="cb19-26"></span>
<span id="cb19-27">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( arc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] , arc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi )</span>
<span id="cb19-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb19-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb19-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb19-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb19-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb19-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newplot=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb19-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.cex=</span>ac</span>
<span id="cb19-35">)</span>
<span id="cb19-36"></span>
<span id="cb19-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line.polar</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) , pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb19-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line.polar</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) , pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb19-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line.polar</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) , pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-1-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/index_files/figure-html/unnamed-chunk-1-3.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">#####</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># single possibility out of 10 plot</span></span>
<span id="cb20-3"></span>
<span id="cb20-4">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-5">ac <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>)</span>
<span id="cb20-6">al <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb20-7"></span>
<span id="cb20-8">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb20-9">nblue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb20-10"></span>
<span id="cb20-11">arc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi )</span>
<span id="cb20-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">garden</span>(</span>
<span id="cb20-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc =</span> arc,</span>
<span id="cb20-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">possibilities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,nblue),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nblue)),</span>
<span id="cb20-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb20-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hedge =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb20-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.cex=</span>ac,</span>
<span id="cb20-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj.lwd=</span>al</span>
<span id="cb20-19">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-1-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/index_files/figure-html/unnamed-chunk-1-4.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<section id="further-work" class="level2">
<h2 class="anchored" data-anchor-id="further-work">Further work</h2>
<ul>
<li>todo: make figures with binary nodes</li>
<li>todo: extend to a series of 4</li>
<li>todo: highlight a subset of paths with a different color</li>
<li>show corresponding truth tables.</li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {A Garden of Forking Paths},
  date = {2025-01-11},
  url = {https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“A Garden of Forking Paths.”</span> January
11, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/">https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/</a>.
</div></div></section></div> ]]></description>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-11-a-garden-of-forking-paths/</guid>
  <pubDate>Sat, 11 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Complex Signals Questions</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-06-research-notes/</link>
  <description><![CDATA[ 






<p>Question: how can we use planning in the Lewis Signaling Game.</p>
<p>Question: When is the RL update rule a regression ? [Something I heard explained in a couple of talks.]</p>
<p>Question: If I take some problems that can be solved with dynamic programming, does tha mean (tabular) RL algs should be able to solve them?</p>
<p>Question: In the Lewis signaling game, how can we test the robustness of an equilibrium? What are the factors that affect the stability of the equilibrium?</p>
<p>Questions: In the lewis signaling game, how does the distribution of state relate to the stability or robustness of the equilibrium</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Complex {Signals} {Questions}},
  date = {2025-01-06},
  url = {https://orenbochman.github.io/posts/2025/2025-01-06-research-notes/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Complex Signals Questions.”</span> January
6, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-06-research-notes/">https://orenbochman.github.io/posts/2025/2025-01-06-research-notes/</a>.
</div></div></section></div> ]]></description>
  <category>research</category>
  <category>reinforcement learning</category>
  <category>signaling systems</category>
  <category>emergent languages</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-06-research-notes/</guid>
  <pubDate>Mon, 06 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>The Many Path To A Signaling System</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-05-bifurcating-paths-to-signaling/</link>
  <description><![CDATA[ 






<blockquote class="blockquote">
<p>The Garden of Forking Paths — Jorge Luis Borges</p>
</blockquote>
<p>There are many ways for signaling systems to emerge. Gold’s theorem even suggests that if one makes a few assumptions there are scenarios that emergent languages become a garden with infinitely bifurcating paths each leading to a different language, and that the sender and receiver may never be sure they are on the same wavelength. While I consider these scenarios unrealistic, I do believe that the garden of forking paths is more than a metaphor for complex signaling systems.</p>

<div class="no-row-height column-margin column-container"><div id="vid-01" class="">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/Fe7S5wbxEPQ" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Brian Skyrms - “Some Dynamics of Signaling Games” at he start of this Skyrms suggest that there are many games and mechanism in which signaling systems arise.</p>
</div></div><div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The origin stories
</div>
</div>
<div class="callout-body-container callout-body">
<p>Like so much of the work on signaling systems, most of the work and interpretation originated with Brian Skyrms. The more I made progress on this working paper the more I discovered that I was increasingly going over material published or review by Skyrms in <span class="citation" data-cites="skyrms2010signals">(Skyrms 2010)</span> which I had read a number of times.</p>
<p>The real headache was that I was more interested in documenting my ideas, but I had to give credit to the many other researchers who had worked on signaling systems before me. In reality though most of the papers dive much deeper into the mathematics of signaling systems then I have. That is at least an advantage of finding the <code>origin stories</code> of the different dynamics.</p>
</div>
</div>
<div class="no-row-height column-margin column-container"></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Motivations
</div>
</div>
<div class="callout-body-container callout-body">
<p>Initially I just wanted to document ideas that came up while replicating some of the classic papers.</p>
<p>However, as I got deeper into complex signaling, I realized that assumption and intuition for the classic Lewis game often seem to reverse for the complex game. Thus ideas that I had considered trivial dynamics turned into stepping stones across the moat that separates simple and complex.</p>
<p>Also as I try to developed increasingly efficient RL algorithms for learning signaling systems I realized that I was not the only one working on this problem. It was a again a good idea to track the different ideas that seem to work and to check if others had already discovered them.</p>
</div>
</div>
<!--

In the talk above and earlier in the bibliography of his book a large body of research deals with the emergence of signaling systems. There are many others that have worked on this problem as well and it seems that in many cases researchers in different fields are ignorant of the work of others, use different terminology and tools. THis makes tracking things all the more challenging. Skryms mentions work from

- Evolutionary biology
- Economics deal with signaling between entities like in auctions.
- Networks of signaling agents

more recently there is also a growing number of papers coming from the AI community. 

- Emergent Languages in AI and MARL

Motivation:

Now besides wanting to organize the literature my interests evolved over time. I became more interested in complex signaling, more agents, use of networks, how it might be useful in RL and MARL.

With the advent of LLMs into the field of RL and robotics (AKA continuous control) the power of natural language to plan robotics tasks based on common sense reasoning, suggests that one key to Transfer learning might lay in the ability of agents to learn representations that can be shared across different tasks.

This can emerge but I now believe that it could be engineered or perhapes nuged in such a way that the emergent languages capture a representation of the world that would be useful for transfer learning to other highly capable agents.


I discoverd a number of these mechanism independently while trying replicate and improve RL and Bayesian algorithms for learning signaling systems. However watching the video above led me to realize that this is a relatively small space and that many people have approached it from different angles. It also seems unlikely that I can cover all of the different mechanisms in this article. So I now hope to mention the main mechanism and perhaps the papers that give them some in depth treatments. And I plan to dive deeper into the ones that I have worked on.

I also want to give credit to the many other researchers who have worked on signaling systems. I have not read all of thier work but I have read some of it and I have tried to include it in the bibliography.

I wanted to c As the list grew I realized I had 


After taking some course on RL I also began to consider these in terms of different RL settings.

I also want to give credit to the many other researchers who have worked on signaling systems. I have not read all of thier work but I have read some of it and I have tried to include it in the bibliography. 

After starting this paper I realized that there are a number of videos online by Brian Skyrms covering different dynamics of signaling systems. I will try to include them here.


Although the Lewis signaling game, c.f. [@lewis1969convention] is touted as a mechanism for the emergence of language, [@skyrms2010signals] and others suggest different ways that this can take place, including evolution and reinforcement learning. In many cases languages emerges by spontaneous symmetry breaking  but in other cases a language creator may wear the hat of an engineer. The point is that small changes can have both large or nuanced impact on the languages that arise.

Most of these are from my own thinking but the more I delve into the literature the more I realize that these and many others have been considered by others as well. Accordingly I'll try and add citations, however this is less a literature review and more an exercise in understanding how we may one day get agents to quickly learn to communicate effectively in a broad spectrum of different settings. As such I also consider some cases where the outcomes are less than stellar and what one might want to avoid.
-->
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Emergent Languages in"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Emergent Languages in"></a></p>
<figcaption>Emergent Languages in</figcaption>
</figure>
</div>
<p>One fascinating aspect the Lewis signaling game <span class="citation" data-cites="lewis1969convention">(Lewis 1969)</span> is that although there are many theoretical equilibria initially the agents will inevitably fail to coordinate and they can only reach the optimal signaling systems after some iterations of the game in which they either evolve or use reinforcement learning to coordinate a themselves to a common signaling strategy. In the prisoners dilemma agents can learn to cooperate if the game is iterated. In the Lewis signaling game agents can learn to coordinate on a signaling system if the game is iterated.</p>
<p>Generally to find a good signaling system requires some kind of algorithm and at least between N and <img src="https://latex.codecogs.com/png.latex?N%5E2"> steps as well some number of iterations. I don’t recall seeing a discussion of the the minimum or the expected number of iterations required to reach a signaling system under different algorithms. In other words most researchers have considered the complexity of coordination in signaling systems. This is actually a fairly simple problem to solve in the most common settings.</p>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-lewis1969convention" class="csl-entry">
Lewis, David Kellogg. 1969. <em>Convention: A Philosophical Study</em>. Cambridge, MA, USA: Wiley-Blackwell.
</div></div><p>Another two point primarily addressed by the evolutionary game theory community who view evolution in terms of replicator dynamics is that of stability of equilibria and the notions of evolutionary stable strategies.</p>
<p>The first has to do with convergence of learning to an optimal signaling system.</p>
<p>The second has to do with the ability of an equilibrium to resist invasion by a mutant strategy.</p>
<section id="enumerating-the-different-type-of-signaling-systems-and-the-other-types-of-equilibria." class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="enumerating-the-different-type-of-signaling-systems-and-the-other-types-of-equilibria.">Enumerating the different type of signaling systems and the other types of equilibria.</h3>
<p>A related issues is that of enumerating different types of equilibria in larger games. For basic Lewis Signaling games this is not very difficult as there are N! signaling systems in games with N signals and N states,</p>
<p>For a complex signaling system with N states and M signals we can enumerate the signals as the first N base M numbers. Once again we deal with N! permutations. However the sender may chose any set of base N base M numbers. This creates an potentially unbounded number of signaling systems. This is perhaps a reflection of Wilhelm von Humboldt characterization of “infinite use of finite means” meaning that a language as systems in which a finite number of symbols can be combined in an unbounded number of ways, c.f. <span class="citation" data-cites="von1999humboldt">(Humboldt, Losonsky, and Heath 1999)</span></p>
<div class="no-row-height column-margin column-container"><div id="ref-von1999humboldt" class="csl-entry">
Humboldt, W. von, M. Losonsky, and P. Heath. 1999. <em>Humboldt: ’On Language’: On the Diversity of Human Language Construction and Its Influence on the Mental Development of the Human Species</em>. Cambridge Texts in the History of Philosophy. Cambridge University Press.
</div></div><p>This perhaps makes the complex signaling game special as a game theoretic problem. At least in the sense of what we consider bounded rationality. It is not at all clear what solution concept could be used to create an optimal signaling system, in this case it should require deep insights into group theory, topology, information theory, category theory, probability theory. Also though I consider the problem of equilibria in terms of an enumeration of states via numeric signals, it is does not at all follow that this is the best way to consider the problem. If we use a an alphabet of M phonemes we may for instance run into phonotactic constraints that are not at all present in the numeric representation. Thus another source of complexity may arise in terms of the actual realization of the signaling system. This is perhaps why this needs to be a working paper – in which new ideas can be added as they come to me.</p>
<p>For complex signaling systems we need to consider</p>
<ol type="1">
<li>Are the infinite number of signaling systems equivalent up to an isomorphism? I believe that the answer to this is yes by the following rationale. Any signaling system can be viewed as a permutation of signals to states. And according to the Cayley’s theorem any groups can be represented as a permutation. Hence we can view any complex signaling system as some group! And groups are equivalent if they are related by a group homomorphism. However there are still a couple of conundrums to consider. If the prelinguistic objects we call the states have a group structure and this is preserved this seems like a signaling systems that is a faithful representation. But it is also possible that there is a mismatch - that some of the structure is lost or that some additional structure in the language is added that is not in the original pre linguistic objects. I think that some of these might be viewed as happy accident while others may be failures in therms of signaling systems.</li>
<li>Can the Lewis signaling game together with the pre-linguistic object imbue the language with semantics ?</li>
<li>At what point can we view signaling systems universal in terms of the Sapir-Whorf hypothesis. I.e. when does the semantics of the signaling system becomes capable of representing the semantics of any natural language?</li>
</ol>
<p>IT is entirely possible to</p>
<p>Another point of interest to me is to consider the emergence of grammar and of a morphology. In <span class="citation" data-cites="nowak1999evolution">(Nowak and Krakauer 1999)</span> The authors give a result for the emergence of grammar in a signaling system. This is that there are many more</p>
<div class="no-row-height column-margin column-container"><div id="ref-nowak1999evolution" class="csl-entry">
Nowak, Martin A, and David C Krakauer. 1999. <span>“The Evolution of Language.”</span> <em>Proceedings of the National Academy of Sciences</em> 96 (14): 8028–33.
</div></div><p>I think it worth while to list them in this space — particularly as I believe that signaling systems are a key for transfer learning in reinforcement learning which together with learning to represent complex states may be the key to AGI.</p>
</section>
<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<ul>
<li>Listing number of different scenarios on how signaling systems can arise in the Lewis signaling games.</li>
<li>I will start with a story</li>
<li>Next add some details like some variants and look some basic analysis.</li>
<li>Finally I’ll try to place it into the context of MARL. Note that we will be dealing with partially observed multi agent RL. But each scenario can have a different setting.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./lewis_extensive_form.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="lewis signaling game"><img src="https://orenbochman.github.io/posts/2025/2025-01-05-bifurcating-paths-to-signaling/lewis_extensive_form.svg" class="center img-fluid figure-img" alt="lewis signaling game"></a></p>
<figcaption>lewis signaling game</figcaption>
</figure>
</div>
<p>In The book signals <span class="citation" data-cites="skyrms2010signals">(Skyrms 2010)</span> the author, Skyrms, discusses how Lewis challenged the skepticism of his advisor Quine regarding the meaning and convention may arise via an arbitrary mechanism like symmetry breaking.</p>
<div class="no-row-height column-margin column-container"></div><p>When I considered solving some additional issues surrounding the fundamentals of signaling systems I realized that I had a few different scenarios in mind and that writing them down with some semblance of formalism might be helpful. It turns out that indeed this turns out to be a stepping stone towards developing an optimal algorithms for learning signaling system in different RL settings.</p>
<p>Let’s face it under different settings the task of acquiring a signaling system can be easier or harder. In <span class="citation" data-cites="skyrms2010signals">(Skyrms 2010)</span> the author points out that at symmetry breaking all the different signaling systems that could be learned are equivalent. However if there is an asymmetry in the form of a non-uniform distribution of states or different signaling risks then we we might prefer some signaling systems over others and there might even be a unique optimal signaling system. Furthermore like in reality one would expect that with time distributions of states might change and the optimal signaling system might change as well.</p>
<div class="no-row-height column-margin column-container"><div id="ref-skyrms2010signals" class="csl-entry">
Skyrms, Brian. 2010. <span>“<span class="nocase">14512 Complex Signals and Compositionality</span>.”</span> In <em><span class="nocase">Signals: Evolution, Learning, and Information</span></em>. Oxford University Press. <a href="https://doi.org/10.1093/acprof:oso/9780199580828.003.0013">https://doi.org/10.1093/acprof:oso/9780199580828.003.0013</a>.
</div></div></section>
<section id="replicator-dynamics" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="replicator-dynamics">Replicator dynamics <!-- Population Dynamics --></h2>
<p>This is the dynamics of the game that is most relevant to evolutionary game theory. Under certain conditions results for replicator dynamics may be replicated and therefore equivalent to those for Reinforcement Learning. c.f <span class="citation" data-cites="Skyrms2010signals">(<strong>Skyrms2010signals?</strong>)</span> chapter on learning.</p>
<p>I think that since some of the smartest people to work on signaling games have been in the field of evolutionary game theory, it’s worth considering the replicator dynamics of signaling games if nothing else then for the rigor of the analysis and methodology. A second aspect is that numerous examples of signaling games are found in nature where replicator dynamics are often the most appropriate model.</p>
<p>Perhaps even more importantly, language do undergo changes over time. It is quite interesting to consider the dynamics of such changes and if there are traces that may allow us to infer the earlier forms of a language from its many descendants.</p>
<p>Elsewhere I have enumerated a <a href="">Desiderata for signaling systems</a> and I am fascinated if these may emerge by simply applying respective list of selection pressures a population of agents in the Lewis signaling game. This idea may be also considered in the context of RL but it seems more natural to initially consider it in the context of evolutionary game theory.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Many key results in RL are based on the steady state distribution of the Markov chain for the MDP’s dynamics. If the game evolves over time then we may not be able to use these results. As such researchers in RL are reluctant to consider MDPs whose dynamics change over time.</p></div><div id="ref-huttegger2014some" class="csl-entry">
Huttegger, Simon, Brian Skyrms, Pierre Tarres, and Elliott Wagner. 2014. <span>“Some Dynamics of Signaling Games.”</span> <em>Proceedings of the National Academy of Sciences</em> 111 (supplement_3): 10873–80.
</div></div><p>However this section is based on <span class="citation" data-cites="huttegger2014some">(Huttegger et al. 2014)</span></p>
<ul>
<li>Replicator dynamics
<ul>
<li>Describes the replicator dynamics as the fundamental model of evolutionary game theory.</li>
</ul>
<blockquote class="blockquote">
<p>The replicator dynamics is the fundamental dynamical model of evolutionary game theory</p>
</blockquote>
<ul>
<li>Presents both one-population and two-population replicator dynamics. &gt; The two most common varieties of replicator dynamics are the one-population and the two-population replicator dynamics.</li>
<li>Notes that the replicator dynamics in signaling games is often not structurally stable, making it important to study the effects of perturbations such as mutation. &gt; Both the two-population and the one-population replicator dynamics are driven by the difference between a strategy’s fitness and the average fitness in its population. This captures the mean field effects of natural selection, but it disregards other factors such as mutation or drift. In many games these factors will only play a minor role compared with selection. However, as we shall see, the evolutionary dynamics of signaling games often crucially depends on these other factors. The reason is that the replicator dynamics of signaling games is generally not structurally stable (10). This means that <mark>small changes in the underlying dynamics can lead to qualitative changes in the solution trajectories.</mark></li>
<li>Discusses the selection mutation dynamics as a plausible perturbation to the replicator dynamics. &gt; One plausible deterministic perturbation that has been studied is the selection mutation dynamics (11). We shall consider this dynamics in the context of two population models.</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Name <!-- Population Dynamics -->
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="dynamics" class="level3">
<h3 class="anchored" data-anchor-id="dynamics">Dynamics</h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Pooling</th>
<th>Partial Pooling</th>
<th>Separating Population</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Stable</td>
<td>Stable</td>
<td>Dynamically unstable</td>
</tr>
</tbody>
</table>
<p>Structurally Stable</p>
<ul>
<li>Stable</li>
<li>Dynamically unstable</li>
<li>Structurally Stable</li>
<li>Unstable</li>
</ul>
</section>
</section>
<section id="the-evolution-of-signaling-systems" class="level2">
<h2 class="anchored" data-anchor-id="the-evolution-of-signaling-systems">The evolution of signaling systems</h2>
<p>In this section I want to address some of the questions that drive my research on signaling systems.</p>
<section id="when-do-we-expect-signaling-systems-to-evolve" class="level3">
<h3 class="anchored" data-anchor-id="when-do-we-expect-signaling-systems-to-evolve">When do we expect signaling systems to evolve?</h3>
<p>When agents fitness is increasingly predicated on coordination or communication they will get a benefit for evolving signaling systems. I.e. a evolutionary pressure to communicate will lead to the evolution of signaling systems.</p>
</section>
<section id="what-are-the-main-desiderata-for-signaling-systems" class="level3">
<h3 class="anchored" data-anchor-id="what-are-the-main-desiderata-for-signaling-systems">What are the main desiderata for signaling systems?</h3>
<!-- this section now has it's own file - consider removing/merging-->
<p>Here are some of the main desiderata for signaling systems:</p>
<ul>
<li><strong>Efficiency</strong> - the signaling system should be as short as possible.</li>
<li><strong>Salience</strong> - the signaling system should be most salient for the distribution of states.</li>
<li><strong>Cost</strong> - the signaling system should be as cheap as possible to learn and use.</li>
<li><strong>Robustness</strong> - the signaling system should be robust to noise and deception.</li>
<li><strong>Adaptability</strong> - the signaling system should be able to adapt to changes in the distribution of states.</li>
<li><strong>Compositionality</strong> - the signaling system should be able to be combined with other RL activities to form
<ul>
<li>more complex signaling system.</li>
<li>more complex policies.</li>
</ul></li>
</ul>
<p>This is most clearly illustrated in:</p>
<ul>
<li>The <strong>predation scenario</strong> where
<ul>
<li>Agent’s short term survival is predicated on their ability to respond to signals indicating the presence of predators by take the appropriate precautions. Of course signals need a source.</li>
<li>Agents can send a signals for the state they perceive or to stay mute.</li>
<li>Agents can repeat signals they receive or stay mute.</li>
<li>As predation increases, selection pressure may induce signaling systems to evolve.</li>
</ul></li>
<li>The <strong>Dowery/Courtship scenario</strong> where:
<ul>
<li>The game can be cooperative or competitive.
<ul>
<li>In the competitive case only the fittest agents get a mate.</li>
<li>In the cooperative case all agents get to mate but some will mate more often, or with more desirable mates.<br>
</li>
</ul></li>
<li>Agent must collect resources (e.g.&nbsp;a bill of goods for a dowery) before they can reproducing from a changing landscape.</li>
<li>Only the top n dowries will generate an offspring. (bills of goods slowly perish but the size and diversity of is important).</li>
<li>Alternatively only the agent that is the the best at courtship n times can generate an offspring. (this time there are smaller bills of good that quickly perish)</li>
<li>Resources are plentiful but evanescent.</li>
<li>Agent that can signal would be able to collect a dowery faster and increase thier fitness.</li>
<li>As competition increases benefits signaling systems should evolve.</li>
<li>This is interesting as the exploration/exploitation dilemma caps the rate at which agents can reproduce. Yet signaling will allow agents to over come this cap.</li>
<li>This is also a case where agents may get a benefit from sending false signals if the receiver is a serious contender. So that the receiver will waste time and resources.</li>
<li>The agents must learn to discriminate To handle deception agents may also develop a model of the mind of the sender to predict the likelihood of deception. They may also want to tally if the sender has been deceptive in the past.</li>
<li>Or</li>
</ul></li>
<li>The <strong>Knights &amp; Knaves</strong> scenario where:
<ul>
<li>Agents need to:
<ol type="1">
<li>Classify agent by type. (knight or knave, monkey, insane, etc.) to interpret the semantics of their signals.</li>
<li>Assemble the state from messages with different semantics to recover the state of the world.</li>
</ol></li>
<li>This scenario does assumes the agents have an underlying motivation to learn to signal.</li>
<li>And now add a selection pressure on the evolution of basic logic and semantics.</li>
</ul></li>
</ul>
<p>Agents that communicate can spend less time exploring and more time exploiting. . In this case the agents will evolve a signaling system that is most salient for the distribution of states. This is the most likely scenario for the evolution of signaling systems. The reason why agents might want to learn a signaling system is to maximize their fitness</p>
<ul>
<li>What are the main parameters that affect the learning of signaling systems?
<ul>
<li>state distribution (these are the states of the world and signaling is used to share these states with others to maximize fitness - the expected progeny)</li>
<li>saliency distribution (weights for states ranking thier risk)</li>
<li>voracity of senders.</li>
<li>cost of signaling (risk of predation).</li>
</ul></li>
<li>What are the different settings for learning signaling systems?</li>
</ul>
<p>Some other questions within these contexts might be:</p>
<ul>
<li>What are the number of signaling systems for a given number of states and actions?</li>
<li>What are the number of pooling equilibria for a given number of states and actions?
<ul>
<li>Let’s break these down by the degeneracy of the pooling equilibrium. This might suggest the minimal number of signals needed in an experiment to learn the signaling system. It might also suggest the thresholds of success for optimal signaling systems in different settings.</li>
</ul></li>
<li>Can we estimate the regret for different RL algorithms ?
<ul>
<li>What is the expected signaling success for each of the above?</li>
<li>What is the expected and the mean number of steps to acquire a signaling system for a given number of states and actions under different settings?</li>
</ul></li>
<li>How does having more senders or receivers affect the above?
<ul>
<li>What is the complexity of n-agents to come up with a common signaling system?
<ul>
<li>under full communication</li>
<li>under partial communication</li>
</ul></li>
</ul></li>
<li>How does locality affect the time to a universal signaling systems?
<ul>
<li>if there is full observability</li>
<li>if communications are one to one</li>
<li>if communication are different neighborhood, Von Neuman, Moore, hexagonal, other lattices, chains, rings, random graphs. (need to use optimal dynamics)</li>
</ul></li>
</ul>
<p>Another question that like a lemma on time needed for an agent to become experienced enough to setup an optimal signaling system?</p>
<ul>
<li><p>Given distribution S of states with k states and some the rarest state <img src="https://latex.codecogs.com/png.latex?s'"> having probability <img src="https://latex.codecogs.com/png.latex?p(s')%20=%20%5Calpha"> what is the expected number of observations needed for agents to approximate the distribution of states to within some credible interval <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%3C%5Calpha">?</p></li>
<li><p>Note while there is no lower bound on alpha the upper bound is <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%201/k"> for a uniform distribution of states. I think this is the Bayesian version of an empirical distribution. This would be a waiting time for becoming experienced.</p></li>
<li><p>After this waiting time a steady state distribution should be known to all agents.</p></li>
</ul>
<p>Under partial observability the agents need to cooperate to learn the signaling system in a distributed manner. If the agents are on a grid or on a graph what are the bounds on coordination time for learning the signaling system - using a gossip protocol - i.e.&nbsp;each agent can only communicate with its neighbors - using a broadcast protocol - i.e.&nbsp;each agent can communicate with all other agents - using a random walk protocol - i.e.&nbsp;each agent can communicate with a random agent - using a central coordinator - i.e.&nbsp;each agent can communicate with a central coordinator - using an ambassador - i.e.&nbsp;each agent can communicate with an ambassador who can communicate with many other agents per Ramzey’s theory</p>
<p>While reviewing a paper of this subject I had realized that there are a number of hypothetical scenarios for signaling systems to arise.</p>
<p>In RL we have different setting for learning optimal strategies. Some of theres different scenarios can be framed in this form.</p>
<p>I wanted to list them here so I can reference them later</p>
<p>But thinking as I list these I notice that some provide an easy solutions to problems that others don’t.</p>
<p>One point of interest. If the agents are concerned with picking the right action for each state, they should collapse any states which share the same optimal action into a single signal. This will reduce the number of signals they must be learned and reduce the overall message length and cost of signaling. So in reality we should not be overly concerned with the number of actions exceeding the number of states.</p>
<p>When there are not enough signals agent need to learn to aggregate signals.</p>
<p>add</p>
<ol type="1">
<li><p>learning by evolution:</p>
<ul>
<li>replicator dynamics with</li>
<li>agents have random signaling systems assigned and the systems with most payoffs is selected through population dynamics.</li>
<li>children learn thier parent matrix via sampling.
<ul>
<li>one parent (perfect and imperfect transmission)</li>
<li>two parents</li>
</ul></li>
<li>pidgins via shared dictionaries</li>
<li>creoles shared grammars and dictionaries</li>
<li>adding some mutation - adding mutations to the childrerns signaling system.</li>
<li>based on paper by (Nowak and Krakauer)</li>
</ul></li>
<li><p>learning via reinforcement learning<br>
</p></li>
<li><p>spontaneous symmetry breaking scenarios vs planning</p>
<ol type="1">
<li>If there are N signals, states and actions is there an advantage to planning a signaling system vs letting it evolve in terms of the number of steps needed to learn the signaling system?</li>
</ol>
<ul>
<li><p>random signaling means that each step is an independent trial.</p></li>
<li><p>Sender can send N signals and</p></li>
<li><p>Receiver can guess N Actions</p></li>
<li><p>So there are N^2 combinations per turn.</p></li>
<li><p>So there are Only the ones with A=T get a reward so there are N good combinations. So there is a N/N^2 = 1/N chance of getting a reward. So we can expect that the number of steps needed to learn to signal the state T is N.</p></li>
<li><p>planning means that the sender picks one signal and sticks to it. In this case Receiver gets to systematically eliminate an action every time.</p></li>
<li><p>sender has 1 signal and</p></li>
<li><p>receiver can guess N at first and N-1 at second and N-k-1 at kth turn.</p></li>
<li><p>So there are n+1/2<br>
actions giving 1*N combinations and only ones with A=T get the payoff. So there is a 1/N chance of getting a reward. So we can expect that the number of steps needed to learn to signal the state T is N.</p></li>
<li><p>Thus planning is faster than random signaling.</p></li>
<li><p>random signaling means that there are (2n/n*n)^n = 2</p></li>
<li><p>is agent use positive reinforcement only then</p></li>
</ul>
<ol start="2" type="1">
<li>are there conditions where the signaler/receiver gets to determines the signaling system?</li>
</ol>
<ul>
<li>if Sender sends random signals from L-{coordinated} R must guess the state From L-{coordinated}.</li>
<li>if S wants to switch X and Y ? and does so R get 0 . If R is epsilon greedy he will find the new semantics.</li>
<li>A meta protocol would require a code switching signal be “Swap X Y”</li>
</ul></li>
<li><p>Source coding scenario errors in encoding &amp; decoding - based on paper by (Nowak and Krakauer)</p></li>
<li><p>errors in the transmission channel based on paper by (Nowak and Krakauer)</p></li>
<li><p>risks - there are signals with monotonically increasing risk.</p>
<ul>
<li>payoffs for signals are symmetric</li>
<li>cost associated with the risky signals are borne by the sender</li>
<li>if receivers can respond correctly after getting a partial message they get a bonus.</li>
<li>we can also consider sharing cost and rewards symmetrically. — creating a complex system with compositionality using self play</li>
</ul></li>
</ol>
</section>
</section>
<section id="costly-signaling" class="level2">
<h2 class="anchored" data-anchor-id="costly-signaling">costly signaling <!-- Population Dynamics --></h2>
<p>what else is this called</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Name <!-- Population Dynamics -->
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="dynamics-1" class="level3">
<h3 class="anchored" data-anchor-id="dynamics-1">Dynamics</h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Pooling</th>
<th>Partial Pooling</th>
<th>Separating Population</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Stable</td>
<td>Stable</td>
<td>Dynamically unstable</td>
</tr>
</tbody>
</table>
<p>Structurally Stable</p>
<ul>
<li>Stable</li>
<li>Dynamically unstable</li>
<li>Structurally Stable</li>
<li>Unstable</li>
</ul>
</section>
</section>
<section id="replicator-dynamics-1" class="level2">
<h2 class="anchored" data-anchor-id="replicator-dynamics-1">Replicator dynamics <!-- Population Dynamics --></h2>
<p>what else is this called</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Name <!-- Population Dynamics -->
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="dynamics-2" class="level3">
<h3 class="anchored" data-anchor-id="dynamics-2">Dynamics</h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Pooling</th>
<th>Partial Pooling</th>
<th>Separating Population</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Stable</td>
<td>Stable</td>
<td>Dynamically unstable</td>
</tr>
</tbody>
</table>
<p>Structurally Stable</p>
<ul>
<li>Stable</li>
<li>Dynamically unstable</li>
<li>Structurally Stable</li>
<li>Unstable</li>
</ul>
</section>
</section>
<section id="the-oracle-of-saliency" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-oracle-of-saliency">The Oracle of Saliency</h2>
<p>In many cases the arduous task <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> of coordination that makes signaling hard might be avoided. If both agents share some mechanism for enumerating the pre-linguistic objects they encounter, they can systematically enumerate them before the game start. The enumeration is a lexicon and can be used as a signaling system.</p>
<p>You mention that oracles are cryptic - They can now pick use the binary number as canonically they can avoid some or all of the cost of coordination.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: The Oracle of Saliency
</div>
</div>
<div class="callout-body-container callout-body">
<p>The sender in an ex-ante step consults an oracle, perhaps the <code>I Ching</code> asking what to do for each prelinguistic objects. Each consultation returns a cryptic message not unlike a cryptographic hash. The sender then sorts the objects in increasing order of the cryptic messages, assigning each subsequent binary number to each.</p>
<p>The receiver also uses the same process with his copy of the oracle.</p>
<p>Since both the sender and receiver now have access to the same lexicon, they can use it as a signaling system.</p>
</div>
</div>
<ol type="1">
<li>Even is the oracle does not provide unique enumerations it will reduce the task from <img src="https://latex.codecogs.com/png.latex?O(N%5E2)"> to <img src="https://latex.codecogs.com/png.latex?O(N)">. as once the oracle is consulted the sender and receiver can proceed by trial and error to further coordinate on the ambiguous signals. e.g.&nbsp;by assigning a sub-index to each prelinguistic object that share a signal. This will now look more like a prefix coding scheme.</li>
<li>In the lewis game errors cost nothing, but in RL we often encode a sense of urgency by adding a penalty to time wasting moves. If there a penalty e.g.&nbsp;-1 for wasting time on miscoodination, we might call the game the <code>Lewis game with urgency</code>. Agents that get to play an infinite nuymber of time would see an infinite rewards past at most <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> penalties and want to play. In this case though even if consulting the oracle has a cost C, so long a the expected cost of trial and error is greater than k i.e.&nbsp;if there are k^2 uncoordinated states agents would have incentive to consult the oracle.</li>
<li>In the previous points we ignored the reality in which states are not uniformly distributed and that agents may not be able to pay the oracle upfront. If the agents know the most likely states they this knowledge to setup a self-financing scheme to raise funds for consultations of the oracle as well as reduce thier cost of coordination. However it’s worth pointing out that our next scenario considers how knowing the distribution of states is just another type of oracle.</li>
</ol>
<p>Two cases come to mind.</p>
<ol type="1">
<li>They have booth been observing the state space long enough to infer the distribution of states to a high degree of confidence. </li>
<li>They can listen to a third party who knows the distribution and learn to signal from them. </li>
<li>They can access a state classifier and send it random noise thus deriving an empirical distribution of states in the classifier (not nature) and use it to learn the signaling system. </li>
</ol>
<div class="no-row-height column-margin column-container"><span class=""><strong>coordinate via the state distribution</strong></span><span class=""><strong>coordinate by imitation</strong></span><span class=""><strong>coordinate via a classifier</strong></span></div><p>Once a distribution of states in known it can be used to create huffman codes using 0 and 1. These signals are then ranked.</p>
<p>There is a distribution of the states of the word known to all players.</p>
<ul>
<li>In the easiest case each state has a different probability of occurring. -It is easiest because all players can infer a <code>canonical signal system</code> from such a distribution of states.
<ul>
<li>They order states and corresponding actions in decreasing expected value. The canonical system is the one mapping between the states and the actions.</li>
<li>Thus the salience distribution breaks the symmetry of all viable signaling systems and leaves just one option.<sup>2</sup></li>
</ul></li>
<li>In each subsequently harder case there are two or more states with equal probability of occurring. These probabilistic symmetry of these states cannot be broken as before and require the use of coordination. The coordinators can break the symmetry by trial and error when that state arises. Once all the symmetries have been coordinated the players can infer the rest via the canonical signal system from the distribution of states.</li>
<li>In the worst case all states have equal probability of occurring. This is the hardest case because after each state signal pair the problem is still maximally symmetric. The players need to solve this by using trial and error.</li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;This is notion of a most salient mapping acts as an optimal policy for agents who need to quickly avoid the long run costs of a non salient signaling system</p></div></div><div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
MARL Formulation
</div>
</div>
<div class="callout-body-container callout-body">
<p>In terms of the MARL formulation:</p>
<ul>
<li><p>A PMDP has states <img src="https://latex.codecogs.com/png.latex?S"> and actions <img src="https://latex.codecogs.com/png.latex?A">.</p>
<ul>
<li>States are observed by agents of type S whose actions are signals</li>
<li>Actions are performed by agents of type R.</li>
<li>Rewards are assigned symmetrically to both All senders and receivers when the receiver action matches the sender observed state.</li>
</ul></li>
<li><p>States can be uniformly distributed or be drawn from a distribution.</p></li>
<li><p>We like to call such a distribution the saliency distribution after Schelling notion of a focal point AKA (Schelling point) in his book The Strategy of Conflict. In a lewis signaling game there are n! signaling systems if there are n states, signals and actions. If the states are uniformly distributed then all signaling systems are equivalent. But if the states probabilities are monotonicaly distributed then there is a unique optimal signaling system which is precisely the Schelling point.</p></li>
<li><p>Since saliency</p></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is also worth noting that many algorithms for MARL use shared parameters, the same critic and so on. And if the agents can access this system the oracle of saliency provides a shortcut to a cannonical emergent language for all agents as well as a general purpose coordination mechanism they might use to coordinate on other tasks. Thus such oracles should be treated with care if we also wish to study the the emergence of a universal language</p>
</div>
</div>
</section>
<section id="learning-the-saliency-distribution." class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="learning-the-saliency-distribution.">2. Learning the Saliency distribution.</h2>
<p>In this case agents are in an MDP or a PMDP. They are observing the states of prelinguistic objects and we need to assume that this distribution is the same for all agents. I.e. they are learning the distribution of states by sampling. Should they engage in developing a signaling system or wait until they have learned the distribution of states? What if signaling cost is fixed like above in the Lewis game with urgency?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Creation of the Oracle of Bayes
</div>
</div>
<div class="callout-body-container callout-body">
<p>In another tribe of agents are too busy observing and recording the states of the world to coordinate on a signaling system. However, it is inevitable that sooner or later as they compare notes they will notice that they have recorded the full empirical distribution of states and that all thier records are in agreement up to an acceptable margin of error.</p>
<p>The agents can actually use this distribution as a bayesian oracle.</p>
<p>This time each prelinguistic object is assigned a probability of occurrence. The agents order the states by decreasing probability.</p>
<p>Again if states share probabilities - they will have to be assigned a word sense index to distinguish them using trial and error.</p>
<p>However doing nothing might give these agents a lot of time on thier hands and they might also notice how their Empirical distribution is evolving over time with a slowly increasing number of states (the most frequent ones) getting the same share of the probability mass….</p>
<p>This suggests to the bayesian minded agents that they should estimate the bayesian credible interval for the signals and use the implied signaling systems to communicate about the states that are common knowledge.</p>
<p>Whenever a state’s probability emerges into ‘significance’ it should be recorded into the lexicon. If the term has entered into the lexicon by chance it can be dropped if it is no longer within the bayesian credible interval.</p>
</div>
</div>
<ol type="1">
<li>The main reason I like thinking about thus story is has to do with it relation with corpus linguistics and ir relation to language modeling. We know that language modeling is at the heart of Large language models and this may be a kind of thought experiment about how long in terms of a clock that ticks time in samples collected a RL language modeler would be able to make good inference about increasingly rare states. Look at a sufficiently long n-gram and almost all are sparse. And for a fixed n with even a uniform distribution the probability of most n-grams in an empirical distribution will be very low, unless the corpus is allowed to grow combinatorially.</li>
<li>We can also use this to think beyond the lexicon.  One cause of hallucinations in LLM is called out of distribution queries. This is when there isn’t data corresponding to the query and the model tries to construct an response based on an mostly random approximation. We often get hallucination also for queries the LLM has been trained on and even when it can give a good answer to a better prompt. I like to think of these as signals that do not have separating equilibria.</li>
</ol>
<div class="no-row-height column-margin column-container"><span class="margin-aside">Complex signaling systems are built on top of an alphabet of primitive signals. There like our alphabet might be without meaning or they may be used in a huffman code and assigned to the most frequent states.</span></div><p>Another point is to consider that if agents just observe states long enough they should eventually learn to approximate the state distribution. How long would this take ?</p>
<p>Here is a back of the napkin calculation.</p>
<p>If there least common state has probability <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and the agents want to know the distribution with confidence <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> they would need, according to Hoeffding’s Inequality</p>
<p><img src="https://latex.codecogs.com/png.latex?K%5Cge%5Cfrac%7Blog(2/%5Cepsilon)%7D%7B2%5Calpha%5E2%7D%20%5Cqquad%20%5Ctext%7B(samples%20to%20learn%20S)%7D"></p>
<p>also recall that although there is no lower bound on <img src="https://latex.codecogs.com/png.latex?%5Calpha"> when <img src="https://latex.codecogs.com/png.latex?S%5Csim%20Uniform%5BN%5D"> the upper bound is <img src="https://latex.codecogs.com/png.latex?1/N"></p>
<p><img src="https://latex.codecogs.com/png.latex?K%5Cge%5Cfrac%7BN%5E2log(2/%5Cepsilon)%7D%7B2%7D%20%5Cqquad%20%5Ctext%7B(samples%20to%20learn%20uniform%20S)%7D"></p>
<div id="upper_bound_estimation" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Given values</span></span>
<span id="cb1-4">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># states</span></span>
<span id="cb1-5">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.34</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confidence</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate time to learn the saliency distribution </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># N using the formula N &gt;= (K^2 * log(2 / epsilon)) / 2</span></span>
<span id="cb1-10">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> epsilon)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Expected time </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(N)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to learn a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>K<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> state distribution with confidence </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epsilon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)  </span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expected time to learn a signaling system with N states</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.log(K)</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Expected time </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(T)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to learn a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>K<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> signaling system  '</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Expected time 56 to learn a 8 state distribution with confidence 0.34
Expected time 16 to learn a 8 signaling system  </code></pre>
</div>
</div>
<p>So learning a signaling systems is easier then learning the distribution of states. Once they they know how to signal states it is easy to use this system to communicate the distribution to all the receivers.</p>
<p>We have not put a cost on learning the signaling system. But if there was a cost associated with learning we could use it to model when agents would prefer to learn the signaling system or just wait until they can infer the distribution of states and infer they systems from that.</p>
<!-- simulate -->
<p>A third point is that if they are bayesian they could start to infer the signaling system after viewing a few stats and update thier system as they update their beliefs regarding the distribution of states.</p>
<!-- simulate -->
</section>
<section id="ship-of-fools" class="level2">
<h2 class="anchored" data-anchor-id="ship-of-fools">Ship of Fools</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Ship of Fools
</div>
</div>
<div class="callout-body-container callout-body">
<p>Senders and Receivers lack all prior knowledge. They follow an optimal strategy for a related game the battle of the sexes. Is a state is uncoordinated senders will explore randomly pick a signal and receivers will randomly pick an action until they get a reward and exclude the signal action pair from exploration.</p>
</div>
</div>
<p>This strategy is not the best one for senders, but it is easier to analyze.</p>
<p>If the state is T and there are N states, signals and actions then are <img src="https://latex.codecogs.com/png.latex?N%5Ctimes%20N"> choices for sender and recievers of which the ones with action A=T get a reward. So the expected reward is 1/N chance of getting a reward.</p>
<p>The expected rewards are 1/N but since the sender is randomizing each turn is independent. Can they do better?</p>
</section>
<section id="the-steady-navigator" class="level2">
<h2 class="anchored" data-anchor-id="the-steady-navigator">The steady navigator</h2>
<p>Indeed they can do better. If the sender picks a signal and sticks with it the receiver can eliminate an action each turn. This is the optimal strategy for this, the most common setting of the Lewis signaling game.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: The Steady navigator
</div>
</div>
<div class="callout-body-container callout-body">
<p>Senders and Receivers lack all prior knowledge. For each new state, the sender picks a signal at random but if the state is the same as the last state the sender sticks to the same signal. The receiver must explore an action at random but if the signal is the same as the a previous seen signal the receiver will explore an an untested action for the signal until they get a reward.</p>
</div>
</div>
<p>Lets estimate the expected rewards under this strategy for a state T and N states, signals and actions.</p>
<ul>
<li>Sender has 1 signal and</li>
<li>Since the sender sticks with the same signal the receiver can eliminate an action each turn.</li>
<li>Receiver has N choices initially with 1 correct choice so we has a expected chance of 1/N of getting a reward.</li>
<li>Next he can eliminate his first choice and has N-1 choices with 1 correct choice so we has a expected chance of 1/(N-1) of getting a reward.</li>
<li>And after k tries he has N-k+1 choices with 1 correct choice so we has a expected chance of 1/(N-k+1) of getting a reward.</li>
<li>In the worst case he will have to try all N actions but</li>
<li>The Expected number of steps <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%5Bsteps%5D%20&amp;=%20%5Csum_%7Bk=1%7D%5E%7BN%7D%20%5Cfrac%7B1%7D%7BP_%7B%5Ctext%7Bsuccess%20k%7D%7D%7D%20%5Ctimes%20P_%5Ctext%7Bfailure%20up%20to%20k%7D%20%5Cnewline%0A&amp;=%20%5Csum_%7Bk=1%7D%5E%7BN%7D%20%5Cfrac%7B1%7D%7B%7BN-(k-1)%7D%7D%20%5Cunderbrace%7B%5Ctimes%20%5Cprod_%7Bi=1%7D%5E%7Bk-1%7D%20%5Cfrac%7BN-i%7D%7BN-i+1%7D%7D_%7B%5Ctext%7Btelescopic%20product%7D%7D%20%5Cnewline%0A&amp;=%20%5Csum_%7Bk=1%7D%5E%7BN%7D%20%5Cfrac%7B1%7D%7B%5Ccancel%7B%7BN-(k-1)%7D%7D%7D%20%5Ctimes%20%5Cfrac%7B%5Ccancel%7B%7BN-(k-1)%7D%7D%7D%7BN%7D%20%5Cnewline%0A%5Cend%7Baligned%7D%0A"></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
MARL Formulation
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is basicaly an optimistic initialization strategy. The sender does not explore. The reciever intilizes all signal action pairs optimisticaly with value of 0.5. This way he will keep exploring untill he gets a reward of 1.0 At this point exploration ends.</p>
</div>
</div>
<p>So we can expect that the number of steps needed to learn to signal the state T is N. They should pick a signal for a state and stick with with it.</p>
</section>
<section id="the-gurus-prior" class="level2">
<h2 class="anchored" data-anchor-id="the-gurus-prior">The Guru’s Prior</h2>
<p>The Sender is a privileged elder who knows the distribution of the states, the associated risk and cost of signaling to sender and receiver and figures our the optimal signaling systems. As such he selects a specific signaling system. This means that students need to coordinate to this system.</p>
<ul>
<li>This means that whenever the state <img src="https://latex.codecogs.com/png.latex?s_i"> arises we will get signal <img src="https://latex.codecogs.com/png.latex?sig_i=Send(s_i)"> rather then some random signal. This means that the student for a mistake the <em>receiver</em> can use a negative reinforcement for <img src="https://latex.codecogs.com/png.latex?%3Csig_i,action_j%3E"> is the return is 0. This should allow the receiver to narrow down the actions chosen for the next time we he gets that signal.</li>
</ul>
<p>This is second hardest learning scenario but also most realistic. We don’t want to have to learn a new language for every person we meet.</p>
<p>What could happen - the distribution of states could evolve over time.</p>
</section>
<section id="the-prophets-prior" class="level2">
<h2 class="anchored" data-anchor-id="the-prophets-prior">The prophet’s prior</h2>
<p>The sender knows the distribution of the states and how it evolves over time. He choses the currently optimal signaling system. The receivers must learn the signaling system but once a change in the state distribution is observed they will switch to the the new optimal signaling system.</p>
<p>Imagine a world with many predators troubling the signaler. To avoid becoming prey agents must send a risky signals to their neighbors. They should use the signaling with the least expected cost. This cost combines the predator risk and its frequency. Signals can be 1 or 0. 1 is risky and 0 is safe. As frequency of the predators change the optimal signaling system will change as well.</p>
</section>
<section id="the-gurus-posterior" class="level2">
<h2 class="anchored" data-anchor-id="the-gurus-posterior">The Gurus’ Posterior</h2>
<p>Here there are multiple gurus with knowledge of different distribution. Can they coordinate on the most salient signaling system with respect to thier common knowledge ?</p>
<p>This should be the signaling system that is most salient for a mixture distribution with weight <img src="https://latex.codecogs.com/png.latex?w_i"> for each guru.</p>
<p>Lets perhaps assume that there are a very large N and a cutoff <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> probability for which the gurus won’t bother to include rare sates.</p>
<p>In the second setting two or more students must come up with any signaling systems as fast as possible.</p>
</section>
<section id="babylon-consensus" class="level2">
<h2 class="anchored" data-anchor-id="babylon-consensus">Babylon Consensus</h2>
<p>Multiple senders and receivers take shelter in common ground and need to arrive at a common signaling system.</p>
<ol type="1">
<li>They can want to learn the least costly signaling system in terms of learning.</li>
<li>They want to learn the most salient signaling system in terms of the distribution of states.
<ol start="3" type="1">
<li>There is an agent who knows the current distribution of states and the optimal signaling system.</li>
<li>There isn’t such an agent but the senders want to use a</li>
</ol></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Cost of learning a second dialect
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>for each agent and for each signal that is different from the target signalaling system add a cost of 1.</li>
</ol>
<p><span id="eq-cost"><img src="https://latex.codecogs.com/png.latex?%0AC%20=%20%5Csum_%7Bi=1%7D%5E%7BN%7D%20%5Csum_%7Bj=1%7D%5E%7BM%7D%20%5Cdelta_%7Bij%7D%20%5C%5C%0A%5Ctag%7B1%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cdelta_%7Bij%7D"> is 1 if the signal <img src="https://latex.codecogs.com/png.latex?j"> is different from the target signal for state <img src="https://latex.codecogs.com/png.latex?i"> and 0 otherwise.</p>
</div>
</div>
</section>
<section id="pomdp" class="level2">
<h2 class="anchored" data-anchor-id="pomdp">POMDP</h2>
<p>In this settings one or multiple senders only a partial state.</p>
<p>Again we consider a hypothetical case where the state describe predators and that it can be partitioned into disjoint parts like &lt;type, proximity&gt; or &lt;type, proximity, number&gt; or &lt;type, proximity, number, direction&gt;. This partioning is also at the basis of compositionality in signaling systems.</p>
<p>Skyryms first considers three different settings.</p>
<ol type="1">
<li><strong>observation one of mutually exclusive partition:</strong> the case where each sender views one part of the partitioned state.</li>
<li><strong>observation of all mutually exclusive partition</strong> the case where senders see all the parts of the state but don’t have a mechanism in place to coordinate who sends which part of the state.</li>
<li><strong>observations of all mutually exclusive partition with coordination</strong> the case where one sender see all the parts of the state but lacks symbols to send the full state and needs to send each part. He must send the parts one at a time resulting in a sequence of signals.</li>
</ol>
<p>In the first settings the receiver somehow knows that he should first aggregate the signals using a logical and then decode the state.</p>
<p>In the first settings</p>
<p>where the agent again observe the full state but don’t have a a coordination mechanism for picking differnt parts of the message.</p>
<p>They send a partial signal to the receiver who must infer the state and take the appropriate action. The receiver must</p>
<ol type="1">
<li>aggregate the messages</li>
<li>infer the state</li>
<li>take the appropriate action</li>
</ol>
<p>note:</p>
<p>In the first case so long as each part of the state is a unique signal the state can be infered by the receiver using conjunction. The second case if more problematic and shows us a new way that some signaling systems can be better then others.</p>
<p>part the agent can’t infer the state better then chance. However reinforcement of random partition the senders can learn to send they both need to learn a decorelated partition for each state the state and send different parts of the state. The issues is if the semantics are composable.</p>
<ul>
<li>An issue here is that there is no guarantee that the senders will send the same part of the state at each turn. If the aggregation rules is conjunction, i.e.&nbsp;logical and, then the receiver will be able to decode the state so long as he gets all the pieces.</li>
</ul>
</section>
<section id="knight-knaves-bayesian-adversarial-signaling" class="level2">
<h2 class="anchored" data-anchor-id="knight-knaves-bayesian-adversarial-signaling">Knight &amp; Knaves – Bayesian Adversarial Signaling</h2>
<p>I had this idea a while back regarding how to address two different problems.</p>
<ol type="1">
<li>How agents in non-cooperative games might evolve signaling systems that are robust to adversarial agents. I.e. could they learn based on the positive domain by inferring that certain action are more cooperative or at least not prone to deception? Could they learn in the Negative domain. I.E. could they learn to infer the opponents type by using bayesian updating for cases where action are predominantly adversarial?</li>
<li>Can agents use contrafactual reasoning to accelerate learning to signaling. This is a system where agents infer private information of another agents (e.g.&nbsp;their type, thier lexicon and or grammar rules) based on observation the other agents behavior, which is more costly to use for deception than say cheap talk. This uses the idea of measuring contrafactual influence.</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Deception by Knight &amp; Knaves
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are multiple senders and each state is known to all of the multiple senders</p>
<p>Each sender has a voracity parameter <img src="https://latex.codecogs.com/png.latex?%5Cnu%20%5Cin%20%5B0,1%5D">, this is the probability that they send a faithful signal.</p>
<p>For a complex game this can be interpreted as the probability that the sender will make a error when sending a signal</p>
<p>More generally we might have three parameters <img src="https://latex.codecogs.com/png.latex?%5Cnu_s,%20%5Cmu_r,%20%5Cnu_c"> which are respectively the voracity for the sender, the channel and the receiver.</p>
</div>
</div>
<p>This is an idea is similar to the approach used by <span class="citation" data-cites="Nowak2006Evolutionary">(<strong>Nowak2006Evolutionary?</strong>)</span> on errors in signaling. However in this case we are more interested in the case where there are adversarial agents who are trying to deceive the receivers and the problem of these receivers to learn a signaling system that is robust to adversarial agents</p>
<p>At the extreme the agents have types (like knights and knaves) and the receivers must learn to classify the agents by type and then learn to both signaling and reason.</p>
<p>One idea based on knight and knaves might be to allow reveivers to request request a response to a query i.e.&nbsp;if the state is %X% what is the signal that you would send? the signal <img src="https://latex.codecogs.com/png.latex?Y">?</p>
<p>A novel idea here is to learn a Bayesian hierarchical cognitive model that captures</p>
<ol type="1">
<li>the voracity of the senders <img src="https://latex.codecogs.com/png.latex?V_i%20%5Csym%20Beta(%5Calpha,%20%5Cbeta)"></li>
<li><img src="https://latex.codecogs.com/png.latex?H_i"> hypotesis on different states of the world i.e.&nbsp;the voracity of the senders</li>
<li>how each and all statements made by the senders are consistent with each hypothesis <img src="https://latex.codecogs.com/png.latex?H_i"></li>
</ol>
</section>
<section id="babbling-bayesian-babies" class="level2">
<h2 class="anchored" data-anchor-id="babbling-bayesian-babies">Babbling Bayesian Babies</h2>
<p>This is a simple model of babbling in language development.</p>
<!-- Note: rename since babbling equilibria is a term used in the literature for completely pooling equilibria. -->
<p>Babies in the babbling stage of language development are learning to signal. They are sending all possible phonemes and the parents and thier parents either respond or talk to each other. The babies are collecting the feedback and reinforcing both positively and negatively until they only use the phonemes that are in the language of thier parents.</p>
<p>Typical They start with over 300 phonemes and end up with 40-50.</p>
<p>In this scenario the sender operates at random. Both the sender and the receiver must observe the rewards and reinforce state signal action triplets.</p>
<p>Different cognitive dynamics to model via bayesian learning</p>
<ol type="1">
<li>Just learning the phonemes by passive listening to the parents etc.
<ul>
<li>Positive v.s. negative examples i.e.&nbsp;are the babies asked to repeat and get rewards or do they just observe states passively.</li>
</ul></li>
<li>Active teaching (Parents also present a prelinguistic object for the phoneme)
<ul>
<li>should boost rate of learning more phonemes particularly</li>
<li>Positive v.s. negative examples</li>
</ul></li>
<li>Adding learning a syllable structure to the language then the babies should learn not just the phonemes but the syllables. This adds another layer to the hierarchical model.</li>
<li>Adding picking the syllables from a number of options
<ul>
<li>Positive v.s. negative examples</li>
</ul></li>
<li>Adding phonotactic constraints and that the babies should learn the constraints.
<ul>
<li>Positive v.s. negative examples</li>
</ul></li>
</ol>
<section id="the-bayesian-view-of-the-signaling-systems" class="level3">
<h3 class="anchored" data-anchor-id="the-bayesian-view-of-the-signaling-systems">The Bayesian view of the signaling systems</h3>
<p>In this section let’s consider a view of the Lewis signaling game in terms of a bayesian game theory. This is a perspective I used in a article on planning in the complex signaling game and helped me think more precisely about the how a signaling system might evolve in a formal setting.</p>
<p>The game has n states and n signals. Internality the a the agents will learn a permutation of the states and signals and its inversion. So there are n! signaling systems that can be learned. In the world of bayesian agents each such permutation characterizes an agent type. THe game starts by nature picking a type for the agent. I say this this is because the agent needs to define a strategy which is a response for each state! Now the same is true for the receiver. The receiver’s strategy is to pick an action for each signal. After that it can use bayesian updating to update it’s belief about the type of the sender. These probabilities can guide it in the process of learning the signaling system. As the pair make progress, the receiver is able to update it’s belief about the sender’s type, discarding options that are inconsistent with the signals it has received! Once it has finds n-1 signals it can be certain about the sender’s type and it will have an expected payoff of 1.</p>
</section>
</section>
<section id="framing-games-and-evolution-of-domain-specific-languages" class="level2">
<h2 class="anchored" data-anchor-id="framing-games-and-evolution-of-domain-specific-languages">Framing games and evolution of domain specific languages</h2>
<p>In this scenario we considers if learning a shared language could be a game changer in some strategic interaction like a social dilemma. We may ask be able to not only interpret different signaling system as embodying different semantics derived from the framing game but also consider if these create linguistic relativism where that agent’s languages shapes thier perception of the framing game by allowing them to develop newer strategies. We can also consider the beginning of ethics in such a system by considering if the introduction of language allows increases or decreases the overall welfare of the agents.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Framing Games
</div>
</div>
<div class="callout-body-container callout-body">
<p>Agents tasked with maximizing a reward signal under conditions of strategic interaction. We call this the framing game and it might be as simple as a 2x2 matrix game like the battle of the sexes, a social language like the iterated prisoner’s dilemma or as complex as a Sugarscape simulation . At some point, perhaps at the start send and received actions are introduced into the agents action space. They can now assume the role of the sender and receiver in a Lewis Signaling game.</p>
<p>If the incentives are right e.g.&nbsp;the framing game is cooperative they could learn to signal to each other. Note though that it is conceivable that agents could learn to signal if they are in a competitive game if they are sufficiently driven to explore the send and receive actions. However the resulting equilibrium might not be a perfectly separating one if the agents are not suitably incentivize to use the language to coordinate.</p>
<p>Furthermore these signals may then be incorporated into the planning and allow the agents to coordinate on the framing game.</p>
<p>One expects that the language that arises under such circumstance would be limited to the domain of the framing game and that its semantics would be inherited from the framing game. However larger framing games with many generation of agents might lead to dynamics that lead to the emergence of a more general language.</p>
</div>
</div>
<p>This kind of scenario actually contains a rich set of paths to the emergence of many different languages. For agents in the lifelong settings the emergent language might gain additional strata of semantics from multiple domain and then evolve to a more general language.</p>
<p>A questions then arises what simple framing games can lead to agents to develop languages that are imbued with sufficiently rich semantics that the language has the Sapir-Worf property of being able to express semantics from any other language.</p>
<p>Another idea I have been using liberally in my thinking is that of a framing game for the lewis signaling game. This idea comes from the field of Multi agent Reinforcement learning however it should also be valid in terms of Game theory.</p>
<p>Simply put an agent may be tasked some general problem like playing chess or solving a maze. In the past I worked on wizards that configure servers or home networks for telecoms.</p>
<p>I could envision an RL agent learning to do these job by learning from experience. However it seems that if it can play a lewis game and learn a signaling system that is a subset of english that approximate its domain then it can chat with people rather then relay on a some user interface.</p>
<p>For a home networks it might need a smaller subset of english and for a server configuration it might larger one. What seems to be the point is that the agent tasked with some external task might be able to learn a signaling system that has semantics inherited from the task. If such task is a strategic interaction we may view it as a game. And together we can view the framing game and the lewis signaling game as single iterated game in which the agent learns to play a new variant of the framing game in which it has access to a coordination mechanism that is a domain specific language.</p>
<p>I think that we if we naively combine a game like the battle of the sexes a pure coordination problem with the lewis signaling game the agents will learn a language like ‘football’, ‘opera’. And that these can arise within three iterations and allow the agents to then coordinate on the battle of the sexes so as to score the highest payoffs. This could happen both if the agents alternate signaling or one always gets to signal first, and always picks opera.</p>
<p>On the other hand with iterated prisoners dilemma signaling might not make a difference as the language may not be able to change the payoffs sufficiently to make the agents act any differently. In this case it is entirely possible that a signaling system will not arise at all regardless of what the agents say they will act in their own best interest. This leads to a completely pooling equilibrium.</p>
<p>So the question that comes to mind is this - 1. can we setup up the signaling game so that the agents will always learn a signaling system if coordination is a benefit. 2. How can we encode the signaling system so that its prelinguistic object will be the states of the world and the actions of the agents. I.e. we want them to be able to talk about the outcomes of the framing game in the signaling game. 3. We want cost and benefits of signaling to be decoupled from the framing game - i.e.&nbsp;we may deduct the payoff for signaling success once the signaling system is learned. 4. We do want the agents in the framing game to aware of the outcome of the signaling game. 5. Finally we want to identify if there are strategies in which coordination increase of decrease overall welfare.</p>
<p>e.g.&nbsp;in the battle of the sexes we should expect perfect rewards e.g.&nbsp;in a three way traffic junction game we might expect the agents to signal thier intentions to turn left or right and to go straight. This would allow them to avoid accidents. One such mechanism might be a game of paper rock scissors to determine the priority of the agents. e.g.&nbsp;in the <a href="https://en.wikipedia.org/wiki/Braess%27s_paradox">Braess’s Paradox</a> establishment a high way though a city we might end up increasing the traffic jams.</p>
</section>
<section id="co-adaptaion-and-semantic-drift-and-grounding." class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="co-adaptaion-and-semantic-drift-and-grounding.">Co-adaptaion and Semantic Drift and grounding.</h2>
<p>c.f. <span class="citation" data-cites="rita2022emergent">(Rita et al. 2022)</span> paper of co-adaptation loss! c.f. <span class="citation" data-cites="meta2022human">((FAIR)† et al. 2022)</span> solving the game of diplomacy c.f. <span class="citation" data-cites="barrett2017self">(Barrett and Skyrms 2017)</span> on templates by skryms</p>
<div class="no-row-height column-margin column-container"><div id="ref-rita2022emergent" class="csl-entry">
Rita, Mathieu, Corentin Tallec, Paul Michel, Jean-Bastien Grill, Olivier Pietquin, Emmanuel Dupoux, and Florian Strub. 2022. <span>“Emergent Communication: Generalization and Overfitting in Lewis Games.”</span> <a href="https://arxiv.org/abs/2209.15342">https://arxiv.org/abs/2209.15342</a>.
</div><div id="ref-meta2022human" class="csl-entry">
(FAIR)†, Meta Fundamental AI Research Diplomacy Team, Anton Bakhtin, Noam Brown, Emily Dinan, Gabriele Farina, Colin Flaherty, Daniel Fried, et al. 2022. <span>“Human-Level Play in the Game of Diplomacy by Combining Language Models with Strategic Reasoning.”</span> <em>Science</em> 378 (6624): 1067–74.
</div><div id="ref-barrett2017self" class="csl-entry">
Barrett, Jeffrey A, and Brian Skyrms. 2017. <span>“Self-Assembling Games.”</span> <em>The British Journal for the Philosophy of Science</em>.
</div></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Co-adaption
</div>
</div>
<div class="callout-body-container callout-body">
<p>Family members, best friends and members of closely knit societies tend to develop a language that is unique to them. IT can start with in jokes, invented words and phrases and co-opting the meaning of existing words to mean something else. This is a form of co-adaption where the language and the society co-evolve. If allowed to evolve the language can drift so that a stranger would be at odds to understand what the speakers are saying and this is called semantic drift.</p>
<p>For RL agents it is possible for them to develop a language that is unique to them as suggested above. It is also possible that as conditions change e.g.&nbsp;the framing game is switched from Battle of the sexes to Prisoner’s dilemma the languages will remain a 4 state 4 signal language but the meaning of the signals will drift.</p>
</div>
</div>
<p>this story is more about something we might want to avoid.</p>
<ol type="1">
<li><p>having more agents should reduce co-adaption.</p></li>
<li><p>Semantic drift is inherent in the evolution of language. However we may want to allow the language to evolve but for certain aspects to remain fixed. This is one of the desiderata for emergent languages. What we would prefer that grammar and much of to be stable over multiple generation so that great grandfathers can still communicate with thier great grand children. Why is this a problem? In agentic systems we design language emergence to be fast. In most cases every agents need to learn it from scratch, they enjoy the benefits of perfect recall and a noiseless channel. This also means that languages might change very quickly to and that we as researchers will have a tough time understanding the agents over the course of thier simulation. However in natural languages we have a similar situation and for language to work for large populations and for record to make sense for thousands of years we want much of the language to be stable with possiblies for evolution at the fringes….</p></li>
<li><p>How do we ensure semantics persist over time ? We call this is the idea of grounding. Imagine all the most important ideas were written down in a book and that book was passed down from generation to generation. Everyone might need to learn the book a little after they learned basic language skill in school. soon the book becomes cannon and no one may change it. Over time though it might be permitted to add bits when new concepts were discovered and proved important enough to preserve.</p></li>
<li><p>Short of starting a religion for our agents we may want good mechanism that will keep the language grounded so that cooadaption and semantic drift are kept in check.</p></li>
<li><p>Another point here is that if our agents are aware that the framing game has been swapped from battle of the sexes to Prisoners dilemma that they may want to keep their semantics for the Battle of the sexes intact and use them as a template or prior for the Prisoners dilemma. Since prisoners dilemma is non-cooperative, there may not even be a perfectly separating equilibrium for framing game so that assigning a language from a template prior might actually be of benefit. .</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>##work in progress</p>
<section id="another-way-to-look-at-the-coordination-aka-best-response" class="level2">
<h2 class="anchored" data-anchor-id="another-way-to-look-at-the-coordination-aka-best-response">Another way to look at the coordination AKA best response</h2>
<p>https://www.tandfonline.com/doi/epdf/10.1080/09540091.2014.885303?needAccess=true</p>
<ul>
<li>Win-stay/lose-shift AKA best response</li>
<li>win-stay/lose-randomise</li>
<li>win-stay/lose-inaction</li>
</ul>
</section>
</div>
</div>
</div>
</section>
<section id="learning-approximate-complex-signaling-systems" class="level2">
<h2 class="anchored" data-anchor-id="learning-approximate-complex-signaling-systems">Learning approximate complex signaling systems</h2>
<p>Here is a little paradox. While in the simple signaling game the goal of the agents is to find an equilibrium that is perfectly separating. In most complex signaling game there are seems to be many partially pooling equilibria that are arbitrary close to such a perfectly separating equilibrium. In many MDPs a subset of states are more important than others, e.g.&nbsp;bottle necks in a maze, central square in chess. This is often formalized in terms of the average time an agent is likely to spend in each state. and so on and in language with a Ziphian property most words have a low frequency of use. This means that learn an approximate signaling system that gives arbitrary close to the optimal signaling system with much higher probability than learning the optimal signaling system. This makes more sense if the language makes infinite use of finite resource. This may be the case if the langue has a recursive grammar.</p>
<p>Now it is worthwhile to set down a few definitions.</p>
<ol type="1">
<li>Complex State - a structured state that might be described by a sentence or a paragraph. Since we can rephrase any paragraph as a single sentence can assume that the state can be captured by an arbitrarily long sentence. In many cases though there will be a data structure or an image. It is worth noting that if the states have a rich structure we may be able to replicate this within the language.
<ul>
<li>A simple example is if we want to represent a tree and trees we might have use a prefix code to repsient singular and another the plural form. We might reuse this prefix to represent plural in both nouns and verbs.</li>
<li>A related example is that we might learn a prefix for two trees. We could generalize this to any number of trees.</li>
<li>We could make use of recursion to represent a number system for all number of trees using a few symbols.</li>
<li>This recursive rule would expand our signaling system to capture an infinite number of states using a finite number of signals. And what is more interesting we would be able to learn it from a small set of examples.</li>
<li>The point here is that if the states have such rich structures the language that preserves these can potentially be orgenised to in such a way that it can be learned more efficiently then in the tabular case. The idea is that instead of a table we could use a rule perhaps recursive to encode this part of the state. But only if it has such a structure.<br>
</li>
<li>Finally note that even if there are many such functions we could be able to compose them in a way that the become a single function. This is the idea of compositionality in language and it likely the key for learning to represent arbitrary complex signaling systems.</li>
</ul></li>
<li>Signal - In the complex signaling game the signal can be viewed as
<ul>
<li>as a string of arbitrary length made using a limited alphabet of size |L|</li>
<li>as a number N in base |L| i.e.&nbsp;<em>N_L</em></li>
</ul></li>
<li>Prelinguistic object
<ul>
<li>I noticed that people use this term as a synonym for the state. I want to use it a little differently. I want it to correspond to a sub-state that may be interpreted as a unit of meaning. There may be multiple prelinguistic objects in a state. We may consider these as parts of a picture for example and each part may need servral words to describe it. Or we may refernce a bit in a binary vector.</li>
<li>as noted above the states may have a rich structure, e.g.&nbsp;nouns, verb, inflection, a recursively defined number system. Or a recursively defined system of clauses. The last might even generlise the number system.<br>
</li>
<li>The prelinguitic objects may be in a list, a tree, a grid a graph or some other data structure. However it seems that we might gravitate towards trees as they are the most common representation for parsing natural languages and more importantly they can be defined using a simple recursive rule.</li>
</ul></li>
<li>Encoder - a function that the agent learns to convert the state into signals it needs to
<ol type="1">
<li>serialize the prelinguistic state into a sequence</li>
<li>convert each prelinguistic object into a sequence in the alphabet L.</li>
<li>Possibly use some kind of symbol as a delimiter. (Prefix code precludes the need for this)</li>
</ol></li>
<li>Decoder - a function that the agent learns to convert the signals into actions. It the inverse fuction of the encoder. And has the same steps but inverse order.</li>
<li>Tabular Language - when we learn a tabular representation of the signaling system we can assume that the encoder and decoder are perfect and that the signals are perfectly separating. However in this case the language is unlikely to generalize. I.e. we need to learn all the signals to be alble to understand what states they refer to. Since the best case we need to learn |S| signals for |S| states we need to to test |S|^2/s signals in the worst case. This is the main shortcomming of the tabular approach. Note that the endocde and decoder are function but in this case they are acting as a lookup table in step 2. of the encoder.</li>
<li>Functional language - This is a language that is learned fitting parameters in a model that approximates the tabular language. Since linear function approximation can exactly replicate the language we can without much trouble approximate any language with a linear function. With one paprmeter per-state we can preferctly replicate the tabular language. The advantage of the functional language is that it can generalize to new states. This means that we might learn the grammar, and morphology using a very smaller subset |MS| and then we would need to learn a fraction of the lexicon consiting of the base forms of the words |MS| + |BL|. The learning time would be (|MS| + |BL|)^2/s. And it would cover all the states. The more infelction and dervied forms we have the greater the speaker’s ability to generelise. Also the syntax would then allow to combine these words into sentences. The language might be suitable to handle potentialy infinite number of states with a finite learning time stated above. However as I pointed out just now the replicating a tabular language will not endow it with this generalization ability, not unless by some lucky coincidence the encoder is able to capture and preserve the full structure of the state space.</li>
</ol>
<p>Now it is worth making a couple of observation.</p>
<ol type="1">
<li>we can learn a large table of states and thier associated signals by enumerating them using base |L| numbers. This is one baseline. IT has a lexicon |S|.</li>
<li>We may use train an encoder to encode some natural language say English sentences into binary signals. Then we could use english to encode any state. This is a second baseline. It has an alphabet of size 27 and a lexicon of size - the number of words in the english language. |E| + |S|. English is a very general purpose language. The down side is that the language will be large and require lots of resources for each new agent to learn it. About (|E|+|S|)^2/s steps in the worst case of an optimal algorithm. Note though that using English would also require learning rules of grammar and syntax and so on. We might also need to be sure to avoid ambiguity in the sentences our encoder uses, we might just use english and specify the details that let the receiver resolve any ambiguity. However the size of the lexicon is impractical.</li>
<li>We could do better by giving each word a previously unused prefix to indicate things like the word sense, the part of speech, or an clues as to what it is referencing. This would only make the lexicon a little larger but would possibly eliminate all ambiguity.</li>
<li>English has a complicated grammar. We might also simplify it. This would be easier if we made liberal use of prefixes in item #3. This would convert the language to a more morphologically rich language and allow us to radically simplify the grammar. For example we could use the bases of words and the prefixes to get a highly predictable morphology and drastically reduce the lexicon.</li>
<li>With all the pos-organized as regular and unambiguous we might just also be able to discard things like agreements and our grammar could become much simpler. We would have a single recursive rule that lets us parse the sentence into a tree.</li>
<li>If |S| are structured and not particularly complicated. We might even require a rather small subset of english to encode the states. (|ME|+|S|)^2/s This minimalist english should be much easier to learn and use but expresive enough to encode the states. This is the third baseline. It has an alphabet of size 27 and a lexicon of size - the number of words in the minimalist english language. |ME| + |S|.</li>
<li>We might also consider that in most cases we don’t even need that much expressive ability in the language. In this case we are looking at a domain specific version of minimalist english i.e.&nbsp;|DME| + |S|. This is the fourth baseline. It has an alphabet of size 27 and a lexicon of size - the number of words in the domain specific minimalist english language. |DME| + |S|.</li>
</ol>
<p>If we use function approximation with Todays signaling systems is tommorows partial pooling equilibrium. As new states and thier associated prelinguistic objects manifest, agents will need to extend thier state space and action space to handle these new states and objects.</p>
<p>Complex signaling systems have three main facets that are different than simple signaling systems.</p>
<ol type="1">
<li>Limited signals but a longer message length.</li>
<li>Complex states spaces</li>
<li></li>
</ol>
<p>In terms of signaling systems here is my best idea:</p>
<!-- 

- automata
- replicator dynamics = large population , mechanism are mutations and ess.
- RL = small population, mechanism are exploration and exploitation.
- Moran processes = 



-->
</section>
<section id="inductive-learning-via-hierarchial-bayesian-frameworks" class="level2">
<h2 class="anchored" data-anchor-id="inductive-learning-via-hierarchial-bayesian-frameworks">Inductive Learning via Hierarchial Bayesian Frameworks</h2>
<p>This is an idea that I had been thinking about for a while. It is based on the idea that we can model learning as a process of generalization. Giving Lewis agents different states to coordinate on leads them to learning a new lexicon for each scenario. Unfortunately they need to learn everything from scratch. The main issues are the inability to generalize to new states and the consequence is the inability to transfer learning from scenario to another.</p>
<p>If they were able to learn rules there would might be able to use them to assemble a more complex language. This might happen by nesting them or it might be by replicating them them specializing for new tasks.</p>
<p>So this leads to a chicken and egg problem - how to represent the states in a way that allows agents to see that different tasks are similar so that they may use skills already learned before to bear on these new tasks.</p>
<p>I wanted to use RL with temporal abstraction. The life long learners would develop as children do. They would learn basic representations, then derive rules for them, to handle poverty of stimulus they might use a bayesian model to infer the rules by induction on a few examples. As they learn more complex skills they might learn new to represent different paradigms of knowledge. become exposed to more tasks</p>
<p>Agents should learn to generalize from a limited set of examples. There are a number of increasingly complex tasks that agents might need to learn to handle. It would help if they could train on a curriculum of tasks that increase in complexity. It would be even better if they could transfer learning from one task to another And it would seem possible that give a minimally rich curriculum they may be able to learn a representation powerful enough to match arbitrarily complicated states.</p>
<p>There are two main ideas here.</p>
<ol type="1">
<li>agents need to make hypothesis about states e.g.&nbsp;the structure the states, and then to pick the hypothesis that is best supported by the data. This is the idea of inductive learning.</li>
<li>learning simple models first using <code>easy</code> examples</li>
<li>infer the prior that best supports the inductive bias for each subtask</li>
<li>assemble these into deeper hierarchies to combine earlier learning into more complex structures.</li>
<li>check if these nested models can be used to learn</li>
</ol>
<p>A hypothetical Bayesian Curriculum :</p>
<ol type="1">
<li>Agents need to coordinate on one of two hypothesis (which coin <img src="https://latex.codecogs.com/png.latex?C_1%20%7C%20C_2"> generates a sequence of states S=[H|T]+)</li>
<li>Agents need to coordinate on one of an infinite set of hypotheses (which coin <img src="https://latex.codecogs.com/png.latex?C_%5Ctheta,%20%5Ctheta%20%5Cin%5B0,1%5D"> generates a sequence of states S=[H|T]+).</li>
<li>Agents need to coordinate on one of two hypothesis of different complexity. E.g. similar to the previous scenario but
<ul>
<li>H0 <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0,1%5D"></li>
<li>H0 <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0.45,.55%5D"> Which requires penalizing the more flexible model for it’s complexity!</li>
</ul></li>
<li>agents should learn semantic heirarchies for the language (the fixed number of categories corresponds to a derisclet prior over the states)</li>
<li>agent should learn morphological categories for the words</li>
<li>agent should learn to describe properties of objects say animals or plants encoded in a feature vector using nouns and adjectives. (Two word state)</li>
<li>agent should learn Propositional Logic over binary features over some arbitrary number</li>
<li>agent should be able to learn to parse and evaluate simple arithmetic expressions possibly nested</li>
</ol>
<p>The</p>
<p>It was not clear how it</p>
<p>using the ‘blessing of abstraction’ together with probablistic learning / induction vs<br>
the poverty of stimulus and the curse of dimensionality.</p>
<section id="resources" class="level4">
<h4 class="anchored" data-anchor-id="resources">resources:</h4>
<p>In https://videolectures.net/videos/icml07_tenenbaum_bmhi/ Tenenbaum talks about the inductive learning using bayesian models. These hierarchial bayesian models can learn some simple but non trivial distributions that alow agents to model learning certain tasks in young children. This is somewhat in line with an notion that learning might be accellerated with an inductive bias tuned for specific tasks. And that by learning a language should be broken down into a curriculum based on mastering semantics for simpler prelinguistic objects before learning the full complexity of states.</p>
<p>In this talk tennenbaum shows three models that</p>
<ol type="1">
<li></li>
<li></li>
<li></li>
<li>https://videolectures.net/videos/icml07_tenenbaum_bmhi</li>
<li>“Bayesian models of cognition” chapter in Handbook of Computational Psychology</li>
<li>https://cocosci.princeton.edu/tom/bayes.html</li>
</ol>
</section>
</section>
<section id="imitation-learning" class="level2">
<h2 class="anchored" data-anchor-id="imitation-learning">Imitation Learning</h2>
<p>what else is this called</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Story: Imitation <!-- Population Dynamics -->
</div>
</div>
<div class="callout-body-container callout-body">
<p>In nature one species, say primates can gain fitness benefits if it can learn and imitate the signals of other species say birds.</p>
<p>If they can understand but cannot reproduce the signals (e.g.&nbsp;bird calls) they may resort to using a different set of signals (e.g.&nbsp;hand signals) to communicate with each other.</p>
</div>
</div>
<section id="dynamics-3" class="level3">
<h3 class="anchored" data-anchor-id="dynamics-3">Dynamics</h3>
<p>We do not require that the original signals come from one species, there may be a number of species that can provide signals that are useful to the primate and these might change seasonally or due to migration to new habitats.</p>
<p>Once a rudimentary signaling system is established, it may be natural to extend it to more sophisticated system that can be used to communicate additional states.</p>
<p>The ability to signal may well lead the tribe to become more cohesive and more efficient at hunting and gathering and avoiding predators. Some examples are:</p>
<ol type="1">
<li><p>It now becomes more useful to assign idle or less productive members to roles of sentry or lookout while the others broadcast their messages.</p></li>
<li><p>Also this creates a new benefit that takes the form of social welfare. This means that derelict members of the watch or those that raise false alarms will be subject to punishment by thier peers. This is a form of <strong>costly signaling</strong> that is used to maintain the integrity of the tribe.</p></li>
<li><p>Less capable forgers will be able to more quickly learn the locations of food sources by sharing signals of the more experienced foragers whenever they return to the safety of the tribe. This may also allow the tribe to better exploit the food sources that are available to them in a far larger area. Thus the carrying capacity of the tribe is increased by sharing of information, and the tribe might also become more localized and less nomadic. They may choose to migrate to new areas only when the food sources are depleted in a larger neighborhood.</p></li>
<li><p>Stag hunts - hunting large game that requires coordination of multiple hunters, the ability to signal and coordinate the hunt using this new signaling system may allow the tribe to hunt larger game that they would not have been able to hunt before. This will also let them specialize in hunting.</p></li>
</ol>
<p>These and numerous other social benefits may accrue to the tribe that is able to learn by imitation augmented by invention.</p>
</section>
<section id="in-natural-language" class="level3">
<h3 class="anchored" data-anchor-id="in-natural-language">In natural language</h3>
<p>Imitation is prevalent in natural languages as well. Loan words as well as idioms are often borrowed from other languages and may have similar sound structures as well as semantic meanings. Loan words frequently require some adaptation to the phonetic structure of the borrowing language. Some languages like english preserve the original phonetic structure of the loan word, while others like Japanese may adapt the phonetic structure of the loan word to the phonetic structure of the borrowing language.</p>
<p>In many cases if the words are used a lot and it is a poor fit for the phonetic structure of the borrowing language. it will be replaced by another word that is a better fit and the original word will be forgotten.</p>
<p>This mechanism is likely understood as part of <code>Hamming Moat Formation</code> that keeps languages from merging</p>
</section>
<section id="sources" class="level3">
<h3 class="anchored" data-anchor-id="sources">Sources</h3>
<p>A number of sources for this phenomenon are available in [@]</p>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {The {Many} {Path} {To} {A} {Signaling} {System}},
  date = {2025-03-24},
  url = {https://orenbochman.github.io/posts/2025/2025-01-05-bifurcating-paths-to-signaling/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“The Many Path To A Signaling System.”</span>
March 24, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-05-bifurcating-paths-to-signaling/">https://orenbochman.github.io/posts/2025/2025-01-05-bifurcating-paths-to-signaling/</a>.
</div></div></section></div> ]]></description>
  <category>signaling systems</category>
  <category>lewis signaling game</category>
  <category>reinforcement learning</category>
  <category>bayesian games</category>
  <category>information theory</category>
  <category>game theory</category>
  <category>bayesian reinforcement learning</category>
  <category>emergent languages</category>
  <category>complex signaling system</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-05-bifurcating-paths-to-signaling/</guid>
  <pubDate>Sun, 05 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Off-Policy Learning</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-04-off-policy-learning/</link>
  <description><![CDATA[ 






<p>RL is full of big words like “off-policy learning” and “importance sampling”. If big words scare you, you are not alone. But most of the ideas in RL are simple and intuitive. So before we dive deep into mathematics and proofs, let’s try to understand these concepts in plain language.</p>
<section id="what-is-off-policy-learning" class="level2">
<h2 class="anchored" data-anchor-id="what-is-off-policy-learning">What is Off-Policy Learning ?</h2>
<div id="tip-off-policy" class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip&nbsp;1: On-policy learning - In a nutshell
</div>
</div>
<div class="callout-body-container callout-body">
<dl>
<dt>off-policy learning</dt>
<dd>
Is like trying to learn to play basketball by watching a game of football.
</dd>
</dl>
</div>
</div>
<p>Let’s call the sum of all decisions we learn <strong>a policy</strong>. Now let’s try and make this definition more general. We want to learn a policy that is different from the policy that generated the data. Here the data is the actions chosen by the players in the game we watched.</p>
<p>To avoid confusion, we call the policy that generated the data the <strong>behavior policy</strong>, because that is how the players behaved in the game.</p>
<p>And the policy we want to learn, we call the <strong>target policy</strong> because that is the policy we want to target.</p>
<dl>
<dt>Off-policy learning</dt>
<dd>
Is a Reinforcement Learning technique where the agent learns from a behavior policy that is different from the target policy.
</dd>
</dl>
<p>This is useful in reinforcement learning when the agent needs to learning from historical data or from a different agent.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Off-Policy {Learning}},
  date = {2025-01-04},
  url = {https://orenbochman.github.io/posts/2025/2025-01-04-off-policy-learning/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Off-Policy Learning.”</span> January 4,
2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-04-off-policy-learning/">https://orenbochman.github.io/posts/2025/2025-01-04-off-policy-learning/</a>.
</div></div></section></div> ]]></description>
  <category>reinforcement learning</category>
  <category>off-policy learning</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <category>artificial intelligence</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-04-off-policy-learning/</guid>
  <pubDate>Sat, 04 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/images/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Rethinking Signaling systems via the lens of compositionality</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-02-rethinking-signaling-systems/</link>
  <description><![CDATA[ 






<p>In <span class="citation" data-cites="Skyrms2010signals">(Skyrms 2010)</span> the author discusses the evolution of signaling systems and the emergence of language as well as the role of compositionality in the emergence of language and how it is a key feature of human language. Signals provides a coherent yet multifaceted views of the problem - philosophy, signaling system creation and assimilation via evolution or reinforcement learning. Skyrms also considers Logic and complex signaling systems. Yet a unifying theme for this work is a reductionist view of the problem and his attempt to reduce the problem to a model that follows closely the Lewis Signaling Game.</p>
<div class="no-row-height column-margin column-container"><div id="ref-Skyrms2010signals" class="csl-entry">
Skyrms, Brian. 2010. <span>“<span class="nocase">14512 Complex Signals and Compositionality</span>.”</span> In <em><span class="nocase">Signals: Evolution, Learning, and Information</span></em>. Oxford University Press. <a href="https://doi.org/10.1093/acprof:oso/9780199580828.003.0013">https://doi.org/10.1093/acprof:oso/9780199580828.003.0013</a>.
</div></div><p>I like this reductionist approach but I like to also to turn it on its head. By looking at how the problem takes form in more challenging and realistic settings can often uncover the true nature of the problem. Since language emergence is so open ended one might also use it to consider how it empowers agents to coordinate on better decision in ever more challenging problems and settings.</p>
<p>I first became frustrated with complex signaling systems when I read the chapters in Signals and realized that unlike the other chapters Skyrms had not summarized how researchers in the field had come up with a definitive solution to the problem. I reread it a couple of times and finally realized that although he made some very interesting claims this topic was still unresolved. There are many interesting results but there are at least as many open questions.</p>
<p>The second time I became frustrated was when I tried to convert the simple signaling RL games into complex ones. Just the material in the book had versions with multiple agents signaling in parallel, one agent signaling without sequence, and agents signaling in sequence. The book also hints at cases where agents may make mistakes and that this is important for the evolution of signaling systems.</p>
<p>I also was coming across more and more research that isn’t covered in the book that looks at morphology and syntax in the emergence of language. Further more people were using deep learning to overcome the lewis signaling game inability of of arriving decoders for complex signals.</p>
<p>At this point I realized that there might be three problems that are being conflated in nature and that we might want to consider them separately as well as together.</p>
<ol type="1">
<li>the coordination problem - how agents learn a common convention for signaling and what is the most effective form of the solution.</li>
<li>the serialization problem - how the medium will e.g.&nbsp;a noisy channel can introduce additional desirable constraints like shorter signals, saliency, early decoding, (compression, error detection and correction, easy decoding, signal distributions, ). This problem is one which is solved by a decision tree. But the different options for the settings will lead to different optimal solutions. These are hidden by the symmetric form of the rewards in the lewis game.</li>
<li>the signal composition problem - given a simple signaling systems and a encoder decoder for the channel how can we add aggregation to the signaling system to make it more efficient. (more expressive, easier to learn, easier to extend, more robust to different errors.)</li>
</ol>
<p>This might help answer questions like - why does english use just 39-44 phonemes instead of the full we have a languages making a full use of human phonemes (600 consonants and 200 vowels) ?</p>
<p>What became apparent to me is that the nature of a complex signaling system, depends very much on the game being played by the agents.</p>
<p>Metrics:</p>
<ul>
<li><p>Total number of signals</p></li>
<li><p>Minimal set of signals needed to learn the signalling system with n-learners with full observability of signal, action and reward by all learners.</p></li>
<li><p>How long to learn saliency (the distribution states of the world) of signals perhaps adjusted by risk (the distribution of malleuses for wrong action in the each state of the world)</p></li>
<li><p>How long to coordinate on a basic system with N states and N actions</p></li>
<li><p>How to learn to coordinate on a huffman cannonical code to optimize a signaling system</p></li>
<li><p>Learning and Coordinating via templates for complex signals</p>
<ul>
<li>Degree of morphology</li>
<li>Degree of syntax</li>
<li>Degree of contextual meaning</li>
<li>Degree of coordination (and aggreement in templates) and its error correction capacity)</li>
</ul></li>
<li><p>Message entropy</p></li>
<li><p>Robustness to error in sender, receiver, and channel</p></li>
<li><p>Mean</p></li>
<li><p>Regarding complex signaling systems he points out a couple of ideas:</p>
<ul>
<li>Complex signals might be composed by simple signals from multiple senders.
<ul>
<li>The reciever needs to both decode and aggregate the simple signals to infer the state of the world encoded in the complex signal.</li>
<li>This is particularly interesting and less artificial once consider realize it leads to a partially observed markov decision process (PMDP).
<ul>
<li>senders have partial observability of the state of the world and</li>
<li>recievers need to reconstruct the state by aggregating partial messages</li>
</ul></li>
<li>If we might also give the agents types and make the game a bayesian game.
<ul>
<li>Types are
<ul>
<li>Knights - with messages that are always true as well as thier atoms</li>
<li>Knaves - with messages that are always false.</li>
<li>Normals - with messages that are sometimes true and sometimes false.</li>
<li>Insane - who think that thier messages are always true but are actually always false.</li>
<li>etc</li>
</ul></li>
</ul></li>
</ul></li>
<li>Complex signals might be composed by multiple simple signals from a single sender.
<ul>
<li>The complex signal is a bag of signals (i.e.&nbsp;aggregation is not unordered - buy via a conjunction of signals i.e.&nbsp;A and B = B and A).</li>
<li>The complex signal is ordered sequence of signals sequence of signals i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?(A,B)%20%5Cneq%20(B,A)"> .</li>
<li>Sequences of sequences can capture morphology.</li>
<li>Natural language adds the notion of recursion - which in terms of mathematically boils down to a a partial ordering of simple signals to form complex signals.</li>
</ul></li>
</ul></li>
<li><p>There is a natural tendency to think about the Chomsky hierarchy of languages at this point.</p></li>
<li><p>Also once there are sequences of signals we will naturally consider ideas from information theory.</p>
<ul>
<li>Entropy of a signal</li>
<li>Error detection</li>
<li>Error correction</li>
<li>Source coding (compression)</li>
<li>Easy decoding of messages</li>
</ul></li>
<li><p>Errors are stated as important in the evolution of signaling systems in the paper of Nowak and Krakauer (1999).</p>
<ul>
<li>we</li>
</ul></li>
<li><p>Compression and easy decoding are also important too but this came up later when people noticed that thier agents were learning very inefficient signaling systems (with very long signals)</p>
<ul>
<li>this suggests that we add a parameter to the game to penalize long signals.</li>
<li>and to reward early decoding of the signal.</li>
</ul></li>
<li><p>Logic is also discussed in the</p></li>
</ul>
<p>has an extensive bibliography and I have been following up on some of the references.</p>
<p>This is a quick summary of a talk by Marco Baroni on the topic of compositionality in language. In it he outlines some of his work and his collegues/students work on the topic and the conclusions he has drawn from it.</p>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Rethinking {Signaling} Systems via the Lens of
    Compositionality},
  date = {2025-01-02},
  url = {https://orenbochman.github.io/posts/2025/2025-01-02-rethinking-signaling-systems/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Rethinking Signaling Systems via the Lens of
Compositionality .”</span> January 2, 2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-02-rethinking-signaling-systems/">https://orenbochman.github.io/posts/2025/2025-01-02-rethinking-signaling-systems/</a>.
</div></div></section></div> ]]></description>
  <category>reinforcement learning</category>
  <category>emergent languages</category>
  <category>complex signaling system</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-02-rethinking-signaling-systems/</guid>
  <pubDate>Thu, 02 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2025/2025-01-02-rethinking-signaling-systems/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Books, Courses Tools</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2025/2025-01-01-books/</link>
  <description><![CDATA[ 






<section id="information-theory" class="level2">
<h2 class="anchored" data-anchor-id="information-theory">Information Theory</h2>
<ul>
<li><a href="https://www.inference.org.uk/itprnn/book.pdf">Information Theory, Inference, and Learning Algorithms</a> by David MacKay.</li>
</ul>
</section>
<section id="ml" class="level2">
<h2 class="anchored" data-anchor-id="ml">ML</h2>
<ul>
<li><p><a href="https://www.statlearning.com">An Introduction to Statistical Learning</a> by Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani.</p></li>
<li><p><a href="https://jakevdp.github.io/PythonDataScienceHandbook/">Python Data Science Handbook</a> by Jake VanderPlas.</p></li>
<li><p><a href="https://d2l.ai/">Dive into Deep Learning</a> by Aston Zhang, Zachary C. Lipton, Mu Li, and Alexander J. Smola.</p></li>
<li><p><a href="https://github.com/abhishekkrthakur/approachingalmost/blob/master/AAAMLP.pdf">Approaching (Almost) Any Machine Learning Problem</a> by Abhishek Thakur</p></li>
</ul>
</section>
<section id="bayesian-methods" class="level2">
<h2 class="anchored" data-anchor-id="bayesian-methods">Bayesian Methods</h2>
<ul>
<li><p><a href="https://greenteapress.com/wp/think-bayes/">Think Bayes</a> by Allen B. Downey</p></li>
<li><p><a href="https://dataorigami.net/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/">Probabilistic Programming &amp; Bayesian Methods for Hackers</a></p></li>
</ul>
</section>
<section id="deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="deep-learning">Deep Learning</h2>
<ul>
<li><a href="https://www.deeplearningbook.org">Deep Learning</a> by Aaron Courville, Ian Goodfellow, and Yoshua Bengio</li>
</ul>
</section>
<section id="reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="reinforcement-learning">Reinforcement Learning</h2>
<ul>
<li><p><a href="http://www.incompleteideas.net/book/RLbook2020.pdf">Reinforcement Learning: An Introduction</a> by Richard S. Sutton and Andrew G. Barto.</p></li>
<li><p><a href="https://tor-lattimore.com/downloads/book/book.pdf">Bandit Algorithms</a> By Tor Lattimore and Csaba Szepesvari</p></li>
<li><p><a href="http://www.ualberta.ca/~szepesva/papers/RLAlgsInMDPs.pdf">Algorithms for Reinforcement Learning</a> by Csaba Szepesvari</p></li>
</ul>
<p><a href="https://web.mit.edu/dimitrib/www/RLbook.html">RL and Optimal Control</a> by Dimitri P. Bertsekas</p>
</section>
<section id="nlp" class="level2">
<h2 class="anchored" data-anchor-id="nlp">NLP</h2>
<ul>
<li><p><a href="https://web.stanford.edu/~jurafsky/slp3/ed3bookaug20_2024.pdf">Speech and Language Processing</a> by Daniel Jurafsky and James H. Martin.</p></li>
<li><p><a href="https://book.leafmap.org/#geospatial-data-science-with-leafmap">Geospatial Data Science with Leafmap</a></p></li>
<li><p><a href="https://www.amazon.com/exec/obidos/ASIN/0198568312">Data Analysis a Bayesian Tutorial Second Edition</a> is recommended by David MacKay.</p></li>
<li><p><a href="https://www.amazon.com/Teaching-Statistics-Tricks-Andrew-Gelman/dp/0198785704">Teaching Statistics: A Bag of Tricks</a> Andrew Gelman (Author), Deborah Nolan (Author)</p></li>
<li><p><a href="https://szeliski.org/Book/">Computer Vision: Algorithms and Applications, 2nd ed.</a></p></li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Books, {Courses} {Tools}},
  date = {2025-01-01},
  url = {https://orenbochman.github.io/posts/2025/2025-01-01-books/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Books, Courses Tools.”</span> January 1,
2025. <a href="https://orenbochman.github.io/posts/2025/2025-01-01-books/">https://orenbochman.github.io/posts/2025/2025-01-01-books/</a>.
</div></div></section></div> ]]></description>
  <category>news</category>
  <guid>https://orenbochman.github.io/posts/2025/2025-01-01-books/</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2025/2025-01-01-books/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Lewis Signaling Game for PettingZoo</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-10-10-lewis-petting-zoo/</link>
  <description><![CDATA[ 






<div id="52f8fe3f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gymnasium <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gym</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gymnasium <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spaces</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pettingzoo.utils.env <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AECEnv</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pettingzoo.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrappers</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pettingzoo.utils.agent_selector <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> agent_selector</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pettingzoo</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sender:</span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_signals):</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_signals</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action_space <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spaces.Discrete(num_signals)</span>
<span id="cb1-13"></span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> act(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, observation):</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action_space.sample()</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Receiver:</span>
<span id="cb1-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_states):</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_states</span>
<span id="cb1-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action_space <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spaces.Discrete(num_states)</span>
<span id="cb1-21"></span>
<span id="cb1-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> act(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, observation):</span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> observation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_states:</span>
<span id="cb1-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action_space.sample()</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> observation</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LewisSignalingEnv(AECEnv):</span>
<span id="cb1-29">    metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"render_modes"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lewis_signaling_v0"</span>}</span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_signals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, max_cycles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-32">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.debug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> debug</span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.possible_agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>]</span>
<span id="cb1-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agent_name_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.possible_agents, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.possible_agents)))))</span>
<span id="cb1-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_signals</span>
<span id="cb1-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_states</span>
<span id="cb1-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_cycles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_cycles</span>
<span id="cb1-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sender(num_signals)</span>
<span id="cb1-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receiver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Receiver(num_states)</span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cycles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-44"></span>
<span id="cb1-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observation_spaces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-46">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>: spaces.Discrete(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-47">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>: spaces.Discrete(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-48">        }</span>
<span id="cb1-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action_spaces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-50">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sender.action_space,</span>
<span id="cb1-51">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.receiver.action_space,</span>
<span id="cb1-52">        }</span>
<span id="cb1-53"></span>
<span id="cb1-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> observation_space(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, agent):</span>
<span id="cb1-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observation_spaces[agent]</span>
<span id="cb1-56"></span>
<span id="cb1-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> action_space(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, agent):</span>
<span id="cb1-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.action_spaces[agent]</span>
<span id="cb1-59"></span>
<span id="cb1-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> observe(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, agent):</span>
<span id="cb1-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb1-62">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-64">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-65">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_signals</span>
<span id="cb1-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-67">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal</span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unknown agent: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>agent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-70"></span>
<span id="cb1-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.possible_agents[:]</span>
<span id="cb1-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {agent: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents}</span>
<span id="cb1-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._cumulative_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {agent: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents}</span>
<span id="cb1-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.terminations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {agent: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents}</span>
<span id="cb1-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.truncations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {agent: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents}</span>
<span id="cb1-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.infos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {agent: {} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents}</span>
<span id="cb1-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_states)</span>
<span id="cb1-79">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cycles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agent_selector(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents)</span>
<span id="cb1-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agent_selection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>()</span>
<span id="cb1-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._clear_rewards() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear rewards in reset</span></span>
<span id="cb1-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {agent: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.observe(agent) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents}</span>
<span id="cb1-85"></span>
<span id="cb1-86"></span>
<span id="cb1-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, action):</span>
<span id="cb1-88">        </span>
<span id="cb1-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.terminations[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.terminations[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>]:</span>
<span id="cb1-90">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-91"></span>
<span id="cb1-92">        current_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agent_selection</span>
<span id="cb1-93"></span>
<span id="cb1-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> current_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb1-95"></span>
<span id="cb1-96">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> action</span>
<span id="cb1-97">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.debug:</span>
<span id="cb1-98">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender sent signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, State: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-99">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agent_selection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>()</span>
<span id="cb1-100">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-101"></span>
<span id="cb1-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> current_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-103">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-104">            guess <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> action</span>
<span id="cb1-105">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.debug:</span>
<span id="cb1-106">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver guessed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guess<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, State: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Signal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-107">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> guess <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state:</span>
<span id="cb1-108">                reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-109">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.debug:</span>
<span id="cb1-110">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Reward assigned: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>reward<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)                </span>
<span id="cb1-111">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-112">                reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-113"></span>
<span id="cb1-114">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents:</span>
<span id="cb1-115">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards[agent] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reward</span>
<span id="cb1-116">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._cumulative_rewards[agent] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rewards[agent]</span>
<span id="cb1-117"></span>
<span id="cb1-118">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector.is_last():</span>
<span id="cb1-119">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cycles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-120">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cycles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_cycles:</span>
<span id="cb1-121">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents:</span>
<span id="cb1-122">                        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.truncations[agent] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-123">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_states)</span>
<span id="cb1-124">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector.reinit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agents)</span>
<span id="cb1-125">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-126">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.agent_selection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>()</span>
<span id="cb1-127"></span>
<span id="cb1-128"></span>
<span id="cb1-129">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _clear_rewards(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-130">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print("Clearing rewards")  # Print when rewards are cleared</span></span>
<span id="cb1-131">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>()._clear_rewards()</span>
<span id="cb1-132"></span>
<span id="cb1-133">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-134">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_agent_selector"</span>):</span>
<span id="cb1-135">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._agent_selector</span>
<span id="cb1-136">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-137"></span>
<span id="cb1-138"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> env(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-139">    env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LewisSignalingEnv(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb1-140">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pettingzoo.__version__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.18.1"</span>:</span>
<span id="cb1-141">        env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrappers.OrderEnforcingWrapper(env)</span>
<span id="cb1-142">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-143">        env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrappers.order_enforcing(env)</span>
<span id="cb1-144">    env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrappers.AssertOutOfBoundsWrapper(env)</span>
<span id="cb1-145">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> env</span>
<span id="cb1-146"></span>
<span id="cb1-147"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- Main execution in the notebook ---</span></span>
<span id="cb1-148">num_episodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-149">mean_rewards <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}</span>
<span id="cb1-150"></span>
<span id="cb1-151">env_instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env(num_signals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, max_cycles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduced max cycles for faster testing</span></span>
<span id="cb1-152"></span>
<span id="cb1-153"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> episode <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_episodes):</span>
<span id="cb1-154">    observations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env_instance.reset()</span>
<span id="cb1-155">    unwrapped_env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env_instance.unwrapped</span>
<span id="cb1-156">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Starting episode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>episode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, New State: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unwrapped_env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-157">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> env_instance.agent_iter():</span>
<span id="cb1-158">        observation, reward, termination, truncation, info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env_instance.last()</span>
<span id="cb1-159">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> termination <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> truncation:</span>
<span id="cb1-160">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb1-161">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sender"</span>:</span>
<span id="cb1-162">            action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env_instance.sender.act(observation)</span>
<span id="cb1-163">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>:</span>
<span id="cb1-164">            action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env_instance.receiver.act(observation)</span>
<span id="cb1-165">        env_instance.step(action)</span>
<span id="cb1-166"></span>
<span id="cb1-167">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mean rewards AFTER the episode:</span></span>
<span id="cb1-168">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> env_instance.possible_agents:</span>
<span id="cb1-169">        mean_rewards[agent] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> env_instance.rewards[agent]</span>
<span id="cb1-170"></span>
<span id="cb1-171"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> env_instance.possible_agents:</span>
<span id="cb1-172">    mean_rewards[agent] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> num_episodes</span>
<span id="cb1-173"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean rewards over </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_episodes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> episodes:"</span>)</span>
<span id="cb1-174"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sender: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_rewards[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sender'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-175"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Receiver: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_rewards[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'receiver'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Starting episode 1, New State: 0
Starting episode 2, New State: 0
Starting episode 3, New State: 0
Starting episode 4, New State: 2
Starting episode 5, New State: 0
Starting episode 6, New State: 0
Starting episode 7, New State: 1
Starting episode 8, New State: 1
Starting episode 9, New State: 2
Starting episode 10, New State: 1
Mean rewards over 10 episodes:
Sender: 0.7
Receiver: 0.7</code></pre>
</div>
</div>
<p>The above is a basic version of the Lewis Signaling Game implemented in PettingZoo. The game consists of a sender and one or more receivers.</p>
<p>What would be nice is to:</p>
<ol type="1">
<li><p>have agents that learn via various algorithms</p>
<ol type="1">
<li>Herrnstein <img src="https://latex.codecogs.com/png.latex?%0A%5Cpi(a)%20%5Cleftarrow%20%5Cfrac%7B%5Cpi(a)%7D%7B%5Cpi(a)+%5Cpi(%5Cbar%7Ba%7D)%7D=%5Cfrac%7BR(a)%7D%7BR(a)+R(%5Cbar%7Ba%7D)%7D%0A"> Note: Herrnstein considered just two possible actions.</li>
<li>Roth–Erev reinforcement (Has a Goldilocks property) similar a softmax policy with a linear preference. <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Ah'(a)%20&amp;%20%5Cleftarrow%20%5Calpha%20h(a)%20+%20%5Cmathbb%7B1%7D_%7Ba%5C%20taken%7D%20r%20%5C%5C%0A%5Cpi(a)%20&amp;%20%5Cleftarrow%20%5Cfrac%7Be%5E%7Bh(a)/%5Ctau%7D%7D%7B%5Csum_%7Ba'%7D%20e%5E%7Bh(a')/%5Ctau%7D%7D%0A%5Cend%7Balign%7D%0A"> note: I re-interpreted A the update attraction <img src="https://latex.codecogs.com/png.latex?A"> as the preference <img src="https://latex.codecogs.com/png.latex?h">, and <img src="https://latex.codecogs.com/png.latex?%5Cpsi"> the forgetting/recency parameter as <img src="https://latex.codecogs.com/png.latex?%5Calpha"> a learning rate as they are used as what goes into a Softmax which is parameterized by a preference in policy gradient methods.</li>
<li>ARP - Adaptive Reinforcement Pursuit by Yoella Bereby-Meyer and Ido Erev <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Ah'(a)%20&amp;%20%5Cleftarrow%20%5Calpha%20h(a)%20+%20%5Cmathbb%7B1%7D_%7Ba%5C%20taken%7D%20r%20%5C%5C%0A%5Cpi(a)%20&amp;%20%5Cleftarrow%20%5Cfrac%7Be%5E%7B%5Cbeta%20h(a)/%5Ctau%7D%7D%7B%5Csum_%7Ba'%7D%20e%5E%7B%5Cbeta%20h(a')/%5Ctau%7D%7D%0A%5Cend%7Balign%7D%20%20%20%20%0A"> Note here we add <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> which can be the average reward or regret.</li>
<li>Bush–Mosteller Reinforcement similar to policy gradient with linear reward function :</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi'(a)%20%5Cleftarrow%20%5Cpi(a)%20+%20%5Calpha%5B%5Cmathbb%7B1%7D_%7Ba%5C%20taken%7D%20R%20-%20%5Cpi(a)%5D%20%20%0A"></p>
<ol start="3" type="1">
<li>Bochman fastest coordination</li>
<li>Bochman belief based coordination</li>
<li>Bochman adaptive huffman coding coordination</li>
<li>Bochman adaptive arithmetic coding coordination<br>
</li>
<li>Tabular Monte Carlo RL</li>
<li>Policy Gradient or Gradient Bandit</li>
</ol></li>
<li><p>expected return metrics for the signaling system</p></li>
<li><p>entropy metrics for the signaling system</p></li>
<li><p>topographic similarity metrics for the signaling system</p></li>
<li><p>positional disentanglement metrics for the signaling system</p></li>
<li><p>bag-of-symbols disentanglement metrics for the signaling system</p></li>
<li><p>learning rate per cycle</p></li>
<li><p>learning rather per state space size</p></li>
<li><p>state space generators + distribution for states.</p>
<ol type="1">
<li>simple -</li>
<li>structured - group action for feature morphology</li>
<li>structured and simple (generate atomic states, then combinations)</li>
<li>trees - atoms and trees of atoms based on a one rule grammar.</li>
<li>problem space - states and actions from an MDP.<br>
</li>
</ol></li>
<li><p>have multiple recievers that share information to speed up learning</p></li>
<li><p>support for injecting errors in communication</p></li>
<li><p>support for injecting risks into communication</p></li>
<li><p>suport for different signal aggregation functions.</p>
<ol type="1">
<li>bad of symbols</li>
<li>sequence of symbols</li>
<li>symbol parse trees ??</li>
<li>DAGs ????</li>
<li>custom - user defined</li>
</ol></li>
</ol>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2025,
  author = {Bochman, Oren},
  title = {Lewis {Signaling} {Game} for {PettingZoo}},
  date = {2025-01-01},
  url = {https://orenbochman.github.io/posts/2024/2024-10-10-lewis-petting-zoo/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2025" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2025. <span>“Lewis Signaling Game for PettingZoo.”</span>
January 1, 2025. <a href="https://orenbochman.github.io/posts/2024/2024-10-10-lewis-petting-zoo/">https://orenbochman.github.io/posts/2024/2024-10-10-lewis-petting-zoo/</a>.
</div></div></section></div> ]]></description>
  <category>review</category>
  <category>compositionality</category>
  <category>neural networks</category>
  <category>signaling systems</category>
  <category>language evolution</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-10-10-lewis-petting-zoo/</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-10-10-lewis-petting-zoo/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Villeny pure and simple</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/</link>
  <description><![CDATA[ 







<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="poster.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="poster"><img src="https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/poster.jpg" class="img-fluid figure-img" alt="poster"></a></p>
<figcaption>poster</figcaption>
</figure>
</div></div><p>So much has been written about capone, and gangster movies here is a little note on character building in Noir. Noir characters were often minmal stereotypes, but some writers were able to create memorable characters, and some actors were able to bring them to life in a rather convincing way. This is one such case where despite rather limited screen time, the character of Capone is brought to life in a rather convincing way. So Today I would like to consider the economic portrayal of “Scarface Al Capone” in the 1967 Noir classic, <a href="The St. Valentine's Day Massacre (film)">The valentine’s day massacre</a> about the infamous 1929 <a href="https://en.wikipedia.org/wiki/Saint_Valentine%27s_Day_Massacre">gangland hit</a>.</p>
<section id="noir-genre-and-its-constraints" class="level2">
<h2 class="anchored" data-anchor-id="noir-genre-and-its-constraints">Noir genre and its Constraints</h2>
<p>The noir genre was often severely restricted by the production code, which was a set of rules that the studios had to follow to avoid censorship. This meant that the bad guys had to be punished, and the good guys had to win. This was a problem for the noir genre, which was all about the bad guys. The solution was to make the bad guys really bad, so that the audience would be happy to see them punished. This is why the villains in noir movies are often so much more evil than the villains in other genres. Noir also faced significant monetary constraints, which meant that the movies had to be made on a tight budget. The solution was to make the movies as cheaply as possible, which meant that the movies had to be set in a few locations, with a small cast of characters. Many times they used up and coming or B stars, but the writers created roles that were not just stereotypes but vehicles for the leading men and ladies to highlight thier skill. But the upshot of this was that while a few these movies were awful as the genre progressed a surprisingly large number of noir movies were made stronger due to the many artistic constraints. Many employed some really good story telling, because there was no money to cover up any mistakes. To work well the noir genre is so tightly plotted, with every scene and every line of dialogue serving a purpose. The valentine’s day massacre is no exception, it is a tightly plotted movie, with every scene and every line of dialogue serving a purpose.</p>
<p>After the noir era ended in the late fifties we started to see neo-noir movies. These movies were often by a new generation of producers that has better budgets, talent and fewer restrictions but the best of these movies still follow the economies and kept pushing the tight plotting, dialogue and many of conventions of the noir era and relaxing them when ever the movie needed a more optimistic contrast. Familiar examples include China town (1974), Blade runner (1982), The Usual suspects (1995), L.A. Confidential (1997) Memento (2000). However neo-noir had no problem blending in more light, color and many more subtleties that let these later movies have a much wider appeal and more modern feel.</p>
</section>
<section id="destiny-in-the-valentines-day-massacre" class="level2">
<h2 class="anchored" data-anchor-id="destiny-in-the-valentines-day-massacre">Destiny in the Valentine’s Day Massacre</h2>
<p>In the Saint valentines Day massacre, all the cast are villains, pure and simple. There are no innocent standers. Some may not be gangsters, but we get to see that they are not innocent. This is a strange world, the gangsters own the police, the judges, the politicians, the press. And so all sort of people are involved in the gangster’s world but we are told one way or another how they are not innocent. This is a key theme and framing device in the movie which sets up this point of view the pre-nmovie credits which tells us the names are real and the events are real. And this point of view is reinforced by voice over introduction of characters as if their destiny is already written in stone by describing the fashion of thier death which is then contrasted with thier origins. Despite this being clearly a dramatization of the events. This moralization is in stark contrast to the portrayal of Capone in the movie.</p>
</section>
<section id="capones-character-development" class="level2">
<h2 class="anchored" data-anchor-id="capones-character-development">Capone’s character development</h2>
<p>This is a tour de force performance. We are presented with biographies of a number of gangsters. But there are only a couple that have no criminal record. These are the worst right? And Capone is one of these. Capone however is a mob boss so he does not get many chances to get his hands dirty.</p>
<p>We also get to see Scarface Al Capone. This is a tour de force performance. Here are the main scenes that Capone’s character is developed in the movie.</p>
<ol type="1">
<li>Corporate boss Capone:</li>
</ol>
<ul>
<li>This is a scene full of gangsters in smart suits in an imitation of a corporate board room listening to his accountant and lawyer going over the successes of his illegitimate operations.</li>
<li>Capone is busy with his own agenda - getting into the oppositions’ territory, eliminating the opposition before they can eliminate him.</li>
<li>His men try to tell him that they are tiny compared to his operation.</li>
<li>Capone uses his rage to dominate and terrorize his underlings in this board room. Dispelling any notion that he is a corporate boss.</li>
<li>And the scene cuts into a flashback of the North side gang ten car convoy’s attack on Capone’s hotel showing how his fears are very real.</li>
<li>Capone then goes on to show his ruthlessness by ordering the hit on the North side gang.</li>
<li>Has this become a blue print for the modern corporate boss?</li>
<li>The next scene vindicates Capone as the head of the North side gang is shown to be busy plotting against Capone.</li>
</ul>
<ol start="2" type="1">
<li><p>Next we see Capone meeting with the head of the Sicilian Mafia in Chicago. Capone treats the man with respect. He seems to be asking permission to kill Moran bau when the boos asks for a negotiation he retorts “I am not asking, … I am telling you”. Capone dominates the scene and the Mafia boss quickly agrees to Capone’s terms. Capone then warns the Mafia boss that he is in danger too. But this warning is not heeded. The Mafia boss is later killed by the North side, betrayed by the man who Capone warned him about. This is a rather weak scene, but it shows that Capone goes through the motions to pay respects the hierarchy of the Mafia, even if he is not shy to use his power to dominate them</p></li>
<li><p>Celebrity millionaire capone:</p></li>
</ol>
<ul>
<li>At his mansion, he is a celebrity, he is a millionaire, and he gives interviews to the press. This Capone is smooth, charming, and most importantly charismatic. He is managing his image and is at ease in this scene.</li>
<li>Later in the same mansion, we see Capone stepping out of his pool, he is taking care of his health but he looks around wearily, and we see that now he is surrounded by bodyguards, no family, no friends, no one to trust.</li>
</ul>
<ol start="4" type="1">
<li><p>Capone and His Baseball bat:</p></li>
<li><p>Capone the avenging angel on the train</p></li>
</ol>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Villeny Pure and Simple},
  date = {2024-12-12},
  url = {https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Villeny Pure and Simple.”</span> December
12, 2024. <a href="https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/">https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/</a>.
</div></div></section></div> ]]></description>
  <category>screenwriting</category>
  <category>patterns</category>
  <category>noir</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/</guid>
  <pubDate>Thu, 12 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-12-12-the-valentines-day-massacre/poster.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Misbehavior of Markets and Scaling in financial prices 1-4</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/</link>
  <description><![CDATA[ 







<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./cover.webp" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="The Multifractal Landscape"><img src="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" class="img-fluid figure-img" data-float="left" width="400" alt="The Multifractal Landscape"></a></p>
<figcaption>The Multifractal Landscape</figcaption>
</figure>
</div><div id="ref-mandelbrot2010mis" class="csl-entry">
Mandelbrot, B. B., and R. L. Hudson. 2010. <em>The (Mis)behaviour of Markets: A Fractal View of Risk, Ruin and Reward</em>. Profile. <a href="https://books.google.co.il/books?id=zg91TAIs6bgC">https://books.google.co.il/books?id=zg91TAIs6bgC</a>.
</div></div><p>One of the most popular books for quants is “The (Mis)behaviour of Markets” <span class="citation" data-cites="mandelbrot2010mis">(Mandelbrot and Hudson 2010)</span>. This is more a popular science book than a technical tome with relatively less math and some fascinating figures. The book was his last book published in 2004 and is based on lots of research. As far as I can tell the most pertinent was a paper titled Scaling in financial markets that came out in four parts just three years before the book in 2001. The papers are:</p>
<ol type="1">
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part1/index.html">Scaling in financial prices: I. Tails and dependence</a></li>
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part2/index.html">Scaling in financial prices: II. Multifractals and the star equation</a></li>
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part3/index.html">Scaling in financial prices: III. Cartoon Brownian motions in multifractal time</a></li>
<li><a href="../../../posts/2024/2024-11-28-misbahaviour-of-markets/part4/index.html">Scaling in financial prices: VI. Multifractal concentration</a></li>
<li><a href="part5/index.qmd">The (Mis)behaviour of Markets</a></li>
</ol>
<p>These are very interesting papers but like much of Mandelbrot’s work they are not easy to read. Mandelbrot was a maverick polymath whose work jumps from physicist to finance. The unifying themes are often his own innovations in fractal geometry. Mandelbrot tends to quote liberally from his earlier papers while ignoring the literature by his contemporaries. This not only annoyed many of his contemporaries, but makes these papers harder to follow. It basically Mandelbrot sets all the way down…. This is exacerbated by the fact that the papers are not easy to find and are behind paywalls or that the papers frequently avoid spelling out the models in detail like they are written for readers who are already familiar with the material.</p>
<p>I have read them and will try to summarize them in a way that is more accessible. I will also try to provide some context and background to the papers and provide a few lighthearted podcasts that discuss the papers and the book.</p>
<p>Also I was interested in reproducing some of the work from the book but instead I think I can make use of some code released by others. That came out in the last few year since I read the book. The point is that these ideas can be applied to time series modeling.</p>
<p>So what are multifractals? Although multifractals are rooted in probability, much of the related literature comes from the physics and mathematics arena. Here is one definition:</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>A multifractal system is a generalization of a fractal system in which a single exponent (the fractal dimension) is not enough to describe its dynamics; instead, a continuous spectrum of exponents (the so-called singularity spectrum) is needed. — <span class="citation" data-cites="harte2001multifractals">(Harte 2001)</span></p>
</blockquote><div class="no-row-height column-margin column-container"><div id="ref-harte2001multifractals" class="csl-entry">
Harte, D. 2001. <em>Multifractals: Theory and Applications</em>. CRC Press. <a href="https://www.routledge.com/Multifractals-Theory-and-Applications/Harte/p/book/9780367455200">https://www.routledge.com/Multifractals-Theory-and-Applications/Harte/p/book/9780367455200</a>.
</div></div></div>
<section id="the-development-of-the-multifractal-model-for-financial-prices" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-development-of-the-multifractal-model-for-financial-prices">The development of the multifractal model for financial prices</h2>
<div class="column-screen-right">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">timeline
    title The Multifractal Model Timeline
    1853: Augustin-Louis Cauchy introduces the base-free star equation
    1896: Vilfredo Pareto observes and analyzes power-law distributions in income &amp; wealth
    1900: Louis Bachelier proposes the first model of price variation using Brownian motion, essentially a "coin-tossing" model.
    1925: Paul Lévy expands upon Cauchy's work by providing a comprehensive solution to the star equation, including asymmetric distributions
    1960s: Benoit B. Mandelbrot challenges the adequacy of the Brownian motion model.
    1962: Benoit Mandelbrot early work on cotton prices
    1963: Eugene F. Fama publishes papers analyzing stock price variations
        : Mandelbrot's "M 1963" uses Lévy stable processes to handle long-tailed distributions in price changes.
    1965: Mandelbrot's "M 1965" model used fractional Brownian motions to handle long-range dependence in price fluctuations.
    1967: Mandelbrot and Taylor pioneer the concept of subordination in finance.
    1972: Mandelbrot's limit log-normal multifractals
    1974: Mandelbrot's multifractal star equation, 
    1997: Mandelbrot's "M1972/97 model," AKA BMMT &lt;br&gt; combines fractional Brownian motion &amp; multifractal time &lt;br&gt; captures both long-tailed distributions &amp; long-range dependence in financial price variations.
    2000: Jean Barral and Mandelbrot introduce Multifractal Products of Cylindrical Pulses (MPCP).
    2001: Mandelbrot's "cartoon" representations of BMMT &lt;br&gt; a simple recursive constructions to illustrate its key features. It places BMMT within the context of earlier models.

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</section>
<section id="cast-of-characters" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cast-of-characters">Cast of Characters:</h2>
<p>Multifractal models in financial markets were developed by a diverse cast of characters. Their research challenged conventional wisdom and revolutionized the way we understand the complex dynamics of asset price movements.</p>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/d/d1/Augustin_Louis_Cauchy_Litho_%28cropped%29.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Augustin-Louis Cauchy"><img src="https://upload.wikimedia.org/wikipedia/commons/d/d1/Augustin_Louis_Cauchy_Litho_%28cropped%29.jpg" class="img-fluid figure-img" width="400" alt="Augustin-Louis Cauchy"></a></p>
<figcaption>Augustin-Louis Cauchy</figcaption>
</figure>
</div></div><p>Augustin-Louis Cauchy (1789-1857): A French mathematician known for his significant contributions to analysis, number theory, and mathematical physics. In 1853, he introduced a functional equation (later termed the “star equation”) that implicitly linked scaling behavior to power-law distributions, paving the way for later advancements in multifractal modeling.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/a/a8/Paul_Pierre_Levy_1886-1971.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Paul Lévy"><img src="https://upload.wikimedia.org/wikipedia/commons/a/a8/Paul_Pierre_Levy_1886-1971.jpg" class="img-fluid figure-img" width="400" alt="Paul Lévy"></a></p>
<figcaption>Paul Lévy</figcaption>
</figure>
</div><div id="ref-lévy1925calcul" class="csl-entry">
Lévy, P. 1925. <em>Calcul Des Probabilit<span>é</span>s</em>. PCMI Collection. Gauthier-Villars. <a href="https://books.google.co.il/books?id=8_FLAAAAMAAJ">https://books.google.co.il/books?id=8_FLAAAAMAAJ</a>.
</div></div><p>Paul Lévy (1886-1971): A prominent French mathematician specializing in probability theory. In <span class="citation" data-cites="lévy1925calcul">(Lévy 1925)</span> he builds upon Cauchy’s work. Lévy provided a comprehensive solution to the star equation, including asymmetric distributions. He formalized the concept of stable distributions, which are essential in modeling financial prices and other phenomena exhibiting heavy tails.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/f/fd/Vilfredo_Pareto_1870s2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Vilfredo Pareto"><img src="https://upload.wikimedia.org/wikipedia/commons/f/fd/Vilfredo_Pareto_1870s2.jpg" class="img-fluid figure-img" width="400" alt="Vilfredo Pareto"></a></p>
<figcaption>Vilfredo Pareto</figcaption>
</figure>
</div><div id="ref-pareto1896cours" class="csl-entry">
Pareto, V. 1896. <em>Cours d’economie Politique Professe a l’universite de Lausanne</em>. v. 1. F. Rouge. <a href="https://books.google.co.il/books?id=KjnhnQAACAAJ">https://books.google.co.il/books?id=KjnhnQAACAAJ</a>.
</div></div><p>Vilfredo Pareto (1848-1923): An Italian engineer, sociologist, economist, and philosopher renowned for his observations on income distribution and his contributions to the development of microeconomics, see <span class="citation" data-cites="pareto1896cours">(Pareto 1896)</span>. He identified the Pareto distribution, a power-law function that accurately described the unequal distribution of wealth in society.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/e/e9/Benoit_Mandelbrot_mg_1804-d.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Benoit B. Mandelbrot"><img src="https://upload.wikimedia.org/wikipedia/commons/e/e9/Benoit_Mandelbrot_mg_1804-d.jpg" class="img-fluid figure-img" width="400" alt="Benoit B. Mandelbrot"></a></p>
<figcaption>Benoit B. Mandelbrot</figcaption>
</figure>
</div></div><p>Benoit B. Mandelbrot (1924-2010): A Polish-born French-American mathematician recognized as the father of fractal geometry. He revolutionized the understanding of financial markets by introducing fractal and multifractal models to capture their complex, non-Gaussian behavior. His work challenged the traditional reliance on Brownian motion and provided a new framework for risk assessment and portfolio management.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/b/b0/DIMG_7519_%2811253479133%29.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Eugene F. Fama"><img src="https://upload.wikimedia.org/wikipedia/commons/b/b0/DIMG_7519_%2811253479133%29.jpg" class="img-fluid figure-img" width="400" alt="Eugene F. Fama"></a></p>
<figcaption>Eugene F. Fama</figcaption>
</figure>
</div></div><p>Eugene F. Fama (1939-present): An American economist known for his empirical analysis of asset prices and his contributions to the efficient-market hypothesis. His research on stock price variations, including his test of Mandelbrot’s stable Paretian hypothesis, ignited discussions on the appropriate statistical models for financial markets.</p>
<hr>

<div class="no-row-height column-margin column-container"><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/f/fd/Laurent_E._Calvet.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Laurent Calvet"><img src="https://upload.wikimedia.org/wikipedia/commons/f/fd/Laurent_E._Calvet.jpg" class="img-fluid figure-img" width="400" alt="Laurent Calvet"></a></p>
<figcaption>Laurent Calvet</figcaption>
</figure>
</div></div><p>Laurent Calvet: An economist who, along with Adlai Fisher, collaborated with Mandelbrot in the late 1990s to further develop and apply the multifractal model to financial data. Their work provided crucial empirical evidence and expanded the theoretical understanding of multifractal time subordination in financial markets.</p>
<hr>
<p>Adlai Fisher: An economist who partnered with Laurent Calvet and Benoit Mandelbrot to advance the application of multifractal models to financial data analysis. Their joint research focused on empirically validating the model and exploring its implications for risk management.</p>
<hr>
<p>Jean Barral: A French mathematician who collaborated with Mandelbrot in the late 1990s and early 2000s to develop the Multifractal Products of Cylindrical Pulses (MPCP). Their work generalized the multifractal framework by moving beyond b-adic cascades and introduced a more flexible model capable of capturing complex multiscaling behavior.</p>
<hr>
<p>Peter Clark: Author of a 1973 paper that explored a specific type of “subordinated” process for modeling price variation. Mandelbrot critiqued this work for its reliance on independent increments, which failed to capture the observed dependence in price data.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Misbehavior of {Markets} and {Scaling} in Financial Prices
    1-4},
  date = {2024-12-02},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Misbehavior of Markets and Scaling in
Financial Prices 1-4.”</span> December 2, 2024. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <category>Popular Science</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/</guid>
  <pubDate>Mon, 02 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Scaling in financial prices 4</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/</link>
  <description><![CDATA[ 






<section id="scaling-in-financial-prices-iv.-multifractal-concentration" class="level1 page-columns page-full">
<h1>Scaling in financial prices: IV. Multifractal concentration</h1>
<blockquote class="blockquote">
<p>“In the Brownian model, such a high level of concentration has a probability so minute that it should never happen. Unfortunately for the model, it happens every decade.”</p>
</blockquote>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: III. IV. Multifractal concentration” <span class="citation" data-cites="mandelbrot2001Scaling4">(Mandelbrot 2001)</span> Mandelbrot explores the concept of concentration in financial price variations, moving beyond the limitations of traditional Brownian motion models.</p>
<p>It introduces and contrasts three states of concentration: absent (as in Brownian motion), hard (as in the author’s earlier mesofractal model), and soft (the novel multifractal model).</p>
<p>Mandelbrot argues that the multifractal model, characterized by a tunable exponent D, offers a more realistic representation of financial data by capturing a “soft” concentration where a small proportion of days accounts for a significant portion of overall variance, unlike the unrealistic extremes of the other models. The paper uses mathematical analysis, simulations, and visual representations to illustrate the properties of multifractal concentration and its advantages over existing models. It highlights the importance of understanding concentration for accurately modeling and predicting financial market behavior.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling4" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: IV. Multifractal Concentration.”</span> <em>Quantitative Finance</em> 1 (6): 641–49. <a href="https://doi.org/10.1088/1469-7688/1/6/306">https://doi.org/10.1088/1469-7688/1/6/306</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><blockquote class="blockquote">
<p>“The multifractals provide a new ‘in-between’ scenario that is intermediate between the familiar scenarios exemplified above.” “Soft concentration can be ‘tuned’ to fall anywhere between the unacceptable extremes of absent or hard concentration.”</p>
</blockquote>
<section id="summary-of-the-third-paper" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-third-paper">Summary of the third paper</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<p>– <strong>Critique of the Brownian Model in Finance</strong>: The Brownian model, with its assumption of independent and normally distributed price changes, fails to account for the observed concentration of price variation in real financial markets. This model predicts “absent concentration”, where each day’s contribution to overall price change is negligible. - <strong>Introduction of Multifractal Concentration</strong>: Mandelbrot proposes an alternative model, the “multifractal model”, which incorporates long-range dependence and non-Gaussian distributions. This model predicts a “soft” form of concentration, where a significant portion of price variation is concentrated in a relatively small number of days, characterized by the fractal dimension D. - <strong>Comparison with Mesofractal Model</strong>: The earlier “mesofractal model” proposed by Mandelbrot in 1963 also addressed concentration but predicted a more extreme “hard” concentration, where a single day could account for a substantial portion of price change. This is deemed unrealistic in the long run.</p>
<blockquote class="blockquote">
<p>“Multifractal concentration consists in the fact that D &lt; 1.” “The multifractal model introduces a very different and new form of concentration that will be called ‘soft’, ‘relative’ or ‘multifractal’.”</p>
</blockquote>
</section>
<section id="most-important-ideasfacts" class="level3">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><strong>Empirical Evidence of Concentration</strong>: Mandelbrot highlights real-world examples demonstrating concentrated price variation. For instance, “Of the portfolio’s positive returns over the 1980s, fully 40% was earned during ten days, about 0.5% of the number of trading days in a decade.” Such extreme concentration is highly improbable under the Brownian model.</li>
<li><strong>Three States of Concentration</strong>: The paper distinguishes between “absent”, “hard”, and “soft” concentration. The Brownian model exemplifies absent concentration, the mesofractal model hard concentration, and the multifractal model soft concentration. Fractal Dimension D: The exponent D in the multifractal model quantifies the degree of concentration. As D increases from 0 to 1, concentration softens, approaching the Brownian case (D = 1) where concentration is absent.</li>
<li><strong>Role of Global Dependence</strong>: The multifractal model’s soft concentration stems from the strong long-range dependence in price changes, invalidating the standard theory of extreme values applicable to independent variables.</li>
<li><strong>Multifractal Trading Time</strong>: The multifractal model can be visualized as Brownian motion occurring in a “multifractal trading time”, where time intervals are stretched or compressed in a fractal manner, leading to periods of high and low volatility.</li>
<li><strong>Application of Variance</strong>: While variance is not an ideal measure of volatility in fractal models, the paper justifies its use for analyzing concentration due to its link with Brownian motion and ease of calculation.</li>
</ol>
</section>
<section id="limitations-of-cartoon-models" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-cartoon-models">Limitations of Cartoon Models:</h3>
<ul>
<li><strong>Inability to fully predict power-law tails</strong>: The cartoons, being based on multinomial cascades, struggle to accurately represent the long-tailed distributions observed in real financial data.</li>
<li><strong>Coupling of H and multifractal time</strong>: Unlike their continuous-time counterparts, the cartoon models impose a dependence between the Hölder exponent (H) and the multifractal time.</li>
<li><strong>Singular perturbation in mesofractal cartoons</strong>: The specific construction of the mesofractal cartoons introduces an undesirable singular perturbation, highlighting a limitation of the three-interval symmetric generators.</li>
</ul>
</section>
<section id="conclusions" class="level3">
<h3 class="anchored" data-anchor-id="conclusions">Conclusions</h3>
<p>Mandelbrot argues that the multifractal model, with its concept of soft concentration, provides a more realistic framework for understanding the complex dynamics of financial markets compared to the traditional Brownian model. The fractal dimension D offers a tunable parameter to capture varying degrees of concentration observed in different markets or time scales. The paper sets the stage for further exploration of multifractal concentration and its implications for risk management, portfolio optimization, and other financial applications.</p>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What is “concentration” in the context of financial price changes?</p>
<p>Concentration refers to the phenomenon where a significant proportion of the overall price change over a given period is attributed to a relatively small number of trading days. In other words, a few large price movements contribute disproportionately to the total variation.</p></li>
<li><p>How does concentration differ in the Brownian model, the mesofractal model, and the multifractal model?</p>
<ul>
<li>Brownian model: This model predicts “absent” concentration, meaning each day’s contribution to the overall price change is negligible.</li>
<li>Mesofractal model: This model exhibits “hard” concentration, where a few of the largest daily price changes account for a significant portion of the total change, regardless of the total number of trading days.</li>
<li>Multifractal model: This model proposes “soft” concentration. While individual large price changes are asymptotically negligible, a substantial proportion of the total change is concentrated in a number of days of the order of ND, where N is the total number of days and D is a fractal dimension (0 &lt; D &lt; 1).</li>
</ul></li>
<li><p>What causes concentration in these models?</p>
<ul>
<li>Brownian Model: No concentration exists because price changes are assumed to be IID - independent and identically distributed.</li>
<li>Mesofractal Model: Concentration arises from the heavy tails of the Lévy stable distributions used to model price changes. These heavy tails allow for a higher probability of extreme events.</li>
<li>Multifractal Model: Concentration stems from long-range dependence in the data. While individual large price changes are negligible, the clustering of smaller yet significant changes within specific periods contributes to the overall concentration.</li>
</ul></li>
<li><p>Why is the study of concentration important for understanding financial markets?</p>
<p>Concentration challenges the traditional assumption that daily price changes are negligible and highlights the importance of extreme events in shaping market dynamics. Understanding concentration helps in:</p>
<ul>
<li>Risk management: Accurately assessing the probability and impact of large price swings is crucial for managing risk in financial portfolios.</li>
<li>Volatility modeling: Traditional volatility measures based on variance might not adequately capture the risk associated with concentrated price changes.</li>
<li>Developing more realistic market models: Incorporating concentration into financial models leads to a more accurate representation of market behavior and better predictions.</li>
</ul></li>
<li><p>What is “multifractal trading time”?</p>
<p>Multifractal trading time is a concept used in the multifractal model to describe the non-linear relationship between clock time and the rate at which information flows and impacts price changes. It suggests that markets experience periods of intense activity (high information flow) interspersed with periods of relative calm, leading to an uneven distribution of price volatility over time.</p></li>
<li><p>How does the fractal dimension D affect the level of concentration in the multifractal model?</p>
<p>The fractal dimension D is a measure of the irregularity and clustering of price volatility in the multifractal model. A lower value of D indicates stronger concentration, meaning a larger proportion of the total price change is concentrated in a smaller fraction of trading days. Conversely, a higher D implies weaker concentration, closer to the Brownian model’s uniform distribution of volatility.</p></li>
<li><p>What are the limitations of using variance as a measure of volatility in the context of multifractal concentration?</p>
<p>Variance, which relies on the assumption of asymptotic negligibility of individual price changes, might not be an appropriate measure of volatility when dealing with multifractal concentration. This is because it can underestimate the risk associated with the clustering of significant price movements within specific periods. Alternative measures that account for the long-range dependence and heavy tails of the data might be needed.</p></li>
<li><p>What are the implications of multifractal concentration for practical applications in finance?</p>
<p>Multifractal concentration has significant implications for:</p>
<ul>
<li>Portfolio optimization: Diversification strategies might need to be adjusted to consider the potential impact of concentrated price changes on portfolio performance.</li>
<li>Option pricing: Models need to incorporate the non-uniform distribution of volatility over time to accurately price options.</li>
<li>Algorithmic trading: Trading algorithms should be designed to adapt to periods of high and low volatility clustering to avoid excessive losses or missed opportunities.</li>
</ul></li>
</ol>
</section>
<section id="a-study-guide" class="level2">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the fundamental difference in how the Brownian model and the mesofractal model view the contribution of daily price changes to overall variance?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The Brownian model posits that each daily price change contributes negligibly to the overall variance, leading to “absent” concentration. Conversely, the mesofractal model proposes that a small number of large price changes contribute significantly to the variance, resulting in “hard” concentration.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe “hard” concentration in the context of financial price changes.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Hard” concentration refers to the phenomenon where a significant proportion of the overall variance in financial price changes is attributed to a very small and fixed number of large price movements, regardless of the total number of days considered.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why is the traditional concept of an “outlier” potentially problematic when analyzing financial data?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The concept of an “outlier” implies that extreme events are extraneous to the system being studied. In finance, however, large price changes may be intrinsic to market dynamics and carry essential information, thus dismissing them as outliers could lead to an incomplete understanding of price behavior.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<p>What key characteristic distinguishes “soft” concentration from “hard” concentration?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Soft” concentration, unlike “hard” concentration, asserts that while the largest individual price changes might be negligible, a substantial portion of the overall variance can be attributed to a proportionally smaller number of days as the total number of days increases.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the role of the fractal dimension, D, in the concept of “soft” concentration.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The fractal dimension, D, in “soft” concentration, quantifies the rate at which the number of days contributing significantly to the variance increases with the total number of days (N). A D value between 0 and 1 indicates that the number of significant days increases as ND, allowing for a flexible range of concentration levels.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>How does the multifractal model challenge the standard theory of extreme values in probability theory?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The multifractal model, due to the strong dependence among price changes, invalidates the standard theory of extreme values, which assumes independence. A different theoretical framework, stemming from multifractal measures, is required to analyze extremes in this context.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is “trading time” in the context of the multifractal model?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Trading time” (θ(t)) in the multifractal model is a non-linear transformation of clock time (t). It represents a distorted time scale where the frequency of large price changes is amplified, leading to the observed bursts of volatility.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>Briefly describe the construction of the Bernoulli binomial measure, highlighting its key parameter.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The Bernoulli binomial measure is constructed recursively by dividing an interval into halves and assigning masses (m0 and m1 = 1-m0) to each half. This process is repeated for each subsequent half, resulting in a highly uneven distribution of mass across the interval. The key parameter, m0, determines the degree of this unevenness.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the significance of the coarse Hölder exponent, α(t), in understanding multifractal measures?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><strong>The coarse Hölder exponent, α(t), quantifies the local scaling behavior of a multifractal measure at a point t. It provides a measure of the singularity or concentration of the measure around that point. </strong></p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the relationship between the function f(α) and the concept of box dimension in fractal geometry.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The function f(α) maps the coarse Hölder exponent (α) to its corresponding fractal dimension. This function characterizes the multifractal spectrum, revealing the range of scaling exponents and their associated dimensions within the measure. The maximum value of f(α) typically represents the box dimension of the support of the measure, i.e., the set where the measure is concentrated.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li>Compare and contrast “absent,” “hard,” and “soft” concentration in the context of financial price changes. Discuss the strengths and weaknesses of each model in capturing the empirical realities of market fluctuations.</li>
<li>Explain how the concept of “trading time” helps the multifractal model capture the clustering and bursts of volatility observed in financial markets. Discuss the implications of this concept for risk management and portfolio allocation strategies.</li>
<li>Critically evaluate the use of variance as a measure of volatility in financial markets. Discuss how the insights from the multifractal model challenge the traditional reliance on variance and suggest alternative measures that might be more appropriate.</li>
<li>Discuss the conceptual shift from viewing extreme price movements as “outliers” to recognizing them as integral parts of market dynamics. How does the multifractal model facilitate this shift, and what are its implications for our understanding of financial risk?</li>
<li>Explain how the Bernoulli binomial measure serves as a simple yet powerful model for understanding the key features of multifractality. Discuss its limitations and potential extensions to more complex and realistic scenarios.</li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<dl>
<dt>Brownian Model</dt>
<dd>
A model of financial prices that assumes price changes are independent and identically distributed, following a normal distribution. This model results in “absent” concentration.
</dd>
<dt>Mesofractal Model</dt>
<dd>
A model of financial prices that utilizes Lévy stable distributions, leading to “hard” concentration, where a few large price changes dominate the overall variance.
</dd>
<dt>Multifractal Model</dt>
<dd>
A model of financial prices that incorporates scaling and long-range dependence, resulting in “soft” concentration, where a proportionally smaller number of days contribute significantly to the variance as the total number of days increases.
</dd>
<dt>Hard Concentration</dt>
<dd>
A form of concentration where a fixed and small number of large price changes account for a significant proportion of the overall variance.]
</dd>
<dt>Soft Concentration</dt>
<dd>
A form of concentration where the number of days contributing significantly to the variance increases as a power law of the total number of days, with the exponent being a fractal dimension between 0 and 1.
</dd>
<dt>Fractal Dimension (D)</dt>
<dd>
An exponent that characterizes the scaling behavior of a fractal object or process. In the context of multifractal concentration, it quantifies the rate at which the number of significant days increases with the total number of days.
</dd>
<dt>Trading Time (θ(t))</dt>
<dd>
A non-linear transformation of clock time used in the multifractal model to account for the clustering and bursts of volatility observed in financial markets.
</dd>
<dt>Coarse Hölder Exponent (α(t))</dt>
<dd>
A measure of the local scaling behavior of a multifractal measure at a point t, indicating the singularity or concentration of the measure around that point.
</dd>
<dt>f(α)</dt>
<dd>
A function that maps the coarse Hölder exponent to its corresponding fractal dimension, characterizing the multifractal spectrum of the measure.
</dd>
<dt>Box Dimension</dt>
<dd>
A type of fractal dimension that quantifies the scaling of the number of boxes needed to cover a set as the box size decreases. In the context of multifractals, it often corresponds to the dimension of the support of the measure.
</dd>
<dt>Outlier</dt>
<dd>
An observation that lies an abnormal distance from other values in a random sample. In finance, large price changes are often misclassified as outliers.
</dd>
</dl>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 4},
  date = {2024-12-01},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Scaling in Financial Prices 4.”</span>
December 1, 2024. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part4/</guid>
  <pubDate>Sun, 01 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Scaling in financial prices 3</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/</link>
  <description><![CDATA[ 






<section id="scaling-in-financial-prices-iii.-cartoon-brownian-motions-in-multifractal-time" class="level1 page-columns page-full">
<h1>Scaling in financial prices: III. Cartoon Brownian Motions in Multifractal Time</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: III. Cartoon Brownian Motions in Multifractal Time” <span class="citation" data-cites="mandelbrot2001Scaling3">(Mandelbrot 2001)</span> Mandelbrot continus his exploration of fractal and multifractal geometry to model financial price fluctuations. It introduces “cartoon” functions – simplified, visually illustrative models – to capture key characteristics of financial prices, such as continuously varying volatility, discontinuities, and extreme price changes. These cartoons, parameterized within a “phase diagram,” offer intuitive representations of various existing models, including Mandelbrot’s own earlier work and the standard Brownian motion.</p>
<p>The core concept is Brownian motion in multifractal time (BMMT), a new model that accounts for the observed complexities in financial data better than previous approaches. The paper aims to provide a more accessible understanding of BMMT, emphasizing the limitations and strengths of the cartoon approximations while highlighting the importance of scaling invariance and the concept of trading time in capturing the dynamics of financial markets.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling3" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: III. Cartoon Brownian Motions in Multifractal Time.”</span> <em>Quantitative Finance</em> 1 (4): 427–40. <a href="https://doi.org/10.1080/713665836">https://doi.org/10.1080/713665836</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><section id="summary-of-the-third-paper" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-third-paper">Summary of the third paper</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<ul>
<li><strong>Inadequacy of traditional financial models</strong>: Classic models like the Brownian motion fail to capture the key features of financial price variations, including fluctuating volatility and large, discontinuous jumps.</li>
<li><strong>Fractal and multifractal geometry for financial modeling</strong>: Mandelbrot advocates for using fractal and multifractal models to better represent the complex and volatile nature of financial markets.</li>
<li><strong>Cartoon Brownian Motions in Multifractal Time (BMMT)</strong>: Mandelbrot presents BMMT, a new family of random processes, as a promising model for financial prices. BMMT builds upon the concepts of fractional Brownian motion and introduces the idea of “trading time.”</li>
<li><strong>Recursive interpolation to create cartoons</strong>: The paper focuses on creating simplified, visual representations of BMMT, termed “cartoons,” using recursive interpolation techniques. These cartoons help visualize and understand the complex behaviors of BMMT.</li>
<li><strong>Phase diagram for classifying price behaviors</strong>: A “phase diagram” is introduced to map the diverse behaviors generated by these cartoons based on two key parameters. Different regions in the phase diagram correspond to different types of price variations, including Fickian, unifractal, mesofractal, and multifractal.</li>
</ul>
</section>
<section id="most-important-ideasfacts" class="level3">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><strong>Limitations of standard Brownian motion</strong>: “Financial prices, such as those of securities, commodities, foreign exchange or interest rates, are largely unpredictable but one must evaluate the odds for or against some desired or feared outcomes, the most extreme being ‘ruin’. Those odds are essential to the scientist who seeks to understand the financial markets and other aspects of the economy. They must also be used as inputs for decisions concerning economic policy or institutional arrangements. To handle all those issues, the first step—but far from the last!—is to represent different prices’ variation by random processes that fit them well.” This quote highlights the need for a model that accurately reflects the inherent volatility of financial markets, which the Brownian motion fails to do.</li>
<li><strong>Recursive interpolation for financial modeling</strong>: “In the case of BMMT, the random walk has no direct counterpart. However, splendid cartoons in a very different style were developed and sketched in Mandelbrot (1997), chapter E6, and Mandelbrot (1999a), chapter N1. They are limits of discrete-parameter sequences of successive interpolations drawn on a continually refined temporal grid.” This explains the construction of simplified “cartoon” models using recursive interpolation, offering a visual and conceptual understanding of BMMT.</li>
<li><strong>The importance of the Hölder exponent (H)</strong>: “This replacement of ratios of infinitesimals by ratios of logarithms of infinitesimals is an essential innovation. It was not directed by trial and error. Neither did its early use in classical ‘fine’ mathematical analysis suggest that H and many variants thereof could become concretely meaningful, quite the contrary. H became important because of its intimate connection with certain invariances.” This passage emphasizes the significance of the Hölder exponent in capturing the scaling and self-affinity properties of financial data, which traditional methods like derivatives fail to address.</li>
<li><strong>Distinction between absence of correlation and statistical independence</strong>: “Mathematicians know that whiteness does not express statistical independence, only absence of correlation. But the temptation existed to view that distinction as mathematical nit-picking. The existence of such sharply non-Gaussian white noises proves that the hasty assimilation of spectral whiteness to independence was understandable but untenable. White spectral whiteness is highly significant for Gaussian processes, but otherwise is a weak characterization of reality.” This section debunks the misconception that uncorrelated data implies independence. Multifractal cartoons with uncorrelated increments can still exhibit significant structure and dependence.</li>
<li><strong>Introduction of “trading time” to capture varying market speed</strong>: “Less mathematically oriented observers describe the panels at the bottom of figure 1 (both the real data and forgeries) as corresponding to markets that proceed at different ‘speeds’ at different times. This description may be very attractive but remains purely qualitative until ‘speed’ and the process that controls the variation of speed are quantified.” This introduces the concept of “trading time” as a way to quantify the subjective experience of varying market speed, a key element of the BMMT model.</li>
</ol>
</section>
<section id="limitations-of-cartoon-models" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-cartoon-models">Limitations of Cartoon Models:</h3>
<ul>
<li><strong>Inability to fully predict power-law tails</strong>: The cartoons, being based on multinomial cascades, struggle to accurately represent the long-tailed distributions observed in real financial data.</li>
<li><strong>Coupling of H and multifractal time</strong>: Unlike their continuous-time counterparts, the cartoon models impose a dependence between the Hölder exponent (H) and the multifractal time.</li>
<li><strong>Singular perturbation in mesofractal cartoons</strong>: The specific construction of the mesofractal cartoons introduces an undesirable singular perturbation, highlighting a limitation of the three-interval symmetric generators.</li>
</ul>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What are Cartoon Brownian Motions and why are they used to model financial prices?</p>
<p>Cartoon Brownian Motions (CBMs) are simplified, recursively generated functions designed to mimic the complex behavior of financial prices. They are called “cartoons” because they intentionally emphasize and distort certain features of real market data while remaining computationally simple and easy to visualize. These cartoons offer an intuitive way to understand the more complex model of Brownian Motion in Multifractal Time (BMMT), which is a more accurate but mathematically challenging model.</p></li>
<li><p>What makes financial price data challenging to model, and how do CBMs address those challenges?</p>
<p>Financial price data exhibits several characteristics that defy traditional modeling approaches:</p>
<ul>
<li>Continually varying volatility: The magnitude of price fluctuations changes over time, exhibiting periods of high activity interspersed with periods of relative calm.</li>
<li>Discontinuity or concentration: Prices can jump abruptly, creating sharp spikes in price charts.</li>
<li>Non-normality: Many price changes fall far outside the expectations of the bell curve, signifying fat-tailed distributions.</li>
</ul>
<p>CBMs address these features by using a recursive interpolation scheme. A simple geometric shape, called the “generator,” is used to repeatedly refine a starting trend line, producing increasingly complex patterns that capture the roughness, variability, and discontinuity observed in financial markets.</p></li>
<li><p>What is the “phase diagram” and how does it relate to different types of CBMs?</p>
<p>The “phase diagram” is a two-dimensional map representing the space of possible CBM generators. Each point in this diagram corresponds to a unique generator shape, and different regions of the diagram give rise to distinct classes of CBMs:</p>
<ul>
<li>Fickian: This corresponds to the classic Brownian Motion, where volatility is constant.</li>
<li>Unifractal: These CBMs exhibit long-range dependence or persistence, meaning past price changes influence future ones.</li>
<li>Mesofractal: These CBMs incorporate discontinuous jumps in prices.</li>
<li>Multifractal: This most general class combines features of the previous types, capturing the full complexity of financial price behavior.</li>
</ul></li>
<li><p>What are the key parameters controlling CBM behavior, and how do they manifest in price charts?</p>
<p>CBMs are controlled by two main parameters:</p>
<ul>
<li>H (Hölder exponent): Determines the degree of roughness or smoothness of the price curve. Higher H values indicate smoother trends, while lower values indicate more jagged, volatile behavior.</li>
<li>Generator shape: Dictates the pattern of price fluctuations. Different shapes lead to varying degrees of volatility clustering, jumps, and long-term trends.</li>
</ul></li>
<li><p>What is “trading time” and how does it explain varying volatility in multifractal CBMs?</p>
<p>Trading time is a concept used to explain the non-uniform speed at which multifractal CBMs evolve. It contrasts with the regular “clock time” of physics. Multifractal CBMs move uniformly in their own subjective trading time, which can speed up or slow down relative to clock time. This variation in speed gives rise to the observed periods of high and low volatility in financial markets.</p></li>
<li><p>What are the limitations of using CBMs to model financial prices?</p>
<p>While offering valuable insights, CBMs are simplifications and possess certain limitations:</p>
<ul>
<li>Constrained tail behavior: Unlike real price data, CBMs based on simple generators do not exhibit the extreme power-law tails associated with rare but significant market events.</li>
<li>Interdependence of parameters: In some CBMs, the choice of H and the multifractal trading time are linked, restricting the model’s flexibility compared to continuous-time models.</li>
<li>Singular perturbations: Certain mesofractal CBMs exhibit a peculiar behavior where slight changes in parameters lead to drastic changes in price patterns, which may not accurately reflect real market dynamics.</li>
</ul></li>
<li><p>How do CBMs relate to other fractal models of financial prices?</p>
<p>CBMs serve as stepping stones to understand more complex continuous-time fractal models:</p>
<ul>
<li>Fractional Brownian Motion (FBM): Unifractal CBMs are simplified versions of FBM, which incorporates long-range dependence.</li>
<li>Lévy Stable Processes (LSP): Mesofractal CBMs relate to LSP, which features discontinuous jumps in prices.</li>
<li>Brownian Motion in Multifractal Time (BMMT): This sophisticated model, for which multifractal CBMs are cartoons, combines FBM with a multifractal trading time to capture the full complexity of financial price dynamics.</li>
</ul></li>
<li><p>What are the practical implications of using CBMs in finance?</p>
<p>CBMs, despite their limitations, offer a powerful tool for:</p>
<ul>
<li>Visualizing market complexity: They provide an intuitive way to understand and communicate the irregular and multi-scale nature of financial price behavior.</li>
<li>Testing hypotheses: Their computational simplicity allows for rapid exploration of various market scenarios and model parameter sensitivity.</li>
<li>Developing trading strategies: While not directly predictive, CBMs can inform the design of trading algorithms that are robust to varying volatility and extreme price movements.</li>
</ul></li>
</ol>
</section>
<section id="a-study-guide" class="level2">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of self-affinity and its relevance to financial market charts.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Self-affinity refers to the property of a geometric shape where its parts resemble the whole when scaled differently along different axes. Financial market charts exhibit self-affinity, meaning they appear similar when zoomed in or out, with time and price scales adjusted accordingly.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe the construction process of a Fickian cartoon function using recursive interpolation.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The construction starts with a linear “initiator.” A three-interval “generator” replaces the initiator, creating an oscillation. Each generator interval is then recursively replaced by a scaled and potentially reflected version of the generator, continuing indefinitely.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why is the “square-root rule” relevant in the context of Fickian diffusion and Brownian motion?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The “square-root rule” states that the standard deviation of a sum of independent random variables scales with the square root of their number. In Fickian diffusion and Brownian motion, this rule manifests as the displacement of a particle being proportional to the square root of time.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<p>Define unifractality and explain how it differs from the Fickian case in terms of the Hölder exponent.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Unifractality implies a single Hölder exponent (H) governs the scaling behavior of the function at all scales. While Fickian behavior is a specific case of unifractality with <img src="https://latex.codecogs.com/png.latex?H=1/2">, other values of H within <img src="https://latex.codecogs.com/png.latex?0%3CH%3C1"> lead to different types of unifractal behavior.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>Discuss the concept of persistence in unifractal cartoons and its implications for market behavior.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Persistence describes the tendency of a function to continue its current trend. In unifractal cartoons, H&gt;1/2 signifies positive persistence, implying trends are more likely to continue. H&lt;1/2 indicates anti-persistence, implying frequent trend reversals.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>How do mesofractal cartoons incorporate price discontinuity, and what is the role of the exponent α?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Mesofractal cartoons incorporate discontinuity by assigning a zero Hölder exponent (H2=0) to the middle interval of the generator. The exponent α (1/H̃) governs the distribution of jump sizes, with larger α indicating smaller and more frequent jumps.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the limitations of the Lévy stable exponent α exceeding 2.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>When α&gt;2 in L-stable processes, the sum of absolute values of jumps and moves diverges, leading to unbounded variation. Upon randomization, this divergence creates infinities that cannot be renormalized away, rendering the model mathematically inconsistent.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the condition for multifractality, and how does it differ from unifractality and mesofractality?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Multifractality occurs when the Hölder exponents (Hm) associated with different generator intervals are all non-zero and distinct. This implies a multiplicity of scaling behaviors across different time scales, contrasting with the single H of unifractality and the two exponents of mesofractality.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of “trading time” and its role in relating unifractal and multifractal cartoons.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>“Trading time” is a subjective time scale that maps a unifractal cartoon onto a multifractal one. It allows for varying “speeds” of price changes, accounting for the observed volatility clustering in financial markets.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>Describe one limitation of multifractal cartoons compared to continuous-time multifractal models.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Multifractal cartoons generated from a three-interval symmetric generator constrain the choice of the unifractal oscillation and the multifractal time. They cannot be chosen independently, unlike continuous-time models where they can be independent random variables.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li>Compare and contrast the three fractal models of price variation proposed by Mandelbrot: the M 1963 model, the M 1965 model, and the M 1972/97 model. Discuss their strengths, weaknesses, and applicability to real financial data.</li>
<li>Explain the “baby theorem” and its significance in understanding multifractal cartoons. How does the concept of trading time contribute to this understanding?</li>
<li>Discuss the limitations of traditional “root-mean-square” volatility as a measure of price fluctuations in the context of multifractal models. What alternative measures of volatility are more appropriate, and why?</li>
<li>Critically evaluate the use of cartoons as representations of complex financial phenomena. Discuss their advantages, limitations, and the potential pitfalls of relying solely on cartoon models.</li>
<li>Elaborate on the concept of “spontaneous resonances” in financial markets and how multifractality might provide insights into understanding these resonances. How might this understanding contribute to improved economic policy and institutional arrangements?</li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<dl>
<dt>Self-affinity</dt>
<dd>
A property of a geometric shape where its parts resemble the whole when scaled differently along different axes.
</dd>
<dt>Recursive Interpolation</dt>
<dd>
A process of repeatedly subdividing and interpolating a function using a predefined “generator” shape.
</dd>
<dt>Fickian Diffusion</dt>
<dd>
A type of diffusion characterized by the square-root rule, where the displacement of a particle is proportional to the square root of time.
</dd>
<dt>Brownian Motion</dt>
<dd>
A random process exhibiting continuous, erratic movement, often used to model financial price changes.
</dd>
<dt>Hölder Exponent</dt>
<dd>
(H)A measure of the local scaling behavior of a function, quantifying its roughness or smoothness.
</dd>
<dt>Unifractality</dt>
<dd>
A property of a function where a single Hölder exponent governs its scaling behavior at all scales.
</dd>
<dt>Persistence</dt>
<dd>
The tendency of a function to continue its current trend. Positive persistence indicates trends are more likely to continue, while negative persistence (anti-persistence) implies frequent trend reversals.
</dd>
<dt>Mesofractality</dt>
<dd>
A property of a function exhibiting discontinuities with a specific scaling behavior governed by an exponent α.
</dd>
<dt>L-stable Process</dt>
<dd>
A type of random process with heavy-tailed distributions, characterized by the exponent α, which determines the tail behavior.
</dd>
<dt>Multifractality</dt>
<dd>
A property of a function exhibiting a range of Hölder exponents across different time scales.
</dd>
<dt>Volatility Clustering</dt>
<dd>
The tendency of large price fluctuations to be followed by other large fluctuations, and small fluctuations to be followed by small fluctuations.
</dd>
<dt>Trading Time</dt>
<dd>
A subjective time scale that accounts for the varying “speeds” of price changes in financial markets.
</dd>
<dt>Compound Function</dt>
<dd>
A function created by composing two or more functions, where the output of one function becomes the input of another.
</dd>
<dt>Subordination</dt>
<dd>
A specific type of compounding where the inner function is a random process with independent increments.
</dd>
<dt>Multinomial Cascade</dt>
<dd>
A specific mathematical construction used to generate multifractal measures with a limited range of possible outcomes.
</dd>
<dt>Lacunarity</dt>
<dd>
A measure of the distribution of gaps or holes in a fractal or multifractal structure.
</dd>
<dt>Singular Perturbation</dt>
<dd>
A mathematical concept where a small change in a parameter leads to a large and discontinuous change in the solution of a problem.
</dd>
<dt>Dimension Anomalies</dt>
<dd>
Deviations from the expected relationship between fractal dimension and other properties of a fractal, often arising from complex scaling behaviors.LocalizationThe concentration of a function’s values within a specific range or region.
</dd>
</dl>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 3},
  date = {2024-11-30},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Scaling in Financial Prices 3.”</span>
November 30, 2024. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part3/</guid>
  <pubDate>Sat, 30 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Scaling in financial prices 2</title>
  <dc:creator>Oren Bochman</dc:creator>
  <link>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/</link>
  <description><![CDATA[ 






<section id="scaling-in-financial-prices-ii.-multifractals-and-the-star-equation" class="level1 page-columns page-full">
<h1>Scaling in financial prices: II. Multifractals and the star equation</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL-DR
</div>
</div>
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure" aria-labelledby="-caption">
<p><a href="../../../../images/in_the_nut_shell_coach_retouched.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Scaling in financial prices in a nutshell"><img src="https://orenbochman.github.io/images/in_the_nut_shell_coach_retouched.jpg" class="img-fluid figure-img" alt="Scaling in financial prices in a nutshell"></a></p>

</figure>
</div>
<p>In the paper “Scaling in financial prices: II. Multifractals and the star equation” <span class="citation" data-cites="mandelbrot2001Scaling2">(Mandelbrot 2001)</span> Mandelbrot continus his exploration of financial price scaling. He focuses on refining and extending the mathematical model of Cauchy’s “star equation,” which describes the distribution of financial prices. The paper progresses from Cauchy’s original equation, limited to power-law distributions with an exponent α less than 2, to Mandelbrot’s multifractal generalization, allowing for <img src="https://latex.codecogs.com/png.latex?1%20%3C%20%CE%B1%20%3C%20%E2%88%9E">. This extension incorporates multifractal dependence, moving beyond the assumption of independence inherent in Cauchy’s model. The paper concludes by presenting a new model, Multifractal Products of Cylindrical Pulses (MPCP), offering a more realistic and flexible approach to modeling financial price fluctuations, and supporting the observation that financial data exhibit multifractal behavior.</p>
<audio controls="1">
<source src="podcast.mp3" data-external="1" type="audio/mpeg">

</audio>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="ref-mandelbrot2001Scaling2" class="csl-entry">
Mandelbrot, B. B. 2001. <span>“Scaling in Financial Prices: II. Multifractals and the Star Equation.”</span> <em>Quantitative Finance</em> 1 (1): 124–30. <a href="https://doi.org/10.1080/713665540">https://doi.org/10.1080/713665540</a>.
</div></div><div id="-caption" class="margin-figure-caption column-margin callout-margin-content">Scaling in financial prices in a nutshell</div><section id="summary-of-the-second-paper" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-second-paper">Summary of the second paper</h2>
<section id="main-themes" class="level3">
<h3 class="anchored" data-anchor-id="main-themes">Main Themes:</h3>
<p>This paper reviews the evolution of Mandelbrot’s model for understanding financial price fluctuations, transitioning from his early work in 1963 based on stable distributions with independent increments to the more recent multifractal model with dependent increments.</p>
</section>
<section id="most-important-ideasfacts" class="level3">
<h3 class="anchored" data-anchor-id="most-important-ideasfacts">Most Important Ideas/Facts:</h3>
<ol type="1">
<li><strong>Limitations of the Gaussian Model and Stable Distributions</strong>: Early models based on the Gaussian distribution (and later, stable distributions with <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202">) fail to capture the observed high variability in financial data. Specifically, the restriction of <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202"> for stable distributions cannot explain empirical findings of power-law distributions with exponents greater than 2.</li>
</ol>
<blockquote class="blockquote">
<p>“Many writers concluded that, whenever data yield <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202">, scaling is inadequate and should be abandoned. My alternative proposal is to foresake independence and generalize scaling into multiscaling.”</p>
</blockquote>
<ol start="2" type="1">
<li><strong>Introduction of Multifractality</strong>: Mandelbrot proposes the multifractal model as a solution to the limitations of previous models. This model incorporates dependent increments and can generate power-law distributions with exponents <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202">, aligning with empirical observations.</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bn=1%7D%5E%7Bb%7D%20W_n%20X_n%20%5Cequiv%20%5Cwidetilde%7BW%7D(W_1,%20W_2,%20%5Cldots,%20W_b)%20X%0A"></p>
<p>where ≡ denotes identity in distribution</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvarphi%5En(s)=%20%5Cvarphi%5B%5Cwidetilde%7BW%7D(n)s%5D%0A"></p>
<ol start="3" type="1">
<li><p><strong>The Star Equation</strong>: Both the Gaussian and the multifractal model can be represented by a “star equation,” a functional equation that describes the self-similarity and scaling properties of the underlying process. The key difference lies in the nature of the weights in the equation:</p>
<ul>
<li>Gaussian: Non-random weights, leading to <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202">.</li>
<li>Multifractal: Random weights, allowing for <img src="https://latex.codecogs.com/png.latex?1%20%3C%20%CE%B1%20%3C%20%E2%88%9E">.</li>
</ul></li>
<li><p><strong>Cascades and the Multifractal Star Equation</strong>: The concept of multiplicative cascades provides a concrete mechanism for generating multifractal measures. Within this framework, the “canonical” cascade, characterized by independent random weights, emerges as the most relevant for financial modeling.</p></li>
</ol>
<blockquote class="blockquote">
<p>“The canonical cascade can be rationalized by assuming that investigating a financial time series by itself amounts to extracting a linear cross section from that full system. As section 6 will elaborate, multiplication by a weight is meant to model the effects of a cause.”</p>
</blockquote>
<ol start="5" type="1">
<li><strong>Beyond Cascades: MPCP (Multifractal Products of Cylindrical Pulses)</strong>: Mandelbrot argues that the restriction to b-adic grids in cascade models is artificial. He introduces the MPCP model, where cylindrical pulses are distributed randomly, further generalizing the multifractal framework and reinforcing the prevalence of <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D%20%3C%20%E2%88%9E"> (leading to power-law distributions with <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%201">).</li>
</ol>
<blockquote class="blockquote">
<p>“The sequence from ‘microcanonical’ to ‘canonical’ and on to MPCP, teaches several lessons. As the processes’ randomness becomes increasingly unconstrained, <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D%20%3C%20%E2%88%9E"> becomes an increasingly general rule with increasingly special exceptions.”</p>
</blockquote>
<ol start="6" type="1">
<li><p><strong>Empirical Validation</strong>: Mandelbrot references empirical studies (Calvet and Fisher 2001, Mandelbrot, Calvet, and Fisher 1997) demonstrating the good fit of the multifractal model to financial data, particularly highlighting the multifractal nature of the Deutschmark/US Dollar exchange rate.</p></li>
<li><p><strong>Conclusion</strong>: While acknowledging that the multifractal model is not definitive, Mandelbrot advocates for its potential in capturing the complexity and high variability observed in financial markets, offering a more realistic assessment of risk compared to traditional Brownian motion-based models. He also suggests that the concepts developed in finance, like the distinction between mild, slow, and wild randomness, could be valuable in other scientific domains.</p></li>
</ol>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ol type="1">
<li><p>What is the “star equation” and why is it important in the context of financial models?</p>
<p>The star equation is a functional equation that describes how the distribution of a random variable changes when it is summed or multiplied by random weights. It plays a crucial role in understanding scaling properties in various phenomena, including financial price fluctuations. The solutions to the star equation can help us understand how asset returns are distributed, especially when those returns exhibit fat tails.</p></li>
<li><p>How does the Gaussian distribution relate to the star equation?</p>
<p>The Gaussian distribution is a solution to the star equation when the weights are non-random and independent. This implies that the sum of independent Gaussian random variables with non-random weights will also follow a Gaussian distribution. However, this solution only works when a key parameter, often labeled as <img src="https://latex.codecogs.com/png.latex?%CE%B1">, is less than 2.</p></li>
<li><p>Why is the limitation of <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202"> in traditional financial models a problem?</p>
<p>The restriction <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202"> implies that price changes can only be modeled with distributions that have finite variance. However, empirical data from financial markets often show that price changes have fat tails, implying infinite variance and a higher probability of extreme events than predicted by a Gaussian distribution. This makes traditional models inadequate for accurately capturing market risks.</p></li>
<li><p>How do multifractals address the limitations of traditional models based on the Gaussian distribution?</p>
<p>Multifractals introduce random weights into the star equation, generalizing it to account for the complex dependencies and scaling properties observed in financial data. This generalization allows for solutions with <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202">, capturing the fat tails and intermittent bursts of volatility characteristic of financial time series.</p></li>
<li><p>What is the key difference between “uniscaling” and “multiscaling” behavior?</p>
<ul>
<li><p>Uniscaling processes, like standard Brownian motion, exhibit the same scaling behavior across all time scales. Their statistical properties are self-similar, meaning they look the same when viewed at different zoom levels.</p></li>
<li><p>Multiscaling processes, like financial time series, exhibit different scaling behaviors at different time scales. Their statistical properties are more complex and cannot be described by a single scaling exponent.</p></li>
</ul></li>
<li><p>What is <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"> and why is it significant in multifractal models?</p>
<p><img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"> is a critical exponent that emerges in multifractal models when the function τ(q), which describes the scaling of moments of the distribution, becomes negative for values of q greater than <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D">. This signifies a power law behavior in the distribution with an exponent related to <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D">. The existence of a finite <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"> indicates that the distribution has fat tails and infinite moments, consistent with the empirical observations of financial returns.</p></li>
<li><p>How does the concept of “cylindrical pulses” contribute to the development of multifractal models?</p>
<p>“Cylindrical pulses” offer a way to move beyond the limitations of traditional cascade models. By randomly distributing these pulses across various scales, the models can capture the intermittent and clustered nature of volatility in financial markets. This approach leads to a more flexible and realistic framework for modeling multifractal behavior.</p></li>
<li><p>What are the practical implications of using multifractal models in finance?</p>
<p>Multifractal models provide a more accurate representation of financial risks compared to traditional models. This can lead to better risk management strategies, more realistic pricing of financial instruments, and improved portfolio optimization techniques that account for the possibility of extreme market events.</p></li>
</ol>
</section>
<section id="a-study-guide" class="level2">
<h2 class="anchored" data-anchor-id="a-study-guide">A Study Guide</h2>
<section id="quiz" class="level3">
<h3 class="anchored" data-anchor-id="quiz">Quiz</h3>
<p>Instructions: Answer the following questions in 2-3 sentences each.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the fundamental limitation of Cauchy’s star equation in relation to the scaling exponent α?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Cauchy’s star equation, when combined with the assumption of independence, restricts the scaling exponent α to be less than 2. This limitation arises from the fact that the Fourier transform of the characteristic function for <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3E%202"> fails to be a valid probability density.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why did Mandelbrot propose moving beyond the Gaussian framework and introduce multifractals in financial modeling?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Mandelbrot introduced multifractals to address the limitations of the Gaussian framework, specifically the restriction of <img src="https://latex.codecogs.com/png.latex?%CE%B1%20%3C%202">, which is often contradicted by empirical observations of financial data exhibiting higher scaling exponents. Multifractals allow for dependence and a broader range of scaling behaviors.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Explain the concept of ‘base-bound’ vs.&nbsp;‘base-free’ in the context of the star equation.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>A ‘base-bound’ star equation holds only for a specific base b, while a ‘base-free’ equation holds irrespective of the chosen base. The latter is preferable due to its greater generality, but the former is often easier to generalize in the context of multifractals.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 4
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the key difference between the microcanonical and canonical multiplicative cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Microcanonical cascades strictly conserve mass at each stage, ensuring that the total mass remains constant. Canonical cascades, however, only conserve mass on average, allowing for greater flexibility and randomness in the distribution of mass within the cascade.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 5
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why is the quantity Ω (measure of the interval [0, 1]) significant in the context of multifractal cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Ω represents the total measure of the interval [0, 1] after the cascade process. It is significant because it can exhibit a power-law distribution with a critical exponent qcrit, indicating the presence of multifractality. The distribution of Ω provides insights into the scaling properties of the measure generated by the cascade.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 6
</div>
</div>
<div class="callout-body-container callout-body">
<p>What condition leads to the existence of a finite critical exponent qcrit in multifractal cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The existence of a finite qcrit arises when the function τ(q) crosses zero for a value of q greater than 1. This condition implies that the moments of Ω become infinite for q &gt; qcrit, leading to a power-law distribution. This phenomenon is more likely in canonical cascades where the weights are not strictly bound.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 7
</div>
</div>
<div class="callout-body-container callout-body">
<p>How does the concept of ‘cylindrical pulses’ help in extending the multifractal model beyond b-adic cascades?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The special cases are:</p>
<p>Cylindrical pulses offer a way to generalize multifractal models beyond the limitations of b-adic grids. By representing the multiplicative weights as pulses randomly distributed across the interval, the model becomes less restrictive and allows for more realistic scenarios where the number of influencing factors varies across different scales.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 8
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the significance of the function <img src="https://latex.codecogs.com/png.latex?%CF%84(q)"> in characterizing multifractal measures?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>τ(q) is a key function in multifractal theory as it encapsulates the scaling properties of the measure. It relates the moments of the measure to the size of the intervals. The behavior of τ(q), particularly whether it becomes negative for certain values of q, determines the existence and value of the critical exponent qcrit.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 9
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why does Mandelbrot argue that the generic situation for financial time series is likely to be characterized by <img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D%20%3C%20%E2%88%9E">?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Mandelbrot argues that financial time series are likely to exhibit qcrit &lt; ∞ because they represent a cross-section of a much larger and complex economic system. The lack of strict conservation of influences within this system makes the canonical cascade model with independent weights a more appropriate representation, leading to the possibility of qcrit &lt; ∞.</p>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 10
</div>
</div>
<div class="callout-body-container callout-body">
<p>What advantage does the multifractal model offer over the Brownian motion model in financial modeling?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The multifractal model, particularly when incorporating fractional Brownian motion in multifractal time, provides a more realistic representation of financial market behavior compared to the Brownian motion model. It captures the observed long tails, volatility clustering, and scaling properties of price changes, leading to a better assessment of portfolio risks.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="essay-questions" class="level3">
<h3 class="anchored" data-anchor-id="essay-questions">Essay Questions</h3>
<ol type="1">
<li><p>Compare and contrast Cauchy’s star equation and the multifractal star equation. Discuss their underlying assumptions, solutions, and implications for modeling financial data.</p></li>
<li><p>Explain the concept of multifractality in detail. Discuss the different types of multiplicative cascades and their role in generating multifractal measures. Provide examples of how multifractality manifests in financial time series.</p></li>
<li><p>Analyze the significance of the critical exponent qcrit in multifractal models. Explain how the value of qcrit affects the distribution of the measure and its moments. Discuss the conditions under which qcrit is finite and its implications for understanding the behavior of financial markets</p></li>
<li><p>Discuss the limitations of b-adic cascade models and explain how the concept of cylindrical pulses helps in overcoming those limitations. Describe the Multifractal Product of Cylindrical Pulses (MPCP) process and its key properties. Explain how MPCP allows for a wider range of multifractal behavior compared to traditional cascade models.</p></li>
<li><p>Evaluate the strengths and weaknesses of using multifractal models to represent financial markets. Compare and contrast the multifractal approach with other alternative models. Discuss the empirical evidence supporting the use of multifractals in finance and the potential benefits they offer for risk management and portfolio optimization.</p></li>
</ol>
</section>
<section id="glossary-of-key-terms" class="level3">
<h3 class="anchored" data-anchor-id="glossary-of-key-terms">Glossary of Key Terms</h3>
<p>Scaling: A property of objects or processes where their statistical properties remain invariant under changes of scale.</p>
<dl>
<dt>Multifractal</dt>
<dd>
A generalization of fractals that exhibit different scaling properties at different scales.
</dd>
<dt>Star Equation</dt>
<dd>
A functional equation that relates the distribution of a random variable to the sum of scaled and weighted copies of itself.
</dd>
<dt>Cauchy’s Star Equation</dt>
<dd>
A base-free star equation that admits stable distributions with scaling exponents α between 0 and 2.
</dd>
<dt>Multifractal Star Equation</dt>
<dd>
A generalized star equation that incorporates random weights and allows for scaling exponents α greater than 2.
</dd>
<dt>Multiplicative Cascade</dt>
<dd>
A process that generates a multifractal measure by successively subdividing an interval and assigning random weights to each subinterval.
</dd>
<dt>Microcanonical Cascade</dt>
<dd>
A type of multiplicative cascade that strictly conserves mass at each stage.
</dd>
<dt>Canonical Cascade</dt>
<dd>
A type of multiplicative cascade that conserves mass on average, allowing for greater flexibility and randomness in the distribution of mass.
</dd>
<dt>Cylindrical Pulse</dt>
<dd>
A function that is constant except in a specific interval, representing a localized multiplicative weight in a multifractal model.
</dd>
<dt>MPCP</dt>
<dd>
Multifractal Product of Cylindrical Pulses, a generalization of cascade models that uses randomly distributed cylindrical pulses to generate multifractal measures with less restrictive scaling properties.
</dd>
<dt>τ(q)</dt>
<dd>
The scaling exponent function that relates the moments of a multifractal measure to the size of the intervals. Its behavior determines the existence and value of the critical exponent
</dd>
<dt><img src="https://latex.codecogs.com/png.latex?q_%7Bcrit%7D"></dt>
<dd>
The critical exponent that characterizes the power-law distribution of a multifractal measure. It indicates the point at which the moments of the measure become infinite.
</dd>
<dt>Fractional Brownian Motion</dt>
<dd>
A generalization of Brownian motion that incorporates long-range dependence, leading to a wider range of scaling behaviors and a more realistic representation of certain natural phenomena, including financial markets.
</dd>
</dl>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{bochman2024,
  author = {Bochman, Oren},
  title = {Scaling in Financial Prices 2},
  date = {2024-11-29},
  url = {https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-bochman2024" class="csl-entry quarto-appendix-citeas">
Bochman, Oren. 2024. <span>“Scaling in Financial Prices 2.”</span>
November 29, 2024. <a href="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/">https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/</a>.
</div></div></section></div> ]]></description>
  <category>Scaling Laws</category>
  <category>Fractals</category>
  <category>Financial Markets</category>
  <category>Time series</category>
  <category>Reviews</category>
  <category>Popular Science</category>
  <guid>https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/part2/</guid>
  <pubDate>Fri, 29 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://orenbochman.github.io/posts/2024/2024-11-28-misbahaviour-of-markets/cover.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
