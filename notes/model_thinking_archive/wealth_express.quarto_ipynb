{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: agents\n",
        "format: html\n",
        "filters:\n",
        "  - shinylive\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        ":::{.column-screen-inset}\n",
        "```{shinylive-python}\n",
        "#| standalone: true\n",
        "#| viewerHeight: 620\n",
        "#| components: [ viewer]\n",
        "## file: wealth.py\n",
        "\n",
        "import micropip\n",
        "async def install_agentpy():    \n",
        "    await micropip.install(\"agentpy\")\n",
        "install_agentpy()\n",
        "#package_list = micropip.list()\n",
        "#print(package_list)\n",
        "import agentpy as ap\n",
        "\n",
        "# Model design\n",
        "class WealthAgent(ap.Agent):\n",
        "    \"\"\" An agent with wealth \"\"\"\n",
        "    def setup(self):\n",
        "        self.wealth = 1\n",
        "\n",
        "    def wealth_transfer(self):\n",
        "        if self.wealth > 0:\n",
        "            partner = self.model.agents.random()\n",
        "            partner.wealth += 1\n",
        "            self.wealth -= 1\n",
        "\n",
        "def gini(x):\n",
        "    \"\"\" Calculate Gini Coefficient \"\"\"\n",
        "    x = np.array(x)\n",
        "    mad = np.abs(np.subtract.outer(x, x)).mean()  # Mean absolute difference\n",
        "    rmad = mad / np.mean(x)  # Relative mean absolute difference\n",
        "    return 0.5 * rmad\n",
        "\n",
        "class WealthModel(ap.Model):\n",
        "    \"\"\" A simple model of random wealth transfers \"\"\"\n",
        "    def setup(self):\n",
        "        self.agents = ap.AgentList(self, self.p.agents, WealthAgent)\n",
        "    def step(self):\n",
        "        self.agents.wealth_transfer()\n",
        "    def update(self):\n",
        "        self.record('Gini Coefficient', gini(self.agents.wealth))\n",
        "    def end(self):\n",
        "        self.agents.record('wealth')\n",
        "\n",
        "## file: app.py\n",
        "from wealth import *\n",
        "from shiny.express import input, render, ui\n",
        "from shinywidgets import render_widget\n",
        "\n",
        "\n",
        "with ui.sidebar():    \n",
        "    ui.panel_title(\"Hello Shiny!\")\n",
        "    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n",
        "    ui.input_slider(\"agents\", \"Agents\", 0, 100, 100),\n",
        "    ui.input_slider(\"steps\", \"Steps\", 0, 100, 100),\n",
        "    ui.input_slider(\"x\", \"y\", 0, 10, 10),\n",
        "    ui.input_slider(\"y\", \"y\", 0, 10, 10),\n",
        "    ui.input_selectize(\n",
        "        \"var\", \"Select variable\",\n",
        "        choices=[\"bill_length_mm\", \"body_mass_g\"]\n",
        "    )\n",
        "\n",
        "@render.text\n",
        "def wealth_run():\n",
        "    model = WealthModel(parameters)\n",
        "    results = model.run()\n",
        "    return f\"{results.info['completed_steps']}\"\n",
        "\n",
        "\n",
        "\n",
        "@render.text\n",
        "def txt():\n",
        "    return f\"n*2 is {input.n() * 2}\"\n",
        "\n",
        "@render.plot\n",
        "def hist():\n",
        "    from matplotlib import pyplot as plt\n",
        "    from palmerpenguins import load_penguins\n",
        "\n",
        "    df = load_penguins()\n",
        "    df[input.var()].hist(grid=False)\n",
        "    plt.xlabel(input.var())\n",
        "    plt.ylabel(\"count\")\n",
        "\n",
        "## file: requirements.txt\n",
        "pandas\n",
        "\n",
        "## file: fruit.csv\n",
        "id,name,count\n",
        "1,\"apple\",20\n",
        "2,\"orange\",12\n",
        "3,\"grape\",100\n",
        "\n",
        "```\n",
        ":::"
      ],
      "id": "6e256357"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/oren/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}