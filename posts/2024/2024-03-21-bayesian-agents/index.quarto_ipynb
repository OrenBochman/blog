{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "date: 2024-03-21\n",
        "title: \"Bayesian Agent\"\n",
        "subtitle: \"Agent Based Modeling With MESA\" \n",
        "categories: [ABM, Agent Based Modeling, Baysian Game Theory, Game Theory, Signaling Games]\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## The Sherif Dillema Game\n",
        "\n",
        "The Sherif Dillema is a considered a signaling game in game theory\n",
        "However is is also a fairly simple example of a Bayesain game\n",
        "\n",
        "\n",
        "This game is defined by (N,A,T,p,u), where:\n",
        "\n",
        "- N = {Suspect, Sheriff} \n",
        "- ASuspect = {Shoot, Not} ,\n",
        "- ASheriff = {Shoot, Not}\n",
        "- TSuspect = {Criminal, Civilian} , \n",
        "- TSheriff = {\\*} \n",
        "- pCriminal = p , \n",
        "- pCivilian = (1 - p) \n",
        "\n",
        "It is assumed that the payoffs, u, are given as follows:\n",
        "\n",
        "|                  | Sheriff's action | Shoot  | Not   |\n",
        "|------------------|------------------|--------|-------|\n",
        "| Suspect's action | Shoot            | 0, 0   | 2, -2 |\n",
        "| Suspect's action | Not              | -2, -1 | -1,1  |\n",
        ": Payoffs for \"Criminal\" {#tbl-criminal}\n",
        "\n",
        "|                  | Sheriff's action | Shoot    | Not      |\n",
        "|------------------|------------------|----------|----------|\n",
        "| Suspect's action | Shoot            | (-3, -1) | (-1, -2) |\n",
        "| Suspect's action | Not              | (-2, -1) | (0, 0)   |\n",
        ": Payoffs for \"Civilian\" {#tbl-civilian}\n",
        "\n",
        "\n",
        "\n",
        "The following Python code uses the MESA framework to simulate a Bayesian game known as the Sheriff's Dilemma. It defines agents with different roles (Sheriff and Suspect) and types (Criminal or Civilian for the suspect). Each agent makes decisions based on its beliefs and the payoff structure defined for the game. The game tracks the actions, payoffs, and beliefs of each player and simulates multiple iterations of the game.\n"
      ],
      "id": "3552135e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import random\n",
        "import mesa\n",
        "from mesa import Agent, Model, DataCollector\n",
        "from mesa.time import RandomActivation\n",
        "\n",
        "class SheriffAgent(Agent):\n",
        "    \"\"\"Agent representing the Sheriff.\"\"\"\n",
        "    def __init__(self, unique_id, model):\n",
        "        super().__init__(unique_id, model)\n",
        "        self.action = None\n",
        "    \n",
        "    def step(self):\n",
        "        # Sheriff decides based on belief about the suspect's type\n",
        "        belief_criminal = self.model.belief_criminal\n",
        "        # Simple decision rule based on belief (could be improved with a more sophisticated strategy)\n",
        "        self.action = \"Shoot\" if belief_criminal > 0.5 else \"Not\"\n",
        "\n",
        "class SuspectAgent(Agent):\n",
        "    \"\"\"Agent representing the Suspect.\"\"\"\n",
        "    def __init__(self, unique_id, model, suspect_type):\n",
        "        super().__init__(unique_id, model)\n",
        "        self.suspect_type = suspect_type\n",
        "        self.action = None\n",
        "    \n",
        "    def step(self):\n",
        "        # Suspect's decision could be based on its type or a strategy considering the sheriff's action\n",
        "        # For simplicity, let's say criminals are more likely to shoot\n",
        "        if self.suspect_type == \"Criminal\":\n",
        "            self.action = \"Shoot\" if random.random() > 0.5 else \"Not\"\n",
        "        else:\n",
        "            self.action = \"Not\"  # Civilians are less likely to shoot\n",
        "\n",
        "class SheriffsDilemma(Model):\n",
        "    \"\"\"A model for the Sheriff's Dilemma game.\"\"\"\n",
        "    def __init__(self, p_criminal):\n",
        "        super().__init__()\n",
        "        self.schedule = mesa.time.RandomActivation(self)\n",
        "        self.suspect_type = \"Criminal\" if random.random() < p_criminal else \"Civilian\"\n",
        "        self.belief_criminal = p_criminal  # Initial belief about suspect being a criminal\n",
        "        self.payoff = None\n",
        "        # Create agents\n",
        "        sheriff = SheriffAgent(1, self)\n",
        "        suspect = SuspectAgent(2, self, self.suspect_type)\n",
        "        self.schedule.add(sheriff)\n",
        "        self.schedule.add(suspect)\n",
        "        \n",
        "        self.datacollector = mesa.DataCollector(\n",
        "          model_reporters={\"Payoff\":\"payoff\"},\n",
        "          agent_reporters={\"Action\":\"action\"}\n",
        "            )\n",
        "            \n",
        "\n",
        "    \n",
        "    def step(self):\n",
        "        self.datacollector.collect(self)\n",
        "        self.schedule.step()\n",
        "        \n",
        "        # After both agents have taken their actions, calculate payoffs based on the table provided\n",
        "        sheriff_action = [agent for agent in self.schedule.agents if isinstance(agent, SheriffAgent)][0].action\n",
        "        suspect_action = [agent for agent in self.schedule.agents if isinstance(agent, SuspectAgent)][0].action\n",
        "        suspect_type = self.suspect_type\n",
        "\n",
        "        payoff_matrix = {\n",
        "            (\"Criminal\", \"Shoot\", \"Shoot\"): (0, 0),\n",
        "            (\"Criminal\", \"Shoot\", \"Not\"): (2, -2),\n",
        "            (\"Criminal\", \"Not\", \"Shoot\"): (-2, -1),\n",
        "            (\"Criminal\", \"Not\", \"Not\"): (-1, 1),\n",
        "            (\"Civilian\", \"Shoot\", \"Shoot\"): (-3, -1),\n",
        "            (\"Civilian\", \"Shoot\", \"Not\"): (-1, -2),\n",
        "            (\"Civilian\", \"Not\", \"Shoot\"): (-2, -1),\n",
        "            (\"Civilian\", \"Not\", \"Not\"): (0, 0),\n",
        "        }\n",
        "        self.payoff = payoff_matrix[(suspect_type, suspect_action, sheriff_action)]\n",
        "        print(f\"Round results - Suspect Type: {suspect_type}, Sheriff Action: {sheriff_action}, Suspect Action: {suspect_action}, Payoffs: {self.payoff}\")\n",
        "\n",
        "# Example of running a single iteration\n",
        "model = SheriffsDilemma(p_criminal=0.5)\n",
        "for i in range(100):\n",
        "    model.step()"
      ],
      "id": "ed85a1de",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mvars = model.datacollector.get_model_vars_dataframe()\n",
        "mvars\n",
        "# Plot the Gini coefficient over time\n",
        "#g = sns.lineplot(data=gini)\n",
        "#g.set(title=\"Gini Coefficient over Time\", ylabel=\"Gini Coefficient\");\n"
      ],
      "id": "7f6363f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "avars = model.datacollector.get_agent_vars_dataframe()\n",
        "avars"
      ],
      "id": "c725172c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This code sets up the game and agents, then runs a single step (or iteration) of the game, printing out the results. The decision-making process for both the Sheriff and the Suspect is simplified and can be enhanced to implement more sophisticated strategies based on beliefs, historical actions, or game theory.\n",
        "\n",
        "\n",
        "1. I am not very happy with this yet. I also think that a second take using a public good game might be more interesting\n",
        "2. In this game we would like to know\n",
        "    1. the agent beliefs at the three stages: \n"
      ],
      "id": "6940e7d2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/oren/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}