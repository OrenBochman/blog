---
date: 2024-05-01
title: "Skryms Signals Summary and Models"
subtitle: "learing language games"
keywords: [game theory, signaling games, partial pooling, evolution, reinforcement learning, signaling systems, evolution of language]
jupyter: python3

#draft: True
---

In [@Skyrms2010signals] philosopher and mathematician Brian Skyrms discusses how one can extend the concept of a signaling games into a full fledged signaling systems and to some extent a rudimentary language.

I like many other found Signals to be a fascinating little book worth reading at least a couple of times. While Skyrms starts with a basic exposition motivated by Greek philosophers he eventually makes a deep dive into areas like reinforcement learning, replicator dynamics, mean field games and some other deep mathematical fields without much of introduction. In places the monographs seems incomplete and may require hunting the papers in the bibliography and possibly more recent work by the same authors.

I slowly noticed it being cited in more and more papers which I read. This sort of indicated that intellectually more people we on the same path of thinking how to equip their problem solving with a signaling system or better yet to evolve a more sophisticated language.\

I went back several times to review the chapter on Complex signals, which I feel is the most interesting for real-world application. I began to think that the Lewis games are too rudimentary since signaling systems that evolve/learned from them are basically n-k maps of signals to meaning.

What I wanted was a recipe for quickly agent that need to evolve and teach/learn a language for efficient communication.

I wanted to go the relevant papers he covers on this area and then to see of there were newer results he did not cover. This turned out to be a bit of a challenge. In the mean time I also learned some courses on RL and even tried a couple of ideas from this book at work. I think I should summarize at least some of the more interesting results from the book.

Besides a summary I also want to try to implement some of the keystone models in the book to see if I can derive the reductionist simple language learning game.

## 1. Signals

### Big Research Questions

**Q1. How can interacting individuals spontaneously learn to signal?**

**Q2. How can species spontaneously evolve signaling systems?**

## Sender-Receiver

> There are two players, the sender and the receiver.\
> Nature chooses a state at random and the sender observes the state chosen.\
> The sender then sends a signal to the receiver, who cannot observe the state directly but does observe the signal.\
> The receiver then chooses an act, the outcome of which affects them both, with the payoff depending on the state.\
> Both have pure common interest—they get the same payoff—and there is exactly one “correct” act for each state.\
> In the correct act-state combination they both get positive payoff; otherwise payoff is zero.\
> The simplest case is one where there are the same number of states, acts, and signals.

A separating equilibrium is called a signaling system

> If we start with a pair of sender and receiver strategies, and switch the messages around the same way in both, we get the same payoffs. In particular, permutation of messages takes one signaling-system equilibrium into another.

We can understand a signaling system as a encoding look-up table by the sender and a decoding lookup table for the reciever which is the inverse of the first. The product of two permutations is the identity matrix. Each permutation of the identity matrix gives a valid signaling system

**Q3. Is there a most salient signaling system?**

Salience is a concept from Schelling's Game theory that suggest that one solution to a coordination problem might be naturally better then others. (e.g. meeting a relative at the airport). This can be due to an externality to the pure coordination problem. Salience can also arise from non uniformity of the state distribution - by providing less frequent messages longer messages based on binary coding. The salience hierarchy might be grounded in risk - more urgent messages might be shorter and learned before the longer ones.

my thoughts on Salience:

- Salience would arise in nature through the non-uniform distribution of states 
  which is ignored in most papers leading to equally salient signaling system. 
  When the states are not uniformly distributed then the signals will not be 
  uniformly distributed. The more common states should have more common signals. 
  e.g. if snakes are more common than eagles then the signal for snake should be 
  shorter/simpler/learned first than the signal for eagle. In another location
  the distributions could be reversed leading to a different salience hierarchy.
- Another way (of seeing this is that) salience would arise in nature to minimize
  risks for the sender, who could become a target for a predator by sending a signal.
- Two other source of salience are the risk of making mistakes and the cost of 
  sending a signal.
- Finally there is nothing stopping the salience from being a function of all these
  factors through a product of their probabilities. Though this is more easily
  expressed in the language of fitness. Salience will select the language whose
  speakers gain the highest expected progeny (fitness) by avoiding risks, conserving
  energy and avoiding miscommunication for their habitat.
- If the speakers migrate they might benefit from a language that is salient in 
  multiple habitats. This is a form of generalization.
- If there are different cost for encoding and decoding then the salience will be 
  a function of the product of the encoding and decoding costs. This is a form of 
  cost minimization. In this scenario there may be a competition between the sender and
  the receiver to minimize their costs. But the sender has the upper hand since the
  sender chooses the signal. The sender is the causal agent in the signaling system.
  

**Q4. How can two agents with different signaling find a SS that is midway between them (including systems with both shared and unique states)?**

-   Its fairly clear that under the rules of the Lewis game all valid signaling systems are isomorphic and none are more salient.
-   In nature salience might arise and a systems leading to greatest fitness in its users would be the most salient.
-   To find a signaling system that is midway between two signaling systems we could use the Cayley distance between the two permutations. This is the minimum number of transpositions required to transform one permutation into another. The median permutation would be the one that has half the Cayley distance to each signaling systems.
- If the systems have salience we may want to also keep the most salient signals intact and now we have a more complex optimization problem. We could use the KL divergence between the two signaling systems to estimate the distance of the signaling distribution from a separating distribution.

the Cayley distance between two permutations is the minimum number of transpositions required to transform one permutation into another. it is a metric on the symmetric group.

**Information in signals**

**Q5. How can we minimally extend this framework to handle Errors and Deception**

> Signals carry information. The natural way to measure the information in a signal is to measure the extent that the use of that particular signal changes probabilities. Accordingly, there are two kinds of information in the signals in Lewis sender-receiver games: information about what state the sender has observed and information about what act the receiver will take. The ﬁrst kind of infor- mation measures effectiveness of the sender’s use of signals to discriminate states; the second kind measures the effectiveness of the signal in changing the receiver’s probabilities of action.

- [ ] TODO: estimate information content of each signal for sender and receiver for separating and partial pooling cases
- [ ] TODO: use entropy for message level estimates of sender and receiver under separating signal, a synonym, a homonym.
- [ ] TODO: use entropy KL divergence to estimate a the distance of the signaling distribution from a separating distribution.

Actually there are a number of extensions one would like to consider for the Lewis framework:

1.  bottlenecks
    1.  more state than signals - this is the interesting case and where complex signaling systems should arise
    2.  more signals than states - this is the case where synonyms can arrise
2.  basic logical reasoning, conjunctions, disjunctions, negations
3.  multiple senders and or receivers
    1.  rewarding coordination (each state requires different actions from the agents - they are learning different receiver maps )
    2.  rewarding correlated equilibrium (sender lets the receivers pick from correlated states at random allowing the receivers avoid penalty of miscoordination.)
    3. networks of agents per the goyal model in ch 11 and 13

complex signals

1.  conjunction of signals,
2.  ordered signals,
3.  recursive signals, group

### Evolution

In Banes 1982

We first see two competing Signaling systems being tested in a population

[@hofbauer1998evolutionary] Population dynamics - can be used to identify which dynamic equlibria are stable or unstable given an intial population of strategies

There is a figure showing the field dynamics with basins of attractions arrising from the population dynamics equations

We also see symmetry breaking selecting a signaling system to a system

$$
\frac{dp(A)}{dt}=p(A)[U(A)-U]
$$

where

-   U(A) is the average payoff to strategy A and
-   U is the average payoff in the population.

```{python}
from pylab import *

alpha, beta = 1, 1
xvalues, yvalues = meshgrid(arange(0, 2.1, 0.1), arange(0, 2.1, 0.1))
xdot = xvalues * alpha - beta
ydot = yvalues * alpha - beta
streamplot(xvalues, yvalues, xdot, ydot)
show()

```

we have a discussion of how signals might arise.

## Evolution

```{python}


import itertools
import functools
from mesa import Agent, Model
from mesa.time import StagedActivation, RandomActivation
#import random

# agent_roles
r_nature = 'nature'
r_sender = 'sender'
r_receiver = 'receiver'

class multiurn:

  def __init__(self,options,balls=None):
      self.options = options
      if balls is not None:
        self.balls = balls
      else:
        self.balls = {option: 1.0 for option in self.options}
  

  def get_filtered_urn(self, filter):
    ''' filters urn's options by prefix and normalizes the weights
        usege:
        urn=urn.get_filtered_urn(1)
        choice = model.random.choice(list(urn.keys()), p=list(urn.values()))
    '''
    assert type(filter) == int, f"filter must be a int"
    filtered_options = [key for key in self.balls.keys() if key[0] == filter]
    print(f"--filtered_options: {filtered_options=}")
    filtered_balls = {opt: self.balls[opt] for opt in filtered_options}
    print(f"--filtered_balls: {filtered_balls=}")
    total = functools.reduce(lambda a,b: a+b, filtered_balls.values())
    print(f"--total: {total=}")
    assert total > 0.0, f"total weights is {total=} after {filter=} on {self.balls}"
    filtered_probs = {opt: self.balls[opt]/total for opt in filtered_options}
    return filtered_probs


class HerrnsteinRL(multiurn):
    '''
                                    The Urn model
     nature            sender                 reciever     reward
                       
    | (0) | --{0}-->  | (0_a)  | --{a}--> | (a_0) | --{0}-->   1   
    |     |           | (0_b)  | --{b}    | (a_1) | --{1}-->   0
    |     |           +--------+    | +-->+-------+
    |     |                         +-|-+  
    | (1) | --{1}-->  | (1_a)  | --{a}+ +>| (b_0) | --{1}-->   1
    |     |           | (1_b)  | --{b}--->| (b_1) | --{0}-->   0
    +-----+           +--------+          +-------+
    
    
    Herrnstein urn algorithm
    ------------------------
    
    1. nature picks a state 
    2. sender  gets the state, chooses a signal by picking a ball in choose_option() from the stat'es urn
    3. reciver gets the action, chooses an actuion by picking a ball in choose_option()
    4. the balls in the urns are incremented if action == state
    5. repeat
    
    '''
    def __init__(self, options, learning_rate=1.0,verbose=False,name='Herrnstein matching law'):
        super().__init__(options)
        # filter options in choose option by input
        self.verbose = verbose
        self.name=name
        self.learning_rate = learning_rate
        self.options = options

        if self.verbose:
          print(f'LearningRule.__init__(Options: {options})')
      
    def choose_option(self,filter,random):
        ''' choose an option from the urn based on the filter and the random choice
            usage:
            urn.choose_option(1,random=model.random)
        '''
        if self.verbose:
          print(f'choose_option({filter=},{random=})')
        urn = self.get_filtered_urn(filter)
        if random:
          return random.choices(list(self.balls.keys()), weights=list(self.balls.values()),k=1)
        else:
          throw(f"random must be a random number generator")
        
    def update_weights(self, option, reward):
        old_balls = self.balls[option]
        self.balls[option] += self.learning_rate * reward 
        if self.verbose:
          print(f"Updated weight for option {option}: {old_balls} -> {self.balls[option]}")


class LewisAgent(Agent):
  
    def __init__(self, unique_id, model, game, role, verbose=False):
        super().__init__(unique_id, model)
        self.role = role #( one of nature, sender, receiver)
        self.verbose = verbose
        self.game = game
        self.messages = []
        self.actions = []
        if role == "sender":
          self.urn = HerrnsteinRL(model.states_signals, learning_rate=1.0,verbose=verbose,name='state_signal_weights')
        elif role == "receiver":
          self.urn = HerrnsteinRL(model.signals_actions, learning_rate=1.0,verbose=verbose,name='signal_action_weights')
        else:
          self.urn = None
        
    def step(self):
      # reset agent state before step
      self.messages = []
      self.actions = []

    def gen_state(self)-> None:
        if self.role == r_nature:
          self.current_state = model.random.choice(self.model.states)
          if self.verbose:
                print(f"Nature {self.unique_id} set state {self.current_state}")
                
    @property
    def state(self):
        if self.role == r_nature:
          return self.current_state

    def choose_signal(self, filter):
        if self.role != r_sender:
          throw(f"Only sender can send signals")
        signal = self.urn.choose_option(filter=filter,random=self.model.random)
        assert type(signal) == int 

        self.signal = signal
        if self.verbose:
              print(f"Sender {self.unique_id} choose_signal: {self.signal}")
        return self.signal
          

    def send_signal(self, filter, receiver):
        if self.role != r_sender:
          raise Exception(f"Only sender can send signals")
        assert type(filter) == int, f"filter must be a int"
        assert filter in model.states, f"filter must be a valid state"
        signal = self.choose_signal(filter=filter)
        assert signal is not None, f"signal must be a valid signal"
        print(f"Sender {self.unique_id} sends signal: {signal}")
        receiver.messages.append(signal)
        if self.verbose:
          print(f"Sender {self.unique_id} sends signal: {signal} to receiver {receiver.unique_id}")

    def fuse_actions(self,actions):
        ''' 
            # Message fusion logic:
            1. single message:  if there is only one signal then the action is the action associated with the signal
            2. ordered messages: if there are multiple signals then the action is the number from the string assocciated with the concatenated signal
               if there are two signals possible per message we concat and covert binary string to number
            3. is the messages are sets we could perform a intersetion and take the action associated with the intersection 
               currently this is not implemented
            4. support for recursive signals is currently under research .
        ''' 
        if self.role != r_receiver:
          raise Exception(f"Only receiver can set actions")
        
        if len(actions) == 1: # single action no need to fuse
          return actions[0]
        else:
          # fuse the actions into a binary number
          action = 0
          # if there are multiple signals
          for i in range(len(actions)):
            action += actions[i]*(2**i)
          if self.verbose:
              print(f"Receiver {self.unique_id} fused actions : {self.actions} into action: {action}")
          return action

    def decode_message(self,signal):
        ''' first we need to get the filtered urn for the signal
            and then choose the option based on the urn'''
        if self.role != r_receiver:
          raise Exception(f"Only receiver can decode messages")

        message = self.urn.choose_option(filter=signal,random=self.model.random)
        if self.verbose:
              print(f"Receiver {self.unique_id} received signal: {message}")
        return message

    def set_action(self):
        ''' first we need to use the urn to decode the signals 
            then need to fuse them to get the action '''
        if self.role != r_receiver:
          raise Exception(f"Only receiver can set the action")
        self.actions = []
        for signal in self.messages:
          self.actions.append(self.decode_message(signal))
        self.action = self.fuse_actions(self.actions)
        if self.verbose:
              print(f"Receiver {self.unique_id} received signals: {self.messages} and action: {self.action}")
              
    def set_reward(self,reward):
        if self.role not in [r_receiver,r_sender]:
          raise Exception(f"Only sender and receiver can set rewards")
        self.reward = reward
        if self.verbose:
            print(f"Receiver {self.unique_id} received reward: {self.reward}")
                
    def calc_reward(self,correct_action):
        if self.role != r_receiver:
          raise Exception(f"Only receiver can calculate rewards")
        self.reward = 1 if self.action == correct_action else 0
        

class SignalingGame(Model):
  
    # TODO: add support for 
    # 1. bottle necks
    # 2. rename k to state_count
    # 3. state_per_sender = state_count/sender_count 
    # 2. partitioning states by signals => state/sender_count
    def __init__(self, game_count=2, senders_count=1, recievers_count=1, state_count=3,signal_count=3,verbose=True):
        super().__init__()
        self.verbose = verbose
        self.schedule = RandomActivation(self)
        
        
        # Define the states, signals, and actions
        self.states   = [i for i in range(state_count)]
        print(f'{self.states=}')
        self.signals  = [i for i in range(signal_count)]
        print(f'{self.signals=}')
        self.actions  = [i for i in range(state_count)]
        print(f'{self.actions=}')
        
        # e.g., 1 -> 1, 2 -> 2, ...
        self.states_signals =  [(state,signal) for state in self.states for signal in self.signals]
        print(f'{self.states_signals=}')
        self.signals_actions = [(signal,action) for signal in self.signals for action in self.actions] 
        print(f'{self.signals_actions=}')
        
        # Agents

        self.uid=0
        self.senders_count=senders_count
        self.recievers_count=recievers_count

        # Games each game has a nature, senders and receivers
        self.games = []
        # Create games        
        for i in range(game_count):
            game = {
              r_nature: None,
              r_sender: [],
              r_receiver: []
            }
            
            # create nature agent
            game[r_nature] = LewisAgent(self.uid, self, game=i,role = r_nature,verbose=self.verbose)
            self.schedule.add(game[r_nature])
            self.uid += 1
            
            # create sender agents
            for j in range(senders_count):
                sender = LewisAgent(self.uid, self, game=i,role = r_sender,verbose=self.verbose)
                game[r_sender].append(sender)
                self.schedule.add(sender)
                self.uid +=1
                
            # create receiver agents
            for k in range (recievers_count):
                reciever = LewisAgent(self.uid, self, game=i,role = r_receiver,verbose=self.verbose)
                game[r_receiver].append(reciever)
                self.schedule.add(reciever)
                self.uid +=1
                
            self.games.append(game)
        
    def step(self):
      
        for agent in model.schedule.agents:
            # reset agent state before step
            agent.step()
            
        for game_counter,game in enumerate(self.games):
            if self.verbose:
                print(f"--- Step {model.step_counter} Game {game_counter} ---")
            nature = game[r_nature]
            nature.gen_state()
            state = nature.current_state
            assert type(state) == int, f"state must be a string"
            assert state in model.states, f"state must be a valid state"
            if self.verbose:
                print(f"Nature {agent.unique_id} set state {state}")
            for sender in game[r_sender]:
                for receiver in game[r_receiver]:
                    sender.send_signal(filter=state, receiver=receiver)
            for receiver in game[r_receiver]:
                receiver.set_action()
                if self.verbose:
                    print(f"Receiver {receiver.unique_id} action: {receiver.action}")
                reward=receiver.calc_reward(state)
                if self.verbose:
                    print(f"Receiver {receiver.unique_id} received reward: {receiver.reward}")
            
            for agent in itertools.chain(game[r_sender],game[r_receiver]):
                agent.set_reward(reward)
                if self.verbose:
                    print(f"Sender {agent.unique_id} received reward: {reward}")

        for i,game in enumerate(self.games):
            print(f'game {i}, {self.expected_rewards(game)=}')

    def expected_rewards(self,game):
      return 0.25

# Running the model
state_count= 3  # Number of states, signals, and actions
signal_count= 3

steps = 10
model = SignalingGame(senders_count=1,recievers_count=1,state_count=state_count,signal_count=signal_count,verbose=True)
model.step_counter = 0
for i in range(steps):
    model.step_counter +=1
    model.step()
    
```

In this simulation the agents are not learning - they are accessing the predefined signals and actions in the model hence rewards are always 1.

Player in Lewis signaling games can reach three type of equilibria

1.  Separating equilibrium in which receiver fully recovers the state from the signal and can take the appropriate action
2.  Partial pooling equilibrium in which *synonyms* or *homophones* frustrate the receiver for always recovering the state.
3.  Full pooling equilibrium in which all signals are the same and the agents are unable to communicate.

A one word synonym for "desired qualities" derived from desire that used in academic literature is "desiderata".

Skryms next considers bottle necks - which are cases where there are more signals than actions and vica versa.

-   In the case of more signals than actions successful learning will result a partial polling equilibrium with some synonyms.
-   In the case of more actions than signals the best an agent can learn is a partial pooling equilibrium with homophones.

Both synonyms and homophones have drawbacks however:

While synonyms increase the cognitive load and the number of signals that need to be learned they do not prevent the recovery of the state being communicated. Homophones require the receiver to select an interpretation at random leading to lower payoffs since the receiver unable to recover the state cannot select the correct action. If the number of signal is the same as the number of actions, the pigeon hole principle guarantees that for every synonym there must be a homophone.

If we consider that for recoverability we need action and signals to be fully correlated it is easy to see that each failure to correlate

action to signals results in a (partial) pooling solution. Thus there are far more partial pooling equilibria than separating equilibria. and it is thus no surprise that natural language is rife with homophones and synonyms.

In lieu of the fact that partial pooling equilibrium far out number the separating ones with and with out bottlenecks, setting up and later learning a separating signaling system with minimal homophones/synonyms is not trivial task. (If we also factor in cost/risk of miscommunication some homophones are clearly worse than others)

-   Evolution for example may not be the best way for this.

-   While researchers have very basic algorithms to do so, in terms of convergence rate and sample efficiency.

Although not considered it is easy to see that there are far more partial pooling

We can conclude proceed to discuss the desiderata for learning algorithms.

Note: Dropout Algorithm Introducing bottlenecks into neural networks tend to improve their ability to generalize by forcing them to avoid memorizing inputs and come up with more resiliant representations. This suggest that partial pooling equilibria may play a more significant role in structured/complex signaling systems.

## Desiderata for learning algorithms of signaling systems

1.  State recovery - we prefer the algorithm to learn a separating equilibrium and if avoid pooling equilibrium with homophones.
2.  Convergence - we want the algorithm to quickly converge to the equilibrium.
3.  Sample efficiency - we want the algorithm to learn after minimal exposure to stimuli.

Some questions

-   How different are the task of creating the signaling system from learning it?

    -   the main difference perhaps is that one party has a mapping and it is up to the second to learn it. they can't find unused symbols and mach them to a new state.

    -   there may be many speakers so making changes will be costly.

-   Can switching roles of sender and receiver give better outcomes in learning ?

    -   this may change for different extensions

-   If there are multiple agent learning can create or learn the signaling system better or faster

    -   what if they have groups with established signal systems

    -   how can they find a new set of mapping with minimal permutation from their original

-   If states used for reward are not random are there better schedules for learning are not random

What if each has knowledge of a working signaling system already help adding more players seem to

# 4 Evolution

The three essential factors in Darwin’s account are

1.  natural variation - mutation, gene flow via migration, genetic drift and recombination in sexual reproduction.
2.  differential reproduction - [@Taylor1978ESS] replicator dynamics
3.  inheritance

### ESS

In [@Smith1973LogicAnimalConflict] the authors introduced a novel solution concept - the ESS or Evolutionary stable strategy, improving on the notion of the Nash equilibrium by replacing agent level play dominance with statistical dominance of strategies.

::: {#ex-ess-hak-dove}
## ESS Motivating Example Hawk Dove Game

|          | Hawk | Dove |
|----------|------|------|
| **Hawk** | 0    | 3    |
| **Dove** | 1    | 2    |

: Hawk Dove Game

This explains why hyper-aggressive Hawks type who can defeat more peaceful Doves type do not wipe them out. Hawks have an advantage if there are mostly doves. Once they are in a majority Hawk-Hawk interaction lead to serious injury and death. ESS is a frequency dependent equilibrium.
:::

## ESS Criteria

In [@Smith1973LogicAnimalConflict] the authors introduce the following criteria in terms of payoffs for a strategy to be an ESS.

A strategy, S, is evolutionary stable if for any other strategy, M, either:

1.  Fitness (S played against S) \> Fitness (M played against S) or:
2.  Fitnesses are equal against S, but Fitness(S against M) \> Fitness(M against M)

Where under the first mutants are expelled quickly and under 2 less so.

## Differential Reproduction - Replicator dynamics

Replicator dynamics is driven by Darwinian ﬁtness—expected number of progeny.

so $fitness \sim \mathbb E(|progeny|)$ where on average you get what you expect. For strategy $S$ the population

$$
x_{t}(S) = \frac{x_{t-1}(S) \times fitness(S)}{mean\_fitness}
$$

and for continuous time[^2]

[^2]: I think that we should consider a lewis hirarcy of games based on lewis games with\
    a. logic\
    b. conjuctive signals

$$
\frac{dx}{dt} = x (fitness(S) - {mean\_fitness})
$$

The main outcomes of this chapter are that for a two state/signal/action Lewis game

1.  Multiple isomorphic signaling systems we could call languages will arise leading to a population of agents split equaly
2.  In a population of agents whose fitness depends on use of the language the stable state is one in which just one of the language is used by the entire population. Other equilibria are unstable which leads to spontaneous breaking of the symmetry and a gradual drift of the population towards one of the stable states.

Notes:

1.  The analysis fails to consider spatial dynamics. It seems that a in a local pockets of language 1, agents with language 2 might have lower fitness.
2.  There is a cost of switching and agents typicaly are not born with a fully formed language ability they need to learn a language and that has costs and requires access to signalers with the said language.
3.  In reality *Pidgeons* and *Creoles* are often formed. This is a language that is a mix of two or more languages. This is a partial pooling equilibrium. The existence of creoles suggest that the population dynamics of language formation is more complex than the simple Lewis game.

## Langauge intergration problem:

### **Problem Definition**

Given a set of signaling systems ${\pi_1,\pi_2,\ldots,\pi_𝑛}$, find a permutation $\pi_m$ such that:

$$
\pi_m =\arg \min_\pi \sum_{𝑖=1}^𝑛 d(\pi,\pi_i)
$$ where d is the Cayley distance between permutations, i.e. the minimum number of transpositions required to transform one permutation into another.

### **Solution Approach**

Finding the exact median permutation is a computationally challenging task because the problem is NP-hard. However, there are heuristic and approximation methods to approach this problem. One common approach is to use a greedy algorithm that iteratively improves a candidate solution based on the distances to all permutations in the set.

Here is a simple heuristic approach to estimate a solution:

1.  **Start with an Initial Guess**: You can start with any permutation, such as 𝜋1π1​ or any permutation randomly chosen from the set.

2.  **Iterative Improvement**:

    -   For each element in the permutation, consider swapping it with every other element.
    -   Calculate the new total distance after each possible swap.
    -   If a swap results in a lower total distance, make the swap permanent.
    -   Repeat this process until no improving swaps are found.

This approach doesn't guarantee an optimal solution but can often produce a good approximation in a reasonable time frame.

Here's a Python function that demonstrates this basic heuristic:

```{python}
import itertools

def cayley_distance(pi, sigma):
    """Calculate the Cayley distance between two permutations."""
    count = 0
    temp = list(pi)
    for i in range(len(pi)):
        while temp[i] != sigma[i]:
            swap_index = temp.index(sigma[i])
            temp[i], temp[swap_index] = temp[swap_index], temp[i]
            count += 1
    return count

def median_permutation(permutations):
    n = len(permutations[0])  # Assuming all permutations are of the same length
    current = list(permutations[0])  # Start with the first permutation as an initial guess
    improving = True

    while improving:
        improving = False
        best_distance = sum(cayley_distance(current, p) for p in permutations)
        for i, j in itertools.combinations(range(n), 2):
            current[i], current[j] = current[j], current[i]  # Swap elements
            new_distance = sum(cayley_distance(current, p) for p in permutations)
            if new_distance < best_distance:
                best_distance = new_distance
                improving = True
            else:
                current[i], current[j] = current[j], current[i]  # Swap back if no improvement

    return current

# Example usage
permutations = [
    [1, 2, 3, 4],
    [2, 1, 4, 3],
    [1, 3, 4, 2],
    [4, 3, 2, 1]
]
print("Median permutation:", median_permutation(permutations))

```

# Learning

Two type of learning are considered.

1.  Evolution learning using knowledge hard-coded into the genome of the agents. Learning happens though replicator dynamics incorporating randomization followed by natural selection. Also other biologically inspired ideas like mutation and use of a fitness function can come into play.

    The down side of Evolution is that is takes many generation for many structures to emerge. (Richard Dawkings states that the evolution of different morphology of the eye are quick taking only 80 generation to evolve in a simulation from the most rudimentary light sensitive cell and elsewhere suggest that 8 generations are needed to see changes in this type of framework.

2.  RL refers to the type of learning from experience by an organism during its lifetime.

3.  Noam Chomsky and others Linguistics hypothesize that Language learning faculties are to a large extent passed through evolution and for this reason individuals can learn languages based on a rather minimal amount of stimulus. This has also be a reason why many in their field abandoned their work on solving linguistics and went on to research the mysteries of the human brain. I feel that to a large extent this book demonstrates that scientifically the notion of the brain requiring a specialized mechanism to evolve/learn complex language is an unnecessary assumption. (Of course it is possible that the brain has co-evolved together with language and that such mechanism do exist.)

    1.  in one sense the book starts with very simple systems of communication with just a lexicon.

    2.  The formation of more complex systems with syntax are treated in chapter 12 but these results here seem to satisfy a mathematician or a philosopher etc, without delving into different linguistic niceties that might satisfy a linguist.

    3.  However the Lewis game needs only a small tweak (the receiver getting multiple partial signals) to allow a signaling system with a grammar to emmerge via Roth-Erev RL. We can also make a categorical statement that this type of RL is a general purpose learning mechanism not a language specific one.

In agents we have learning that is based on evolution and requires subsequent generations of agents becoming fitter.

Here are two conceptual ideas to base RL on

Law of effect

:   Of several responses made to the same situation, those which are accompanied or closely followed by satisfaction to the animal will, other things being equal, be more ﬁrmly connected with the situation, so that, when it recurs, they will be more likely to recur. — Edward Thorndike, Animal Intelligence, 1911

Law of practice

:   Learning slows down as reinforcements accrue

## Roth–Erev RL alg:

1.  set starting weight for each option
2.  weights evolve by addition of rewards gotten
3.  probability of choosing an alternative is proportional to its weight.

```python RE-RL
from mesa import Agent, Model
from mesa.time import StagedActivation
import random
import numpy as np

class LearningRule:
    def __init__(self, options, learning_rate=0.1):
        self.weights = {option: 1.0 for option in options}  # Start with equal weights for all options
        self.learning_rate = learning_rate

    def update_weights(self, option, reward):
        # Update the weight of the chosen option by adding the reward scaled by the learning rate
        old_weight = self.weights[option]
        self.weights[option] += self.learning_rate * reward
        print(f"Updated weight for option {option}: {old_weight} -> {self.weights[option]}")

    def choose_option(self):
        # Select an option based on the weighted probabilities
        total = sum(self.weights.values())
        probabilities = [self.weights[opt] / total for opt in self.weights]
        return np.random.choice(list(self.weights.keys()), p=probabilities)

class LewisAgent(Agent):
    def __init__(self, unique_id, model, learning_options):
        super().__init__(unique_id, model)
        self.message = None
        self.action = None
        self.reward = 0
        self.learning_rule = LearningRule(learning_options, learning_rate=0.1)  # Initialize learning with given options

    def set_reward(self):
        print(f"Agent {self.unique_id} received reward: {self.reward}")

class Sender(LewisAgent):
    def send(self):
        state = self.model.get_state()
        self.message = self.learning_rule.choose_option()  # Send a signal based on the learned weights
        print(f"Sender {self.unique_id} sends signal for state {state}: {self.message}")

    def update_learning(self):
        self.learning_rule.update_weights(self.model.current_state, self.reward)  # Update weights based on the state and received reward

class Receiver(LewisAgent):
    def receive(self):
        self.received_signals = [sender.message for sender in self.model.senders]
        if self.received_signals:
            self.action = self.learning_rule.choose_option()  # Choose an action based on received signals and learned weights

    def calc_reward(self):
        correct_action = self.model.states_actions[self.model.current_state]
        self.reward = 1 if self.action == correct_action else 0
        print(f"Receiver {self.unique_id} calculated reward: {self.reward} for action {self.action}")

    def update_learning(self):
        for signal in self.received_signals:
            self.learning_rule.update_weights(signal, self.reward)  # Update weights based on signals and rewards

class SignalingGame(Model):
    def __init__(self, senders_count=1, receivers_count=1, state_count=3):
        super().__init__()
        self.k = k
        self.current_state = None

        # Initialize the states, signals, and actions mapping
        self.states_signals = list(range(k))  # States are simply numbers
        self.signals_actions = list(chr(65 + i) for i in range(k))  # Signals are characters

        self.states_actions = {i: i for i in range(k)}  # Mapping states to correct actions

        self.senders = [Sender(i, self, self.signals_actions) for i in range(senders_count)]
        self.receivers = [Receiver(i + senders_count, self, self.signals_actions) for i in range(receivers_count)]
        
        self.schedule = StagedActivation(self, stage_list=['send', 'receive', 'calc_reward', 'set_reward', 'update_learning'])

    def get_state(self):
        return random.choice(self.states_signals)

    def step(self):
      
        self.current_state = self.get_state()
        print(f"New state of the world: {self.current_state}")
        self.schedule.step()

# Running the model
model = SignalingGame(senders_count=1, receivers_count=1, state_count=3)
for i in range(10):
    print(f"--- Step {i+1} ---")
    model.step()
    
```

## Bush–Mosteller RL

1.  If an act is chosen and a reward is gotten the probability is incremented by adding some fraction of the distance between the original probability and probability one

    $$
    pr_{new}(A)=(1-\alpha)pr_{old}(A) + a(1)
    $$

2.  Alternative action probabilities are decremented so that everything adds to one

## Goldilocks RL

We consider if there is a Goldilocks point in the RL exploration exploitation dilemma which has a good balance of the two.

-   If we stop learning too fast we are **too cold**

-   If we exploring too much we are **too hot**

-   At the limit is the Goldilocks RL point

**Q: is there Goldilocks RL Alg?**

-   Roth—Erev, Thompson sampling & UCB don't get stuck

-   Epsilon greedy is too hot

-   Bush–Mosteller is too cold

## RL variants:

-   BM variants like dynamically adjusting aspiration levels

-   exponential response rule. The basic idea is to make probabilities proportional to the exponential of past reinforcements. [@Blume2002]

-   best response dynamics, aka Cournot dynamics

## Beyond the book:

-   \^\[citation needed \]\^ investigating RL for this task also suggest that Roth-Erev with forgetting leads to more efficient learning.
-   \^\[citation needed\]\^ Another paper suggest that a learning with a certain prior can be better than Roth-Erev learning.

Adding Learning

```{python}
from mesa import Agent, Model
from mesa.time import StagedActivation
import random

class LewisAgent(Agent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.message = None
        self.action= None

    def send(self):
      pass
    
    def recive(self):
      pass

    def calc_reward(self):
      pass
    
    def set_reward(self):
        self.reward = model.reward
        # Placeholder for learning logic
        print(f"Agent {self.unique_id} received reward: {self.reward}")
 
class Sender(LewisAgent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)

    def send(self):
        state = self.model.get_state()
        # Learning to map states to signals
        self.message = self.model.states_signals[state]
        print(f"Sender {self.unique_id} sends signal for state {state}: {self.message}")

class Receiver(LewisAgent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)

    def recive(self):
      self.received_signals=[]
      for sender in self.model.senders:
        self.received_signals.append(sender.message)
            # Learning to map signals to actions
      if len(self.received_signals)==1:
        self.action = self.model.signals_actions[self.received_signals[0]]
      else:
        self.action = self.model.signals_actions[self.received_signals[0]]
      

    def calc_reward(self):
      action = self.model.signals_actions[self.received_signals[0]]
      correct_action = self.model.states_actions[self.model.current_state]
      reward = 1 if action == correct_action else 0
      model.reward = reward


class SignalingGame(Model):
    def __init__(self, senders_count=1, recievers_count=1, state_count=3):
        
        super().__init__()
        self.senders_count=senders_count
        self.recievers_count=recievers_count
        self.num_agents = self.recievers_count+self.senders_count

        # e.g., 0 -> A, 1 -> B, ...
        self.states_signals = {i: chr(65 + i) for i in range(k)} 

        # e.g., A -> 0, B -> 1, ...
        self.signals_actions = {chr(65 + i): i for i in range(k)}
        
        # state 0 needs action 0, state 1 needs action 1, ...
        self.states_actions = {i: i for i in range(k)}  
        
        self.current_state = None

        # Create agents
        self.senders = []
        self.receivers=[]
        self.my_agents=[]
        self.uid=0
        for i in range(self.senders_count):
            sender = Sender(self.uid, self)
            self.senders.append(sender)
            self.my_agents.append(sender)
            self.uid +=1
        for j in range (self.recievers_count):
            reciever = Receiver(self.uid, self)
            self.receivers.append(reciever)
            self.my_agents.append(reciever)
            self.uid +=1

        self.schedule = StagedActivation(
          model=self,
          agents=self.my_agents, 
          stage_list = ['send','recive','calc_reward','set_reward']
        )
    
    def get_state(self):
        return self.current_state

    def step(self):
        self.current_state = random.choice(list(self.states_signals.keys()))
        print(f"New state of the world: {self.current_state}")
        self.schedule.step()

# Running the model
k = 3  # Number of states, signals, and actions
steps = 10
model = SignalingGame(senders_count=2,recievers_count=1,state_count=k)
for i in range(steps):
    print(f"--- Step {i+1} ---")
    model.step()

```

# 11. Networks I: Logic and Information Processing

## Logic

## Information processing

### Inventing the code Game

The world has say four states {S1...S4}. In this extended Lewis game where an agent is a receiver of two messages, each with a partial specification the first is {s1\|\|s2} or {s3\|\|s4} and the second {s1\|\|s3} or {s2\|\|s4}. The agent needs to process the two messages it to get the full state specification and take the appropriate action in response for getting a reward !

The added problem here is that the messages one of two flags, and one of two other flags do not have an established system for the message so learning the content of the signals needs to evolve together with the inference.

The sender can be two agents or one agent with a complex message.

Jeffrey Barrett in Barrett 2007a, 2007b. showed that this can be learned with Roth Erev RL

this is more interesting if there are errors:

-   is a 10% chance of senders making mistakes with only 3% errors by the receiver?! Skyrms explains this due to the inference being like a taking a vote in a Condorcet signaling system.

-   receiver errors are considered in [@Nowak1999] where the authors claim they lead to syntax formation.

# 12. Complex Signals and Compositionality

CCSS

:   complex composeable signaling systems

:   

-   The use of complex signals is not unique to humans.

-   In [@Nowak1999] the authors make a case that complex signals can increase the ﬁdelity of information transmission, by preventing simple signals getting crowded together as the space of potential signals gets ﬁlled up. Also some complex signalsing systems should be simpler to learn. (*can we specify a maximaly learnable family?*) and process inforamtion

-   considered CCSS as conffering greater Darwinian fitness in contexts where *rich information processing is important.*

    -   Q: **Is there a metric for measuring the advantage and or the importance of such information processing needs?**

-   In [@batali1998] the author investigates the emergence of complex signals in populations of neural nets.

-   in [@Kirby2000] the author, extends the model in a small population of interacting artiﬁcial agents.

-   These two papers assume Structured meanings like \<John, loves, Mary\>. But I am more interested in the ability of evolving arbitrary structures like a sketch map of resources, a distribution of prices, a small bitmap etc.

-   Skryms takes a similar reductionist POV: finding how to evolve a complex signaling system with minimal departure from the Lewis signaling game and other models already covered....

-   It is suggested that the "Inventing the code Game" is a sufficient framework creating basic composeable messages. If the receiver considers a sequence of two partial signals as conjunction the and can integrated into one full message!

    -   Red \> Top

    -   Green\> Bottom

    -   Yellow\> Left

    -   Blue \> Right

    to signal the state of \<bottom, left\> a sender can send \<green,yellow\> or \<yellow,green\> and the receiver can compose them.

-   But if it is also possible to evolve and learn order for signals a richer form of composeability become possible. Subject–predicate or operator–sentence.

-   Sensitivity to temporal order is something many organisms have already developed in responding to perceptual signals.

-   More generally, we can say that temporal pattern recognition is a fundamental mechanism for anticipating the future.

Skryms points out that temporal order is another mechanism that evolves and that they come together.

Unfortunately Skryms seems to get sidetracked once he point out about order and does not explain how order sensitivity eveloves in "Making the code game".

```python
from mesa import Agent, Model
from mesa.time import StagedActivation
import random

class LewisAgent(Agent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.message = None
        self.action= None

    def send(self):
      pass
    
    def recive(self):
      pass

    def calc_reward(self):
      pass
    
    def set_reward(self):
        self.reward = model.reward
        # Placeholder for learning logic
        print(f"Agent {self.unique_id} received reward: {self.reward}")
 
class Sender(LewisAgent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)

    def send(self):
        state = self.model.get_state()
        
        # Learning to map states to signals
        if type(state) is str:
          self.message = self.model.states_signals[state]
        else:
          self.message = set()
          while len(self.message)>0:
            message = {model.states_signals[self.message.pop()]}
            self.message = self.message.union(message)
        print(f"Sender {self.unique_id} sends signal for state {state}: {self.message}")

class Receiver(LewisAgent):
  
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)

    def recive(self):
      self.received_signals=[]
      self.action = set()
      
      for sender in self.model.senders:
        self.received_signals.append(sender.message)
        # Learning to map signals to actions
        print(f'{self.received_signals=}')
        print(f'{type(self.received_signals)=}')
        
        for signal_set in self.received_signals:
          actions = set()
          while len(signal_set)>0:
            action  = {model.signals_actions[self.message.pop()]}
            actions  = actions.union(action)
          self.action =  self.action.intersection(actions)
      print(f"Reciever {self.unique_id} action : {self.action}")

    def calc_reward(self):
      action = self.action
      correct_action = self.model.states_actions[self.model.current_state]
      reward = 1 if action == correct_action else 0
      model.reward = reward
      

class SignalingGame(Model):
    def __init__(self, senders_count=1, recievers_count=1, state_count=3):
        
        super().__init__()
        self.senders_count=senders_count
        self.recievers_count=recievers_count
        #self.num_agents = self.recievers_count+self.senders_count

        self.states   = [f'{i}' for i in range(state_count)]
        self.signals = [chr(65 + i) for i in range(state_count)]
        self.actions = [f'{i}' for i in range(state_count)]

        self.current_state = None

        # Create agents
        self.senders = []
        self.receivers=[]
        self.my_agents=[]
        self.uid=0
        
        for i in range(self.senders_count):
            sender = Sender(self.uid, self)
            self.senders.append(sender)
            self.my_agents.append(sender)
            self.uid +=1
        for j in range (self.recievers_count):
            reciever = Receiver(self.uid, self)
            self.receivers.append(reciever)
            self.my_agents.append(reciever)
            self.uid +=1

        self.schedule = StagedActivation(
          model=self,
          agents=self.my_agents, 
          stage_list = ['send','recive','calc_reward','set_reward']
        )
    
        

    def step(self):
        self.current_state = random.choice(list(self.states_signals.keys()))
        self.current_state_set = {random.choice(list(self.states_signals.keys()))}
        print(f"New state of the world: {self.current_state}")
        self.schedule.step()

    def get_state(self):
        if self.senders_count ==1:
          return self.current_state
        else: 
          return {self.current_state, random.choice(list(self.states_signals.keys()))}


# Running the model
state_count = 3  # Number of states, signals, and actions
steps = 10
model = SignalingGame(senders_count=2,recievers_count=1,state_count=state_count)
for i in range(steps):
    print(f"--- Step {i+1} ---")
    model.step()

```

## Some thoughts

1.  learning in the original Lewis language games is exponential in the size of the lexicon. It would seem that some complex signals systems should have orders of magnitude advantage in learning rates compared to the original variants. Lets consider a Lewis signaling system with 27 signals.\
    The learning is $O(e^{27})\propto5\times10^{12}$

2.  Under a conjunctive structure with three messages a lexicon of 9 messages would be required.\
    The learning is $O(e^{9})\propto 8.1\times10^{3}$

3.  Under Say we have a VSO complex signal with 3 signals per a positional POS category. This leads to 27 signal lexicon under the original lexicon. Using the complex system only 3 three signals need to be learned.\
    So that learning is $O(e^{3}) \propto 20$

    If we factor learning time as part of the costs of signaling we should expect complex signaling systems to emerge quickly. Also if we consider learning as part of In this case partial pooling states are acceptable and even desirable each signal now has three meaning depending on its position.

4.  In NLP we never see such a perfect utilization of a SS where all synthetically messages are semantically meaningful. On the other hand NLP allow nesting so that sequence like V(VSO)(VSO) corresponding to 3^8^ messages and adding a sub-category modifier prefix (MVMSMO) leads to (3\^6) signals 729 signals without

5.  For a simulation - some predators can be introduced into the environment nearby agents will signal it presence. Receivers who take that appropriate action will survive. Those that do not may die. Agent have longevity and must learn the language. When agents die they are replaced by infants without a uniform signaling weights.

6.  Another point is that seems obvious is that if we learn/evolve the lexicon with just one one new word at a time the task becomes trivial. We just need to learn one new state to signal and one new signal to action mapping. But learning just one is a one to one matching. If we have some sense of the salience of the signals we can just order them in that order and we keep increasing fitness.... till we reach some marginal rate of fitness where new signals do almost nothing for our survival.

7.  If we can evolve a complex signaling system we can move to next steps like optimizing our lexicon and grammar for:
    1.  minimizing communications errors, (error detection and correction)
    2.  maximizing information transmission. (compression)
    3.  minimizing cost of acquisition. (acquisition)
    4.  the trade off between grammatic generalization and easily learnability v.s. making the system harder to learn but more efficient for communication.
    5.  how do we handle inference (for logic)
    6.  how do we take advantage of predictability for partial messages
    7.  what about a convention for grammar - useful for agents that need to exchange data in different formats efficently.
    8.  Costs of morphotactics - can we do all this in practive with human sound systems. Can we figure our metrics for human languages.
    9.  Given a (human) language tree can we posit a most pasimonius path for its evolution.


# Signals Bibliography - some annotations

The following bibliographical entries are on General and Evolutionary Game Theory:

-   [@vonneumann1947] - The first book on game theory.
-   [@Weibull1997] - A book on evolutionary game theory.
-   [@hofbauer1998evolutionary] - Covers the mathematical theory of evolutionary games focusing on the lokta volterra model and the replicator dynamics.
-   [@Samuelson1998Evolutionary] - Covers on evolutionary game theory in extensive forms.
-   [@Nowak2006Evolutionary] - A book on evolutionary dynamics.
-   **Aumann, R. (1987) "Subjectivity and Correlation in Randomized Strategies." Journal of Mathematical Economics 1: 67–96.**
-   **Aumann, R. (1987) "Correlated Equilibrium as an Expression of Bayesian Rationality." Econometrica 55: 1–18.**


THe following are on Roth Erev RL:

-   Bush, R. and F. Mosteller (1955) Stochastic Models of Learning. John Wiley & Sons: New York.
-   Erev, I. and E. Haruvy (2005) “On the Potential Uses and Current Limitations of Data-Driven Learning Models.” Journal of Mathematical Psychology 49: 357–371.
-   Erev, I. and A. Roth (1998) “Predicting How People Play Games: Reinforcement Learning in Experimental Games with Unique Mixed-Strategy Equilibria.” American Economic Review 88: 848–881.
-   Roth, A. and I. Erev (1995) “Learning in Extensive Form Games: Experimental Data and Simple Dynamical Models in the Intermediate Term.” Games and Economic Behavior 8: 164–212.
-   Herrnstein, R. J. (1961) “Relative and Absolute Strength of Response as a Function of Frequency of Reinforcement.” Journal of Experimental Analysis of Behavior 4: 267–272.
-   Herrnstein, R. J. (1970) “On the Law of Effect.” Journal of the Experimental Analysis of Behavior 13: 243–266.


In [@Skyrms2010signals] the author discusses how a Lewis signaling games can be viewed as a mechanism in which a rudimentary signaling system can give rise to a simple language.

The languages arising from Lewis signaling games are limited.

The chapter on complex signals in terms tend to give rise to a

The bibliography

-   Aldous, D. (1985) “Exchangeability and Related Topics.” In L’E´cole d’e´te´ de probabilite´s de Saint-Flour, XIII–1983 1–198. Berlin: Springer.
-   Argiento, R., R. Pemantle, B. Skyrms, and S. Volkov (2009) “Learning to Signal: Analysis of a Micro-Level **Reinforcement Model**.” Stochastic Processes and their Applications 119: 373–390.
-   ~~Aristotle Historia Animalium Book IX. Aristotle Physics Book II.~~
-   Asher, N., I. Sher and M. Williams (2001) “Game Theoretical Foundations for Gricean Constraints.” In Proceedings of the Thirteenth Amsterdam Colloquium. Amsterdam: IILC.
-   Bala, V. and S. Goya (2000) “A Noncooperative Model of Network Formation.” Econometrica 68: 1181–1231.
-   [@Barrett2006Numerical] ~~Barrett, J. A. (2006) “Numerical Simulations of the Lewis Signaling Game: Learning Strategies, Pooling Equilibria, and the Evolution of Grammar.” Working Paper MBS06–09. University of California, Irvine.~~
-   [@Barrett2009Evolution] ~~Barrett, J. A. (2007a) “The Evolution of Coding in Signaling Games.” Theory and Decision. DOI: 10.1007/s11238–007–9064–0.~~
-   [@Barrett2007Dynamic] ~~Barrett, J. A. (2007b) “Dynamic Partitioning and the Conventionality of Kinds.” Philosophy of Science 74: 527–546.~~
-   Barrett, J. A. and K. Zollman (2007) “The Role of Forgetting in the Evolution and Learning of Language.” preprint.
-   @batali1998 ~~Batali, J. (1998) “Computational Simulations of the Evolution of Grammar.” In Approaches to the Evolution of Language: Social and Cognitive Bases, ed. J. R. Hurford et al. Cambridge: Cambridge University Press.~~
-   Beggs, A. (2005) “On the Convergence of **Reinforcement Learning**.” Journal of Economic Theory 122: 1–36.
-   Benaim, M. (1999) “Dynamics of Stochastic Approximation Algorithms.” In Seminaire de Probabilites 33. Berlin: Springer Verlag.
-   Benaim, M., S. J. Shreiber, and P. Tarres (2004) “Generalized Urn Models of Evolutionary Processes.” Annals of Applied Probability 14: 1455–1478.
-   Bereby-Meyer, Y. and I. Erev (1998) “On Learning How to be a Successful Loser: A Comparison of Alternative Abstractions of Learning Processes in the Loss Domain.” Journal of Mathematical Psychology 42: 266–286.
-   Berg, R. M. van den (2008) Proclus’ Commentary on the Cratylus in Context. Leiden: Brill.
-   Bergstrom, T. (2002) “Evolution of Social Behavior: Individual and Group Selection Models.” Journal of Economic Perspectives 16: 231–238.
-   Bergstrom, C. T. and M. Lachmann (1998) “Signaling Among Relatives III. Talk is Cheap.” Proceedings of the National Academy of Sciences USA 95: 5200–5105.
-   Berleman, J. E., J. Scott, T. Chumley, and J. R. Kirby (2008) “Predataxis Behavior in Myxococcus Xanthus.” Proceedings of the National Academy of Sciences USA 105: 17127–17132.
-   Berninghaus, S., K.-M. Ehrhart, M. Ott, and B. Vogt (2007) “Evolution of Networks–an Experimental Analysis.” Journal of Evolutionary Economics 17: 317–347.
-   Bickerton, D. (1990) Language and Species. Chicago: University of Chicago Press.
-   Bjornerstedt, J. and J. Weibull (1995) “Nash Equilibrium and Evolution by Imitation.” In K. Arrow et al. (eds.), 155–71, The Rational Foundations of Economic Behavior. New York: Macmillan.
-   Bloch, F. and M. Jackson (2007) “The Formation of Networks with Transfers among Players.” Journal of Economic Theory 133: 83–110.
-   Bloch, F. and B. Dutta (2009) “Communication Networks with Endogenous Link Strength.” Games and Economic Behavior 66: 39–56.
-   Blume, A. (2000) “Coordination and Learning with a Partial Language.” Journal of Economic Theory 95: 1–36.
-   Blume, A., D. DeJong, Y.-G. Kim, and G. B. Sprinkle (1998) “Experimental Evidence on the Evolution of the Meaning of Messages in Sender-Receiver Games.” American Economic Review 88: 1323–1340.
-   Blume, A., D. DeJong, Y.-G. Kim, and G. B. Sprinkle (2001) “Evolution of Communication with Partial Common Interest.” Games and Economic Behavior 37: 79–120.
-   [@Blume2002] ~~Blume, A., D. DeJong, G. Neumann, N. E. Savin (2002) “Learning and Communication in Sender-Receiver Games: An Econometric Investigation.” Journal of Applied Econometrics 17: 225–247.~~
-   Borgers, T. and R. Sarin (1997) “**Learning through Reinforcement and the Replicator Dynamics**.” Journal of Economic Theory 74: 235–265.
-   Borgers, T. and R. Sarin (2000) “Naive Reinforcement Learning with Endogenous Aspirations.” International Economic Review 41: 921–950.
-   Brandman, O. and T. Meyer (2008) “Feedback Loops Shape Cellular Signals in Space and Time.” Science 322: 390–395. Brentano, F. (1874) Psychology from an Empirical Standpoint. London: Routledge.
-   Brown, G. W. (1951) “Iterative Solutions of Games by Fictitious Play.” In Activity Analysis of Production and Allocation, ed. T. C. Koopmans. New York: Wiley.
-   Bshary, R., A. Hohner, K. Ait-el-Djoudi, and H. Fricke (2006) “Interspecific Communicative and Coordinated Hunting between Groupers and Giant Moray Eels in the Red Sea.” PLoS Biology 4:2393–2398 4:e431, DOI:10:1371/journal.pbio.0040431.
-   Callander, S. and C. R. Plott (2005) “Principles of Network Development and Evolution: An Experimental Study.” Journal of Public Economics 89: 1469–1495.
-   Camerer, C. and T-H. Ho (1999) “Experience Weighted Attraction Learning in Normal Form Games.” Econometrica 67: 827–874.
-   Campbell, G. (2003) Lucretius on Creation and Evolution. Oxford: Oxford University Press.
-   Charrier, I. and C. B. Sturdy (2005) “Call-Based Species Recognition in the Black-Capped Chickadees.” Behavioural Processes 70: 271–281.
-   Cheney, D. and R. Seyfarth (1990) How Monkeys See the World: Inside the Mind of Another Species. Chicago: University of Chicago Press.
-   Cross, J. G. (1973) “A Stochastic Learning Model of Economic Behavior.” Quarterly Journal of Economics 87: 239–266.
-   Crawford, V. and J. Sobel (1982) “Strategic Information Transmission.” Econometrica 50: 1431–1451.
-   Cubitt, R. and R. Sugden (2003) “Common Knowledge, Salience and Convention: A Philosophical Reconstruction of David Lewis’ Game Theory.” Economics and Philosophy 19:175–210.
-   Donaldson, M. C., M. Lachmann, and C. T. Bergstrom (2007) “The Evolution of Functionally Referential Meaning in a Structured World.” Journal of Theoretical Biology 246: 225–233.
-   Dretske, F. (1981) Knowledge and the Flow of Information. Cambridge: MIT Press.
-   Dugatkin, L. A. (1997) Cooperation Among Animals: An Evolutionary Perspective. Oxford: Oxford University Press.
-   Dyer, F. C. and T. D. Seeley (1991) “Dance Dialects and Foraging Range in three Asian Honey Bee Species.” Behavioral Ecology and Sociobiology 28: 227–233.
-   Edwards, W. (1961) “Probability Learning in 1000 Trials.” Journal of Experimental Psychology 62: 385–394.
-   Estes, W. K. (1950) “Toward a Statistical Theory of Learning.” Psychological Review 57: 94–107.
-   Evans, C. S., C. L. Evans and P. Marler (1994) “On the Meaning of Alarm Calls: Functional Reference in an Avian Vocal System.” Animal Behavior 73: 23–38.
-   Falk, A. and M. Kosfeld (2003) “It’s All About Connections: Evidence on Network Formation.” IEW Working Paper 146. University of Zurich.
-   Feltovich, N. (2000) “Reinforcement-Based vs. Belief-Based Learning Models in Experimental Asymmetric-Information Games.” Econometrica 68: 605–641.
-   Flache, A. and M. Macy (2002) “Stochastic Collusion and the Power Law of Learning.” Journal of Conflict Resolution 46: 629–653.
-   Floridi, L. (1997) “Skepticism, Animal Rationality, and the Fortune of Chrysippus’ Dog.” Archiv fu¨r Geschichte der Philosophie 79: 27–57.
-   Frede, D. and B. Inwood (2005) Language and Learning: Philosophy of Language in the Hellenistic Age. Cambridge: Cambridge University Press. Fudenberg,
-   D. and D. Levine (1998) A Theory of Learning in Games. Cambridge, MA: MIT Press.
-   Galeotti, A. and S. Goyal (2008) “The Law of the Few.” Working paper, University of Essex.
-   Galeotti, A., S. Goyal, and J. Kamphorst (2006) “Network Formation with Heterogeneous Players.” Games and Economic Behavior 54: 353–372.
-   Gazda, S., R. C. Connor, R. K. Edgar, and F. Cox (2005) “A Division of Labour with Role Specialization in Group-hunting Bottlenose Dolphins (Tursiops truncatus) off Cedar Key, Florida.” Proceedings of the Royal Society B 272: 135–140.
-   Gentner, T. Q., K. M. Fenn, D. Margoliash, and H. C. Nusbaum (2006) “Recursive Syntactic Pattern Learning by Songbirds.” Nature 440: 1204–1207.
-   Gettier, E. (1963) “Is Justified True Belief Knowledge?” Analysis 23:121–123.
-   Godfrey-Smith, P. (1989) “Misinformation.” Canadian Journal of Philosophy 19: 522–550.
-   Godfrey-Smith, P. (2000a) “On the Theoretical Role of Genetic Coding.” Philosophy of Science 67: 26–44.
-   Godfrey-Smith, P. (2000b) “Information, Arbitrariness and Selection: Comments on Maynard-Smith.” Philosophy of Science 67: 202–207.
-   Good, I. J. (1950) Probability and the Weighing of Evidence. London: Charles Griffin.
-   Good, I. J. (1983) Good Thinking: The Foundations of Probability and its Applications. Minneapolis: University of Minnesota Press.
-   Gould, J. L. (1975) “Honey Bee Recruitment: the Dance Language Controversy.” Science 189: 685–693.
-   Gould S. J., and N. Eldredge (1977) “Punctuated Equilibria: The Tempo and Mode of Evolution reconsidered.” Paleobiology 3: 115–151.
-   Goryachev, A. B., D. J. Toh, and T. Lee (2006) “Systems Analysis of a Quorum Sensing Network: Design Constraints Imposed by the Functional Requirements, Network Topology and Kinetic Constants.” BioSystems 83: 178–187.
-   Goyal, S. (2007) Connections: An Introduction to the Economics of Networks. Princeton: Princeton University Press.
-   Grice, H. P. (1957) “Meaning.” Philosophical Review 66: 377–388.
-   Grice, H. P. (1975) “Logic and Conversation.” In Syntax and Semantics, vol. 3, ed. P. Cole and J. L. Morgan, 41–58. New York: Academic Press.
-   Grice, H. P. (1989) Studies in the Way of Words. Cambridge, MA: Harvard University Press.
-   Griffiths, P. E. (2001) “Genetic Information: A Metaphor in Search of a Theory.” Philosophy of Science 68: 394–412.
-   Grim, P., P. St. Denis, and T. Kokalis (2002) “Learning to Communicate: The Emergence of Signaling in Spatialized Arrays of Neural Nets.” Adaptive Behavior 10: 45–70.
-   Grim, P., T. Kokalis, A. Alai-Tafti, A., and N. Kilb (2000) “Evolution of Communication in Perfect and Imperfect Worlds.” World Futures: The Journal of General Evolution 56: 179–197.
-   Grim, P., T. Kokalis, A. Alai-Tafti, N. Kilb, and P. St. Denis (2004) “Making Meaning Happen.” Journal of Experimental and Theoretical Artificial Intelligence 16: 209–243.
-   Gyger, M., P. Marler, and R. Pickert (1987) “Semantics of an Avian Alarm Call System: The Male Domestic Fowl,
-   Gallus Domesticus.” Behavior 102: 15–20. 184
-   Hadeler, K. P. (1981) “Stable Polymorphisms in a Selection Model with Mutation.” SIAM Journal of Applied Mathematics 41: 1–7.
-   Hailman, J., M. Ficken, and R. Ficken (1985) “The ‘Chick-a-dee’ calls of Parus atricapillus.” Semiotica 56: 191–224.
-   Hamilton, W. D. (1963) “The Evolution of Altruistic Behavior.” American Naturalist 97: 354–356.
-   Hamilton, W. D. (1964) “The Genetical Evolution of Social Behavior I and II.” Journal of Theoretical Biology 7: 1–52.
-   Hamilton, W. D. (1967) “Extraordinary Sex Ratios.” Science 156: 477–488.
-   Hamilton, W. D. (1971) “Selection of Selfish and Altruistic Behavior in Some Extreme Models.” In Man and Beast, ed. J. F. Eisenberg and W. S. Dillon, 59–91. Washington, D.C.: Smithsonian Institution Press.
-   Hamilton, W. D. (1995) Narrow Roads of Gene Land. vol. 1: Evolution of Social Behavior. New York: W. H. Freeman.
-   Harley, C. B. (1981) “Learning the **Evolutionarily Stable Strategy**.” Journal of Theoretical Biology 89: 611–633.
-   Harms, W. F. (2004) Information and Meaning in Evolutionary Processes. Cambridge: Cambridge University Press.
-   Hauert, C., S. De Monte, J. Hofbauer, and K. Sigmund (2002) “Volunteering as Red Queen Mechanism for Cooperation in Public Goods Games.” Science 296, 1129–1132.

-   Hauser, M. D. (1988) “How Infant Vervet Monkeys Learn to Recognize Starling Alarm Calls: The Role of Experience.” Behavior 105: 187–201.

-   Hauser, M. D. (1997) The Evolution of Communication. Cambridge, MA: MIT Press.

-   Hauser, M. D., N. Chomsky, and W. T. Fitch (2002) “The Faculty of Language: What is it, Who has it, and How did it Evolve.” Science 298: 1569–1579.

-   Hebb, D. (1949) The Organization of Behavior. New York: Wiley.

-   Herman, L. M., D. G. Richards, and J. P. Wolz (1984) “Comprehension of Sentences by Bottle-Nosed Dolphins.” Cognition 16: 129–219.

-   Ho, T. H., X. Wang, and C. Camerer (2008) “Individual differences in EWA Learning with Partial Payoff Information.” The Economic Journal 118: 37–59.

-   Hofbauer, J. (1985) “The Selection-Mutation Equation.” Journal of Mathematical Biology. 23: 41–53.

-   Hofbauer, J. and S. Huttegger (2008) “Feasibility of Communication in Binary Signaling Games.” Journal of Theoretical Biology 254: 843–849.



-   Hojman, D. A. and A. Szeidl (2008) “Core and Periphery in Networks.” Journal of Economic Theory. 139: 295–309.

-   Holland, J. (1975) Natural and Artificial Systems. Ann Arbor, Michigan: University of Michigan Press.

-   Holldobler, B. and E. O. Wilson (1990) The Ants. Cambridge, MA:

-   Belknap. Hoppe, F. M. (1984) “Polya-like Urns and the Ewens Sampling Formula.” Journal of Mathematical Biology 20: 91–94.
-   Hopkins, E. (2002) “Two Competing Models about How People Learn in Games.” Econometrica 70, 2141–2166.
-   Hopkins, E. and M. Posch (2005) “Attainability of Boundary Points under Reinforcement Learning.” Games and Economic Behavior 53: 110–125. Hume, D. (1739) A Treatise of Human Nature. London: John Noon.
-   Hurford, J. (1989) “Biological Evolution of the Saussurean Sign as a Component of the Language Acquisition Device.” Lingua 77: 187–222.
-   Huttegger, S. (2007a) “Evolution and the Explanation of Meaning.” Philosophy of Science 74: 1–27.
-   Huttegger, S. (2007b) “Evolutionary Explanations of Indicatives and Imperatives.” Erkenntnis 66: 409–436.
-   Huttegger, S. (2007c) “Robustness in Signaling Games.” Philosophy of Science 74: 839–847.
-   Huttegger, S. and B. Skyrms (2008) “Emergence of Information Transfer by Inductive Learning.” Studia Logica 89: 237–256.
-   Huttegger, S., B. Skyrms, R. Smead, and K. Zollman (2009) “Evolutionary Dynamics of Lewis Signaling Games: Signaling Systems vs. Partial Pooling.” Synthese. DOI: 10.1007/s11229–009–9477–0
-   Izquierdo, L., D. Izquierdo, N. Gotts, and J. G. Polhill (2007) “Transient and Asymptotic Dynamics of Reinforcement Learning in Games.” Games and Economic Behavior 61: 259–276. 186 SIGNALS: EVOLUTION, LEARNING, AND INFORMATION
-   Jackendoff, R. (2002) Foundations of Language. Oxford: Oxford University Press.
-   Jackson, M. (2008) Social and Economic Networks. Princeton: Princeton University Press.
-   Jackson, M. and A. Watts (2002) “On the Formation of Interaction Networks in Social Coordination Games.” Games and Economic Behavior 41: 265–291.
-   Kavanaugh, M. (1980) “Invasion of the Forest by an African Savannah Monkey: Behavioral Adaptations.” Behavior 73: 239–60. Kirby, S. (2000) “Syntax without Natural Selection: How Compositionality Emerges from Vocabulary in a Population of Learners.” In The Evolutionary Emergence of Language, ed. C. Knight, 303–323. Cambridge: Cambridge University Press.
-   Kirby, S. (2007) “The Evolution of Meaning-Space Structure through Iterated Learning.” In Emergence of Communication and Language, ed. C. Lyon et al., 253–268. Berlin: Springer Verlag.
-   Kirkup, B. C. and M. A. Riley (2004) “Antibiotic-Mediated Antagonism Leads to a Bacterial Game of Rock-Paper-Scissors in vivo.” Nature 428: 412–414.
-   Komarova, N. and P. Niyogi (2004) “Optimizing the Mutual Intelligibility of Linguistic Agents in a Shared World.” Artificial Intelligence 154: 1–42.
-   **Komarova, N., P. Niyogi, and M. Nowak (2001) “The Evolutionary Dynamics of Grammar Acquisition.” Journal of Theoretical Biology 209: 43–59.**
-   Kosfeld, M. (2004) “Economic Networks in the Laboratory.” Review of Network Economics 3: 20–41.
-   Kullback, S. and R. A. Leibler (1951) “On Information and Sufficiency.” Annals of Mathematical Statistics 22: 79–86.
-   Kullback, S. (1959) Information Theory and Statistics. New York: John Wiley.
-   Levi-Strauss, C. (1969) The Elementary Structures of Kinship. Boston: Beacon Press.
-   Lewis, D. K. (1969) Convention. Cambridge, MA: Harvard University Press.
-   Liggett, T. M. and S. Rolles (2004) “An Infinite Stochastic Model of Social Network Formation.” Stochastic Processes and their Applications 113: 65–80.
-   Lindley, D. (1956) “On a Measure of the Information Provided by an Experiment.” The Annals of Mathematical Statistics 27: 986–1005.
-   Luce, R. D. (1959) Individual Choice Behavior. John Wiley & Sons: New York.
-   Macedonia, J. M. (1990) “What is Communicated in the Antipredator Calls of Lemurs: Evidence from Antipredator Call Playbacks to Ringtailed and Ruffed Lemurs.” Ethology 86: 177–190.
-   McKinnon, S. (1991) From a Shattered Sun. Madison: University of Wisconsin Press.
-   Macy, M. (1991) “Learning to Cooperate: Stochastic and Tacit Collusion in Financial Exchange.” American Journal of Sociology 97: 808–843.
-   Macy, M. and A. Flache (2002) “Learning Dynamics in Social Dilemmas.” Proceedings of the National Academy of Sciences of the USA 99: 7229– 7236.
-   Marden, J. P., H. P. Young, G. Arslan, and J. S. Shamma (2009) “Payoffbased dynamics for Multiplayer Weakly Acyclic Games.” SIAM Journal on Control and Optimization 48: 373–396. 188

-   [@Smith1973LogicAnimalConflict] ~~Maynard Smith, J. and G. R. Price (1973) “The Logic of Animal Conflict.” Nature 246: 15–18.~~
-   Maynard Smith, J. and G. A. Parker (1976) “The Logic of Asymmetric Contests.” Animal Behaviour 24: 159–175.
-   Maynard Smith, J. (1982) Evolution and the Theory of Games. Cambridge: Cambridge University Press.
-   Maynard Smith, J. (2000) “The Concept of Information in Biology.” Philosophy of Science 67: 177–194.
-   Maynard Smith, J. and D. Harper (2003) Animal Signals. Oxford: Oxford University Press.
-   Mayor, J. (1898) “King James I On the Reasoning Faculty in Dogs.” The Classical Review 12: 93–96.
-   McGregor, P. (2005) Animal Communication Networks. Cambridge University Press: Cambridge.
-   Merin, A. (1999) “Information, Relevance, and Social Decisionmaking: Some Principles and Results of Decision-Theoretic Semantics.” In L. Moss, J. Ginzburg, M. de Rijke (eds.), 179–221, Logic, Language, and Computation, vol. 2. Stanford: CSLI.
-   Miller, M. B. and B. Bassler (2001) “Quorum Sensing In Bacteria.” Annual Review of Microbiology 55: 165–199.
-   Millikan, R. G. (1984) Language, Thought and Other Biological Categories. Cambridge, MA: MIT Press.
-   Milo, R., S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. Chklovskii, and U. Alon (2002) “Network Motifs: Simple Building Blocks of Complex Networks.” Science 298: 824–827.
-   [@doi:10.1073/pnas.96.14.8028] ~~**Nowak, M. A. and D. Krakauer (1999) “The Evolution of Language.” Proceedings of the National Academy of Sciences of the USA 96: 8028–8033.**~~
-   Nowak, M., J. Plotkin, and D. Krakauer (1999) “The Evolutionary Language Game.” Journal of Theoretical Biology 200: 147–162.
-   Nowak, M. and K. Sigmund (1993) “A Strategy of Win-stay, Lose-shift that Outperforms Tit-for-tat in the Prisoner’s Dilemma Game.” Nature 364: 56–58.
-   Oliphant, M. (1994) “The Dilemma of Saussurean Communication.” Biosystems 37: 31–38.
-   Othmer, H. G. and A. Stevens (1997) “Aggregation, Blow Up and Collapse: The ABC’s of Taxis in Reinforced Random Walks.” SIAM Journal on Applied Mathematics 57: 1044–1081.
-   Papineau, D. (1984) “Representation and Explanation.” Philosophy of Science 51: 550–72.
-   Papineau, D. (1987) Reality and Representation. Oxford: Blackwell.
-   Parikh, P. (2001) The Use of Language. Stanford: CSLI.
-   Pawlowitsch, C. (2008) “Why Evolution Does Not Always Lead to an Optimal Signaling System.” Games and Economic Behavior 63: 203–226.
-   Pemantle, R. (1990) “Nonconvergence to Unstable Points in Urn Models and Stochastic Approximations.” Annals of Probability 18: 698–712.
-   Pemantle, R. (2007) “A Survey of Random Processes with Reinforcement.” Probability Surveys 4: 1–79.
-   Pemantle, R. and B. Skyrms (2004a) “Network Formation by Reinforcement Learning: The Long and the Medium Run.” Mathematical Social Sciences 48: 315–327.
-   Pemantle, R. and B. Skyrms (2004b) “Time to Absorption in Discounted Reinforcement Models” Stochastic Processes and Their Applications 109: 1–12.
-   Pinker, S., and R. Jackendoff (2005) “The Faculty of Language: What’s Special About It?” Cognition 95: 201–236.
-   Quine, W. V. O. (1936) “Truth by Convention.” In Philosophical Essays for A. N. Whitehead, ed. O. H. Lee. 90–124.
-   Quine, W. V. O. (1969) “Epistemology Naturalized.” In Ontological Relativity and Other Essays. New York: Columbia University Press.
-   Rainey, H. J., K. Zuberbu¨hler, and P. J. B. Slater (2004) “Hornbills Can Distinguish between Primate Alarm Calls.” Proceedings of the Royal Society of London B 271: 755–759.
-   J. Riley, R. U. Greggers, A. D. Smith, D. R. Reynolds, and R. Menzel (2005) “The Flight Paths of Honeybees Recruited by the Waggle Dance.” Nature 435: 205–207.
-   Robbins, H. (1952) “Some Aspects of the Sequential Design of Experiments.” Bulletin of the American Mathematical Society 58: 527–535. 190
-   van Rooy, Robert. (2003) “Questioning to Resolve Decision Problems.” Linguistics and Philosophy 26:727–763.

-   Russell, B. (1921) The Analysis of Mind. (Lecture X) London: George Allen and Unwin.

-   Russell, B. (1948) Human Knowledge, Its Scope and Limits. New York: Simon and Schuster.

-   Salmon, T. C. (2001) “An Evaluation of Econometric Models of Adaptive Learning.” Econometrica 1597–1628.

-   Schlag, K. (1998) “Why Imitate and If So, How? A Bounded Rational Approach to Many Armed Bandits.” Journal of Economic Theory 78, 130–156.

-   Schreiber, Sebastian J. (2001) “Urn Models, Replicator Processes, and Random Genetic Drift”, SIAM Journal on Applied Mathematics, 61.6: 2148–2167.

-   Schultz, W. (2004) “Neural Coding of Basic Reward Terms of Animal Learning Theory, Game Theory, Microeconomics and Behavioural Ecology.” Current Opinion in Neurobiology 14:139–147.

-   Searcy, W. A. and S. Nowicki (2005) The Evolution of Animal Communication: Reliability and Deception in Signaling Systems. Princeton: Princeton University Press.

-   **Selten, R. and W. Massimo (2007) “The Emergence of Simple Languages in an Experimental Coordination Game.” Proceedings of the National Academy of Sciences of the USA 104: 7361–7366.**

-   Seyfarth, R. M. and D. L. Cheney (1990) “The Assessment by Vervet Monkeys of Their Own and Other Species’ Alarm Calls.” Animal Behavior 40: 754–764.

-   **Shannon, C. (1948) “A Mathematical Theory of Communication.” The Bell System Mathematical Journal 27: 379–423, 623–656.**

-   **Shannon, C. and W. Weaver (1949) The Mathematical Theory of Communication. Urbana: University of Illinois Press.**

-   Shreiber, S. (2001) “Urn Models, Replicator Processes and Random Genetic Drift.” SIAM Journal on Applied Mathematics 61: 2148–2167.

-   Sinervo, B. and C. M. Lively (1996) “The Rock-Paper-Scissors Game and the Evolution of Alternative Male Strategies.” Nature 380: 240–243.

-   Skyrms, B. (1996) Evolution of the Social Contract. Cambridge: Cambridge University Press. Skyrms, B. (1998) “Salience and Symmetry-Breaking in the Evolution of Convention.” Law and Philosophy 17: 411–418.

-   Skyrms, B. (1999) “Stability and Explanatory Significance of Some Simple Evolutionary Models.” Philosophy of Science 67: 94–113.

-   Skyrms, B. (2000) “Evolution of Inference.” In Dynamics of Human and Primate Societies, ed. Tim Kohler and George Gumerman, 77–88. New York: Oxford University Press.

-   Skyrms, B. (2004) The Stag Hunt and the Evolution of Social Structure. Cambridge: Cambridge University Press.

-   Skyrms, B. (2005) “Dynamics of Conformist Bias.” Monist 88: 260–269.

-   Skyrms, B. (2007) “Dynamic Networks and the Stag Hunt: Some Robustness Considerations.” Biological Theory 2: 7–9.

-   Skyrms, B. (2009) “Evolution of Signaling Systems with Multiple Senders and Receivers.” Philosophical Transactions of the Royal Society B doi:10.1098/rstb.2008.0258, 364: 771–779.

-   Skyrms, B. (2009) “Presidential Address: Signals.” Philosophy of Science 75:489–500.

-   Skyrms, B. and R. Pemantle (2000) “A Dynamic Model of Social Network Formation.” Proceedings of the National Academy of Sciences of the USA. 97: 9340–9346 192

-   Skyrms, B. and S. L. Zabell (forthcoming) “Inventing New Signals.”

-   Slobodchikoff, C. N., J. Kiriazis, C. Fischer, and E. Creef (1991) “Semantic Information Distinguishing Individual Predators in the Alarm Calls of Gunnison’s Prairie Dogs.” Animal Behaviour 42: 713–719.

-   Smith, A. (1983) \[1761\] Considerations Concerning the First Formation of Languages. Reprinted in Lectures on Rhetoric and Belles Lettres, ed. J. C. Bryce. Oxford: Oxford University Press.

-   Snowdon, C. T. (1990) “Language Capacities of Nonhuman Animals.” Yearbook of Physical Anthropology 33: 215–243.

-   Sorabji, R. (1993) Animal Minds and Human Morals: The Origins of the Western Debate. Ithaca: Cornell University Press.

-   Stander, P. E. (1990s) “Cooperative Hunting in Lions: The Role of the Individual.” Behavioral Ecology and Sociobiology 29: 445–454.

-   Stanford, P. K. (2007) Exceeding Our Grasp. Oxford: Oxford University Press.

-   @steels1997synthetic ~~Steels, L. (1997) “The Synthetic Modeling of Language Origins.” Evolution of Communication 1: 1–35.~~

-   @steels1998origins ~~Steels, L. (1998) “The Origins of Syntax in Visually Grounded Robotic Agents.” Artificial Intelligence 103: 133–156.~~

-   @steels2001LanguageGames ~~Steels, L (2001) "Language games for autonomous robots". IEEE Intelligent Systems, September-October
    2001:17–22~~

-   Sterelny, K. (2000) “The ‘Genetic Program’ Program: A Commentary on Maynard-Smith on Information in Biology.” Philosophy of Science 67: 195–201.

-   Sterelny, K. (2003) Thought in a Hostile World: The Evolution of Human Cognition. Oxford: Blackwell.

-   Struhsaker, T. T. (1967) “Auditory Communication among Vervet Monkeys Cercopithecus aethiops.” In Social Communication among Primates, ed. S.A. Altmann, 281–324. Chicago: University of Chicago Press.

-   Sugden, R. (2005) The Economics of Rights, Co-operation and Welfare (Basingstoke: Macmillan).

-   Suppes, P. and R. Atkinson (1960) Markov Learning Models for Multiperson Interactions. Palo Alto, CA: Stanford University Press.

-   Taga, M. E. and B. L. Bassler (2003) “Chemical Communication Among Bacteria.” Proceedings of the National Academy of Sciences of the USA 100 Suppl. 2, 14549–14554.

-   [@Taylor1978ESS]

-   Tempelton, C., E. Greene and K. Davis (2005) “Allometry of Alarm Calls: Black-Capped Chickadees Encode Information about Predator Size.” Science 308: 1934–1937.

-   Thorndike, E. L. (1911) Animal Intelligence. New York: Macmillan.

-   Thorndike, E. L. (1927) “The Law of Effect.” American Journal of Psychology 39: 212–222.

-   **Trapa, P. and M. Nowak (2000) “Nash Equilibria for an Evolutionary Language Game.” Journal of Mathematical Biology 41: 172–188.**

-   Vanderschraaf, P. (1998) “Knowledge, Equilibrium and Convention.” Erkenntnis 49: 337–369.

-   [@Wagner2013Costly]

-   **Wagner, E. (2009) “Communication and Structured Correlation.” Erkenntnis doi 10.1007/s10670–009–9157–y.**

-   Wa¨rneryd, K. (1993) “Cheap Talk, Coordination, and Evolutionary Stability.” Games and Economic Behavior 5: 532–546.

-   Watts, A. (2001) “A Dynamic Model of Network Formation.” Games and Economic Behavior 34: 331–341.

-   Weber, R. and C. Camerer (2003) “Cultural Conflict and Merger Failure: An Experimental Approach.” Management Science 49: 400–415.

-   Wei, L. and S. Durham (1978) “The Randomized Play-the-winner Rule in Medical Trials.” Journal of the American Statistical Association 73: 840–843.

-   Young, H. P. (2009) “Learning by Trial and Error.” Games and Economic Behavior 65: 626–643. 194

-   Zabell, S. L. (1992) “Predicting the Unpredictable.” Synthese 90: 205–232.

-   Zabell, S. L. (2005) Symmetry and Its Discontents: Essays in the History of Inductive Probability. Cambridge: Cambridge University Press.

-   Zeeman, E. C. (1980) “Population Dynamics from Game Theory.” In Global Theory of Dynamical Systems, Springer Lecture Notes on Mathematics 819.

-   Zollman, K. (2005) “Talking to Neighbors: The Evolution of Regional Meaning.” Philosophy of Science 72: 69–85

-   Zuidema, W. (2003) “Optimal Communication in a Noisy and Heterogeneous Environment.” In Proceedings Lecture Notes on Artificial Intelligence v. 2801 Berlin: Springer 553–563.
