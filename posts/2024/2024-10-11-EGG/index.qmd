---
date: 2024-10-11
title: "Egg"
draft: true
description: "Egg is a framework for training and evaluating emergent communication in multi-agent systems."
categories: [deep learning, data science, NLP]
image: /images/cover.png
---

Let us start by defining an interperable structured state space for Bayesian agents (they have a type which governs their behavior).

The first setting is an predator\prey game:

There are different type of predators they can be territorial, nocturnal, diurnal, they might have different attack strategy (from the air, from above, on the ground etc). They can be more dangerous or less and more frequent or less.


Predators D are considered to be solitary hunters, while the prey S are considered to a kinshp group. 
In this game there are a the following actions:

- nature generates a state with some predator. (later we could have more than one)
- prey can
    - detect and evade the threat
    - not detect and thus not evade
    - detect and signal the threat and evade
    - hear a signal and evade
    - hear the signal and participate in group evasion.
Prey can evade predators individually, by signaling or by by coordination group evasion.

[state_1]--(nature)-->[state_2]
[state_2]--(prey_1:detect)-->[state2+p1_detect]
[state_2+detect]--(prey:evade)-->[state2+p1:detect+p1_evade] note: evade is a signal to the other preys
[state_2+detect]--(prey:signal)-->[state2+p*:detect] noteL evade is a signal to the other preys
[state_2+detect]--(prey:signal)-->[state2+p*:detect] noteL evade is a signal to the other preys


1. 
state space: verb

```python
#| label: state_space_generator

import random
import numpy as np


predators = ['cat', 'eagle', 'hawk','coyotes', 'wolves', 'bear', 'weasels','raptors','snake']
preys = ['frog','snail', 'lizard', 'spider' 'egg', 'bird']
location_z = ['ground', 'tree', 'sky', 'water']
location_x = ['dist_left', 'left', 'right', 'dist_right']
location_y = ['dist_front', 'front', 'back', 'dist_back']
location_t = ['day', 'night', 'dawn', 'dusk']


negation = ['not','epsilon']
conjunction = ['and', 'or', 'epsilon']
gender = ['masculine', 'feminine', 'neuter']
number = ['singular', 'plural']
tense = ['past', 'present', 'future']
mood = ['indicative', 'subjunctive', 'imperative']
aspect = ['simple', 'progressive', 'perfect', 'perfect_progressive']
voice = ['active', 'passive']
case = ['nominative', 'accusative', 'genitive', 'dative', 'ablative', 'vocative', 'locative', 'instrumental']
degree = ['positive', 'comparative', 'superlative']
animacy = ['animate', 'inanimate']
person = ['1st', '2nd', '3rd']
definite = ['definite', 'indefinite']





attributes = [predator, prey, location_z, location_x, location_y, location_t]

def generate_state_space(n_attributes, n_values):
    state_space = []
    for i in range(n_attributes):
        state_space.append([random.randint(0, n_values-1) for _ in range(n_values)])
    return state_space

state_space = generate_state_space(5, 10)
print(state_space)

```







python -m egg.zoo.basic_games.play --mode 'gs' --train_data "train_file.txt" --validation_data "valid_file.txt" --n_attributes 5 --n_values 10 --n_epochs 50 --batch_size 512 --validation_batch_size 1000 --max_len 4 --vocab_size 100 --sender_hidden 256 --receiver_hidden 512 --sender_embedding 5 --receiver_embedding 30 --receiver_cell "gru" --sender_cell "gru" --lr 0.01 --print_validation_events