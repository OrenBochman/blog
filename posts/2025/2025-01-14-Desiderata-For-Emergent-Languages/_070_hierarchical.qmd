##  Hierarchical structures

Hierarchical structures arise naturally out of rule based systems.
Rules lead to trees structures - which are ubiquitous in language.

Now we already laid the ground work for this in the previous section. We created many tables using a few templates. If we replace the templates with rules we are one step away from a grammar.

What we are missing is a recursive rule. A recursive rule allows us to create a structure that is no longer infinite.

A recursive rule is one that can be applied to itself. This is a very powerful concept. It allows us to create structures that are infinitely deep by repeating the same rule over and over again.

Another way to think about this is that a rule is recursive if it a;lows to replace a symbol with a copy of itself. Alternatively it might be replaced by a parent of itself.




$$
S \rightarrow aSb
$$ {#eq-simple recursive}

## an example or recursive rules with noun phrases.

$$
\begin{align*}
S &\rightarrow NP VP \\
NP &\rightarrow (Det) N |    \\
VP &\rightarrow V (NP) (PP)
\end{align*}    

$$ 
\begin{align*}
S &\rightarrow a|b \\
a &\rightarrow bb \\
b &\rightarrow aa
\end{align*}
$$

I think this is an integral part of generalization and of learnability.
I think that this is a grammar that can generate nested structures like nested clauses, nested phrases, or nested dependency trees. 

A Recursive grammar seems more compact than one that is not recursive. It is also more expressive. Recursive rules are more learnable in the sense that learning one rule leads to possibly infinite number of sentences.

Another property is that the recursive grammar should be well formed (syntax) and avoid generating ungrammatical sentences (semantics) This may be complicated and I'd rather avoid hashing the details at this time. If necessary this item be broken down.

This is nice to have  because a grammar with non recursive rules is less expressive. We might run into problems for expressive basic recursive structures like numbers. 

- every time an agents learns another part of the system it should have. My solution here leans on using group actions to structure the state space. Either one big one group action like for hebrew or a number of smaller ones like for english.




I'm not sure if this should be included. Generalization implies two or three things

1. replacing tabular lexicons with linear function approximators
2. compositionality over multiple analogies.
3. Recursive grammar.
This is one needs to be promoted or at least combined with learnability. Generalization means beinng able to learn base forms and generelizing to derived forms autoamtical. It also means being able to compose signals. IT also being able to capture hierarchies and other structures in the state space.

1. Morphology 
    - inflections- 
        - verb - conjugations
            - Tense and Aspect and Mood systems
        - nouns - declensions
    - derivations to other parts of speech
    - paradigms for each (e.g. posseives in English)
2. Relations 
    - Sematic Roles
    - Coverbs and Complements extend the verbs to cover many related concepts
2. Syntax for Logical and set theory as a basis for
    - Conjunctions and Disjunctions, 
    - First order/Contrafactual logic Quantifiers 
    - Subordination and Coordination
3. Spatio-temporal events     
    - Adverbs and Prepositions
    - Adjectives and Adverbs
