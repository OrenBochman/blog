---
title: "Shiny Mesa Tutorial"
format: html
filters:
  - shinylive
---


In this is the Mesa tutorial intergrated into a shiny app and running via pyodide in the browser from a static backend.

:::{.column-screen-inset}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny.express import input, ui
from shinywidgets import render_altair

# Has multi-dimensional arrays and matrices.
# Has a large collection of mathematical functions to operate on these arrays.
import numpy as np

# Data manipulation and analysis.
import pandas as pd

# Data visualization tools.
import seaborn as sns
import mesa
from shiny import reactive, render
from shiny.express import input, ui


### UI for Agent Sim #############################################################

DEFAULT_RUNS = 100
DEFAULT_STEPS = 30
DEFAULT_AGENTS = 12

# Add page title and sidebar
ui.page_opts(title="Mesa Wealth Agents Tutorial in Shineylive for Python", fillable=True)


with ui.sidebar(open="desktop"):
    ui.input_slider("runs", "Runs", min=1, max=500, value=DEFAULT_RUNS)
    ui.input_slider("steps", "Steps per run", min=1, max=500, value=DEFAULT_STEPS)
    ui.input_slider("agents", "Agents", min=1, max=50, value=DEFAULT_AGENTS)
    ui.input_action_button("reset", "Reset")



### MESA MODEL ##########################################################################


class MoneyAgent(mesa.Agent):
    """An agent with fixed initial wealth."""

    def __init__(self, model):
        # Pass the parameters to the parent class.
        super().__init__(model)

        # Create the agent's variable and set the initial values.
        self.wealth = 1

    def exchange(self):
        # Verify agent has some wealth
        if self.wealth > 0:
            other_agent = self.random.choice(self.model.agents)
            if other_agent is not None:
                other_agent.wealth += 1
                self.wealth -= 1


class MoneyModel(mesa.Model):
    """A model with some number of agents."""

    def __init__(self, n):
        super().__init__()
        self.num_agents = n

        # Create agents
        MoneyAgent.create_agents(model=self, n=n)

    def step(self):
        """ Advance the model by one step."""
        # This function pseudo-randomly reorders the list of agent objects and
        # then iterates through calling the function passed in as the parameter
        self.agents.shuffle_do("exchange")


ui.input_selectize("var", "Select variable", choices=["bill_length_mm", "body_mass_g"])


# ---------- RESET BEHAVIOR ----------
@reactive.effect
@reactive.event(input.reset)
def _reset_sliders():
    # These update_* helpers pick up the current session implicitly in Shiny Express
    ui.update_slider("runs", value=DEFAULT_RUNS)
    ui.update_slider("steps", value=DEFAULT_STEPS)
    ui.update_slider("agents", value=DEFAULT_AGENTS)

# ---------- SIMULATION (reactive) ----------
@reactive.calc
def sim_df():
    runs = input.runs()
    steps = input.steps()
    n = input.agents()

    all_wealth = []
    for _ in range(runs):
        model = MoneyModel(n)
        for _ in range(steps):
            model.step()
        # collect wealth after final step of this run
        all_wealth.extend(a.wealth for a in model.agents)

    return pd.DataFrame({"wealth": all_wealth})


# ---------- PLOT ----------
@render_altair
def hist():
    import altair as altÂ·
    df = sim_df()  # depends on inputs via sim_df()
    return (
        alt.Chart(df, title="Wealth distribution")
        .mark_bar()
        .encode(x=alt.X("wealth:Q", bin=True, title="Wealth"),
                y=alt.Y("count()", title="Agents"))
        .properties(width="container", height=300)
        .interactive()
    )


## file: requirements.txt
shinyswatch
altair
anywidget
palmerpenguins
jsonschema
mesa
```
:::

